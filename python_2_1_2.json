{"url": "https://es.wikipedia.org/wiki/python", "title": "Python", "summary": "[\n]\nPython es un lenguaje de alto nivel de programaci\u00f3n interpretado cuya filosof\u00eda hace hincapi\u00e9 en la legibilidad de su c\u00f3digo. Se trata de un lenguaje de programaci\u00f3n multiparadigma, ya que soporta parcialmente la orientaci\u00f3n a objetos, programaci\u00f3n imperativa y, en menor medida, programaci\u00f3n funcional. Es un lenguaje interpretado, din\u00e1mico y multiplataforma.\nAdministrado por Python Software Foundation, posee una licencia de c\u00f3digo abierto, denominada Python Software Foundation License.[3]\u200b Python se clasifica constantemente como uno de los lenguajes de programaci\u00f3n m\u00e1s populares.[4]\u200b", "sections": [{"name": "Historia", "text": "Art\u00edculo principal:\nPython fue creado a finales de los a\u00f1os ochenta por Guido van Rossum en Stichting Mathematisch Centrum (CWI),[5]\u200b en Pa\u00edses Bajos, como un sucesor del lenguaje de programaci\u00f3n ABC, capaz de manejar excepciones e interactuar con el sistema operativo Amoeba.[6]\u200b\nEl nombre del lenguaje proviene de la afici\u00f3n de su creador por los humoristas brit\u00e1nicos Monty Python.[7]\u200b\nGuido van Rossum es el principal autor de Python, y su continuo rol central en decidir la direcci\u00f3n de Python es reconocido, refiri\u00e9ndose a \u00e9l como Benevolente Dictador Vitalicio (en ingl\u00e9s: Benevolent Dictator for Life, BDFL); sin embargo el 12 de julio de 2018 declin\u00f3 de dicha situaci\u00f3n de honor sin dejar un sucesor o sucesora y con una declaraci\u00f3n altisonante:[8]\u200b\nEl 20 de febrero de 1991, van Rossum public\u00f3 el c\u00f3digo por primera vez en alt.sources, con el n\u00famero de versi\u00f3n 0.9.0.[10]\u200b En esta etapa del desarrollo ya estaban presentes clases con herencia, manejo de excepciones, funciones y los tipos modulares, como: str, list, dict, entre otros. Adem\u00e1s en este lanzamiento inicial aparec\u00eda un sistema de m\u00f3dulos adoptado de Modula-3; van Rossum describe el m\u00f3dulo como \u00abuna de las mayores unidades de programaci\u00f3n de Python\u00bb.[5]\u200b El modelo de excepciones en Python es parecido al de Modula-3, con la adici\u00f3n de una cl\u00e1usula else.[6]\u200b En el a\u00f1o 1994 se form\u00f3 comp.lang.python, el foro de discusi\u00f3n principal de Python, marcando un hito en el crecimiento del grupo de usuarios de este lenguaje.\nPython alcanz\u00f3 la versi\u00f3n 1.0 en enero de 1994. Una caracter\u00edstica de este lanzamiento fueron las herramientas de la programaci\u00f3n funcional: lambda, reduce, filter y map.[11]\u200b Van Rossum explic\u00f3 que \u00abhace 12 a\u00f1os, Python adquiri\u00f3 lambda, reduce(), filter() y map(), cortes\u00eda de Amrit Perm, un hacker inform\u00e1tico de Lisp que las implement\u00f3 porque las extra\u00f1aba\u00bb.[12]\u200b\nLa \u00faltima versi\u00f3n liberada proveniente de CWI fue Python 1.2. En 1995, van Rossum continu\u00f3 su trabajo en Python en la Corporation for National Research Initiatives (CNRI) en Reston, Virginia, donde lanz\u00f3 varias versiones del software.\nDurante su estancia en CNRI, van Rossum lanz\u00f3 la iniciativa Computer Programming for Everybody (CP4E), con el fin de hacer la programaci\u00f3n m\u00e1s accesible a m\u00e1s gente, con un nivel de 'alfabetizaci\u00f3n' b\u00e1sico en lenguajes de programaci\u00f3n, similar a la alfabetizaci\u00f3n b\u00e1sica en ingl\u00e9s y habilidades matem\u00e1ticas necesarias por muchos trabajadores. Python tuvo un papel crucial en este proceso: debido a su orientaci\u00f3n hacia una sintaxis limpia, ya era id\u00f3neo, y las metas de CP4E presentaban similitudes con su predecesor, ABC. El proyecto fue patrocinado por DARPA.[13]\u200b Para el a\u00f1o 2007, el proyecto CP4E se encontraba inactivo[14]\u200b; a pesar de ello, Python contin\u00faa intentando ser f\u00e1cil de aprender y no muy arcano en su sintaxis y sem\u00e1ntica, con el objetivo de ser entendible incluso para no-programadores.\nEn el a\u00f1o 2000, el equipo principal de desarrolladores de Python se cambi\u00f3 a BeOpen.com para formar el equipo BeOpen PythonLabs. CNRI pidi\u00f3 que la versi\u00f3n 1.6 fuera p\u00fablica, continuando su desarrollo hasta que el equipo de desarrollo abandon\u00f3 CNRI; su programa de lanzamiento y el de la versi\u00f3n 2.0 ten\u00edan una significativa cantidad de traslapo.[15]\u200b Python 2.0 fue el primer y \u00fanico lanzamiento de BeOpen.com. Despu\u00e9s que Python 2.0 fuera publicado por BeOpen.com, Guido van Rossum y los otros desarrolladores de PythonLabs se unieron en Digital Creations.\nPython 2.0 tom\u00f3 una caracter\u00edstica mayor del lenguaje de programaci\u00f3n funcional Haskell: listas por comprensi\u00f3n. La sintaxis de Python para esta construcci\u00f3n es muy similar a la de Haskell, salvo por la preferencia de los caracteres de puntuaci\u00f3n en Haskell, y la preferencia de Python por palabras claves alfab\u00e9ticas. Python 2.0 introdujo adem\u00e1s un sistema de recolecci\u00f3n de basura capaz de recolectar referencias c\u00edclicas.[15]\u200b\nPosterior a este doble lanzamiento, y despu\u00e9s que van Rossum dejara CNRI para trabajar con desarrolladores de software comercial, qued\u00f3 claro que la opci\u00f3n de usar Python con software disponible bajo la GNU GPL era muy deseable. La licencia usada entonces, la Python License, inclu\u00eda una cl\u00e1usula estipulando que la licencia estaba gobernada por el estado de Virginia, por lo que, bajo la \u00f3ptica de los abogados de Free Software Foundation (FSF), se hac\u00eda incompatible con GPL. Para las versiones 1.61 y 2.1, CNRI y FSF  \nhicieron compatibles la licencia de Python con GPL, renombr\u00e1ndola como Python Software Foundation License. En el a\u00f1o 2001, van Rossum fue premiado con el FSF Award for the Advancement of Free Software.\nPython 2.1 fue un trabajo derivado de las versiones 1.6.1 y 2.0. Es a partir de este momento que  Python Software Foundation (PSF) pasa a dirigir el proyecto, organizada como una organizaci\u00f3n sin \u00e1nimo de lucro fundada en el a\u00f1o 2001, tomando como modelo a la Apache Software Foundation.[3]\u200b Incluida con este lanzamiento estuvo una implementaci\u00f3n del alcance de variables m\u00e1s parecida a las reglas del static scoping originado por Scheme.[16]\u200b\nUna innovaci\u00f3n mayor en Python 2.2 fue la unificaci\u00f3n de los tipos en Python (tipos escritos en C), y clases (tipos escritos en Python) dentro de una jerarqu\u00eda. Esa unificaci\u00f3n logr\u00f3 un modelo de objetos de Python puro y consistente.[17]\u200b Tambi\u00e9n fueron agregados los generadores, que fueron inspirados por el lenguaje Icon.[18]\u200b\nLas adiciones a la biblioteca est\u00e1ndar de Python y las decisiones sint\u00e1cticas fueron influenciadas fuertemente por Java en algunos casos: el paquete logging,[19]\u200b introducido en la versi\u00f3n 2.3, est\u00e1 basado en log4j; el parser SAX, introducido en 2.0; el paquete threading,[20]\u200b cuya clase Thread expone un subconjunto de la interfaz de la clase hom\u00f3nima en Java.\nPython 2.7.x (\u00faltima versi\u00f3n de la serie Python 2.x) fue oficialmente descontinuado el 1 de enero de 2020 (paso inicialmente planeado para 2015), por lo que ya no se publicar\u00e1n parches de seguridad y otras mejoras para \u00e9l.[21]\u200b[22]\u200b Con el final del ciclo de vida de Python 2, solo tienen soporte la rama Python 3.6.x[23]\u200b y posteriores.\nCon Python 3.5 llegar\u00eda el soporte incluido para entrada/salida as\u00edncrona a trav\u00e9s de la biblioteca asyncio, orientada a aplicaciones que requieren alto rendimiento de c\u00f3digo concurrente, como servidores web, bibliotecas de conexi\u00f3n de bases de datos y colas de tareas distribuidas.[24]\u200b\nEn la actualidad, Python se aplica en los campos de inteligencia artificial y machine learning.[25]\u200b", "subsections": []}, {"name": "Caracter\u00edsticas y paradigmas", "text": "Python es un lenguaje de programaci\u00f3n multiparadigma. Esto significa que m\u00e1s que forzar a los programadores a adoptar un estilo particular de programaci\u00f3n, permite varios estilos: programaci\u00f3n orientada a objetos, programaci\u00f3n imperativa y programaci\u00f3n funcional. Otros paradigmas est\u00e1n soportados mediante el uso de extensiones.\nPython usa tipado din\u00e1mico y conteo de referencias para la gesti\u00f3n de memoria.\nUna caracter\u00edstica importante de Python es la resoluci\u00f3n din\u00e1mica de nombres; es decir, lo que enlaza un m\u00e9todo y un nombre de variable durante la ejecuci\u00f3n del programa (tambi\u00e9n llamado enlace din\u00e1mico de m\u00e9todos).\nOtro objetivo del dise\u00f1o del lenguaje es la facilidad de extensi\u00f3n. Se pueden escribir nuevos m\u00f3dulos f\u00e1cilmente en C o C++. Python puede incluirse en aplicaciones que necesitan una interfaz programable.[26]\u200b\nAunque la programaci\u00f3n en Python podr\u00eda considerarse en algunas situaciones hostil a la programaci\u00f3n funcional tradicional expuesta por Lisp, existen bastantes analog\u00edas entre Python y los lenguajes minimalistas de la familia Lisp (como Scheme).", "subsections": []}, {"name": "Filosof\u00eda", "text": "Los usuarios de Python se refieren a menudo a la filosof\u00eda de Python, que es bastante similar a la filosof\u00eda de Unix. El c\u00f3digo que siga los principios de Python es reconocido como \"pyth\u00f3nico\". Estos principios fueron descritos por el desarrollador de Python Tim Peters en El Zen de Python:\nBello es mejor que feo.\nExpl\u00edcito es mejor que impl\u00edcito.\nSimple es mejor que complejo.\nComplejo es mejor que complicado.\nPlano es mejor que anidado.\nDisperso es mejor que denso.\nLa legibilidad cuenta.\nLos casos especiales no son tan especiales como para quebrantar las reglas.\nLo pr\u00e1ctico gana a lo puro.\nLos errores nunca deber\u00edan dejarse pasar silenciosamente.\nA menos que hayan sido silenciados expl\u00edcitamente.\nFrente a la ambig\u00fcedad, rechaza la tentaci\u00f3n de adivinar.\nDeber\u00eda haber una \u2014y preferiblemente solo una\u2014 manera obvia de hacerlo.\nAunque esa manera puede no ser obvia al principio a menos que usted sea holand\u00e9s.[27]\u200b\nAhora es mejor que nunca.\nAunque nunca es a menudo mejor que ya mismo.\nSi la implementaci\u00f3n es dif\u00edcil de explicar, es una mala idea.\nSi la implementaci\u00f3n es f\u00e1cil de explicar, puede que sea una buena idea.\nLos espacios de nombres (namespaces) son una gran idea. \u00a1Hagamos m\u00e1s de esas cosas!\nDesde la versi\u00f3n 2.1.2, Python incluye estos puntos (en su versi\u00f3n original en ingl\u00e9s) como un huevo de pascua que se muestra al ejecutar import this.[28]\u200b", "subsections": []}, {"name": "Modo interactivo", "text": "El int\u00e9rprete de Python est\u00e1ndar incluye un modo interactivo en el cual se escriben las instrucciones en una especie de int\u00e9rprete de comandos: las expresiones pueden ser introducidas una a una, pudiendo verse el resultado de su evaluaci\u00f3n inmediatamente, lo que da la posibilidad de probar porciones de c\u00f3digo en el modo interactivo antes de integrarlo como parte de un programa. Esto resulta \u00fatil tanto para las personas que se est\u00e1n familiarizando con el lenguaje como para los programadores m\u00e1s avanzados.\nExisten otros programas, como IDLE, bpython e IPython,[29]\u200b que a\u00f1aden funcionalidades extra al modo interactivo, como completamiento autom\u00e1tico de c\u00f3digo y coloreado de la sintaxis del lenguaje.\nEjemplo del modo interactivo:\n>>>\n1\n+\n2\na\n=\nrange\n(\n10\n)\nprint\nlist\n))\n[\n0\n,\n3\n4\n5\n6\n7\n8\n9\n]", "subsections": []}, {"name": "Elementos del lenguaje y sintaxis", "text": "Python est\u00e1 destinado a ser un lenguaje de f\u00e1cil lectura. Su formato es visualmente ordenado y, a menudo, usa palabras clave en ingl\u00e9s donde otros idiomas usan puntuaci\u00f3n. A diferencia de muchos otros lenguajes, no utiliza corchetes para delimitar bloques y se permiten puntos y coma despu\u00e9s de las declaraciones, pero rara vez, si es que alguna vez, se utilizan. Tiene menos excepciones sint\u00e1cticas y casos especiales que C o Pascal.\nDise\u00f1ado para ser le\u00eddo con facilidad, una de sus caracter\u00edsticas es el uso de palabras donde otros lenguajes utilizar\u00edan s\u00edmbolos. Por ejemplo, los operadores l\u00f3gicos !, || y && en Python se escriben not, or y and, respectivamente.\nEl contenido de los bloques de c\u00f3digo (bucles, funciones, clases, etc.) es delimitado mediante espacios o tabuladores, conocidos como sangrado o indentaci\u00f3n, antes de cada l\u00ednea de \u00f3rdenes pertenecientes al bloque.[30]\u200b Python se diferencia as\u00ed de otros lenguajes de programaci\u00f3n que mantienen como costumbre declarar los bloques mediante un conjunto de caracteres, normalmente entre llaves {}.[31]\u200b[32]\u200b Se pueden utilizar tanto espacios como tabuladores para sangrar el c\u00f3digo, pero se recomienda no mezclarlos.[33]\u200b \nint\n \nfactorial\nx\n{\n    \nif\n<\n||\n%\n!=\n        \nprintf\n\"x debe ser un numero entero mayor o igual a 0\"\n);\nreturn\n-1\n;\n// Error\n}\n==\n*\nfactorial\n-\ndef\n):\nassert\n>=\nand\n\"x debe ser un entero mayor o igual a 0.\"\n:\nelse\nDebido al significado sint\u00e1ctico de la sangr\u00eda, cada instrucci\u00f3n debe estar contenida en una sola l\u00ednea. No obstante, si por legibilidad se quiere dividir la instrucci\u00f3n en varias l\u00edneas, a\u00f1adiendo una barra invertida \\ al final de una l\u00ednea, se indica que la instrucci\u00f3n contin\u00faa en la siguiente.\nEstas instrucciones son equivalentes:\nlista\n'valor 1'\n'valor 2'\n'valor 3'\ncadena\n'Esto es una cadena bastante larga'\n'Esto es una cadena '\n'bastante larga'", "subsections": [{"name": "Comentarios", "text": "Los comentarios se pueden poner de dos formas. La primera y m\u00e1s apropiada para comentarios largos es utilizando la notaci\u00f3n ''' comentario ''', tres ap\u00f3strofos de apertura y tres de cierre. La segunda notaci\u00f3n utiliza el s\u00edmbolo #, que se extiende hasta el final de la l\u00ednea. \nEl int\u00e9rprete no tiene en cuenta los comentarios, lo cual es \u00fatil si deseamos poner informaci\u00f3n adicional en el c\u00f3digo. Por ejemplo, una explicaci\u00f3n sobre el comportamiento de una secci\u00f3n del programa.\n'''\nComentario m\u00e1s largo en una l\u00ednea en Python\n\"Hola mundo\"\n# Tambi\u00e9n es posible a\u00f1adir un comentario al final de una l\u00ednea de c\u00f3digo"}, {"name": "Variables", "text": "Las variables se definen de forma din\u00e1mica, lo que significa que no se tiene que especificar cu\u00e1l es su tipo de antemano y puede tomar distintos valores en otro momento, incluso de un tipo diferente al que ten\u00eda previamente. Se usa el s\u00edmbolo = para asignar valores.\n\"texto\"\n# Esto es posible porque los tipos son asignados din\u00e1micamente\nLos nombres de variables pueden contener n\u00fameros y letras pero deben comenzar con una letra. Adem\u00e1s, existen 35 palabras reservadas:[34]\u200b[35]\u200b\nand\nas\nassert\nasync\nawait\nbreak\nclass\ncontinue\ndef\ndel\nelif\nelse\nexcept\nFalse\nfinally\nfor\nfrom\nglobal\nif\nimport\nin\nis\nlambda\nNone\nnonlocal\nnot\nor\npass\nraise\nreturn\nTrue\ntry\nwhile\nwith\nyield\nA partir de Python 3.10 existen tambi\u00e9n soft keywords, palabras que son reservadas en ciertos contextos, pero que normalmente pueden ser usadas como nombres de variables. Estos identificadores son match, case y _."}, {"name": "Tipos de datos", "text": "Los tipos de datos b\u00e1sicos se pueden resumir en esta tabla:\nMutable: si su contenido (o dicho valor) puede cambiarse en tiempo de ejecuci\u00f3n.\nInmutable: si su contenido (o dicho valor) no puede cambiarse en tiempo de ejecuci\u00f3n."}, {"name": "Condicionales", "text": "Una sentencia condicional ejecuta su bloque de c\u00f3digo interno solo si se cumple cierta condici\u00f3n. Se define usando la palabra clave if seguida de la condici\u00f3n y el bloque de c\u00f3digo. Si existen condiciones adicionales, se introducen usando la palabra clave elif seguida de la condici\u00f3n y su bloque de c\u00f3digo. Las condiciones se eval\u00faan de manera secuencial hasta encontrar la primera que sea verdadera, y su bloque de c\u00f3digo asociado es el \u00fanico que se ejecuta. Opcionalmente, puede haber un bloque final (la palabra clave else, seguida de un bloque de c\u00f3digo) que se ejecuta solo cuando todas las condiciones anteriores fueron falsas.\nverdadero\nTrue\n# No es necesario poner \"verdadero == True\"\n...\n\"Verdadero\"\n\"Falso\"\nVerdadero\nlenguaje\n\"Python\"\n\"C\"\n# lenguaje no es \"C\", por lo que este bloque se obviar\u00e1 y evaluar\u00e1 la siguiente condici\u00f3n\n\"Lenguaje de programaci\u00f3n: C\"\nelif\n# Se pueden a\u00f1adir tantos bloques \"elif\" como se quiera\n\"Lenguaje de programaci\u00f3n: Python\"\n# En caso de que ninguna de las anteriores condiciones fuera cierta, se ejecutar\u00eda este bloque\n\"Lenguaje de programaci\u00f3n: indefinido\"\nLenguaje\nde\nprogramaci\u00f3n\nPython\n# Uso de \"and\" para comprobar que ambas condiciones son verdaderas\n\"Verdadero y Lenguaje de programaci\u00f3n: Python\"\ny"}, {"name": "Bucle for", "text": "El bucle for es similar a foreach en otros lenguajes. Recorre un objeto iterable, como una lista, una tupla o un generador, y por cada elemento del iterable ejecuta el bloque de c\u00f3digo interno. Se define con la palabra clave for seguida de un nombre de variable, seguido de in, seguido del iterable, y finalmente el bloque de c\u00f3digo interno. En cada iteraci\u00f3n, el elemento siguiente del iterable se asigna al nombre de variable especificado:\n\"a\"\n\"b\"\n\"c\"\nfor\ni\nin\n# Iteramos sobre una lista, que es iterable\nb\nc\n\"abcdef\"\n# Iteramos sobre una cadena, que tambi\u00e9n es iterable\nend\n', '\n# A\u00f1adiendo end=', ' al final hacemos que no introduzca un salto de l\u00ednea, sino una coma y un espacio\nd\ne\nf"}, {"name": "Bucle while", "text": "El bucle while eval\u00faa una condici\u00f3n y, si es verdadera, ejecuta el bloque de c\u00f3digo interno. Contin\u00faa evaluando y ejecutando mientras la condici\u00f3n sea verdadera. Se define con la palabra clave while seguida de la condici\u00f3n, y a continuaci\u00f3n el bloque de c\u00f3digo interno:\nnumero\nwhile\n\" \"\n+=\n# Un buen programador modificar\u00e1 las variables de control al finalizar el ciclo while"}, {"name": "Listas y Tuplas", "text": "Para declarar una lista se usan los corchetes [], en cambio, para declarar una tupla se usan los par\u00e9ntesis (). En ambas los elementos se separan por comas, y en el caso de las tuplas es necesario que tengan como m\u00ednimo una coma.\nTanto las listas como las tuplas pueden contener elementos de diferentes tipos. No obstante, las listas suelen usarse para elementos del mismo tipo en cantidad variable mientras que las tuplas se reservan para elementos distintos en cantidad fija.\nPara acceder a los elementos de una lista o tupla se utiliza un \u00edndice entero (empezando por \"0\", no por \"1\"). Se pueden utilizar \u00edndices negativos para acceder elementos a partir del final.\nLas listas se caracterizan por ser mutables, es decir, se puede cambiar su contenido en tiempo de ejecuci\u00f3n, mientras que las tuplas son inmutables ya que no es posible modificar el contenido una vez creadas.\n\"abc\"\n42\n3.1415\n# Acceder a un elemento por su \u00edndice\n'abc'\n# Acceder a un elemento usando un \u00edndice negativo\n.\nappend\n# A\u00f1adir un elemento al final de la lista\ndel\n# Borra un elemento de la lista usando un \u00edndice (en este caso: True)\n\"xyz\"\n# Re-asignar el valor del primer elemento de la lista\n# Mostrar los elementos de la lista del \u00edndice \"0\" al \"2\" (sin incluir este \u00faltimo)\n'xyz'\nlista_anidada\n]]\n# Es posible anidar listas\n[[\n],\n][\n# Acceder a un elemento de una lista dentro de otra lista (del segundo elemento, mostrar el primer elemento)\ntupla\n# No es posible borrar (ni a\u00f1adir) un elemento en una tupla, lo que provocar\u00e1 una excepci\u00f3n\nTraceback\nmost\nrecent\ncall\nlast\nFile\n\"<stdin>\"\nline\nmodule\n>\nTypeError\n'tuple'\nobject\ndoesn\n't support item deletion\n# Tampoco es posible re-asignar el valor de un elemento en una tupla, lo que tambi\u00e9n provocar\u00e1 una excepci\u00f3n\ndoes\nnot\nsupport\nitem\nassignment\n# Mostrar los elementos de la tupla del \u00edndice \"0\" al \"2\" (sin incluir este \u00faltimo)\ntupla_anidada\n# Tambi\u00e9n es posible anidar tuplas\n# Esto tambi\u00e9n es una tupla, aunque es recomendable ponerla entre par\u00e9ntesis (recuerde que requiere, al menos, una coma)\n# Aunque se encuentra entre par\u00e9ntesis, esto no es una tupla, ya que no posee al menos una coma, por lo que \u00fanicamente aparecer\u00e1 el valor\n,)\n# En cambio, en este otro caso, s\u00ed es una tupla\n# Con m\u00e1s de un elemento no es necesaria la coma final\n# Aunque agregarla no modifica el resultado"}, {"name": "Diccionarios", "text": "Para declarar un diccionario se usan las llaves {}. Contienen elementos separados por comas, donde cada elemento est\u00e1 formado por un par clave:valor (el s\u00edmbolo : separa la clave de su valor correspondiente).\nLos diccionarios son mutables, es decir, se puede cambiar el contenido de un valor en tiempo de ejecuci\u00f3n.\nEn cambio, las claves de un diccionario deben ser inmutables. Esto quiere decir, por ejemplo, que no podremos usar ni listas ni diccionarios como claves.\nEl valor asociado a una clave puede ser de cualquier tipo de dato, incluso un diccionario.\ndiccionario\n\"cadena\"\n\"numero\"\n\"lista\"\n]}\n# Diccionario que tiene diferentes valores por cada clave, incluso una lista\n# Usando una clave, se accede a su valor\n# Acceder a un elemento de una lista dentro de un valor (del valor de la clave \"lista\", mostrar el primer elemento)\n# Re-asignar el valor de una clave\n\"decimal\"\n3.1415927\n# Insertar un nuevo elemento clave:valor\ndiccionario_mixto\n\"tupla\"\n),\n\"diccionario\"\n# Tambi\u00e9n es posible que un valor sea un diccionario\n# Acceder a un elemento dentro de una lista, que se encuentra dentro de un diccionario\n{(\n,):\n# S\u00ed es posible que una clave sea una tupla, pues es inmutable\n{[\n]:\n# No es posible que una clave sea una lista, pues es mutable, lo que provocar\u00e1 una excepci\u00f3n\nunhashable\ntype\n'list'"}, {"name": "Sentencia match-case", "text": "Python cuenta con la estructura match-case desde la versi\u00f3n 3.10. Esta tiene el nombre de Structural Pattern Matching.\nmatch\nvariable\ncase\ncondicion\n# codigo\n_\nCabe destacar que esta funcionalidad es considerablemente m\u00e1s compleja que el conocido switch-case de la mayor\u00eda de lenguajes de programaci\u00f3n, ya que no solo permite realizar una comparaci\u00f3n del valor, sino que tambi\u00e9n puede comprobar el tipo del objeto, y sus atributos. Adem\u00e1s, puede realizar un desempaquetado directo de secuencias de datos, y comprobarlos de forma espec\u00edfica.\nEn el siguiente ejemplo, se comprueban los atributos de nuestra instancia de Punto. Si en estos no se cumple que x = 10 y y = 40, se pasar\u00e1 a la siguiente condici\u00f3n.\nEs importante anotar que Punto(x=10, y=40) no est\u00e1 construyendo un nuevo objeto, aunque pueda parecerlo.\nfrom\ndataclasses\nimport\ndataclass\n@dataclass\nclass\nPunto\nint\ncoordenada\nPunto\n34\n40\n# los atributos \"x\" e \"y\" tienen el valor specificado\n\"Coordenada 10, 40\"\n():\n# si es una instancia de Punto\n\"es un punto\"\n# ninguna condici\u00f3n cumplida (default)\n\"No es un punto\"\nEn versiones anteriores, existen diferentes formas de realizar esta operaci\u00f3n l\u00f3gica de forma similar:\nUsando if, elif, else\nPodemos usar la estructura de la siguiente manera:\ncondicion1\nhacer1\ncondicion2\nhacer2\ncondicion3\nhacer3\nhacer\nEn esa estructura se ejecutara controlando la condicion1, si no se cumple pasara a la siguiente y as\u00ed sucesivamente hasta entrar en el else.\nUn ejemplo pr\u00e1ctico ser\u00eda:\ncalculo\nop\n'sum'\n'rest'\n'mult'\n'div'\n/\nNone\ncalculo\nPodr\u00edamos decir que el lado negativo de la sentencia armada con if, elif y else es que si la lista de posibles operaciones es muy larga, las tiene que recorrer una por una hasta llegar a la correcta.\nUsando diccionarios\nPodemos usar un diccionario para el mismo ejemplo:\nlambda\nget\n)()\nDe esta manera, si las opciones fueran muchas, no recorrer\u00eda todas; solo ir\u00eda directamente a la operaci\u00f3n buscada en la \u00faltima l\u00ednea (.get(op, lambda: None)()) y estar\u00edamos dando una opci\u00f3n por defecto. El motivo por el que se usan expresiones lambda dentro del diccionario es para prevenir la ejecuci\u00f3n de las instrucciones que contienen a la hora de definir el diccionario. Este \u00fanicamente define funciones como valores del diccionario, y posteriormente, al obtener estas mediante get(), se llama a la funci\u00f3n, ejecutando la expresi\u00f3n que esta contiene."}, {"name": "Conjuntos", "text": "Los conjuntos se construyen mediante la expresi\u00f3n set(items), donde items es cualquier objeto iterable, como listas o tuplas. Los conjuntos no mantienen el orden ni contienen elementos duplicados.\nSe suelen utilizar para eliminar duplicados de una secuencia, o para operaciones matem\u00e1ticas como intersecci\u00f3n, uni\u00f3n, diferencia y diferencia sim\u00e9trica.\nconjunto_inmutable\nfrozenset\n([\n])\n# Se utiliza una lista como objeto iterable\n'a'\n'b'\nconjunto1\nset\n# Primer conjunto mutable\nconjunto2\n\"d\"\n# Segundo conjunto mutable\n'c'\n'd'\n# Los conjuntos no mantienen el orden, como los diccionarios\n&\n# Intersecci\u00f3n\n|\n# Uni\u00f3n\n# Diferencia (1)\n([])\n# Diferencia (2)\n^\n# Diferencia sim\u00e9trica"}, {"name": "Listas por comprensi\u00f3n", "text": "Una lista por comprensi\u00f3n (en ingl\u00e9s list comprehension) es una expresi\u00f3n compacta para definir listas. Al igual que lambda, aparece en lenguajes funcionales. Ejemplos:\n# La funci\u00f3n range devuelve una lista, empezando en 0 y terminando con el n\u00famero indicado menos uno\n)]\n# Por cada elemento del rango, lo multiplica por s\u00ed mismo y lo agrega al resultado\n16\n[("}, {"name": "Funciones", "text": "Las funciones se definen con la palabra clave def, seguida del nombre de la funci\u00f3n y sus par\u00e1metros. Otra forma de escribir funciones, aunque menos utilizada, es con la palabra clave lambda (que aparece en lenguajes funcionales como Lisp).\nEl valor devuelto en las funciones con def ser\u00e1 el dado con la instrucci\u00f3n return.\nLas funciones pueden recibir par\u00e1metros especiales para manejar el exceso de argumentos.\nEl par\u00e1metro *args recibe como una tupla un n\u00famero variable de argumentos posicionales.\nEl par\u00e1metro **kwargs recibe como un diccionario un n\u00famero variable de argumentos por palabras clave.\ndef:\nsuma\n# Retornar la suma del valor de la variable \"x\" y el valor de \"y\"\nsuma\n# La variable \"y\" no se modifica, siendo su valor: 2\n# La variable \"y\" s\u00ed se modifica, siendo su nuevo valor: 10\n14\n*args:\nargs\nresultado\n# Se itera la tupla de argumentos\nnum\n#  Suma todos los argumentos\n# Retorna el resultado de la suma\n# No importa el n\u00famero de variables posicionales que se pasen a la funci\u00f3n\n25\n**kwargs:\n**\nkwargs\n# Se itera el diccionario de argumentos\nkey\nvalue\nitems\n# Suma todos los valores de los argumentos\nz\n# No importa el n\u00famero de variables por clave que se pasen a la funci\u00f3n\n12\nlambda:"}, {"name": "Clases", "text": "Las clases se definen con la palabra clave class, seguida del nombre de la clase y, si hereda de otras clases, los nombres de estas.\nEn Python 2.x era recomendable que una clase heredase de object, en Python 3.x ya no hace falta.\nEn una clase, un m\u00e9todo equivale a una funci\u00f3n, y un atributo equivale a una variable.[36]\u200b\n__init__ es un m\u00e9todo especial que se ejecuta al instanciar la clase, se usa generalmente para inicializar atributos y ejecutar m\u00e9todos necesarios. Al igual que todos los m\u00e9todos en Python, debe tener al menos un par\u00e1metro (generalmente se utiliza self). El resto de par\u00e1metros ser\u00e1n los que se indiquen al instanciar la clase.\nLos atributos que se desee que sean accesibles desde fuera de la clase se deben declarar usando self. delante del nombre.\nEn Python no existe el concepto de encapsulamiento[37]\u200b, por lo que el programador debe ser responsable de asignar los valores a los atributos.\nPersona\n__init__\nself\nnombre\nedad\n# Un atributo cualquiera\n# Otro atributo cualquiera\nmostrar_edad\n# Es necesario que, al menos, tenga un par\u00e1metro, generalmente self\n# mostrando un atributo\nmodificar_edad\n# Modificando edad\n150\n# Se comprueba que la edad no sea menor que 0 (algo imposible) ni mayor que 150 (algo realmente dif\u00edcil)\nFalse\n# Si est\u00e1 en el rango 0-150, entonces se modifica la variable\n# Se modifica la edad\np\nPersona\n'Alicia'\n20\n# Instanciando la clase. Como se puede ver, no se especifica el valor de self\n# La variable \"nombre\" del objeto s\u00ed es accesible desde fuera\n'Andrea'\n# Y por tanto, se puede cambiar su contenido\nmostrar_edad\n()\n# Se llama a un m\u00e9todo de la clase\nmodificar_edad\n21\n# Es posible cambiar la edad usando el m\u00e9todo espec\u00edfico que hemos hecho para hacerlo de forma controlada"}, {"name": "M\u00f3dulos", "text": "Existen muchas propiedades que se pueden agregar al lenguaje importando m\u00f3dulos, conjuntos de funciones y clases para realizar determinadas tareas usualmente escritos tambi\u00e9n en Python. Un ejemplo es el m\u00f3dulo tkinter[38]\u200b, que permite crear interfaces gr\u00e1ficas basadas en la biblioteca Tk. Otro ejemplo es el m\u00f3dulo os, que provee acceso a muchas funciones del sistema operativo. Los m\u00f3dulos se agregan al c\u00f3digo escribiendo la palabra import, seguida del nombre del m\u00f3dulo que queramos usar.[39]\u200b\nInstalaci\u00f3n de m\u00f3dulos (pip)\nLa instalaci\u00f3n de m\u00f3dulos en Python se puede realizar mediante la herramienta de software Pip, que suele estar incluida en las instalaciones de Python. Esta herramienta permite la gesti\u00f3n de los distintos paquetes o m\u00f3dulos instalables para Python, incluyendo as\u00ed las siguientes caracter\u00edsticas:\nInstalaci\u00f3n de paquetes.\nInstalaci\u00f3n de versiones concretas de paquetes.\nInstalaci\u00f3n a partir de un archivo de configuraci\u00f3n.\nDesinstalaci\u00f3n.\nActualizaci\u00f3n.\nInterfaz al sistema operativo\nEl m\u00f3dulo os provee funciones para interactuar con el sistema operativo:\nos\nos\nname\n# Devuelve el nombre del sistema operativo\n'posix'\nmkdir\n\"/tmp/ejemplo\"\n# Crea un directorio en la ruta especificada\nPara tareas de administraci\u00f3n de archivos, el m\u00f3dulo shutil provee una interfaz de m\u00e1s alto nivel:\nshutil\nshutil\ncopyfile\n'datos.db'\n'informacion.db'\nmove\n'/build/programas'\n'dir_progs'\nComodines de archivos\nEl m\u00f3dulo glob provee una funci\u00f3n para crear listas de archivos a partir de b\u00fasquedas con comodines en carpetas:\nglob\nglob\n'*.py'\n'numeros.py'\n'ejemplo.py'\n'ejemplo2.py'\nArgumentos de l\u00ednea de \u00f3rdenes\nLos argumentos de l\u00ednea de \u00f3rdenes se almacenan en el atributo argv del m\u00f3dulo sys como una lista.\nsys\nsys\nargv\n'demostracion.py'\n'uno'\n'dos'\n'tres'\nMatem\u00e1tica\nEl m\u00f3dulo math permite acceder a las funciones de matem\u00e1tica de punto flotante:\nmath\nmath\ncos\npi\n0.494888338963\nlog\n1024\n10.0\nEl m\u00f3dulo random se utiliza para realizar selecciones al azar:\nrandom\nrandom\nchoice\n'durazno'\n'manzana'\n'frutilla'\nsample\n100\n# Elecci\u00f3n sin reemplazo\n30\n23\n17\n24\n81\n41\n80\n28\n13\n# Un float al azar en el intervalo [0, 1)\n0.23370387692726126\nrandrange\n# Un entero al azar en el intervalo [0, 6)\nEl m\u00f3dulo statistics se utiliza para estad\u00edstica b\u00e1sica, por ejemplo: media, mediana, varianza, etc.:\nstatistics\ndatos\n1.75\n2.75\n1.25\n0.5\n0.25\n3.5\nstatistics\nmean\n1.6071428571428572\nmedian\nvariance\n1.3720238095238095\nFechas y horas\nLos m\u00f3dulos time y datetime permiten trabajar con fechas y horas.\ndatetime\ndatetime\ntime\nnow\nisoformat\n# Devuelve la fecha y hora actual\n'2010-08-10T18:01:17.900401'\nstrftime\n\"%Y-%m-\n%d\n %H:%M:%S\"\n# Devuelve la fecha y/u hora actual con el formato especificado\n'2010-08-10 18:01:17'\ntime\n# M\u00e9todo equivalente\nM\u00f3dulo Turtle\nEl m\u00f3dulo turtle permite la implementaci\u00f3n de gr\u00e1ficas tortuga:\nturtle\nturtle\npensize\nleft\n120\nforward\nPol\u00edgonos con el m\u00f3dulo Turtle:\nPol\u00edgonos regulares y estrellas"}]}, {"name": "Sistema de objetos", "text": "En Python todo es un objeto (incluso las clases). Las clases, al ser objetos, son instancias de una metaclase. Python, adem\u00e1s, soporta herencia m\u00faltiple y polimorfismo.\n# Una cadena es un objeto de \"str\"\nupper\n# Al ser un objeto, posee sus propios m\u00e9todos\n'ABC'\n# Una lista es un objeto de \"list\"\n# Una lista (al igual que todo) es un objeto, y tambi\u00e9n posee sus propios m\u00e9todos", "subsections": []}, {"name": "Biblioteca est\u00e1ndar", "text": "Python tiene una gran biblioteca est\u00e1ndar, usada para una diversidad de tareas. Esto viene de la filosof\u00eda \"pilas incluidas\" (batteries included) en referencia a los m\u00f3dulos de Python. Los m\u00f3dulos de la biblioteca est\u00e1ndar pueden complementarse con m\u00f3dulos personalizados escritos en C o en Python. Debido a la gran variedad de herramientas incluidas en la biblioteca est\u00e1ndar, combinada con la capacidad de usar lenguajes de bajo nivel como C y C++ (los cuales son capaces de interactuar con otras bibliotecas), Python es un lenguaje que combina su clara sintaxis con el inmenso poder de lenguajes de m\u00e1s bajo nivel.[40]\u200b", "subsections": []}, {"name": "Implementaciones", "text": "Existen diversas implementaciones del lenguaje:\nCPython es la implementaci\u00f3n original, disponible para varias plataformas en el sitio oficial de Python.\nIronPython es la implementaci\u00f3n para .NET.\nStackless Python es la variante de CPython que trata de no usar el stack de C (www.stackless.com).\nJython es la implementaci\u00f3n hecha en Java.\nPippy es la implementaci\u00f3n realizada para Palm (pippy.sourceforge.net).\nPyPy es una implementaci\u00f3n de Python escrita en Python y optimizada mediante JIT (pypy.org).\nActivePython es una implementaci\u00f3n privativa de Python con extensiones, para servidores en producci\u00f3n y aplicaciones de misi\u00f3n cr\u00edtica desarrollado por ActiveState Software.", "subsections": []}, {"name": "Incidencias", "text": "A lo largo de su historia, Python ha presentado una serie de incidencias, de las cuales las m\u00e1s importantes han sido las siguientes:\nEl 13 de febrero de 2009 se lanz\u00f3 una nueva versi\u00f3n de Python bajo el nombre clave \"Python 3000\" o,[41]\u200b abreviado, \"Py3K\".[42]\u200b Esta nueva versi\u00f3n incluye toda una serie de cambios que requieren reescribir el c\u00f3digo de versiones anteriores. Para facilitar este proceso, junto con Python 3 se ha publicado una herramienta de traducci\u00f3n autom\u00e1tica llamada 2to3.[43]\u200b[44]\u200b\nEl sistema operativo Windows 10, a partir de su actualizaci\u00f3n de mayo de 2019, dispone de la caracter\u00edstica de preinstalaci\u00f3n asistida del lenguaje Python y varias de sus herramientas adicionales.[45]\u200b", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "PyPI, repositorio de paquetes de software de terceros para Python.\nDjango, framework de desarrollo web.\nCython, lenguaje de programaci\u00f3n para simplificar la escritura de m\u00f3dulos de extensi\u00f3n para Python en C y C++.\nFlask, framework de desarrollo web.\nCubicWeb, framework de desarrollo web en plataforma sem\u00e1ntica.\nPygame, conjunto de m\u00f3dulos para la creaci\u00f3n de videojuegos en dos dimensiones.\nTkinter, binding de la biblioteca gr\u00e1fica Tcl/Tk para Python.\nPyGTK, binding de la biblioteca gr\u00e1fica GTK para Python.\nwxPython, binding de la biblioteca gr\u00e1fica wxWidgets para Python.\nPyQt y PySide, bindings de la biblioteca gr\u00e1fica Qt para Python.\nPlone, sistema de gesti\u00f3n de contenidos.\nBiopython, colecci\u00f3n de bibliotecas orientadas a la bioinform\u00e1tica para Python.\nNumPy, biblioteca que da soporte al c\u00e1lculo con matrices y vectores.\nSciPy, biblioteca que permite realizar an\u00e1lisis cient\u00edfico como optimizaci\u00f3n, \u00e1lgebra lineal, integraci\u00f3n y ecuaciones diferenciales, entre otras operaciones.\nPandas, biblioteca que permite el an\u00e1lisis de datos a trav\u00e9s de series y dataframes.\nPyomo, colecci\u00f3n de paquetes de software de Python para formular modelos de optimizaci\u00f3n\nScikit-learn, biblioteca que implementa algoritmos de aprendizaje autom\u00e1tico.", "subsections": []}, {"name": "Referencias", "text": "\u2191 \u00abChangelog - Python Documentation\u00bb. python.org. Consultado el 2 de mayo de 2024.\u00a0\n\u2191 \u00abChangelog - Python Documentation\u00bb. python.org. Consultado el 2 de mayo de 2024.\u00a0\n\u2191 a b History and License\n\u2191 \u00abTIOBE Index - TIOBE\u00bb. www.tiobe.com. Consultado el 1 de mayo de 2023.\u00a0\n\u2191 a b \u00abartima - The Making of Python\u00bb. www.artima.com. Consultado el 2 de mayo de 2023.\u00a0\n\u2191 a b \u00abWhy was Python created in the first place?\u00bb. General Python FAQ.\u00a0\n\u2191 \u00ab1. Whetting Your Appetite\u00bb. Python documentation. Consultado el 2 de mayo de 2023.\u00a0\n\u2191 Tannhausser (12 de julio de 2018). \u00abGuido van Rossum dimite como l\u00edder de Python\u00bb (html). La Mirada del Replicante. Archivado desde el original el 12 de julio de 2018. Consultado el 21 de julio de 2018. \u00abComo veis no solo transfiere el poder, sino que evita designar sucesor y deja en manos de los corel developers la tarea de organizar como ser\u00e1 la transici\u00f3n, as\u00ed como el modelo de gobierno en un futuro.\u00bb\u00a0\n\u2191 van Rossum, Guido (12 de julio de 2018). \u00ab[python-committers] Transfer of power\u00bb (html). Mail Archive Com (en ingl\u00e9s). Archivado desde el original el 12 de julio de 2018. Consultado el 21 de julio de 2018. \u00abI am not going to appoint a successor. So what are you all going to do? Create a democracy? Anarchy? A dictatorship? A federation?\u00bb\u00a0\n\u2191 van Rossum, Guido (20 de enero de 2009). \u00abA Brief Timeline of Python\u00bb. The History of Python (en ingl\u00e9s). Consultado el 14 de febrero de 2021.\u00a0\n\u2191 Chac\u00f3n Sartori, Camilo. Computaci\u00f3n y programaci\u00f3n funcional\u00a0: introducci\u00f3n al c\u00e1lculo lambda y la programaci\u00f3n funcional usando Racket y Python. [Barcelona]: Marcombo. ISBN\u00a08426732437.\u00a0\n\u2191 The fate of reduce() in Python 3000\n\u2191 Computer Programming for Everybody\n\u2191 Index of /cp4e\n\u2191 a b What's New in Python 2.0\n\u2191 PEP 227 -- Statically Nested Scopes\n\u2191 PEPs 252 and 253: Type and Class Changes\n\u2191 PEP 255: Simple Generators\n\u2191 PEP 282 -- A Logging System\n\u2191 threading \u2014 Higher-level threading interface\n\u2191 \u00abSunsetting Python 2\u00bb (en ingl\u00e9s). python.org. 21 de enero de 2020.\u00a0\n\u2191 \u00abPEP 373 -- Python 2.7 Release Schedule\u00bb (en ingl\u00e9s). python.org. 21 de enero de 2020.\u00a0\n\u2191 \u00abPython Developer's Guide \u2014 Python Developer's Guide\u00bb (en ingl\u00e9s). devguide.python.org. 21 de enero de 2020.\u00a0\n\u2191 \u00abasyncio \u2014 E/S as\u00edncrona\u00bb. docs.python.org. Consultado el 19 de marzo de 2023.\u00a0\n\u2191 \u00abMachine Learning (aprendizaje autom\u00e1tico) con Python: una introducci\u00f3n pr\u00e1ctica\u00bb. edX (en ingl\u00e9s). Consultado el 6 de julio de 2020.\u00a0\n\u2191 Rocky. \u00abApplications for Python\u00bb.\u00a0\n\u2191 \"Holand\u00e9s\" hace referencia a Guido van Rossum, el autor del lenguaje de programaci\u00f3n Python, que es holand\u00e9s. Tambi\u00e9n hace referencia a la gran concentraci\u00f3n de desarrolladores holandeses conocidos en relaci\u00f3n con otras nacionalidades.\n\u2191 PEP 20 -- The Zen of Python\n\u2191 \u00abCopia archivada\u00bb. Archivado desde el original el 4 de agosto de 2018. Consultado el 25 de febrero de 2010.\u00a0\n\u2191 Python Software Foundation. \u00abMore control flow options\u00bb. Python v2.7.8 Documentation (en ingl\u00e9s). Consultado el 20 de julio de 2014.\u00a0\n\u2191 Eric Huss. \u00abFunction Definition\u00bb. The C Library Reference Guide (en ingl\u00e9s). Archivado desde el original el 18 de enero de 2015. Consultado el 20 de julio de 2014.\u00a0\n\u2191 \u00c1lvarez, Miguel \u00c1ngel (2 de noviembre de 2001). \u00abFunciones en Javascript\u00bb. desarrolloweb.com (en ingl\u00e9s). Consultado el 20 de julio de 2014.\u00a0\n\u2191 David Goodger. \u00abCode Like a Pythonista: Idiomatic Python\u00bb. Python.net (en ingl\u00e9s). Archivado desde el original el 27 de mayo de 2014. Consultado el 20 de julio de 2014.\u00a0\n\u2191  Downey, Allen; Elkner, Jeffrey (1 de abril de 2002). \u00abAprenda a Pensar Como un Programador con Python\u00bb (pdf). Argentina Python. p.\u00a040. Archivado desde el original el 23 de octubre de 2017. Consultado el 21 de marzo de 2020.\u00a0 \n\u2191 \u00ab2. An\u00e1lisis l\u00e9xico\u00bb. Python documentation. docs.python.org. Consultado el 19 de marzo de 2023.\u00a0\n\u2191  Recuero de los Santos, Paloma (13 de mayo de 2020). \u00abPython para todos: Diferencia entre m\u00e9todo y funci\u00f3n\u00bb (html). Archivado desde el original el 14 de mayo de 2020. Consultado el 13 de mayo de 2020.\u00a0 \n\u2191 Encapsulaci\u00f3n en Python\n\u2191 \u00abPython GUI Programming With Tkinter\u00bb. Codelivly. 2022.\u00a0\n\u2191 \u00abPeque\u00f1o paseo por la Biblioteca Est\u00e1ndar\u00bb. Tutorial de Python (y Django!) en Espa\u00f1ol. Archivado desde el original el 15 de septiembre de 2017. Consultado el 16 de agosto de 2017.\u00a0\n\u2191 \u00abLa Biblioteca Est\u00e1ndar de Python\u00bb. docs.python.org. Consultado el 26 de abril de 2021.\u00a0\n\u2191 Python 3.0.1\n\u2191 PEP 3000 -- Python 3000\n\u2191 2to3 - Automated Python 2 to 3 code translation\n\u2191  Novedades de Python 3.0\n\u2191  Dower, Steve (21 de mayo de 2019). \u00abWho put Python in the Windows 10 May 2019 Update?\u00bb (html). Microsoft Blog (en ingl\u00e9s). Consultado el 23 de mayo de 2019.\u00a0 \nError en la cita: La etiqueta <ref> definida en las <references> con nombre \u00abGlosario LUCA, 2020\u00bb no se utiliza en el texto anterior.", "subsections": []}, {"name": "Bibliograf\u00eda", "text": "Knowlton, Jim (2009). Python. tr: Fern\u00e1ndez V\u00e9lez, Mar\u00eda Jes\u00fas (1 edici\u00f3n). Anaya Multimedia-Anaya Interactiva. ISBN\u00a0978-84-415-2513-9.\u00a0\nMartelli, Alex (2007). Python. Gu\u00eda de referencia. tr: Gorj\u00f3n Salvador, Bruno (1 edici\u00f3n). Anaya Multimedia-Anaya Interactiva. ISBN\u00a0978-84-415-2317-3.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": "Wikilibros: Pytho", "subsections": []}]}
