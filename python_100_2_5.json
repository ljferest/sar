{"url": "https://es.wikipedia.org/wiki/Filosof%C3%ADa_de_Unix", "title": "Filosof\u00eda de Unix", "summary": "La filosof\u00eda de Unix, originada por Ken Thompson, es un conjunto de normas culturales y enfoques filos\u00f3ficos para el desarrollo de software minimalista y modular. Se basa en la experiencia de los principales desarrolladores del sistema operativo Unix. Los primeros desarrolladores de Unix fueron importantes para llevar los conceptos de modularidad y reutilizaci\u00f3n a la pr\u00e1ctica de la ingenier\u00eda de programas inform\u00e1ticos, lo que dio lugar a un movimiento de \"herramientas de software\". Con el tiempo, los principales desarrolladores de Unix (y de los programas que se ejecutaban en \u00e9l) establecieron un conjunto de normas culturales para el desarrollo de programas inform\u00e1ticos; estas normas llegaron a ser tan importantes e influyentes como la propia tecnolog\u00eda de Unix; esto se ha denominado \"filosof\u00eda Unix\".\nLa filosof\u00eda de Unix hace hincapi\u00e9 en la construcci\u00f3n de c\u00f3digo simple, corto, claro, modular y extensible que pueda ser f\u00e1cilmente mantenido y reutilizado por otros desarrolladores que no sean sus creadores. La filosof\u00eda de Unix favorece la componibilidad en oposici\u00f3n al dise\u00f1o monol\u00edtico.", "sections": [{"name": "Origen", "text": "La filosof\u00eda de Unix est\u00e1 documentada por Douglas McIlroy[1]\u200b en el Bell System Technical Journal de 1978:[2]\u200b\nHaz que cada programa haga una cosa bien. Para hacer un nuevo trabajo, construye de nuevo en lugar de complicar los viejos programas a\u00f1adiendo nuevas \"caracter\u00edsticas\".\nEspere que la salida de cada programa se convierta en la entrada de otro programa a\u00fan desconocido. No llene la salida con informaci\u00f3n extra\u00f1a. Evite los formatos de entrada binarios o en columnas. No insista en la entrada interactiva.\nDise\u00f1a y construye software, incluso sistemas operativos, para ser probados temprano, idealmente en semanas. No duden en tirar las partes torpes y reconstruirlas.\nUsar herramientas en lugar de ayuda no especializada para aligerar una tarea de programaci\u00f3n, incluso si tienes que desviarte para construir las herramientas y esperas tirar algunas de ellas despu\u00e9s de haberlas usado.\nFue resumido m\u00e1s tarde por Peter H. Salus en A Quarter-Century of Unix (1994):[1]\u200b\nEscribe programas que hagan una cosa y la hagan bien.\nEscribe programas para trabajar juntos.\nEscribe programas para manejar flujos de texto, porque esa es una interfaz universal.\nEn su premiado trabajo de Unix de 1974, Ritchie y Thompson citan las siguientes consideraciones de dise\u00f1o:[3]\u200b\nFacilita la escritura, la prueba y la ejecuci\u00f3n de programas.\nUso interactivo en lugar de procesamiento por lotes.\nEconom\u00eda y elegancia de dise\u00f1o debido a las limitaciones de tama\u00f1o (\"salvaci\u00f3n a trav\u00e9s del sufrimiento\").\nSistema autosuficiente: todo el software de Unix se mantiene bajo Unix.\u00a0", "subsections": []}, {"name": "El Entorno de Programaci\u00f3n del UNIX", "text": "En su prefacio al libro de 1984, The UNIX Programming Environment, Brian Kernighan y Rob Pike, ambos de Bell Labs, dan una breve descripci\u00f3n del dise\u00f1o y la filosof\u00eda de Unix:[4]\u200b\n\u00a0\nLos autores escriben adem\u00e1s que su objetivo para este libro es \"comunicar la filosof\u00eda de programaci\u00f3n de UNIX\".[4]\u200b", "subsections": []}, {"name": "Dise\u00f1o de programas en el entorno UNIX", "text": "En octubre de 1984, Brian Kernighan y Rob Pike publicaron un art\u00edculo llamado Dise\u00f1o de Programas en el Entorno UNIX. En este documento, critican la acumulaci\u00f3n de opciones y caracter\u00edsticas de los programas que se encuentran en algunos sistemas Unix m\u00e1s recientes como el 4.2BSD y el System V, y explican la filosof\u00eda Unix de las herramientas de software, cada una de las cuales realiza una funci\u00f3n general:[5]\u200b\n\u00a0\nLos autores contrastan las herramientas de Unix, como cat, con las suites de programas m\u00e1s grandes utilizadas por otros sistemas.[5]\u200b\n\u00a0", "subsections": []}, {"name": "Doug McIlroy sobre la programaci\u00f3n de Unix", "text": "McIlroy, entonces jefe del Centro de Investigaci\u00f3n de Ciencias de la Computaci\u00f3n de Bell Labs, e inventor del Unix pipe,[6]\u200b resumi\u00f3 la filosof\u00eda de Unix de la siguiente manera:[1]\u200b\n\u00a0\nM\u00e1s all\u00e1 de estas declaraciones, tambi\u00e9n ha enfatizado la simplicidad y el minimalismo en la programaci\u00f3n de Unix:[1]\u200b\n\u00a0\nPor el contrario, McIlroy ha criticado el Linux moderno por tener un software inflado, remarcando que, \"los admiradores adoradores han alimentado a Linux con golosinas a un estado descorazonador de obesidad\".[7]\u200b \u00c9l contrasta esto con el enfoque anterior tomado en los laboratorios Bell al desarrollar y revisar Research Unix:[8]\u200b\n\u00a0", "subsections": []}, {"name": "Haz una cosa y hazla bien", "text": "Como dijo McIlroy, y generalmente aceptado por toda la comunidad Unix, siempre se ha esperado que los programas Unix sigan el concepto de DOTADIW, o \"Haz una cosa y hazla bien\". Hay fuentes limitadas para el acr\u00f3nimo DOTADIW en Internet, pero se discute ampliamente durante el desarrollo y empaquetado de nuevos sistemas operativos, especialmente en la comunidad Linux.\nPatrick Volkerding, el l\u00edder del proyecto Slackware Linux, invoc\u00f3 este principio de dise\u00f1o en una cr\u00edtica a la arquitectura del sistema, afirmando que, \"intentar controlar servicios, enchufes, dispositivos, montajes, etc., todo dentro de un demonio va en contra del concepto de Unix de hacer una cosa y hacerla bien\"[9]\u200b", "subsections": []}, {"name": "Las 17 Reglas de Unix de Eric Raymond", "text": "En su libro El arte de la programaci\u00f3n Unix, publicado por primera vez en 2003,[10]\u200b Eric S. Raymond, un programador americano y defensor del c\u00f3digo abierto, resume la filosof\u00eda Unix como el principio KISS de \"Keep it Simple, Stupid\".[11]\u200b \u00c9l proporciona una serie de reglas de dise\u00f1o:[1]\u200b\nConstruye programas modulares\nEscribe programas legibles\nUsa la composici\u00f3n de uso\nMecanismos separados de la pol\u00edtica\nEscribe programas simples\nEscribe peque\u00f1os programas\nEscribe programas transparentes\nEscribe programas robustos\nComplicar los datos cuando sea necesario, no el programa\nAprovechar los conocimientos esperados de los usuarios potenciales\nEvitar la salida innecesaria\nEscribe programas que fallan de una manera que es f\u00e1cil de diagnosticar\nValorar el tiempo del desarrollador sobre el tiempo de la m\u00e1quina\nEscribe programas abstractos que generen c\u00f3digo en lugar de escribir c\u00f3digo a mano\nPrototipo de software antes de pulirlo\nEscribe programas flexibles y abiertos\nHacer el programa y los protocolos extensibles.", "subsections": []}, {"name": "Mike Gancarz: La Filosof\u00eda de UNIX", "text": "En 1994, Mike Gancarz (miembro del equipo que dise\u00f1\u00f3 el Sistema X Window), se bas\u00f3 en su propia experiencia con Unix, as\u00ed como en discusiones con otros programadores y personas de otros campos que depend\u00edan de Unix, para producir La Filosof\u00eda de UNIX que la resume en nueve preceptos primordiales:\nLo peque\u00f1o es hermoso.\nHaz que cada programa haga una cosa bien.\nConstruya un prototipo lo antes posible.\nElija la portabilidad en lugar de la eficiencia.\nAlmacenar los datos en archivos de texto plano.\nUtiliza el aprovechamiento del software a tu favor.\nUsar scripts de shell para aumentar el apalancamiento y la portabilidad.\nEvite las interfaces de usuario cautivas.\nHaz de cada programa un filtro.", "subsections": []}, {"name": "\"Peor es mejor\"", "text": "Richard P. Gabriel sugiere que una ventaja clave de Unix era que encarnaba una filosof\u00eda de dise\u00f1o que \u00e9l denomin\u00f3 \"lo peor es mejor\", en la que la simplicidad tanto de la interfaz como de la implementaci\u00f3n son m\u00e1s importantes que cualquier otro atributo del sistema, incluyendo la correcci\u00f3n, la consistencia y la integridad. Gabriel sostiene que este estilo de dise\u00f1o tiene ventajas evolutivas clave, aunque cuestiona la calidad de algunos resultados.\nPor ejemplo, en los primeros tiempos, Unix utilizaba un n\u00facleo monol\u00edtico (lo que significa que los procesos de usuario llevaban a cabo llamadas del sistema del n\u00facleo en la pila de usuarios). Si se entregaba una se\u00f1al a un proceso mientras estaba bloqueado en una I/O a largo plazo en el n\u00facleo, \u00bfqu\u00e9 se deb\u00eda hacer? \u00bfDeber\u00eda retrasarse la se\u00f1al, posiblemente durante mucho tiempo (tal vez indefinidamente) mientras se completa la I/O? El manejador de se\u00f1ales no podr\u00eda ser ejecutado cuando el proceso estuviera en modo kernel, con datos sensibles del kernel en la pila. \u00bfDeber\u00eda el n\u00facleo hacer una copia de seguridad de la llamada al sistema, y almacenarla, para su reproducci\u00f3n y reinicio posterior, asumiendo que el manejador de se\u00f1ales se complete con \u00e9xito?\nEn estos casos, Ken Thompson y Dennis Ritchie favorecieron la simplicidad sobre la perfecci\u00f3n. El sistema Unix ocasionalmente regresaba antes de tiempo de una llamada al sistema con un error que indicaba que no hab\u00eda hecho nada - la \"Llamada al Sistema Interrumpido\", o un error n\u00famero 4 (EINTR) en los sistemas actuales. Por supuesto que la llamada hab\u00eda sido abortada para llamar al manejador de la se\u00f1al. Esto s\u00f3lo pod\u00eda suceder para un pu\u00f1ado de llamadas de sistema de larga duraci\u00f3n como read(), write(), open() y select(). En el lado positivo, esto hizo que el sistema de I/O fuera mucho m\u00e1s simple de dise\u00f1ar y entender. La gran mayor\u00eda de los programas de usuario nunca se vieron afectados porque no manejaban o experimentaban otras se\u00f1ales aparte de SIGINT y mor\u00edan inmediatamente si uno se levantaba. Para los otros pocos programas, como los shells o los editores de texto que responden a las teclas de control de trabajo, se pod\u00edan a\u00f1adir peque\u00f1os envoltorios a las llamadas del sistema para reintentar la llamada de inmediato si se produc\u00eda este error EINTR. De esta manera, el problema se resolvi\u00f3 de una manera simple.", "subsections": []}, {"name": "Cr\u00edtica", "text": "En un art\u00edculo de 1981 titulado \"La verdad sobre Unix: La interfaz de usuario es horrible\" publicado en Datamation, Don Norman critic\u00f3 la filosof\u00eda de dise\u00f1o de Unix por su falta de preocupaci\u00f3n por la interfaz de usuario.[12]\u200b Escribiendo desde su formaci\u00f3n en ciencia cognitiva y desde la perspectiva de la entonces actual filosof\u00eda de la ingenier\u00eda cognitiva, se centr\u00f3 en c\u00f3mo los usuarios finales comprenden y forman un modelo cognitivo personal de sistemas - o, en el caso de Unix, no lo entienden, con el resultado de que los errores desastrosos (como perder una hora de trabajo) son demasiado f\u00e1ciles.", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Ingenier\u00eda cognitiva\nArquitectura de Unix\nMinimalismo (inform\u00e1tica)\nIngenier\u00eda de software\nHacker \u00e9tico\nLista de filosof\u00edas de desarrollo del software\nTodo es un archivo", "subsections": []}, {"name": "Notas", "text": "\u2191 a b c d e Raymond, Eric S. (23 de septiembre de 2003). \u00abBasics of the Unix Philosophy\u00bb. The Art of Unix Programming. Addison-Wesley Professional. ISBN\u00a00-13-142901-9. Consultado el 1 de noviembre de 2016.\u00a0\n\u2191 Doug McIlroy, E. N. Pinson, B. A. Tague (8 de julio de 1978). \u00abUnix Time-Sharing System: Foreword\u00bb. Bell Laboratories. pp.\u00a01902-1903.\u00a0\n\u2191 Dennis Ritchie; Ken Thompson (1974), \u00abThe UNIX time-sharing system\u00bb, Communications of the ACM 17 (7): 365-375, doi:10.1145/361011.361061\u00a0.\n\u2191 a b Kernighan, Brian W. Pike, Rob. The UNIX Programming Environment. 1984. viii\n\u2191 a b Rob Pike (October 1984). \u00abProgram Design in the UNIX Environment\u00bb.\u00a0\n\u2191 Dennis Ritchie (1984), \u00abThe Evolution of the UNIX Time-Sharing System\u00bb, AT&T Bell Laboratories Technical Journal 63 (8): 1577-1593, doi:10.1002/j.1538-7305.1984.tb00054.x\u00a0.\n\u2191 Douglas McIlroy. \u00abRemarks for Japan Prize award ceremony for Dennis Ritchie, May 19, 2011, Murray Hill, NJ\u00bb. Consultado el 19 de junio de 2014.\u00a0\n\u2191 Bill McGonigle. \u00abAncestry of Linux\u00a0\u2014 How the Fun Began (2005)\u00bb. Consultado el 19 de junio de 2014.\u00a0\n\u2191 \u00abInterview with Patrick Volkerding of Slackware\u00bb. linuxquestions.org. 7 de junio de 2012. Consultado el 24 de octubre de 2015.\u00a0\n\u2191 Raymond, Eric (19 de septiembre de 2003). The Art of Unix Programming. Addison-Wesley. ISBN\u00a00-13-142901-9. Consultado el 9 de febrero de 2009.\u00a0\n\u2191 Raymond, Eric (19 de septiembre de 2003). \u00abThe Unix Philosophy in One Lesson\u00bb. The Art of Unix Programming. Addison-Wesley. ISBN\u00a00-13-142901-9. Consultado el 9 de febrero de 2009.\u00a0\n\u2191 Norman, Don (1981). \u00abThe truth about Unix: The user interface is horrid\u00bb (27(12)).\u00a0", "subsections": []}, {"name": "Referencias", "text": "The Unix Programming Environment by Brian Kernighan and Rob Pike, 1984\nProgram Design in the UNIX Environment \u2013 The paper by Pike and Kernighan that preceded the book.\nNotes on Programming in C, Rob Pike, September 21, 1989\nA Quarter Century of Unix, Peter H. Salus, Addison-Wesley, May 31, 1994 (ISBN\u00a00-201-54777-5)\nPhilosophy\u00a0\u2014 from The Art of Unix Programming, Eric S. Raymond, Addison-Wesley, September 17, 2003 (ISBN\u00a00-13-142901-9)\nFinal Report of the Multics Kernel Design Project by M. D. Schroeder, D. D. Clark, J. H. Saltzer, and D. H. Wells, 1977.\nThe UNIX Philosophy, Mike Gancarz, ISBN\u00a01-55558-123-4", "subsections": []}, {"name": "Enlaces externos", "text": "Basics of the Unix Philosophy \u2013 by Catb.org\nThe Unix Philosophy: A Brief Introduction \u2013 by The Linux Information Project (LINFO)\nThe Unix Philosophy\nWhy the Unix Philosophy still matter", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Flask", "title": "Flask", "summary": "Flask es un framework minimalista escrito en Python que permite crear aplicaciones web r\u00e1pidamente y con un m\u00ednimo n\u00famero de l\u00edneas de c\u00f3digo. Est\u00e1 basado en la especificaci\u00f3n WSGI de Werkzeug y el motor de templates Jinja2 y tiene una licencia BSD.", "sections": [{"name": "Historia", "text": "Flask fue creado por Armin Ronacher de Pocoo, un grupo internacional de entusiastas de Python formado en 2004. Seg\u00fan Ronacher, la idea original era una broma del D\u00eda de los Inocentes que fue lo suficientemente popular como para convertirse en una aplicaci\u00f3n seria. El nombre es una referencia al marco anterior de Bottle.\nCuando Ronacher y Georg Brandl crearon un sistema de tablones de anuncios escrito en Python en 2004, se desarrollaron los proyectos de Pocoo Werkzeug y Jinja.\nEn abril de 2016, el equipo de Pocoo se disolvi\u00f3 y el desarrollo de Flask y bibliotecas relacionadas pas\u00f3 al nuevo proyecto Pallets. Desde 2018, los datos y objetos relacionados con Flask se pueden renderizar con Bootstrap.\nFlask se ha hecho popular entre los entusiastas de Python. A partir de octubre de 2020, tiene la segunda mayor cantidad de estrellas en GitHub entre los marcos de desarrollo web de Python, solo un poco detr\u00e1s de Django, y fue votada como el marco web m\u00e1s popular en la encuesta de desarrolladores de Python para los a\u00f1os entre y que incluyen 2018 y 2022 [1]\u200b.", "subsections": []}, {"name": "Ejemplo", "text": "El c\u00f3digo siguiente muestra una aplicaci\u00f3n simple que imprime \"\u00a1Hola Mundo!\":\nfrom\nflask\nimport\nFlask\napp\n=\n(\n__name__\n)\n@app\n.\nroute\n\"/\"\ndef\nholamundo\n():\nreturn\n\"\u00a1Hola Mundo!\"\nrun\nport\n5000", "subsections": []}, {"name": "Referencias", "text": "\u2191  https://en.wikipedia.org/wiki/Flask_(web_framework) Flask (web framework) ", "subsections": []}, {"name": "Enlaces externos", "text": "Sitio Web de Flask\nDocumentaci\u00f3n de Flask\nC\u00f3digo fuente del proyecto en Github\nFlask en PyPI\nLocalizaci\u00f3n para aplicaciones Flas", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Foreach", "title": "Foreach", "summary": "Busca fuentes: \u00abForeach\u00bb \u2013 noticias\u00a0\u00b7 libros\u00a0\u00b7 acad\u00e9mico\u00a0\u00b7 im\u00e1genes\nForeach (de la palabra inglesa for each = para cada uno) es un bloque constructivo de los lenguajes de programaci\u00f3n para recorrer los elementos de una colecci\u00f3n. Foreach se utiliza por lo general en lugar de una norma para la declaraci\u00f3n. A diferencia de otras construcciones de bucle, los bucles foreach por lo general no mantienen contra-indicaci\u00f3n expl\u00edcita, que esencialmente dice \"haga esto a todo en este juego\" en lugar de \"hacer esto x veces.\" Esto evita posibles errores off-by-one y hace el c\u00f3digo m\u00e1s f\u00e1cil de leer. En lenguajes orientados a objetos un iterador, aunque impl\u00edcito, a menudo se utiliza como medio de recorrido. Este bucle, implementado a partir de las versiones de PHP4, nos ayuda a recorrer los valores de un array, lo cual puede resultar muy \u00fatil por ejemplo para efectuar una lectura r\u00e1pida del mismo. Recordemos que un array es una variable que guarda un conjunto de elementos (valores) catalogados por claves.[1]\u200b\nLa sintaxis en pseudoc\u00f3digo es la siguiente:\nUn ejemplo pr\u00e1ctico es la lectura de un array, lo cual podr\u00eda hacerse del siguiente modo:  \nforeach\n \n(\n$array\nas\n$clave\n=>\n$valor\n)\n{\n   \ninstrucci\u00f3n\n1\n;\n  \n2\n\u2026", "sections": [{"name": "Ejemplo en PHP", "text": "foreach\n$conjunto\nas\n$variable\n// operar con la variable;\n}", "subsections": []}, {"name": "Ejemplo en Java", "text": "for\ntipo\nvar\n:\narreglo", "subsections": []}, {"name": "Ejemplo en C#", "text": "variable\nin\n//Procesos\n//", "subsections": []}, {"name": "Ejemplo en LISP", "text": "dolist\nexp\nlista\n\t\n;operaciones...", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "While", "subsections": []}, {"name": "Referencias", "text": "\u2191 \u00abPHP: foreach - Manual\u00bb. php.net. Consultado el 2 de noviembre de 2017.\u00a0\nForeach en C# (Documentaci\u00f3n oficial Microsoft)\nForeach en MDN\nForeach en PHP (Documentaci\u00f3n oficia", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Free_Software_Foundation", "title": "Free Software Foundation", "summary": "La Fundaci\u00f3n por el Software Libre o Free Software Foundation es una organizaci\u00f3n creada en octubre de 1985 por Richard Stallman y otros entusiastas del software libre con el prop\u00f3sito de difundir este movimiento.\nLa Free Software Foundation (FSF) es una organizaci\u00f3n sin fines de lucro con la misi\u00f3n mundial de promover la libertad de los usuarios de computadoras. Defendemos los derechos de todos los usuarios de software.[1]\u200b\nFSF centra su trabajo fundamentalmente en asuntos legales, organizativos y promocionales en beneficio de la comunidad de usuarios de software libre.", "sections": [{"name": "Historia", "text": "La Free Software Foundation fue fundada en 1985. Continu\u00f3 los proyectos existentes de GNU, como la venta de manuales y cintas, y contrat\u00f3 a desarrolladores del sistema de software libre.[2]\u200b Desde entonces, ha continuado con estas actividades, adem\u00e1s de abogar por el movimiento del software libre. La FSF tambi\u00e9n es la administradora de varias licencias de software libre, lo que significa que las publica y tiene la capacidad de realizar revisiones seg\u00fan sea necesario.[3]\u200b\nLa FSF posee los derechos de autor de muchas piezas del sistema GNU, como el GNU Compiler Collection. Como titular de estos derechos de autor, tiene la autoridad para hacer cumplir los requisitos de copyleft de la GNU General Public License (GPL) cuando se produce una infracci\u00f3n de derechos de autor en ese software.\nDesde 1991 hasta 2001, la aplicaci\u00f3n de la GPL se realiz\u00f3 de manera informal, generalmente por el propio Stallman, a menudo con la asistencia del abogado de la FSF, Eben Moglen. En el inter\u00e9s de promover la asertividad copyleft por parte de las compa\u00f1\u00edas de software al nivel que la FSF ya estaba haciendo, en 2004 Harald Welte lanz\u00f3 gpl-violations.org.\nLa aplicaci\u00f3n de la GPL y las campa\u00f1as educativas sobre el cumplimiento de la GPL fueron un foco principal de los esfuerzos de la FSF a partir de este per\u00edodo.[4]\u200b\nDe 2003 a 2005, FSF celebr\u00f3 seminarios legales para explicar la GPL y la ley circundante.[5]\u200b Generalmente impartidos por Bradley M. Kuhn y Daniel Ravicher, estos seminarios fueron el primer esfuerzo para brindar educaci\u00f3n legal formal sobre la GPL.[6]\u200b\nEn 2007, la FSF public\u00f3 la tercera versi\u00f3n de la Licencia P\u00fablica General GNU despu\u00e9s de una importante contribuci\u00f3n externa.[7]\u200b", "subsections": []}, {"name": "Actividades", "text": "Proyecto GNU\nEl prop\u00f3sito original de la FSF era promover los ideales del software libre. La organizaci\u00f3n desarroll\u00f3 el sistema operativo GNU como un ejemplo de esto. \nLicencias GNU\nLa FSF elabora, mantiene y defiende la Licencia P\u00fablica General GNU (GNU GPL),la licencia de software libre m\u00e1s utilizada, cuya \u00faltima versi\u00f3n es la GPLv3 que fue publicada en forma definitiva en junio de 2007. Aparte la FSF tambi\u00e9n es responsable de la [GNU LGPL|Licencia P\u00fablica General Reducida GNU] (GNU LGPL) y la Licencia de documentaci\u00f3n libre GNU (GNU iFDL). La FSF tiene recursos y voluntad para hacer cumplir las licencias que elabora. Pero solo puede presentar demandas, sobre software del cual posea derechos de autor. La fundaci\u00f3n se enfrenta cada a\u00f1o a unas 50 violaciones de la GPL y siempre trata de evitar llegar a los tribunales. \nAlojamiento de proyectos\nLa FSF aloja proyectos de software libre en su sitio web Savannah. Ofrece una de interfaz web para el hosting y el mantenimiento de las p\u00e1ginas web de los proyectos, seguimiento de errores, CVS, FTP, y listas de correo. Hospeda m\u00e1s de 2800 proyectos.\nFormaci\u00f3n legal\nLa FSF organiza seminarios sobre los aspectos legales a tener en cuenta cuando se usa la licencia GPL.\nFree Software Directory\nEs un directorio con m\u00e1s de 5000 programas que se ha comprobado que son software libre. La Unesco ayuda en la financiaci\u00f3n de este proyecto. \nPremios y reconocimientos\nPremio para el Avance del Software Libre de la FSF (FSF Award for the Advancement of Free Software) que otorga la fundaci\u00f3n a una persona que haya hecho una gran contribuci\u00f3n al progreso del software libre y Premio de software libre para proyectos de beneficio social (Free Software Award for Projects of Social Benefit).\nGNU Press\nEl departamento de publicaciones de la FSF es el responsable de publicar libros asequibles sobre inform\u00e1tica usando licencias de libre distribuci\u00f3n.\nDefinici\u00f3n de software libre\nMantiene muchos documentos que definen y explican claramente que es el software libre.\nCampa\u00f1as\nLas campa\u00f1as de la FSF apuntan a oportunidades importantes para la adopci\u00f3n y desarrollo de software libre, empoderan a las personas contra amenazas espec\u00edficas a su libertad y nos acercan a una sociedad libre:[8]\u200b\nProyectos de software libre de alta prioridad: La lista de proyectos de alta prioridad de la FSF y la lista de tareas de ingenier\u00eda inversa sirven para fomentar el desarrollo de proyectos que son importantes para aumentar la adopci\u00f3n y el uso de software libre y sistemas operativos de software libre.\nJavaScript libre: FreeJS La campa\u00f1a Free JavaScript es un esfuerzo continuo para persuadir a las organizaciones de hacer que sus sitios web funcionen sin requerir que los usuarios ejecuten ning\u00fan software no libre.\nArranque seguro vs arranque restringido: La implementaci\u00f3n de Secure boot ocasiona en ciertos casos que las computadoras no arrancar\u00e1n sistemas operativos no autorizados, incluidos los sistemas autorizados inicialmente que se han modificado sin ser aprobados nuevamente.\nActualizar desde Windows: el sistema operativo m\u00e1s utilizado del mundo aprovecha su posici\u00f3n dominante sobre sus usuarios, negando libertades de uso.\nVigilancia: Si queremos desempa\u00f1ar programas de vigilancia como PRISM, debemos dejar de usar sistemas centralizados y unirnos para construir un Internet descentralizado, confiable y libre \"como en libertad\".\nDefectiveByDesign: Campa\u00f1a para eliminar el DRM.\nPlayOgg.org: Para promocionar Ogg, una alternativa a formatos privativos como MP3 y AAC.\nFree BIOS: \"BIOS libre\". Campa\u00f1a de apoyo al proyecto de creaci\u00f3n de un BIOS libre.\nHardware devices that support free software: Campa\u00f1a para promocionar la compra de \u00abhardware que de soporte al software libre\u00bb.\nEncourage governments to adopt OpenDocument': Para \u00abpromover en los gobiernos la adopci\u00f3n de OpenDocument\u00bb.\nFin de patentes de software: Las campa\u00f1as de la FSF para formatos que est\u00e1n libres de patentes de software, tambi\u00e9n trabajamos en la tarea m\u00e1s fundamental de finalizar por completo las patentes de software, a trav\u00e9s de acciones legales y legislativas.[9]\u200b", "subsections": []}, {"name": "Organizaci\u00f3n", "text": "La junta Directiva de la FSF incluye entre ellos profesores en las principales universidades, ingenieros superiores y fundadores. Tambi\u00e9n se admiten algunos activistas de alto perfil y empresarios de software.\nJohn Sullivan es el actual director ejecutivo de la FSF. Los miembros anteriores que ocuparon el puesto fueron Peter T. Brown (2005-2010) y Bradley M. Kuhn (2001-2005).\nMiembros actuales de la junta:\nGeoffrey Knauth, ingeniero de software s\u00e9nior en SFA, Inc. (desde el 23 de octubre de 1997)\nHenry Poole, fundador de CivicActions, una firma gubernamental de servicios digitales (con servicio desde el 12 de diciembre de 2002)\nGerald Jay Sussman, profesor de ciencias de la computaci\u00f3n en el Instituto de Tecnolog\u00eda de Massachusetts (desde sus inicios)\nAlexander Oliva, Vicepresidente (servido desde el 28 de agosto de 2019) [39]\nKat Walsh, abogada de derechos de autor y tecnolog\u00eda, defensora de la cultura libre y el software libre, y expresidenta de la Fundaci\u00f3n Wikimedia [40]\nLos miembros anteriores de la junta incluyen:\nHal Abelson, miembro fundador,[10]\u200b profesor de ciencias de la computaci\u00f3n en el Instituto de Tecnolog\u00eda de Massachusetts (ejerci\u00f3 desde el inicio hasta el 5 de marzo de 1998, y se reincorpor\u00f3 alrededor de 2005)\nRobert J. Chassell, tesorero fundador,[10]\u200b as\u00ed como director fundador (ejerci\u00f3 desde el inicio hasta el 3 de junio de 1997)\nMiguel de Icaza (ejerci\u00f3 desde agosto de 1999 hasta el 25 de febrero de 2002)\nBenjamin Mako Hill, profesor asistente de la Universidad de Washington (ejerci\u00f3 desde el 25 de julio de 2007 hasta octubre de 2019)[11]\u200b\nMatthew Garrett, desarrollador de software (sirvi\u00f3 desde el 16 de octubre de 2014)[12]\u200b\nBradley Kuhn, director ejecutivo de Software Freedom Conservancy y exdirector ejecutivo de FSF (ejerci\u00f3 del 25 de marzo de 2010[13]\u200b al 13 de octubre de 2019[14]\u200b)\nLawrence Lessig, profesor de derecho en la Universidad de Stanford (ejerci\u00f3 desde el 28 de marzo de 2004 hasta 2008)\nEben Moglen (ejerci\u00f3 desde el 28 de julio de 2000 hasta 2007)\nLen Tower Jr., miembro fundador,[10]\u200b (ejerci\u00f3 hasta el 2 de septiembre de 1997)\nRichard Stallman, presidente fundador, lanz\u00f3 el proyecto GNU, autor de la Licencia P\u00fablica General de GNU (ejerci\u00f3 como presidente desde el inicio, hasta el 16 de septiembre de 2019)\nFree Software Foundation Europe. Fundada en el 2001\nFree Software Foundation of India. Fundada en el 2003\nFree Software Foundation Am\u00e9rica Latina. Fundada en el 2005", "subsections": [{"name": "Afiliaci\u00f3n", "text": "El 25 de noviembre de 2002, la FSF lanz\u00f3 el programa de Miembros Asociados de la FSF para individuos.[15]\u200b Bradley M. Kuhn (director ejecutivo de la FSF, 2001-2005) lanz\u00f3 el programa y tambi\u00e9n se inscribi\u00f3 como el primer Miembro Asociado.[16]\u200b\nLos miembros asociados desempe\u00f1an principalmente un papel honor\u00edfico y de apoyo a la financiaci\u00f3n.[17]\u200b En 2023, los miembros asociados obtuvieron la capacidad de hacer nominaciones al consejo, junto con el personal de la FSF y los miembros con derecho a voto de la FSF. Tambi\u00e9n hay una reuni\u00f3n anual de los miembros de la FSF, normalmente durante el almuerzo en LibrePlanet, en la que se solicitan opiniones para la FSF."}, {"name": "Financiaci\u00f3n", "text": "La mayor parte de la financiaci\u00f3n de la FSF proviene de patrocinadores y miembros.[18]\u200b Los ingresos tambi\u00e9n provienen de laboratorios de cumplimiento relacionados con el software libre, ofertas de trabajo, obras publicadas y una tienda web. La FSF ofrece ponentes y seminarios de pago, y todos los proyectos de la FSF aceptan donaciones.\nLos ingresos financian programas y campa\u00f1as de software libre, mientras que el efectivo se invierte de forma conservadora en inversiones socialmente responsables. La estrategia financiera est\u00e1 dise\u00f1ada para mantener el futuro a largo plazo de la Fundaci\u00f3n a trav\u00e9s de la estabilidad econ\u00f3mica.\nLa FSF es una organizaci\u00f3n exenta de impuestos y publica anualmente en Internet el formulario 990 del Internal Revenue Service.[19]\u200b"}, {"name": "Equipo legal", "text": "Eben Moglen y Dan Ravicher trabajaron anteriormente de forma individual como asesores legales pro bono de la FSF. Despu\u00e9s de formar el Software Freedom Law Center, Eben Moglen continu\u00f3 como asesor general de la FSF hasta 2016.[20]\u200b"}, {"name": "Empleados", "text": "La Fundaci\u00f3n tiene alrededor de una docena de empleados.[21]\u200b La mayor\u00eda, pero no todos, trabajan en la sede de la FSF en Boston, Massachusetts.[22]\u200b[23]\u200b"}]}, {"name": "Cr\u00edticas y detractores", "text": "La FSF ha desempe\u00f1ado y desempe\u00f1a un papel muy importante en el desarrollo del software libre, por ello goza de muchas simpat\u00edas entre los usuarios de dicho software y tiene muchos enemigos en la industria del software privativo.\nAl margen de este hecho, dentro de la comunidad no todos comparten plenamente la filosof\u00eda o actuaciones de la FSF siendo la Open Source Initiative (OSI) la principal l\u00ednea de pensamiento alternativa a la FSF.", "subsections": [{"name": "Posici\u00f3n sobre la Gesti\u00f3n de derechos digitales  DRM", "text": "Linus Torvalds ha criticado a la FSF por utilizar la GPLv3 como arma en la lucha contra los DRM. Torvalds argumenta que la cuesti\u00f3n de la DRM y la de una licencia de software deber\u00edan tratarse como dos cuestiones separadas.[24]\u200b"}, {"name": "Campa\u00f1a Defective by Design", "text": "El 16 de junio de 2010, Joe Brockmeier, periodista de Linux Magazine, critic\u00f3 la campa\u00f1a Defective by Design de la FSF por ser \"negativa\" e \"infantil\" y no ser adecuada para proporcionar a los usuarios \"alternativas cre\u00edbles\" al software privativo.[25]\u200b La FSF respondi\u00f3 a esta cr\u00edtica diciendo \"que hay una diferencia fundamental entre hablar en contra de las pol\u00edticas o acciones y las campa\u00f1as de desprestigio\", y \"que si uno est\u00e1 tomando una posici\u00f3n \u00e9tica, est\u00e1 justificado, y a menudo es necesario, no s\u00f3lo hablar de los beneficios de la libertad, sino en contra de los actos de desposesi\u00f3n y privaci\u00f3n de derechos\".[26]\u200b"}, {"name": "Controversia sobre la licencia GNU LibreDWG", "text": "En 2009, una actualizaci\u00f3n de la licencia de LibDWG/LibreDWG a la versi\u00f3n 3 de la GPL de GNU,[27]\u200b hizo imposible que los proyectos de software libre LibreCAD y FreeCAD usaran LibreDWG legalmente.[28]\u200b Muchos proyectos expresaron su descontento por la selecci\u00f3n de la licencia GPLv3 para LibreDWG, como FreeCAD, LibreCAD, Assimp y Blender.[29]\u200b Algunos sugirieron la selecci\u00f3n de una licencia con una compatibilidad m\u00e1s amplia, por ejemplo MIT, BSD, o LGPL 2.1..[29]\u200b Se hizo una petici\u00f3n a la FSF para relicenciar GNU LibreDWG como GPLv2, que fue rechazada en 2012.[30]\u200b\nLa libDWG se ha estancado desde 2011 por varias razones, incluyendo problemas de licencia.[31]\u200b"}]}, {"name": "V\u00e9ase tambi\u00e9n", "text": " Portal:Software libre. Contenido relacionado con Software libre.\nDerecho digital\nDefective by Design\nLibrePlanet\nLinux-libre\nRichard Stallman\nProyecto GNU\nSoftware libre\nSoftware libre y de c\u00f3digo abierto\nAnexo:Licencias de software aprobadas por la FSF", "subsections": []}, {"name": "Referencias", "text": "\u2191 fsf. \u00abFree software is a matter of liberty, not price \u2014 Free Software Foundation \u2014 working together for free software\u00bb (en ingl\u00e9s). Consultado el 5 de marzo de 2020.\u00a0\n\u2191 \u00abEl Proyecto GNU\u00bb.\u00a0\n\u2191 \u00abLicencias\u00bb.\u00a0\n\u2191 \u00abDennisKennedy.blog: A Great Learning Opportunity for Software Lawyers - Upcoming GPL Seminar\u00bb. web.archive.org. 28 de septiembre de 2007. Archivado desde el original el 28 de septiembre de 2007. Consultado el 5 de marzo de 2020.\u00a0\n\u2191 \u00abSeminar On Details Of The GPL And Related Licenses - Slashdot\u00bb. yro.slashdot.org (en ingl\u00e9s). Consultado el 5 de marzo de 2020.\u00a0\n\u2191 \u00abFSF Bulletin Issue 2, June 2003\u00bb.\u00a0\n\u2191 \u00abGNU General Public License\u00bb.\u00a0\n\u2191 \u00abCurrent campaigns \u2014 Free Software Foundation \u2014 working together for free software\u00bb. www.fsf.org. Consultado el 5 de marzo de 2020.\u00a0\n\u2191 Patent Absurdity en FSF.org\n\u2191 a b c \u00abFebruary 1986        G N U ' S   B U L L E T I N         Volume 1 No.1\u00bb.\u00a0\n\u2191 \u00abThe Free Software Foundation (FSF) Lost Almost Half (3 Out of 8) Board Members in Only One Month\u00bb. Techrights. 17 de octubre de 2019. Consultado el 5 de marzo de 2020.\u00a0\n\u2191 \u00abMatthew Garrett joins Free Software Foundation board of directors\u00bb.\u00a0\n\u2191 \u00abBradley Kuhn Joins the FSF Board\u00bb.\u00a0\n\u2191 \u00abOn Recent Controversial Events - Bradley M. Kuhn ( Brad ) ( bkuhn )\u00bb. ebb.org. Consultado el 5 de marzo de 2020.\u00a0\n\u2191 The site member.fsf.org first appears in the Internet Archive in December 2002, and that site lists the date of the launch as 25 November 2002. \u00abFSF Membership Page\u00bb. The Internet Archive. Archivado desde el original el 20 de diciembre de 2002.\u00a0\n\u2191 \u00abHomepage of Bradley M. Kuhn\u00bb. Bradley M. Kuhn. 5 de enero de 2008. Consultado el 5 de enero de 2008.\u00a0\n\u2191 \u00abAmended Bylaws\u00bb. Free Software Foundation. Consultado el 24 de enero de 2023.\u00a0\n\u2191 Stallman, Richard. \u00abAbout the GNU Project\u00bb. Gnu Project. FSF. Consultado el 18 de mayo de 2014.\u00a0\n\u2191 \u00abFSF Financial Information\u00bb.\u00a0\n\u2191 \u00abFSF announces change in general counsel\u00bb. www.fsf.org (en ingl\u00e9s). Free Software Foundation. Consultado el 18 de mayo de 2017.\u00a0\n\u2191 \u00abMeet the staff of the Free Software Foundation\u00bb.\u00a0\n\u2191 \u00abMeet the staff of the Free Software Foundation\u00bb.\u00a0\n\u2191 \u00abCertificate of Change of Principal Office\u00bb. The Commonwealth of Massachusetts. 26 de mayo de 2005. Consultado el 4 de julio de 2008.\u00a0\n\u2191 patrick_g. \u00abLinus Torvalds: the anniversary interview of the 20 years of the kernel\u00bb. LinuxFr.org. Consultado el 23 de octubre de 2019.\u00a0\n\u2191 \u00abThe Party of Gno.\u00bb. Archivado desde el original el 20 de junio de 2010. Consultado el 22 de junio de 2010.\u00a0\n\u2191 \u00abIn defense of negativity\u00bb. www.fsf.org. Free Software Foundation. Consultado el 23 de octubre de 2019.\u00a0\n\u2191 trunk/copying on sourceforge.net/p/libdwg\n\u2191 Larabel, Michael (24 de enero de 2013). \u00abFSF Wastes Away Another \"High Priority\" Project\u00bb. Phoronix. Archivado desde el original el 9 de noviembre de 2016. Consultado el 22 de agosto de 2013. \u00abTanto LibreCAD como FreeCAD quieren usar LibreDWG y tienen parches disponibles para soportar la librer\u00eda del formato de archivo DWG, pero no pueden integrarlos. Los programas dependen de la popular licencia GPLv2, mientras que la Free Software Foundation s\u00f3lo permite el uso de LibreDWG bajo licencia GPLv3, no GPLv2.\u00bb\u00a0\n\u2191 a b Prokoudine, Alexandre (26 de enero de 2012). \u00abWhat's up with DWG adoption in free software?\u00bb. libregraphicsworld.org. Archivado desde el original el 9 de noviembre de 2016. Consultado el 3 de noviembre de 2013. \u00ab[Alexander Gessler de Assimp:] \"Personalmente, estoy muy descontento con su licencia GPL [de LibreDWG - LGW]. Proh\u00edbe su uso en Assimp y tambi\u00e9n para muchas otras aplicaciones. No me gustan las ideolog\u00edas dogm\u00e1ticas, y liberar software por la fuerza (como hace GPL/GNU) es algo que me disgusta en particular. Est\u00e1 bien para las aplicaciones, porque a estas alturas no hace da\u00f1o, pero, en mi opini\u00f3n, no para las bibliotecas que est\u00e1n dise\u00f1adas para ser usadas lo m\u00e1s libremente posible.\" [Toni Roosendaal, de Blender:] \"Blender tambi\u00e9n sigue siendo \"GPLv2 o posterior\". Por el momento nos ce\u00f1imos a eso, pasar a GPL 3 no tiene beneficios evidentes que yo conozca. Mi consejo para LibreDWG: si haces una biblioteca, elegir una licencia ampliamente compatible (MIT, BSD o LGPL) es una elecci\u00f3n muy positiva.\u00bb\u00a0\n\u2191 Prokoudine, Alexandre (27 de diciembre de 2012). \u00abLibreDWG drama: the end or the new beginning?\u00bb. libregraphicsworld.org. Archivado desde el original el 9 de noviembre de 2016. Consultado el 23 de agosto de 2013. \u00ab[...]la desafortunada situaci\u00f3n con el soporte para archivos DWG en software CAD libre a trav\u00e9s de LibreDWG. Creemos que a estas alturas ya deber\u00eda estar cerrado. Tenemos la respuesta final de la FSF. [...] \"No vamos a cambiar la licencia.\"\u00bb.\u00a0\n\u2191 Prokoudine, Alexandre (26 de enero de 2012). \u00abWhat's up with DWG adoption in free software?\u00bb. libregraphicsworld.org. Archivado desde el original el 9 de noviembre de 2016. Consultado el 3 de noviembre de 2013. \u00abLicencia GPLv3. No funciona para el software de usuario final, porque tienden a utilizar componentes de terceros bajo licencias diferentes que imponen restricciones. La FSF, que es la \u00fanica propietaria de los derechos de autor de LibreDWG, se opuso a la relicencia. Con respecto al proyecto FreeCAD y Yorik van Havre, su contribuidor, Richard Stallman declar\u00f3: \"No deber\u00edas cambiar la licencia de tu librer\u00eda. M\u00e1s bien, es mejor dejarle claro cu\u00e1les son las condiciones\". [...] Personalmente, estoy extremadamente descontento con su licencia GPL [de LibreDWG - LGW]. Proh\u00edbe su uso en Assimp y tambi\u00e9n para muchas otras aplicaciones. No me gustan las ideolog\u00edas dogm\u00e1ticas, y liberar software por la fuerza (como hace GPL/GNU) es algo que me disgusta en particular. Est\u00e1 bien para las aplicaciones, porque no hace da\u00f1o en este momento, pero, en mi opini\u00f3n, no para las bibliotecas que est\u00e1n dise\u00f1adas para ser usadas tan libremente como sea posible.\u00bb\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": " Wikimedia Commons alberga una galer\u00eda multimedia sobre Free Software Foundation.\nSitio web oficial de la Free Software Foundation\nSitio web oficial de la Free Software Foundation Am\u00e9rica Latina\nSitio web oficial de la Free Software Foundation Europa\nSitio web oficial de la Free Software Foundation Indi", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/GNU_General_Public_License", "title": "GNU General Public License", "summary": " \n \n \n \nS\u00ed\n[\n]\nNo\n \nLa Licencia P\u00fablica General de GNU o m\u00e1s conocida por su nombre en ingl\u00e9s GNU General Public License (o simplemente sus siglas en ingl\u00e9s GNU GPL) es una licencia de derecho de autor ampliamente usada en el mundo del software libre y c\u00f3digo abierto,[6]\u200b y garantiza a los usuarios finales (personas, organizaciones, compa\u00f1\u00edas) la libertad de usar, estudiar, compartir (copiar) y modificar el software. Su prop\u00f3sito es doble: declarar que el software cubierto por esta licencia es libre, y protegerlo (mediante una pr\u00e1ctica conocida como copyleft) de intentos de apropiaci\u00f3n que restrinjan esas libertades a nuevos usuarios cada vez que la obra es distribuida, modificada o ampliada. Esta licencia fue creada originalmente por Richard Stallman, fundador de la Free Software Foundation (FSF) para el proyecto GNU.\nLa Free Software Foundation pone la GPL a disposici\u00f3n de cualquiera que desee proteger los derechos de sus usuarios finales (usar, compartir, estudiar y modificar), y otorgar a los beneficiarios de un programa de ordenador u otro tipo de obra los derechos de la definici\u00f3n de software libre.[7]\u200b La GPL se distingue del dominio p\u00fablico o de otras licencias de software libre conocidas como permisivas por hacer hincapi\u00e9 en el copyleft, o solo permitir que las copias y derivados de una obra bajo la GPL perpet\u00faen la misma licencia.\nLa mayor parte del software GNU es copyleft, pero no todo; sin embargo, todo el software GNU debe ser software libre.\nParte del software GNU fue escrito por el equipo de la Free Software Foundation, pero la mayor parte proviene de algunos voluntarios. La Free Software Foundation es titular del copyright de parte de ese software, otra parte est\u00e1 bajo el copyright de sus autores.\nDavid A. Wheeler sostiene que el copyleft proporcionado por la GPL fue crucial para el \u00e9xito de sistemas basados en Linux, dando a los programadores que han contribuido al n\u00facleo la seguridad de que de su trabajo se beneficiar\u00eda todo el mundo y seguir\u00e1 siendo libre, en lugar de ser explotado por compa\u00f1\u00edas de software que no tendr\u00edan que dar nada de nuevo a la comunidad.[8]\u200b\nLos usuarios o compa\u00f1\u00edas que distribuyen sus trabajos bajo las GPL, pueden cobrar o distribuirlas gratuitamente. Esto distingue las GPL de las licencias de software que proh\u00edben su distribuci\u00f3n comercial. La FSF argumenta que no se debe restringir la distribuci\u00f3n comercial del software (incluyendo la redistribuci\u00f3n),[9]\u200b y en ese tenor la GPL establece expl\u00edcitamente que las obras cubiertas por esta licencia se pueden vender a cualquier precio", "sections": [{"name": "Historia", "text": "La GPL fue creada por Richard Stallman en 1989, para proteger los programas liberados como parte del proyecto GNU. La GPL original se bas\u00f3 en la unificaci\u00f3n de licencias similares utilizadas en versiones anteriores de GNU Emacs, GNU Debugger y de GNU C Compiler.[10]\u200b Estas licencias conten\u00edan disposiciones similares a las actuales GPL, pero eran espec\u00edficas para cada programa, haci\u00e9ndolos incompatibles, a pesar de ser la misma licencia. El objetivo de Stallman era producir una licencia que pudiera ser aplicada a cualquier proyecto, por lo que es posible utilizarlas en muchos proyectos para compartir c\u00f3digo.\nLa segunda parte de esta licencia, versi\u00f3n 2, fue liberada en 1991. Durante los siguientes 15 a\u00f1os, los miembros de la comunidad FOSS comenzaron a preocuparse con los problemas en la GPLv2 que permit\u00edan explotar software GPL con intenciones contrarias a la licencia.[11]\u200b Estos problemas inclu\u00edan tivoizaci\u00f3n, que es la inclusi\u00f3n de software con GPL en hardware que rechazar\u00e1 ejecutar versiones modificadas de su software, problemas de compatibilidad como ocurre con la licencia Affero General Public License; y las disputas por patentes entre Microsoft y distribuidores de c\u00f3digo libre y abierto, lo que se consider\u00f3 como un intento de usar las patentes como arma contra la comunidad FOSS.\nHist\u00f3ricamente, la familia de licencias de la GPL ha sido una de las licencias de software m\u00e1s populares en el software libre de dominio.[12]\u200b[13]\u200b[14]\u200b[15]\u200b[16]\u200b[17]\u200b[18]\u200b La tercera versi\u00f3n de esta licencia (GNU GPLv3) fue desarrollada para tratar de resolver estos problemas y fue lanzada oficialmente el 25 de julio de 2007. Esta es la primera licencia copyleft para uso general, lo que significa que los trabajos derivados solo pueden ser distribuidos bajo los t\u00e9rminos de la misma licencia.", "subsections": [{"name": "Versi\u00f3n 1", "text": "La versi\u00f3n 1 de GNU GPL,[19]\u200b fue presentada el 25 de febrero de 1989,[20]\u200b impidi\u00f3 lo que eran las dos principales formas con las que los distribuidores de software restring\u00edan las libertades definidas por el software libre. El primer problema fue que los distribuidores publicaban \u00fanicamente los archivos binarios, funcionales y ejecutables, pero no entendibles o modificables por humanos. Para prevenir esto, la GPLv1 estableci\u00f3 que cualquier proveedor de software libre adem\u00e1s de distribuir el archivo binario deb\u00eda liberar a su vez c\u00f3digo fuente entendible y que pudiera ser modificado por el ser humano, bajo la misma licencia (secciones 3a y 3b de la licencia).\nEl segundo problema era que los distribuidores pod\u00edan a\u00f1adir restricciones adicionales, ya fuera a\u00f1adiendo restricciones a la licencia o mediante la combinaci\u00f3n del software con otro que tuviera otras restricciones en su distribuci\u00f3n. Si esto se hac\u00eda, entonces la uni\u00f3n de los dos conjuntos de restricciones ser\u00eda aplicada al trabajo combinado entonces podr\u00edan a\u00f1adirse restricciones inaceptables. Para prevenir esto, GPLv1 obligaba a que las versiones modificadas en su conjunto, tuvieran que ser distribuidas bajo los t\u00e9rminos GPLv1 (secciones 2b y 4 de la licencia). Por lo tanto, el software distribuido bajo GPLv1 puede ser combinado con software bajo t\u00e9rminos m\u00e1s permisivos y no con software con licencias m\u00e1s restrictivas, lo que entrar\u00eda en conflicto con el requisito de que todo software tiene que ser distribuido bajo los t\u00e9rminos de la GPLv1."}, {"name": "Versi\u00f3n 2", "text": "Seg\u00fan Richard Stallman, el mayor cambio en GPLv2 fue la cl\u00e1usula \u201cLiberty or Death\u201d (\u00ablibertad o muerte\u00bb), como la llama en la secci\u00f3n 7 de ese documento.[21]\u200b Esta secci\u00f3n dice que si alguien impone restricciones que le proh\u00edben distribuir c\u00f3digo GPL de tal forma que influya en las libertades de los usuarios (por ejemplo, si una ley impone que esa persona \u00fanicamente pueda distribuir el software en binario), esa persona no puede distribuir software GPL. La esperanza es que esto har\u00e1 que sea menos tentador para las empresas el recurrir a las amenazas de patentes para exigir una remuneraci\u00f3n de los desarrolladores de software libre.\nEn 1991 se hizo evidente que una licencia menos restrictiva ser\u00eda estrat\u00e9gicamente \u00fatil para la biblioteca C y para las bibliotecas de software que esencialmente hac\u00edan el trabajo que llevaban a cabo otras bibliotecas comerciales ya existentes.[22]\u200b Cuando la versi\u00f3n 2 de GPL fue liberada en junio de 1991, una segunda licencia Library General Public License fue introducida al mismo tiempo y numerada con la versi\u00f3n 2 para denotar que ambas son complementarias. Los n\u00fameros de versiones divergieron en 1999 cuando la versi\u00f3n 2.1 de LGPL fue liberada, esta fue renombrada como GNU Lesser General Public License para reflejar su lugar en esta filosof\u00eda."}, {"name": "Versi\u00f3n 3", "text": "A finales de 2005, la Free Software Foundation (FSF) anunci\u00f3 estar trabajando en la versi\u00f3n 3 de la GPL (GPLv3). El 16 de enero de 2006, el primer borrador de GPLv3 fue publicado, y se inici\u00f3 la consulta p\u00fablica. La consulta p\u00fablica se plane\u00f3 originalmente para durar de nueve a quince meses, pero finalmente se extendi\u00f3 a dieciocho meses, durante los cuales se publicaron cuatro borradores. La GPLv3 oficial fue liberada por la FSF el 29 de junio de 2007.[23]\u200b\nSeg\u00fan Stallman los cambios m\u00e1s importantes se produjeron en el campo de las patentes de software, la compatibilidad de licencias de software libre, la definici\u00f3n de c\u00f3digo fuente, y restricciones de hardware respecto a las modificaciones de hardware.[23]\u200b[24]\u200b Otros cambios est\u00e1n relacionados con la internacionalizaci\u00f3n, c\u00f3mo son manejadas las violaciones de licencias, y c\u00f3mo los permisos adicionales pueden ser concedidos por el titular de los derechos de autor. Tambi\u00e9n a\u00f1ade disposiciones para quitar al DRM su valor legal, por es posible romper el DRM en el software de GPL sin romper leyes como la DMCA.[25]\u200b\nEl proceso de consulta p\u00fablica fue coordinado por la Free Software Foundation con asistencia de Software Freedom Law Center, Free Software Foundation Europe,[26]\u200b y otros grupos de software libre. Los comentarios del p\u00fablico fueron recolectados a trav\u00e9s del portal gplv3.fsf.org.[27]\u200b\nDurante el proceso de consulta p\u00fablica, 962 comentarios fueron presentados para el primer borrador.[28]\u200b Finalmente, al final del proceso se alcanz\u00f3 la cifra de 2,636 comentarios.[29]\u200b[30]\u200b[31]\u200b\nEl tercer borrador fue liberado el 28 de marzo de 2007.[32]\u200b Este borrador incluye mecanismos destinados a evitar acuerdos relativos a las patentes, como el controvertido acuerdo entre Microsoft y Novell y restringe las cl\u00e1usulas anti-tivoizaci\u00f3n a una definici\u00f3n legal de un \"usuario\" o \"producto de consumo\". Tambi\u00e9n elimina la secci\u00f3n de \"Limitaciones geogr\u00e1ficas\", cuyo probable borrado se hab\u00eda anunciado en el lanzamiento de la consulta p\u00fablica.\nEl cuarto borrador,[33]\u200b que fue el \u00faltimo, fue liberado el 31 de mayo de 2007. Introdujo la compatibilidad con las Licencias Apache, clarific\u00f3 el rol de los contratistas externos, y hace una excepci\u00f3n para evitar los problemas provocados por el acuerdo Microsoft-Novell, estableciendo en el p\u00e1rrafo 6 de la Secci\u00f3n 11 lo siguiente:\nEl objetivo de esto es hacer este tipo de acuerdos ineficaces. La licencia est\u00e1 orientada a que Microsoft tenga que extender las licencias de patentes para garantizar a los clientes de Novell el uso de GPLv3, lo que es posible \u00fanicamente si Microsoft es distribuidor legal del software bajo GPLv3.[34]\u200b[35]\u200b\nAlgunos desarrolladores de alto nivel del n\u00facleo Linux, comentaron e hicieron declaraciones p\u00fablicas a los medios de comunicaci\u00f3n sobre sus objeciones a los borradores 1 y 2.[36]\u200b"}]}, {"name": "T\u00e9rminos y condiciones", "text": "Los t\u00e9rminos y condiciones de GPL deben estar disponible para cualquiera que reciba una copia de la obra al cual ha sido aplicada esta licencia. Cualquier licencia que se le apliquen dichos t\u00e9rminos da permiso a realizar modificaciones a una obra, realizar copias y distribuirla o distribuir cualquiera de sus versiones derivadas. Con esta licencia, est\u00e1 permitido cobrar por la distribuci\u00f3n de cada copia, o no cobrar nada. Este \u00faltimo punto distingue las licencias GPL de las licencias de software que proh\u00edben la distribuci\u00f3n comercial. La FSF argumenta que en el software libre no debe haber cabida para las restricciones comerciales,[37]\u200b y las obras bajo este tipo de licencias pueden ser vendidas a cualquier precio.\nLa GPL, adem\u00e1s, establece que un distribuidor no puede imponer \"restricciones sobre los derechos otorgados por la GPL\". Esta proh\u00edbe actividades como la distribuci\u00f3n del software bajo un acuerdo de confidencialidad o contrato. Distribuidores bajo la GPL tambi\u00e9n conceder una licencia para cualquiera de sus patentes software, para ser utilizadas en software GPL.\nLa cuarta secci\u00f3n de la versi\u00f3n 2 de la licencia y la decimos\u00e9ptima secci\u00f3n de la versi\u00f3n 3 requieren que los programas distribuidos como binarios precompilados est\u00e9n acompa\u00f1ados de una copia del c\u00f3digo fuente, una oferta por escrito para distribuir el c\u00f3digo fuente a trav\u00e9s del mismo mecanismo que el binario pre-compilado, o una oferta por escrito para obtener el c\u00f3digo fuente del binario recibido bajo la GPL. La segunda secci\u00f3n de la versi\u00f3n 2 y la secci\u00f3n quinta de la versi\u00f3n 3 tambi\u00e9n apuntan que hay que suministrar \"a todos los destinatarios una copia de esta Licencia junto con el Programa\". La versi\u00f3n 3 de la licencia permite que el c\u00f3digo fuente est\u00e9 disponible en distintas plataformas en cumplimiento de la s\u00e9ptima secci\u00f3n. Estos incluyen la descarga de c\u00f3digo fuente desde un servidor de red adyacente o la obtenci\u00f3n del mismo a trav\u00e9s de peer-to-peer, siempre que el c\u00f3digo compilado est\u00e9 disponible y que haya \"instrucciones claras\u201d sobre d\u00f3nde encontrar el c\u00f3digo fuente.\nLa FSF no permite la aplicaci\u00f3n de derechos de copyright a una obra licenciada bajo GPL, al menos que el autor los aplique expl\u00edcitamente (esto sucede raras veces en con excepci\u00f3n de los programas que forman parte del proyecto GNU). Solo los titulares de los derechos individuales tienen la autoridad para demandar una violaci\u00f3n de la licencia cuando se lleva a cabo.", "subsections": [{"name": "Copyleft", "text": "Los derechos de distribuci\u00f3n otorgados por la GPL para versiones modificadas de la obra no son incondicionales. Cuando alguien distribuye bajo GPL a\u00f1adiendo a la obra sus propias modificaciones, los requisitos para la distribuci\u00f3n de la totalidad de la obra no puede ser mayor que los requisitos que est\u00e1n en la GPL.\nEste requisito se conoce como copyleft. Que alcanza su verdadero potencial en el caso de los derechos de autor sobre el software. Si una obra GPL tiene derechos copyright, no se tendr\u00e1 derecho a distribuir esta obra, realizar modificaciones (excepto para uso propio). Al aplicar una GPL a una obra, los derechos de la misma estar\u00e1n protegidos por la ley de derechos de autor. Y si por el contrario, si se distribuye copias de la obra (licenciada bajo GPL) sin atenerse a los t\u00e9rminos de la GPL (por ejemplo, al mantener en secreto el c\u00f3digo fuente), puede ser demandado por el autor original de los derechos de autor.\nCopyleft por lo tanto utiliza la ley de copyright para lograr lo opuesto de su prop\u00f3sito usual: en lugar de imponer restricciones, otorga derechos, de tal manera que garantice que los derechos no puedan ser posteriormente quitados o restringidos. Tambi\u00e9n asegura que si los derechos ilimitados de redistribuci\u00f3n no se conceden o se produce cualquier falla legal se encuentra bajo la protecci\u00f3n de la ley.\nMuchos distribuidores de programas bajo GPL empaquetan el c\u00f3digo fuente con el ejecutable. Una alternativa que cumple las bases de copyleft es la de proporcionar una oferta por escrito para distribuir el c\u00f3digo fuente en un medio f\u00edsico (como por ejemplo un CD) bajo demanda. En la pr\u00e1ctica muchos programas bajo la GPL se distribuyen por internet, y el c\u00f3digo se encuentra alojado en servidores FTP, HTTP, etc.\nCopyleft solo se aplica cuando se trata de redistribuir el programa. Seg\u00fan sus bases, est\u00e1 permitido hacer privadas las modificaciones realizadas, sin obligaci\u00f3n de divulgar las modificaciones siempre y cuando este software sea de uso propio (no sea redistribuido).\nHubo un debate sobre si se trataba de una violaci\u00f3n de la GPL de liberar el c\u00f3digo fuente tanto en forma ofuscada, como en forma deliberadamente compleja a la comprensi\u00f3n. El consenso general fue que, si bien no \u00e9tica, no se consider\u00f3 una violaci\u00f3n. El asunto fue aclarado cuando la licencia fue modificada para exigir que tuviera que estar disponible la versi\u00f3n \u00abpreferida\u00bb del c\u00f3digo fuente.[38]\u200b"}, {"name": "Licencias y temas contractuales", "text": "GPL fue dise\u00f1ado orientado m\u00e1s a una licencia que a un contrato.[39]\u200b[40]\u200b En algunas jurisdicciones, la distinci\u00f3n legal entre una licencia y un contrato es muy importante: los contratos son ejecutables por la ley de contratos, mientras que las licencias se aplican en virtud del derecho de autor. Sin embargo, esta distinci\u00f3n no es \u00fatil en las diversas jurisdicciones en que no existen diferencias entre los contratos y licencias, como los sistemas de derecho civil.[41]\u200b\nAquellos que no aceptan los t\u00e9rminos de la GPL y sus condiciones no tienen permiso, en virtud del derecho de autor, a copiar o distribuir software con la GPL o trabajos derivados. Sin embargo, si no redistribuyen el programa, pueden utilizar el software en su organizaci\u00f3n a su gusto, y estas obras (incluidos los programas) construidas bajo este uso no requieren estar bajo esta licencia."}, {"name": "Propietarios del copyright", "text": "El texto que compone la GPL es en s\u00ed est\u00e1 protegido bajo copyright y es propiedad de la FSF. Sin embargo, la FSF no es titular del derecho de autor de una obra publicada bajo la GPL, a menos que el autor asigne expl\u00edcitamente los derechos de autor a la FSF (que rara vez sucede con excepci\u00f3n de los programas que forman parte del proyecto GNU). Solo los titulares de los derechos individuales tienen la autoridad para demandar una violaci\u00f3n de la licencia cuando se lleva a cabo.\nLa FSF permite al p\u00fablico crear nuevas licencias basadas en la GPL, siempre y cuando las licencias derivadas no utilicen GPL sin permiso. Esto no se recomienda, ya que tal licencia puede ser incompatible con la GPL.\nOtras licencias creadas por el proyecto GNU incluyen la GNU Lesser General Public License y la GNU Free Documentation License."}]}, {"name": "Compatibilidad y licencias m\u00faltiples", "text": "C\u00f3digo licenciado bajo varias licencias puede ser combinado con programas con licencias GPL sin conflictos, siempre que la combinaci\u00f3n de restricciones del trabajo en su conjunto no ponga ninguna restricci\u00f3n adicional m\u00e1s all\u00e1 de lo permitido por la GPL.[42]\u200b Adem\u00e1s de los t\u00e9rminos regulares de la GPL, hay restricciones y permisos adicionales que se pueden aplicar:\nSi se quiere combinar c\u00f3digo bajo diferentes versiones de GPL, se puede hacer si el c\u00f3digo con la versi\u00f3n m\u00e1s antigua de GPL incluye la declaraci\u00f3n \u201ccualquier versi\u00f3n posterior\u201d.[43]\u200b\nC\u00f3digo bajo LGPL puede ser vinculado con cualquier otro c\u00f3digo, no importa que licencia tenga ese c\u00f3digo.[44]\u200b C\u00f3digo bajo LGPLv2 sin la declaraci\u00f3n \u201ccualquier versi\u00f3n posterior\u201d puede ser relicenciado si el trabajo al completo se licencia con una GPLv2 o una GPLv3.[45]\u200b\nLa FSF mantiene una lista[46]\u200b de las licencias de software libre GPL-compatibles[47]\u200b[48]\u200b con muchas de las licencias de software libre m\u00e1s comunes, como la licencia original MIT/X la licencia BSD (en su forma actual de tres cl\u00e1usulas) y la licencia Artistic 2.0.[49]\u200b\nDavid A. Wheeler ha abogado a los desarrolladores de software libre/abierto a que usen solo licencias GPL-compatibles, porque hacerlo de otra manera hace m\u00e1s dif\u00edcil para los dem\u00e1s la participaci\u00f3n y la contribuci\u00f3n al c\u00f3digo.[50]\u200b Como ejemplo espec\u00edfico de incompatibilidad, ZFS de Sun Microsystems no puede ser incluido en la GPL del n\u00facleo Linux, porque este est\u00e1 bajo una GPL-incompatible CDDL. Adem\u00e1s, ZFS est\u00e1 protegido por patentes, as\u00ed que la distribuci\u00f3n independiente desarrollada por una implementaci\u00f3n GPL requerir\u00eda el permiso de Oracle.[51]\u200b\nVarias empresas usan licencias m\u00faltiples para distribuir una versi\u00f3n GPL y vender una propietaria a otras compa\u00f1\u00edas que quieran combinar el paquete de c\u00f3digo con c\u00f3digo propietario, usando una vinculaci\u00f3n din\u00e1mica o no. Ejemplos de estas compa\u00f1\u00edas incluyen MySQL AB, Digia PLC (Qt framework, antes del 2011 de Nokia), Red Hat (Cygwin) y RiverBank Computing (PyQt). Otras compa\u00f1\u00edas, como Mozilla Foundation (algunos de sus productos incluyen Mozilla Application Suite, Mozilla Thunderbird y Mozilla firefox), usan licencias m\u00faltiples para distribuir versiones bajo GPL y otras licencias de c\u00f3digo abierto.", "subsections": []}, {"name": "Validez legal", "text": "La GPL, al ser un documento que cede ciertos derechos al usuario, asume la forma de un contrato, por lo que usualmente se la denomina contrato de licencia o acuerdo de licencia.[52]\u200b[53]\u200b En los pa\u00edses de tradici\u00f3n anglosajona existe una distinci\u00f3n doctrinal entre licencias y contratos, pero esto no ocurre en los pa\u00edses de tradici\u00f3n civil o continental. Como contrato, la GPL debe cumplir los requisitos legales de formaci\u00f3n contractual en cada jurisdicci\u00f3n.\nLa licencia ha sido reconocida, entre otros,[54]\u200b por juzgados en Alemania, particularmente en el caso de una sentencia en un tribunal de M\u00fanich,[55]\u200b lo que indica positivamente su validez en jurisdicciones de derecho civil.", "subsections": []}, {"name": "Adopci\u00f3n", "text": "El software bajo la GPL puede ser aplicado bajo todos los prop\u00f3sitos, incluidos los prop\u00f3sitos comerciales e incluso como herramienta de creaci\u00f3n de software propietario. En uso puramente privativo (o interno), sin ventas ni distribuciones implicadas, el software puede ser modificado sin liberar el c\u00f3digo fuente pero, de lo contrario, el c\u00f3digo fuente y cualquier cambio realizado en \u00e9l debe estar disponible para los usuarios, ya que en este caso los derechos del usuario est\u00e1n protegidos por copyleft. De esta forma, las aplicaciones instaladas en sistemas operativos prominentes bajo la GPL como Linux y tambi\u00e9n el GNU Compiler Collection, no es necesario que est\u00e9n licenciadas bajo la GPL o que est\u00e9n distribuidas con su c\u00f3digo fuente disponible ya que las licencias no dependen de la plataforma. Por ejemplo, si un programa est\u00e1 formado completamente por c\u00f3digo original, o si est\u00e1 combinado con software que no cumple los requisitos de copyleft no es necesario que se licencie bajo la GPL o que se distribuya con su c\u00f3digo fuente disponible. Solo si un programa utiliza fragmentos de c\u00f3digo GPL (y el programa es distribuido) el c\u00f3digo fuente en su totalidad debe estar disponible, bajo la misma licencia. La otra licencia de GNU, LGPL (GNU Lesser General Public License) fue creada para tener derechos menos restrictivos que GPL, por lo que en este caso en un programa que utiliza fragmentos de c\u00f3digo LGPL, no es necesario liberar el c\u00f3digo original. Algunos otros programas de software libre (como ejemplo prominente esta MySQL) son de doble licencia bajo varias licencias, a menudo con uno de los certificados que son la GPL.", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": " Portal:Software libre. Contenido relacionado con Software libre.\nRichard Stallman\nEben Moglen\nGNU LGPL\nAffero General Public License\nCopyleft\nLicencia Creative Commons\nSoftware libre y de c\u00f3digo abierto\nAnti-copyright\nLicencia dual\nEuropean Union Public License (EUPL)\nLicencia de software", "subsections": []}, {"name": "Notas", "text": "\u2191 A excepci\u00f3n de software licenciado bajo licencias compatibles con la GPLv3.[5]\u200b", "subsections": []}, {"name": "Referencias", "text": "\u2191 \u00abDebian \u2013 License information\u00bb. Software in the Public Interest, Inc. Consultado el 10 de diciembre de 2009.\u00a0\n\u2191 a b \u00abLicenses \u2013 Free Software Foundation\u00bb. Free Software Foundation. Archivado desde el original el 11 de julio de 2007. Consultado el 10 de diciembre de 2009.\u00a0\n\u2191 \u00abLicenses by Name\u00bb. Open Source Initiative. Consultado el 10 de diciembre de 2009.\u00a0\n\u2191 \u00abCopyleft: Pragmatic Idealism \u2013 Free Software Foundation\u00bb. Free Software Foundation. Consultado el 10 de diciembre de 2009.\u00a0\n\u2191 \u00abIf a library is released under the GPL (not the LGPL)\u00bb. Free Software Foundation.\u00a0\n\u2191 \u00abOpen Source License Data\u00bb. Archivado desde el original el 22 de febrero de 2018. Consultado el 24 de abril de 2018.\u00a0\n\u2191 GPL FAQ: Does using the GPL for a program make it GNU Software?\n\u2191 \u00abWhy the GPL rocketed Linux to success\u00bb. \u00abSo while the BSDs have lost energy every time a company gets involved, the GPL'ed programs gain every time a company gets involved.\u00bb\u00a0\n\u2191 \u00abWhy the GPL rocketed Linux to success\u00bb (en ingl\u00e9s). Consultado el 2 de abril de 2014. \u00abSo while the BSDs have lost energy every time a company gets involved, the GPL'ed programs gain every time a company gets involved.\u00bb\u00a0\n\u2191 \u00abThe History of the GPL\u00bb. Consultado el 24 de noviembre de 2011.\u00a0\n\u2191 \u00abWhy Upgrade to GPL Version 3\u00bb (en ingl\u00e9s). Fsf.org. 13 de marzo de 2003. Consultado el 17 de marzo de 2011.\u00a0\n\u2191 \u00abTop 20 licenses\u00bb. Black Duck Software. 19 de noviembre de 2015. Archivado desde el original el 19 de julio de 2016. Consultado el 19 de noviembre de 2015. \u00ab1. MIT license 24%, 2. GNU General Public License (GPL) 2.0 23%, 3. Apache License 16%, 4. GNU General Public License (GPL) 3.0 9%, 5. BSD License 2.0 (3-clause, New or Revised) License 6%, 6. GNU Lesser General Public License (LGPL) 2.1 5%, 7. Artistic License (Perl) 4%, 8. GNU Lesser General Public License (LGPL) 3.0 2%, 9. Microsoft Public License 2%, 10. Eclipse Public License (EPL) 2%\u00bb.\u00a0\n\u2191 David A. Wheeler. \u00abMake Your Open Source Software GPL-Compatible. Or Else\u00bb.\u00a0\n\u2191 David A. Wheeler. \u00abEstimating Linux's Size\u00bb.\u00a0\n\u2191 \u00abFreecode's statistics page\u00bb. Archivado desde el original el 28 de agosto de 2008. \u00abGPL 60.5%, lGPLv2 6.9%, GPLv2 1.9% GPLv3 1.6%\u00bb.\u00a0\n\u2191 Asay, Matt (23 de julio de 2009). \u00abGPLv3 hits 50 percent adoption | The Open Road - CNET News\u00bb. News.cnet.com. Archivado desde el original el 29 de octubre de 2013. Consultado el 2 de septiembre de 2013.\u00a0\n\u2191 License proliferation: a naive quantitative analysis on lwn.net \"Walter van Holst is a legal consultant at the Dutch IT consulting company mitopics. .[...] Walter instead chose to use data from a software index, namely Freecode [...] Walter's 2009 data set consisted of 38,674 projects [...]The final column in the table shows the number of projects licensed under \"any version of the GPL\". In addition, Walter presented pie charts that showed the proportion of projects under various common licenses. Notable in those data sets was that, whereas in 2009 the proportion of projects licensed GPLv2-only and GPLv3 was respectively 3% and 2%, by 2013, those numbers had risen to 7% and 5%.\"\n\u2191 \u00abTop 20 licenses\u00bb. Black Duck Software. 23 de agosto de 2013. Archivado desde el original el 19 de julio de 2016. Consultado el 23 de agosto de 2013. \u00ab1. GNU General Public License (GPL) 2.0 33%, 2. Apache License 13%, 3. GNU General Public License (GPL) 3.0 12%\u00bb.\u00a0\n\u2191 \u00abGNU General Public License, version 1\u00bb (en ingl\u00e9s). Consultado el 2 de abril de 2014.\u00a0\n\u2191 \u00abNew General Public License\u00bb. 25 de febrero de 1989. Consultado el 2 de abril de 2014.\u00a0\n\u2191 \u00abTranscripci\u00f3n de la presentaci\u00f3n de Richard Stallman en la 2da Conferencia Internacional GPLv3, 21 de abril de 2006\u00bb. Consultado el 2 de abril de 2014.\u00a0\n\u2191 \u00abEl Proyecto GNU\u00bb. 14 de marzo de 2014. Consultado el 2 de abril de 2014.\u00a0\n\u2191 a b Stallman, Richard (25 de febrero de 2006). \u00abPresentation in Brussels, Belgium\u2014the first day of that year's FOSDEM conference.\u00bb.\u00a0\n\u2191 \u00abInterview with Richard Stallman\u00bb. Free Software Magazine (en ingl\u00e9s). 23 de enero de 2008. Archivado desde el original el 20 de noviembre de 2017. Consultado el 2 de abril de 2014.\u00a0\n\u2191 \u00abNeutralizing Laws That Prohibit Free Software But Not Forbidding DRM\u00bb (en ingl\u00e9s). Free Software Foundation. Consultado el 2 de abril de 2014.\u00a0\n\u2191 \u00abGPLv3: Creando la 3\u00aa versi\u00f3n de la General Public License de GNU\u00bb. Free Software Foundation Europe. Consultado el 2 de abril de 2014.\u00a0\n\u2191 \u00abgplv3.fsf.org comments for discussion draft 4\u00bb. Archivado desde el original el 2 de octubre de 2008. Consultado el 2 de abril de 2014.\u00a0\n\u2191 \u00abgplv3.fsf.org comments for draft 1\u00bb. Archivado desde el original el 26 de junio de 2008. Consultado el 11 de enero de 2013. \u00abShowing comments in file 'gplv3-draft-1' [...] found 962\u00bb.\u00a0\n\u2191 \u00abgplv3.fsf.org comments for draft 2\u00bb. Archivado desde el original el 24 de julio de 2008. Consultado el 11 de enero de 2013. \u00abShowing comments in file 'gplv3-draft-1' [...] found 727\u00bb.\u00a0\n\u2191 \u00abgplv3.fsf.org comments for draft 3\u00bb. Archivado desde el original el 3 de julio de 2008. Consultado el 11 de enero de 2013. \u00abShowing comments in file 'gplv3-draft-3' [...] found 649\u00bb.\u00a0\n\u2191 \u00abgplv3.fsf.org comments for draft 4\u00bb. Archivado desde el original el 2 de octubre de 2008. Consultado el 11 de enero de 2013. \u00abShowing comments in file 'gplv3-draft-4' [...] found 298\u00bb.\u00a0\n\u2191 \u00abGuide to the third draft of GPLv3\u00bb (en ingl\u00e9s). 29 de junio de 2007. Consultado el 2 de abril de 2014.\u00a0\n\u2191 \u00abFinal Discussion Draft\u00bb. Consultado el 4 de junio de 2007.\u00a0\n\u2191 \u00abGPL version 3 FAQ\u00bb. Consultado el 4 de junio de 2007.\u00a0\n\u2191 \u00abFourth Discussion Draft Rationale\u00bb. Consultado el 4 de junio de 2007.\u00a0\n\u2191 \u00abKernel developers' position on GPLv3\u00bb. LWN.net. Consultado el 4 de junio de 2007.\u00a0\n\u2191 \u00abSelling Free Software\u00bb. Free Software Foundation.\u00a0\n\u2191 \u00abReasoning behind the \"preferred form\" language in the GPL\u00bb. LWN.net. 7 de marzo de 2011.\u00a0\n\u2191 \u00abEssay by Stallman explaining why a license is more suitable than a contract\u00bb.\u00a0\n\u2191 \u00abEben Moglen explaining why the GPL is a license and why it matters\u00bb.\u00a0\n\u2191 Guadamuz-Gonzalez, Andres (2004). \u00abViral contracts or unenforceable documents? Contractual validity of copyleft licenses\u00bb. European Intellectual Property Review 26 (8): 331-339.\u00a0\n\u2191 \u00abThe GNU General Public License v3.0 \u2013 GNU Project \u2013 Free Software Foundation (FSF)\u00bb. fsf.org. Consultado el 24 de marzo de 2010.\u00a0\n\u2191 \u00abFrequently Asked Questions about the GNU Licenses \u2013 Is GPLv3 compatible with GPLv2?\u00bb. The official site. Consultado el 13 de abril de 2011.\u00a0\n\u2191 \u00abGNU Lesser General Public License v2.1 \u2013 GNU Project \u2013 Free Software Foundation (FSF)\u00bb. fsf.org. Consultado el 26 de abril de 2011.\u00a0\n\u2191 \u00abFrequently Asked Questions about the GNU Licenses \u2013 How are the various GNU licenses compatible with each other?\u00bb. The official site. Consultado el 13 de abril de 2011.\u00a0\n\u2191 \u00abVarious licenses with comments \u2013 GPL-Compatible Free Software Licenses\u00bb. FSF. Consultado el 20 de abril de 2012.\u00a0\n\u2191 \u00abFrequently Asked Questions about the GNU Licenses \u2013 What does it mean to say that two licenses are \"compatible\"?\u00bb. FSF. Consultado el 14 de abril de 2011.\u00a0\n\u2191 \u00abFrequently Asked Questions about the GNU Licenses \u2013 What does it mean to say a license is \"compatible with the GPL?\"\u00bb. FSF. Consultado el 14 de abril de 2011.\u00a0\n\u2191 \u00abBlack Duck Open Source Resource Center\u00bb. blackducksoftware.com. Archivado desde el original el 14 de octubre de 2012. Consultado el 26 de abril de 2011.\u00a0\n\u2191 \u00abMake Your Open Source Software GPL-Compatible. Or Else.\u00bb. David A. Wheeler. Consultado el 26 de abril de 2011.\u00a0\n\u2191 Linux: ZFS, Licenses and Patents | KernelTrap\n\u2191 OMPI (1994). Glosario de Derechos de Autor y Derechos Conexos. Ginebra: World Intellectual Property Organization. p.\u00a0145.\u00a0\n\u2191 Roncero S\u00e1nchez, Antonio (1999). El Contrato de Licencia de Marca. Madrid: Civitas. p.\u00a064.\u00a0\n\u2191 Web que recopila violaciones de la GPL denunciadas\n\u2191 H\u00f6ppner, Julian (2004). \u00abThe GPL prevails: An analysis of the first-ever Court decision on the validity and effectivity of the GPL\u00bb. SCRIPT-ed 1 (4): 628. doi:10.2966/scrip.010304.628. Archivado desde el original el 29 de octubre de 2007.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": "GPL en ingl\u00e9s (oficial)\nLista de traducciones no oficiales de la GPL a diversos idiomas\nTraducci\u00f3n no oficial del primer borrador de la GPL v3\nLicencias compatibles e incompatibles con la GPL\nTraducci\u00f3n no oficial de la GPL al castellano\nTraducciones no oficiales al espa\u00f1ol de la GPL\nAn\u00e1lisis de la GPLv3\nDise\u00f1o de logos alternativos de las licencias GPLv3 (.svg) por Christian Cadena(CC BY 3.0", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/GTK", "title": "GTK", "summary": "GTK (conocido hasta febrero de 2019 como GTK+)[1]\u200b[2]\u200b o The GIMP Toolkit[3]\u200b[4]\u200b:\u200a3\u200a es una biblioteca de componentes gr\u00e1ficos multiplataforma para desarrollar interfaces gr\u00e1ficas de usuario (GUI).[5]\u200b[4]\u200b:\u200a3\u200a Est\u00e1 licenciado bajo los t\u00e9rminos de la GNU LGPL,[5]\u200b por lo que permite la creaci\u00f3n de tanto software libre como software privativo. GTK es parte del proyecto GNU,[5]\u200b siendo usado por proyectos tan importantes como GIMP, Inkscape, GNOME, Xfce, entre otros.\nJunto a Qt, es uno de los kit de herramientas de widgets m\u00e1s popular para el sistema operativo GNU/Linux, teniendo un amplio soporte para Wayland y XOrg. Adem\u00e1s, se puede emplear para desarrollar aplicaciones gr\u00e1ficas que funcionen sobre otros sistemas Unix-like o sistemas operativos como Microsoft Windows, Mac OS, entre otros.", "sections": [{"name": "Historia y Desarrollo", "text": "Fue desarrollada inicialmente por Peter Mattis, Spencer Kimball y Josh MacDonald[3]\u200b[4]\u200b:\u200a3\u200a para implementar la interfaz gr\u00e1fica del programa de Manipulaci\u00f3n de Im\u00e1genes de GNU (GIMP) como reemplazo del kit de herramientas Motif; en alg\u00fan momento Peter Mattis se desencant\u00f3 con Motif y comenz\u00f3 a escribir su propio kit de herramientas GUI llamado GIMP toolkit, reemplazando con \u00e9xito Motif para la versi\u00f3n 0.60 de GIMP. Finalmente, GTK fue reescrito para ser orientado a objetos y pas\u00f3 a llamarse GTK+, haci\u00e9ndose uso de esto por primera vez en la versi\u00f3n 0.99 de GIMP. Siendo la primera versi\u00f3n estable de GTK lanzada el 14 de abril de 1998.[6]\u200b\nGTK est\u00e1 escrito en lenguaje C, y es principalmente desarrollado por el Proyecto GNOME,[7]\u200b ya que en 1997 este proyecto escoge GTK como base sobre la cual desarrollar el entorno de escritorio GNOME.[8]\u200b Otras aplicaciones gr\u00e1ficas no directamente relacionadas con GNOME tambi\u00e9n han empleado GTK. Adem\u00e1s de otros entornos gr\u00e1ficos para Linux como XFCE y ROX han elegido tambi\u00e9n GTK como su biblioteca de componentes gr\u00e1ficos.\nEl desarrollo de GTK se maneja libremente. La discusi\u00f3n ocurre principalmente en varias listas de correo p\u00fablicas.[9]\u200b Los desarrolladores y usuarios de GNOME se re\u00fanen en una reuni\u00f3n anual GNOME Users And Developers European Conference GUADEC para discutir el estado actual y la direcci\u00f3n futura de GNOME.[10]\u200b GNOME incorpora est\u00e1ndares y programas de freedesktop.org para interactuar mejor con otros escritorios.", "subsections": [{"name": "GTK+ 1", "text": "Esta biblioteca conten\u00eda algunas rutinas de ayuda para resolver tareas b\u00e1sicas de programaci\u00f3n, como el almacenamiento de diversos datos. Estos requieren mucho tiempo para el programador, especialmente cuando se trata del desarrollo repetido de programas. Las primeras versiones de GTK inclu\u00edan estructuras de datos para listas vinculadas, \u00e1rboles binarios o cadenas \"en crecimiento\". Adem\u00e1s, ya que fue reescrito para ser orientado a objetos, GTK permite usar este paradigma de programaci\u00f3n dentro del lenguaje C. Estas herramientas tambi\u00e9n resultaron \u00fatiles para programas sin una interfaz gr\u00e1fica de usuario y por lo tanto m\u00e1s tarde se trasladaron a una biblioteca separada, llamada biblioteca GLib de funciones C. El sistema orientado a objetos en la siguiente versi\u00f3n se relevo a la biblioteca GObject, los m\u00e9todos de dibujo orientados al sistema a la biblioteca GDK (GTK + Kit de dibujo). Este \u00faltimo permite que GTK se ejecute de forma id\u00e9ntica en plataformas en Windows, X Window System, macOS , entre otros."}, {"name": "GTK+ 2", "text": "La versi\u00f3n GTK 2 recibi\u00f3 nuevas funciones mejoradas para renderizar texto usando la biblioteca Pango, la creaci\u00f3n de GObject, un nuevo motor de temas, una API m\u00e1s flexible y una biblioteca novedosa (ATK) para mejorar la accesibilidad del kit de herramientas para personas discapacitadas, por ejemplo, se puede abordar el software de lectura, las herramientas de aumento y los dispositivos de entrada alternativos. GTK 2 no es compatible con GTK 1, por lo que las aplicaciones existentes tuvieron que ser portadas.\nA partir de la versi\u00f3n 2.8, GTK + usa la biblioteca Cairo basada en vectores, que usa aceleraci\u00f3n de hardware para renderizar si es posible. GTK 2.24 es la \u00faltima versi\u00f3n de la serie 2.x."}, {"name": "GTK 3", "text": "La versi\u00f3n 3.0 fue lanzada el 10 de febrero de 2011.[11]\u200b Muchas funciones que se clasificaron como obsoletas se han eliminado y se han mejorado las interfaces existentes. GTK 3 no es compatible con versiones anteriores de GTK 2.x. Sin embargo, las bibliotecas de ambas versiones se pueden instalar en paralelo.\nLa serie GTK 3 incluye una nueva interfaz para dibujar widgets, que ahora est\u00e1 completamente basada en Cairo, un motor de temas basado en CSS que tambi\u00e9n permite transiciones de estado animadas, opciones de dise\u00f1o mejoradas, un nuevo widget de interruptor deslizante, una clase de aplicaci\u00f3n, soporte para m\u00faltiples dispositivos se\u00f1aladores (punteros m\u00faltiples) e iconos simb\u00f3licos eso puede cambiar de color seg\u00fan la condici\u00f3n. Las estructuras internas se han separado y ocultado de la interfaz p\u00fablica, por lo que ser\u00e1 m\u00e1s f\u00e1cil realizar cambios en el futuro sin tener que romper la interfaz. Adem\u00e1s, se admiten m\u00faltiples backends GDK simult\u00e1neamente dentro de la misma biblioteca.[12]\u200b Hasta ahora, varias bibliotecas eran necesarias.\nSe introdujeron dos nuevos backends: uno para el servidor de visualizaci\u00f3n Wayland y un back-end HTML5 llamado Broadway, con el que las aplicaciones GTK pueden operarse de forma remota en el navegador a trav\u00e9s de la red.[13]\u200b Se admite el desplazamiento m\u00faltiple y suave, que tambi\u00e9n est\u00e1 disponible para Windows,[14]\u200b adem\u00e1s, se admite animaciones CSS y difuminaci\u00f3n de sombras. La versi\u00f3n 3.6.4 es la \u00faltima versi\u00f3n oficial para Windows de 32 bits y 64 bits.[15]\u200b\nExisten m\u00e1s cambios como la mejora de la visualizaci\u00f3n de los monitores de alta resoluci\u00f3n.[16]\u200b La presentaci\u00f3n de Popover (burbujas de discurso c\u00f3micas que se pueden usar como ayuda),[17]\u200b se admite gestos multit\u00e1ctiles.[18]\u200b[19]\u200b Adem\u00e1s, se admite la representaci\u00f3n de ventanas a trav\u00e9s de OpenGL. El nuevo elemento de control GtkGLArea tambi\u00e9n permiti\u00f3 integrar objetos 3D directamente en las interfaces del programa.[20]\u200b[21]\u200b Desde GTK 3.18 (base de Gnome 3.18), la biblioteca es oficialmente compatible con Wayland, el sucesor del sistema X Windows.[22]\u200b GTK 3.20 integra el corrector ortogr\u00e1fico con gspell y mejora la tem\u00e1tica CSS. Mientras que GTK 3.22 se presenta como una versi\u00f3n LTS y a\u00f1ade soporte a portales Flatpak para instalaciones de software simples.[23]\u200b\nEl 1 de septiembre de 2016, una publicaci\u00f3n en el blog de desarrollo de GTK denot\u00f3, entre otras cosas, el futuro esquema de numeraci\u00f3n de GTK.[24]\u200b La versi\u00f3n 3.22 de GTK del oto\u00f1o de 2016 ser\u00e1 la \u00faltima versi\u00f3n 3.x (o al menos eso era lo planeado).[25]\u200b Despu\u00e9s de eso, todos los recursos se trasladar\u00e1n a la serie de desarrollo GTK 4 con los nombres de versi\u00f3n 3.90, 3.92, etc. Incluso cuando la serie 4.x entre en desarrollo, las aplicaciones notables a\u00fan usan GTK 2.x y no se han portado a 3.22. Con respecto al futuro del software heredado que usa GTK, no existe un proyecto colectivo para portar el software GTK 2.x a 3.22.\nGTK 4.0 se est\u00e1 preparando con la serie inestable 3.9x. En marzo de 2017, se agreg\u00f3 el Scene Graph Kit (GSK) con la versi\u00f3n 3.90. Implementa un gr\u00e1fico de escena y se encarga de la s\u00edntesis de im\u00e1genes. En febrero de 2019 se anunci\u00f3 que GTK 4.0 eliminar\u00e1 el signo m\u00e1s (\"+\") de la parte del nombre.[1]\u200b"}, {"name": "GTK 4", "text": "Una de las principales novedades implementadas durante el ciclo de desarrollo de GTK 4 (es decir, GTK 3.92, etc.) ha sido la delegaci\u00f3n de funcionalidad a objetos auxiliares en lugar de codificarla en las clases base proporcionadas por GTK.\nEl manejo de eventos desde los controladores de se\u00f1ales descritos por GtkWidget se delega a los controladores de eventos\nLa representaci\u00f3n se delega a los objetos GtkSnapshot\nEl mecanismo de dise\u00f1o de GtkWidget se delega a GtkLayoutManager\nEl 26 de enero de 2018 en DevConf.cz, Matthias Clasen ofreci\u00f3 una visi\u00f3n general del estado actual del desarrollo de GTK 4, incluida una explicaci\u00f3n de alto nivel sobre c\u00f3mo funcionaba el renderizado y la entrada en GTK 3, qu\u00e9 cambios se estaban realizando en GTK 4, y las razones de esos cambios. Tambi\u00e9n se dieron ejemplos de cosas que se han hecho posibles con GTK 4.[26]\u200b"}, {"name": "Soporte", "text": "Windows\nDe acuerdo con GTK 2.24.10 y 3.6.4, se detuvo el desarrollo de Windows con el instalador en Gnome. Se recomienda instalar el sistema de paquetes MSYS2 de Gnome en Windows.\nGTK 2.24.10 y 3.6.4 todav\u00eda est\u00e1n disponibles en la red, sin embargo, en comparaci\u00f3n con las versiones actuales en Linux, est\u00e1n mucho m\u00e1s afectados por los errores.[27]\u200b[28]\u200b\nPara Windows de 64 bits (a partir de junio de 2018), el trabajo de Tom Schoonjans 2.24.32 (actual como Linux) y 3.22.30 (actual como Linux) ya est\u00e1 disponible.[29]\u200b\nCon Windows 10 Fall Creators Update, GTK 3 ahora tambi\u00e9n est\u00e1 disponible en WSL. Las instrucciones para instalar programas con Windows est\u00e1n disponibles en la comunidad GTK.[30]\u200b Con distribuciones de Linux como Ubuntu o Debian disponibles en la Tienda Windows y un servidor X como Xming o VcXsvr, miles de programas como GTK 2 o 3 pueden ejecutarse con X o soporte de terminal.\nmacOS\nSobre el backend Quartz,[31]\u200b un puerto del sistema X Window, GTK puede usarse en macOS ."}, {"name": "Automatizaci\u00f3n de compilaci\u00f3n", "text": "Anteriormente, GTK (y GNOME, GLib, etc.) utilizaban el sistema de compilaci\u00f3n GNU (denominado Autotools) como el sistema de automatizaci\u00f3n de compilaci\u00f3n elegido.\nDesde el 14 de agosto de 2017, la rama maestra de GTK compila con Meson, y los archivos del sistema de compilaci\u00f3n de Autotools se han eliminado.[32]\u200b"}]}, {"name": "Bibliotecas de GTK", "text": "GTK se basa en varias bibliotecas desarrolladas por el equipo de GTK y de GNOME:", "subsections": [{"name": "GLib", "text": "Art\u00edculo principal:\nEs un conjunto de bibliotecas de bajo nivel, que comprende, GLib Core, GObject y GIO.[33]\u200b Estas bibliotecas se desarrollan todas bajo un mismo repositorio de Git, denominado glib. Por lo que \"GLib\" puede referirse a \"GLib core\" o todo el conjunto de bibliotecas.\nGLib core\nGLib core proporciona el manejo de estructura de datos para C (Listas enlazadas, \u00e1rboles, tablas hash, entre otras), envoltorios de portabilidad, bucle de eventos, subprocesos, carga din\u00e1mica de m\u00f3dulos y muchas m\u00e1s funciones.\nGObject\nGObject por su parte, simplifica los paradigmas de Programaci\u00f3n orientada a objetos y la Arquitectura dirigida por eventos para C. La Arquitectura dirigida por eventos no solo es \u00fatil para interfaces gr\u00e1ficas de usuario sino tambi\u00e9n para demonios que respondan a cambios de hardware (insertar un USB, un monitor, etc), software de red u otros procesos, puede llegar a ser de bastante utilidad.\nGIO\nGIO depende de las anteriores bibliotecas del conjunto, este proporciona un API de alto nivel para entrada y salida, ya sea la lectura de un archivo local, una secuencia de red, procesos de comunicaci\u00f3n con D-Bus y muchos usos m\u00e1s.\nEste conjunto de bibliotecas permite escribir servicios del sistema operativo, bibliotecas, utilidades de l\u00ednea de comando y mucho m\u00e1s. Por lo que puede llegar a ser m\u00e1s c\u00f3modo y recomendable escribir un programa en C haciendo uso de GLib, adem\u00e1s, ofrece una API de alto nivel como el est\u00e1ndar POSIX."}, {"name": "GTK", "text": "Biblioteca que contiene un kit de herramientas de widgets basados en GLib, este kit realmente contiene los objetos y funciones para crear la Interfaz gr\u00e1fica de usuario (GUI). Maneja widgets como ventanas, botones, men\u00fas, etiquetas, deslizadores, pesta\u00f1as, etc."}, {"name": "GDK", "text": "Biblioteca que act\u00faa como intermediario entre gr\u00e1ficos de bajo nivel y gr\u00e1ficos de alto nivel. De manera que libera a GTK de preocupaciones de bajo nivel como la recopilaci\u00f3n de entrada, arrastrar y soltar y la conversi\u00f3n de formato de p\u00edxeles. GDK es una capa intermedia que separa GTK de los detalles del sistema de ventanas.\nGDK es una parte importante de la portabilidad de GTK. Dado que GLib ya proporciona la funcionalidad multiplataforma de bajo nivel, todo lo que se necesita para hacer que GTK se ejecute en otras plataformas es portar GDK a la capa de gr\u00e1ficos del sistema operativo subyacente. Por lo tanto, los puertos GDK a la API de Windows y Quartz son los que permiten que las aplicaciones GTK se ejecuten en Windows y macOS, respectivamente."}, {"name": "ATK", "text": "Biblioteca para crear interfaces con caracter\u00edsticas de una gran accesibilidad muy importante para personas discapacitadas o minusv\u00e1lidos. Pueden usarse utiler\u00edas como lupas de aumento, lectores de pantalla, o entradas de datos alternativas al cl\u00e1sico teclado o rat\u00f3n."}, {"name": "Pango", "text": "Biblioteca para el dise\u00f1o y renderizado de texto, hace hincapi\u00e9 especialmente en la internacionalizaci\u00f3n. Est\u00e1 dise\u00f1ado de forma modular, esto significa que Pango puede ser usado por aplicaciones de diferentes arquitecturas o metodolog\u00edas de programaci\u00f3n. Adem\u00e1s, es el n\u00facleo para manejar las fuentes y el texto de la versi\u00f3n 2 de GTK."}, {"name": "Cairo", "text": "Biblioteca de renderizado avanzado de controles de aplicaci\u00f3n. usada para proporcionar im\u00e1genes basadas en gr\u00e1ficos vectoriales. Adem\u00e1s, proporciona primitivas para el dibujo bidimensional a trav\u00e9s de una serie de backends diferentes."}]}, {"name": "Dise\u00f1adores de interfaces gr\u00e1ficas (GUI)", "text": "Algunos de los programas para dise\u00f1o de interfaces gr\u00e1ficas con GTK son los siguientes:", "subsections": [{"name": "Glade", "text": "Es una herramienta de desarrollo visual de interfaces gr\u00e1ficas mediante GTK/GNOME. Es independiente del lenguaje de programaci\u00f3n y predeterminadamente no genera c\u00f3digo fuente sino un archivo XML gracias a GTKBuilder, que puede ser usado en numerosos lenguajes de programaci\u00f3n incluyendo C, C++, C#, Vala, Java, Perl, Python. La posibilidad de generar autom\u00e1ticamente c\u00f3digo fuente fue descontinuada desde la versi\u00f3n 3 de Glade.\nDe manera m\u00e1s t\u00e9cnica la clase describe la interfaz en un archivo de Lenguaje de marcado extensible (XML) y luego carga la descripci\u00f3n XML en tiempo de ejecuci\u00f3n y crea los objetos autom\u00e1ticamente. Glade Interface Designer permite la creaci\u00f3n de la interfaz de usuario de manera WYSIWYG. Por lo que la descripci\u00f3n de la interfaz de usuario es independiente del lenguaje de programaci\u00f3n utilizado.\nGlade puede ser utilizado de manera directa, pero tambi\u00e9n est\u00e1 totalmente integrado en Anjuta 2. El proyecto se encuentra bajo la licencia GPL."}, {"name": "Stetic", "text": "Parte de MonoDevelop, orientado al trabajo con GTK#, Stetic es muy similar a Glade Interface Designer, pero est\u00e1 integrado en MonoDevelop con funciones como arrastrar y soltar. Ha sido criticado por ser m\u00e1s dif\u00edcil de trabajar que Qt Designer y Microsoft Visual Studio Windows Forms Editor cuando el programador a\u00fan no tiene un dise\u00f1o concreto en mente.\nMonoDevelop puede ejecutarse en las distintas distribuciones de Linux y en Mac. Desde la versi\u00f3n 2.2, MonoDevelop ya cuenta con soporte completo para GNU/Linux, Windows y Mac. Adem\u00e1s, incluye un compilador que admite C # 1.0, C # 2.0, C # 3.0, C # 4.0, C # 5.0 y C # 6.0."}]}, {"name": "Uso", "text": "", "subsections": [{"name": "Aplicaciones", "text": "Editor de imagenes GIMP 2.10.8.\nEditor de gr\u00e1ficos vectoriales Inkscape 1.0.\nEditor de v\u00eddeo Pitivi.\nCliente para la red BitTorrent Transmission 2.92.\nAlgunas aplicaciones que usan GTK para desarrollar sus interfaces de usuario incluyen:\nAbiWord - Procesador de textos.\nCinePaint (ex FilmGimp) - Editor de gr\u00e1ficos animados en HDR.\nEkiga (ex GnomeMeeting) - Software telef\u00f3nico VoIP H.323/SIP.\nEvolution - Cliente de correo electr\u00f3nico.\nFirefox - Navegador web.\nGeany\u00a0: un editor de texto IDE y GTK multiplataforma ligero basado en Scintilla .\nGIMP - Editor de gr\u00e1ficos.\nGNU Emacs puede usar GTK cuando se ejecuta en X.\nGnumeric - Programa de hoja de c\u00e1lculo.\nChromium - Navegador Web basado en WebKit y desarrollado en gran medida por Google.\nGRAMPS - Software de genealog\u00eda.\nInkscape - Editor de gr\u00e1ficos vectoriales SVG.\nK-3D - Programa de modelado 3D libre.\nLiVES - Editor de video\nMarionnet - Un simulador de red interactivo.\nMidori - Navegador Web ligero, forma parte del proyecto XFCE.\nNero Linux - Un programa para la edici\u00f3n de discos.\nPidgin - Cliente de mensajer\u00eda instant\u00e1nea.\nVMware Player - M\u00e1quina virtual.\nWireshark - Capturador y analizador de paquetes de redes computacionales."}, {"name": "Entornos que utilizan GTK", "text": "Escritorio GNOME 3.36.3\nelementary OS Hera\nEscritorio XFCE 4.14\nEscritorio Cinnamon 4.4.8\nEscritorio MATE 1.20\nActivos\nGNOME, est\u00e1 basado en GTK 3, junto a los programas del entorno\nXfce, est\u00e1 basado en GTK 3\nCinnamon, una bifurcaci\u00f3n de GNOME 3 que usa GTK 3\nMATE, una bifurcaci\u00f3n de GNOME 2 y utiliza GTK 3 desde la versi\u00f3n 1.18\nPantheon, usa GTK 3 exclusivamente, desarrollado por Elementary OS\nBudgie construido desde cero para el sucesor de SolusOS, el sistema operativo Solus\nSugar un entorno de escritorio para la educaci\u00f3n primaria juvenil, que utiliza GTK, especialmente PyGTK\nPhosh, una interfaz de usuario m\u00f3vil dise\u00f1ada para PureOS\nOne Laptop Per Child usa GTK y PyGTK\nMaemo (Nokia's Internet-tablet framework)\nInactivos\nUnity , el antiguo entorno de escritorio predeterminado de Ubuntu\nLXDE, est\u00e1 basado en GTK, significa \"Lightweight X11 Desktop Environment\"\nROX Desktop un escritorio ligero, con caracter\u00edsticas de la GUI de RISC OS\nGPE Palmtop Environment\nAccess Linux Platform (sucesor de la plataforma Palm OS PDA)\nLos entornos de escritorio no son necesarios para ejecutar los programas GTK. Si las bibliotecas que requiere el programa est\u00e1n instaladas, un programa GTK puede ser ejecutado por encima de otros entornos basadas en X11 como KDE o cualquier otro entorno, lo que incluye Mac OS X, si X11.app est\u00e1 instalado. GTK tambi\u00e9n puede ejecutarse en Microsoft Windows, es utilizado por algunas aplicaciones populares multiplataforma como Pidgin y GIMP. wxWidgets, un toolkit gr\u00e1fico multiplataforma usa GTK en sistemas tipo Unix.[34]\u200b Algunos de los ports m\u00e1s inusuales incluyen directfb y ncurses."}, {"name": "Gestor de ventanas", "text": "IceWM\nMarco\nMetacity\nMuffin\nMutter\nSawfish\nXfwm"}]}, {"name": "Implementaciones disponibles", "text": "Dado que GTK es una biblioteca C pura, se puede vincular f\u00e1cilmente a muchos otros lenguajes de programaci\u00f3n. Con los lenguajes de programaci\u00f3n orientados a objetos, los GObjects no se usan\u00a0; los objetos GTK generalmente se pueden usar all\u00ed como objetos nativos del lenguaje de programaci\u00f3n. El lenguaje de programaci\u00f3n Vala utiliza GObject directamente como un sistema de objetos y, por lo tanto, no requiere una biblioteca en tiempo de ejecuci\u00f3n para la conexi\u00f3n del lenguaje.\nExiste una gran variedad de lenguajes de programaci\u00f3n con los cuales se puede usar GTK,[35]\u200b aunque no en todos est\u00e1 disponible en su \u00faltima versi\u00f3n. Entre los m\u00e1s usados est\u00e1n los siguientes:", "subsections": []}, {"name": "Ejemplos", "text": "La forma cl\u00e1sica de programar con GTK es definir primero las propiedades de los elementos gr\u00e1ficos utilizados, luego agruparlos y vincularlos a rutinas espec\u00edficas de manejo de eventos (un posible evento ser\u00eda hacer clic en un bot\u00f3n , por ejemplo ). Sin embargo, tambi\u00e9n hay herramientas de dise\u00f1o gr\u00e1fico para superficies GTK como Glade o Stetic contenidas en MonoDevelop , que pueden ahorrarle los dos primeros pasos, expandir GTK con capacidades de creaci\u00f3n de prototipos y hacer posible realizar cambios en la superficie de un programa sin tener que hacer cambios en el c\u00f3digo fuente del software.", "subsections": [{"name": "C", "text": "Un programa t\u00edpico de Hello World que se muestra en la imagen podr\u00eda verse as\u00ed:\n// Incluir gtk\n#include\n \n<gtk/gtk.h>\nstatic\nvoid\non_activate\n(\nGtkApplication\n*\napp\n)\n{\n  \n// Crear una nueva ventana\nGtkWidget\nwindow\n=\ngtk_application_window_new\n);\n// Crear un nuevo boton\nbutton\ngtk_button_new_with_label\n\"\u00a1Hola Wikipedia!\"\n// Cuando se hace clic en el bot\u00f3n, destruye la ventana pasada como un argumento\ng_signal_connect_swapped\n,\n\"clicked\"\nG_CALLBACK\ngtk_widget_destroy\n),\ngtk_container_add\nGTK_CONTAINER\ngtk_widget_show_all\n}\nint\nmain\nargc\nchar\nargv\n[])\n// Crear una nueva aplicaci\u00f3n\ngtk_application_new\n\"com.example.GtkApplication\"\n                                             \nG_APPLICATION_FLAGS_NONE\ng_signal_connect\n\"activate\"\non_activate\nNULL\nreturn\ng_application_run\nG_APPLICATION\nPara compilar este c\u00f3digo son necesarias algunas dependencias seg\u00fan el sistema que poseas, en caso de usar Debian o derivadas sudo apt-get install libgtk-3-dev o en caso de usar Fedora sudo dnf install gtk3-devel clutter-devel webkit2gtk3-devel libgda-devel gobject-introspection-devel.[36]\u200b Para compilar el c\u00f3digo, es necesario ubicarse en la ruta del archivo y escribir lo siguiente en una terminal\nPara ejecutar el archivo, se escribe"}, {"name": "Python", "text": "import\ngi\ngi\n.\nrequire_version\n\"Gtk\"\n\"3.0\"\nfrom\ngi.repository\nGtk\nWindow\ntitle\n\"\u00a1Hola Wikipedia!\"\nshow\n()\nconnect\n\"destroy\"\nmain_quit\nmain\nPara abrir este c\u00f3digo son necesarias algunas dependencias seg\u00fan el sistema que poseas,[37]\u200b en caso de usar Debian o derivadas sudo apt install python3-gi python3-gi-cairo gir1.2-gtk-3.0 o en caso de usar Fedora sudo dnf install python3-gobject gtk3.\nPara ejecutar el archivo, es necesario ubicarse en la ruta del archivo, luego ejecutarlo escribiendo"}]}, {"name": "Estilo gr\u00e1fico", "text": "La apariencia de GTK es en gran medida configurable por el usuario, existiendo una gran cantidad de temas para elegir. Estos temas pueden ser descargados de diferentes sitios como GNOME Look. Los siguiente son los m\u00e1s populares:", "subsections": [{"name": "Adwaita", "text": "Es el nuevo tema est\u00e1ndar de GTK desde mediados de 2014, siendo el tema sobre el que se recomienda trabajar para realizar desarrollos en interfaces gr\u00e1ficas. Esto fue expresado en una carta abierta por los desarrolladores de las aplicaciones GNOME, donde invitaban a usar el tema predeterminado (es decir Adwaita), ya que aseguraban que hacer uso de otros temas podr\u00eda traer diferencias en la percepci\u00f3n del usuario final, en un mismo programa.[38]\u200b\nAfirmando que al alterar las hojas de estilo GTK las aplicaciones podr\u00edan parecer da\u00f1adas o inutilizables, los iconos podr\u00edan representar conceptos diferentes al pensado por el programador. Tambi\u00e9n aseguraban que las capturas encontradas dentro de tiendas de software podr\u00edan enga\u00f1ar al usuario de la apariencia de la aplicaci\u00f3n, y adem\u00e1s, que podr\u00eda llegar a generar conflictos en la compresi\u00f3n de la documentaci\u00f3n para el usuario final.\nEsta propuesta fue aceptada por diferente distribuciones, las cuales adoptaron directamente Adwaita, o basaron sus temas sobre este, como es el caso de Ubuntu con su tema Yaru.[39]\u200b"}, {"name": "Yaru", "text": "Es el tema oficial de Ubuntu, posee diferentes tonalidades las cuales puede elegir el usuario. El tema se basa en Adwaita."}]}, {"name": "Cr\u00edtica", "text": "La cr\u00edtica m\u00e1s com\u00fan de GTK es la falta de compatibilidad con versiones anteriores en las principales actualizaciones, sobre todo en la interfaz de programaci\u00f3n de aplicaciones (API)[40]\u200b y temas.[41]\u200b\nBenjamin Otte explic\u00f3 que las interrupciones de compatibilidad entre lanzamientos menores durante el ciclo de desarrollo de GTK 3.x se debieron a fuertes presiones para innovar, como proporcionar las caracter\u00edsticas que los usuarios modernos esperan y apoyar el protocolo de servidor de pantalla Wayland cada vez m\u00e1s influyente. Con el lanzamiento de GTK 4, se habr\u00e1 liberado la presi\u00f3n de la necesidad de innovar y el equilibrio entre estabilidad e innovaci\u00f3n se inclinar\u00e1 hacia la estabilidad.[42]\u200b Del mismo modo, los cambios recientes en la tem\u00e1tica est\u00e1n destinados espec\u00edficamente a mejorar y estabilizar esa parte de la API, lo que significa que alguna inversi\u00f3n ahora deber\u00eda recompensarse m\u00e1s adelante.\nDirk Hohndel, desarrollador de c\u00f3digo de Subsurface y miembro del Centro de Tecnolog\u00eda de C\u00f3digo Abierto de Intel, critic\u00f3 a los desarrolladores de GTK por ser abrasivos e ignorar la mayor\u00eda de las solicitudes de la comunidad.[43]\u200b\nHong Jen Yee, desarrollador de LXDE (cuya versi\u00f3n GTK se eliminar\u00e1 y todos los esfuerzos se centraron en el puerto Qt),[44]\u200b expres\u00f3 su desd\u00e9n por la versi\u00f3n 3 de los cambios radicales de API del kit de herramientas GTK y el mayor uso de memoria, y port\u00f3 el archivo PCMan File Manager (PCManFM) a Qt. PCManFM se est\u00e1 desarrollando con un GTK y con un backend Qt al mismo tiempo.[45]\u200b\nEl reproductor de m\u00fasica Audacious se mud\u00f3 a Qt en la versi\u00f3n 3.6.[46]\u200b Las razones indicadas por los desarrolladores para esto incluyen una transici\u00f3n a las decoraciones de ventanas del lado del cliente, que seg\u00fan ellos hacen que la aplicaci\u00f3n se vea \" GNOME -y y fuera de lugar\".[47]\u200b\nWireshark ha cambiado a Qt debido a que no tiene una buena experiencia con el soporte multiplataforma de GTK.[48]\u200b", "subsections": []}, {"name": "Historial de lanzamientos", "text": "Versi\u00f3n antigua, sin servicio t\u00e9cnico:\nGtkFontSelector\nGtkPacker\nGtkItemFactory\nGtkCTree\nGtkInvisible\nGtkCalendar\nGtkLayout\nGtkPlug\nGtkSocket\nLeyenda:\nVersi\u00f3n antigua\nVersi\u00f3n antigua, con soporte t\u00e9cnico\n\u00daltima versi\u00f3n\n\u00daltima versi\u00f3n previa\nLanzamiento futuro\nSoporte general para UTF-8\nGtkFileChooser\nGtkComboBox\nGtkComboBoxEntry\nGtkExpander\nGtkFontButton\nGtkColorButton\nGtkIconView\nGtkAboutDialog\nGtkCellView\nEl \u00faltimo en admitir Windows 98/Me\nGtkStatusIcon\nGtkAssistant\nGtkLinkButton\nGtkRecentChooser\nSoporte de impresi\u00f3n: GtkPrintOperation\nAdvertencia de bloqueo de may\u00fasculas en la entrada de contrase\u00f1a\nMejoras en GtkScale, GtkStatusIcon, GtkFileChooser\nMejora en el selector de archivos, impresi\u00f3n\nPara eliminar gran parte del IPC necesario entre la aplicaci\u00f3n X11 y el servidor X11, GDK se reescribe (principalmente por Alexander Larsson) para usar \"ventanas del lado del cliente\", es decir, la ventana GdkWindow, que cada widget debe tener, pertenece ahora al cliente\nGtkSpinner\nGtkToolPalette\nGtkOffscreenWindow\nMejora en el selector de archivos, manejo del teclado, GDK\nLos datos de introspecci\u00f3n ahora se incluyen en GTK\nLa mayor\u00eda de los dibujos de GDK se basan en Cairo\nMuchos datos internos ahora son privados y se pueden sellar en preparaci\u00f3n para GTK 3\nVersi\u00f3n antigua, con servicio t\u00e9cnico:\nEl backend de impresi\u00f3n CUPS puede enviar trabajos de impresi\u00f3n como PDF\nGtkBuilder ha obtenido soporte para etiquetas de texto y botones de herramientas de men\u00fa y se agregaron muchas correcciones de anotaci\u00f3n de introspecci\u00f3n\nMigraci\u00f3n de GTK + 2.x a GTK + 3\nEl primer borrador de la hoja de ruta para el desarrollo se public\u00f3 el 9 de abril de 2009[65]\u200b\nCompletado principalmente Proyecto Ridley\nEl intento de consolidar varias bibliotecas externas a GTK +\nIncluyendo libgnome, libgnomeui, libgnomeprint22, libgnomeprintui22, libglade, libgnomecanvas, libegg, libeel, gtkglext, and libsexy[66]\u200b\nTodo el renderizado se realiza usando Cairo\nGDK se convirti\u00f3 X11 agn\u00f3stico\nXInput2, el tema API se basa en Hoja de estilos en cascada (CSS), lo que empeora el rendimiento alcanzable para 60\u00a0Hz fotogramas por segundos\nGtkLockButton\nGtkOverlay\nNuevo cuadro de di\u00e1logo para selector de fuente\nNuevos backends experimentales:\nWayland\nHTML5 (llamado \"Broadway\")\nUn nuevo selector de color\nSoporte agregado para dispositivos t\u00e1ctiles\nSoporte agregado para desplazamiento suave\nGtkScrolledWindow realizar\u00e1 desplazamiento cin\u00e9tico con dispositivos t\u00e1ctiles\nSe ha mejorado la compatibilidad con macOS\nEsta es la primera versi\u00f3n de GTK 3 que funciona bien en Windows\nEl backend de Wayland se actualiza a la versi\u00f3n actual de Wayland\nLos botones de giro han recibido un nuevo aspecto\nAccesibilidad: el soporte accesible con vista de \u00e1rbol se reescribe\nM\u00e1s soporte completo de temas CSS\nGtkSearchEntry\nGtkMenuButton\nGtkLevelBar\nBotones de giro vertical\nAnimaciones CSS, sombras borrosas\nSoporte para desvanecimiento y transiciones en temas.\nSoporte para el servidor broadwayd\nTematizaci\u00f3n mejorada\nMejor gesti\u00f3n de la geometr\u00eda.\nMejoras t\u00e1ctiles\nSoporte con el administrador de ventanas para el protocolo de sincronizaci\u00f3n de trama\nGdkFrameClock agregado[71]\u200b\nGtkHeaderBar\nGtkPlacesSidebar\nGtkStack\nGtkStackSwitcher\nGtkRevealer\nGtkSearchBar\nGtkListBox\nSoporte para Wayland 1.2\nmaximizaci\u00f3n\ncursores animados\nmonitores m\u00faltiples\najustes\nsuperficies personalizadas\nsincronizaci\u00f3n de trama\nAdicional:\ndecoraciones del lado del cliente\nsoporte de salida a escala en pantallas de alta resoluci\u00f3n\nmodo de ajuste fino para desplazamiento\nRetirado:\nsoporte para el protocolo Motif DND\nsoporte para m\u00faltiples pantallas por pantalla\ngdk_window_get_display\ngtk_widget_push_composite_child\nElementos de men\u00fa desprendibles, adem\u00e1s de muchas configuraciones GTK\nTEl moderno modelo de dibujo GTK\nSoporte para Wayland 1.5\nNuevo widget: GtkPopover (una alternativa a los men\u00fas y cuadros de di\u00e1logo)\nSoporte mejorado para gestos / fusi\u00f3n multit\u00e1ctil[78]\u200b[79]\u200b\nEn desuso:[80]\u200b\nGtkMisc\nGtkAlignment\nGtkArrow\nGdkColor\nRegiones de estilo\nsoporte para archivos .icon\ngdk_window_flush\ndibujar fuera de la pintura de inicio/fin\nLa mayor\u00eda de los widgets se convierten para usar gestos internamente\nWayland admite el modo cl\u00e1sico de GNOME Shell[81]\u200b\nNuevos widgets:\nGtkGLArea\nGtkStackSidebar\nGtkModelButton\nGtkPopoverMenu\nDesplazamiento revisado (barra de desplazamiento oculta por defecto)[83]\u200b\nExperimental Mir backend[84]\u200b\nM\u00e1s actualizaci\u00f3n de dise\u00f1o de filechooser y mejor b\u00fasqueda de filechooser\nSoporte de Windows XP eliminado\nModelo de soporte para lista y cuadro de flujo\nDesplazamiento cin\u00e9tico del panel t\u00e1ctil\nGestos del panel t\u00e1ctil (Wayland)\nutilidad gtk-builder-tool\nVentanas solo de salida\nMover arrastrar y soltar hacia GDK\nNuevo widget: GtkShortcutsWindow (muestra m\u00e9todos abreviados de teclado y gestos de una aplicaci\u00f3n)\nWEl soporte para tabletas Wayland se fusion\u00f3,[89]\u200b el soporte para tabletas gr\u00e1ficas se considera completo[90]\u200b\nGTK 3.22 ser\u00e1 tan estable (y por lo tanto \"aburrido\") como GTK 2[91]\u200b[92]\u200b[93]\u200b\nVersi\u00f3n estable actual:\n3.24 se lanz\u00f3 principalmente para facilitar la migraci\u00f3n de GTK + 3.x a GTK + 4\nGolpes de dependencia: requieren:\nlibepoxy 1.4\npango 1.41\nNuevas caracter\u00edsticas del selector de fuente:\npermitir configurar caracter\u00edsticas de fuente OpenType\nmostrar ejemplos de caracter\u00edsticas de fuente OpenType\npermitir seleccionar variaciones de fuente OpenType\nNiveles de soporte de detalles para la selecci\u00f3n\nNuevas caracter\u00edsticas de Emoji:\nadmite una ventana emergente de finalizaci\u00f3n para Emoji\nsoltar el atajo Ctrl-Shift-e\nOtras API nuevas: gdk_window_move_to_rect\nWayland: usa memoria an\u00f3nima compartida en FreeBSD\nControladores de eventos con respaldo de GTK 4:\nGtkEventControllerScroll\nGtkEventControllerMotion\nGtkEventControllerKey\nGtkGestureStylus\nEn desuso algunas API que se han ido en GTK 4:\ncadenas de enfoque en GtkContainer\nsensibilidad paso a paso en GtkRange\nEliminar cualquier API marcada como obsoleta\nantes (22-09-2016) vs. despu\u00e9s\nDesarrollo pesado\nromper API y ABI[92]\u200b[93]\u200b\nUn nuevo renderizador de Vulkan aumenta el antiguo renderizador de Cairo[96]\u200b\n3.89.2\n3.89.4\n3.89.5\n3.90\nGNU autotools fue reemplazado por Meson.\n3.91.1\n3.91.2\n3.92.1\nGdkScreen, GdkVisual eliminado\nGdkDeviceManager reemplazado por GdkSeat\nEl manejo del portapapeles se mueve de GTK a GDK\nGdkEvent se convierte en un GObject opaco\nel renderizador GL en GSK se ha completado sustancialmente, y ahora est\u00e1 a la par con el renderizador Vulkan\nse reduce el uso de GdkPixbuf en las API\ny el objeto GskTexture se mueve a GDK como GdkTexture, para tomar su lugar\nEl backend de Wayland ahora implementa el protocolo de decoraci\u00f3n del lado del servidor KDE\nBroadway es portado a GSK.\nGdkWindow renombrado a GdkSurface\nNueva abstracci\u00f3n para contenido dibujable: GdkPaintable\nHay soporte para mostrar medios con:\nGtkVideo\nGtkMediaFile\nGtkMediaStream\nGtkMediaControls\nGtkWidget ahora puede usar un GtkLayoutManager para la asignaci\u00f3n de tama\u00f1o\nlos administradores de dise\u00f1o pueden usar opcionalmente hijos de dise\u00f1o con propiedades de dise\u00f1o\nGtkBinLayout, GtkBoxLayout, GtkGridLayout, GtkFixedLayout y GtkCustomLayout est\u00e1n actualmente disponibles\nAparecer\u00e1n m\u00e1s implementaciones de administrador de dise\u00f1o en el futuro\nEl manejo del enfoque se ha reescrito y la generaci\u00f3n de eventos de cambio de enfoque se ha unificado con eventos cruzados\nLos eventos se han simplificado y solo se usan para la entrada:\nlos eventos de exposici\u00f3n han sido reemplazados por una se\u00f1al GdkSurface::render\nlos eventos de configuraci\u00f3n han sido reemplazados por una se\u00f1al GdkSurface::size-changed\nlos eventos del mapa han sido reemplazados por una propiedad GdkSurface::mapped\ngdk_event_handler_set ha sido reemplazado por una se\u00f1al GdkSurface::event\nlos eventos clave ya no contienen una cadena\nlos eventos en widgets no asignados se ignoran\nMejoras de rendimiento.\nRefactorizaci\u00f3n de arrastrar y soltar\nMoviendo GDK hacia Wayland\nRemoci\u00f3n\nGtkMenu, GtkToolbar y clases similares han sido reemplazadas por GMenu.\nAdiciones\nSelector de emoji\nLos widgets de texto ahora tienen pilas de deshacer\nUn nuevo gestor de dise\u00f1o[104]\u200b\nHerramientas de accesibilidad actualizadas\nEncabezados actualizado para utilizar est\u00e1ndar C tipos INSTED de GLib\nNuevos widgets\nCorrecciones y mejoras", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Anjuta\nGlade\nVala", "subsections": []}, {"name": "Referencias", "text": "\u2191 a b Bassi, Emmanuele (6 de febrero de 2019), \u00abProject rename to \"GTK\"\u00bb (en en), lista de correo gtk-devel-list, https://mail.gnome.org/archives/gtk-devel-list/2019-February/msg00000.html, consultado el 18 de junio de 2019.\u00a0\n\u2191 Corbet, Jonathan (8 de febrero de 2019). \u00abGTK+ renamed to GTK\u00bb. Linux Weekly News (en ingl\u00e9s). Consultado el 18 de junio de 2019.\u00a0\n\u2191 a b \u00abA Brief (and Ancient) History of GIMP\u00bb. GNU Image Manipulation Program (en ingl\u00e9s). 1998. Consultado el 18 de junio de 2019.\u00a0\n\u2191 a b c Harlow, Eric. ([1999]). Desarrollo de aplicaciones Linux con GTK+ y GDK\u00a0: gu\u00eda avanzada. Prentice Hall. ISBN\u00a084-8322-196-9. OCLC\u00a0433163271. Consultado el 6 de julio de 2020.\u00a0\n\u2191 a b c \u00abWhat is GTK, and how can I use it?\u00bb. The GTK Project (en ingl\u00e9s). Consultado el 18 de junio de 2019.\u00a0\n\u2191 The GNOME Proyect. \u00abIndex of /Public/gimp/gtk/v1.0\u00bb (en ingl\u00e9s). Archivado desde el original el 12 de agosto de 2014. Consultado el 4 de julio de 2020.\u00a0\n\u2191 The GNOME Proyect. \u00abGNOME Quick SWOT Analysis, april 2010\u00bb (en ingl\u00e9s). Consultado el 1 de julio de 2020.\u00a0\n\u2191 de Icaza, Miguel (1 de febrero de 1999). \u00abThe GNOME Project\u00bb. Linux Journal (en ingl\u00e9s).\u00a0 Falta la |url= (ayuda); |fechaacceso= requiere |url= (ayuda)\n\u2191 The GNOME Proyect. \u00abList Rules and FAQs\u00bb (en ingl\u00e9s). Consultado el 1 de julio de 2020.\u00a0\n\u2191 The GNOME Proyect. \u00abGUADEC2020\u00bb (en ingl\u00e9s). Consultado el 1 de julio de 2020.\u00a0\n\u2191 a b Clasen, Mathias (10 de febrero de 2011), \u00abGTK+ 3.0.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2011-February/msg00020.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Kristian H\u00f8gsberg (3 de enero de 2011). \u00abMultiple backends for GTK+\u00bb (en ingl\u00e9s). Consultado el 4 de julio de 2020.\u00a0\n\u2191 alexl (18 de abril de 2011). \u00abBroadway update 3\u00bb (en ingl\u00e9s). Consultado el 4 de julio de 2020.\u00a0\n\u2191 Thorsten Leemhuis (28 de marzo de 2012). \u00abGTK+ 3.4 mit Multitouch- und Windows-Unterst\u00fctzung\u00bb (en alem\u00e1n). Consultado el 4 de julio de 2020.\u00a0\n\u2191 Thorsten Leemhuis (25 de septiembre de 2012). \u00abNeue Versionen von GTK+, GLib und Clutter\u00bb (en alem\u00e1n). Consultado el 4 de julio de 2020.\u00a0\n\u2191 Oliver Diedrich (24 de septiembre de 2013). \u00abGtk+ 3.10 mit verbesserter Wayland-Unterst\u00fctzung\u00bb (en alem\u00e1n). Consultado el 4 de julio de 2020.\u00a0\n\u2191 Oliver Diedrich (27 de marzo de 2014). \u00abAngesehen: Gnome 3.12\u00bb (en alem\u00e1n). Consultado el 4 de julio de 2020.\u00a0\n\u2191 Oliver Diedrich (2 de octubre de 2014). \u00abImmer mehr Spiele f\u00fcr Linux\u00bb (en alem\u00e1n). Consultado el 4 de julio de 2020.\u00a0\n\u2191 Keywan Tonekaboni (4 de agosto de 2013). \u00abGUADEC: Wayland-Support f\u00fcr Gnome\u00bb (en alem\u00e1n). Consultado el 4 de julio de 2020.\u00a0\n\u2191 The GNOME Project (2015). \u00abBienvenido a GNOME 3.16\u00bb (en ingl\u00e9s). Consultado el 4 de julio de 2020.\u00a0\n\u2191 Thorsten Leemhuis (23 de marzo de 2015). \u00abLinux-Desktop: Neues Gnome zeigt Nachrichten oben\u00bb (en alem\u00e1n). Consultado el 4 de julio de 2020.\u00a0\n\u2191 Rainald Menge-Sonnentag (22 de marzo de 2016). \u00abGUI-Toolkit GTK+ 3.20 verbessert das CSS-Theming\u00bb (en alem\u00e1n). Consultado el 4 de julio de 2020.\u00a0\n\u2191 Rainald Menge-Sonnentag (20 de octubre de 2016). \u00abGUI-Toolkit GTK+ 3.22 bringt Flatpak-Portale\u00bb (en alem\u00e1n). Consultado el 4 de julio de 2020.\u00a0\n\u2191 a b Allan (1 de septiembre de 2016). \u00abVersioning and long term stability promise in GTK+\u00bb. GTK Development Blog (en ingl\u00e9s). Consultado el 1 de julio de 2020.\u00a0\n\u2191 a b Clasen, Mathias (3 de septiembre de 2018), \u00abgtk+ 3.24.0\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/ftp-release-list/2018-September/msg00045.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Matthias (2018). \u00abGTK+ 4 Status Update\u00bb (PDF). Fedora People (en ingl\u00e9s). Consultado el 6 de julio de 2020.\u00a0\n\u2191 Alexander. \u00abGTK+ for Windows Runtime Environment\u00bb (en ingl\u00e9s). Consultado el 4 de julio de 2020.\u00a0\n\u2191 Tarnyko. \u00abGTK+\u00bb (en ingl\u00e9s). Consultado el 4 de julio de 2020.\u00a0\n\u2191 Tom Schoonjans. \u00abGitHub - tschoonj/GTK-for-Windows-Runtime-Environment-Installer: GTK+ for Windows Runtime Environment Installer (fork from http://gtk-win.sourceforge.net)\u00bb (en ingl\u00e9s). Consultado el 4 de julio de 2020.\u00a0\n\u2191 Frank (31 de enero de 2018). \u00abWindows Subsystem for Linux: Installation des WSL und Konfiguration von Gnome unter Windows 10\u00bb (en alem\u00e1n). Consultado el 4 de julio de 2020.\u00a0\n\u2191 The GNOME Project. \u00abProjects/GTK/OSX - GNOME Wiki!\u00bb (en ingl\u00e9s). Consultado el 4 de julio de 2020.\u00a0\n\u2191 Bassi, Emmanuele (15 de agosto de 2017), \u00abBuild system change GTK's master branch\u00bb (en en), lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2017-August/msg00028.html, consultado el 1 de julio de 2020.\u00a0\n\u2191 Wilmet, S\u00e9bastien (29 de marzo de 2019). \u00abThe GLib/GTK+ Development Platform\u00bb. people.gnome.org (en ingl\u00e9s). Consultado el 1 de julio de 2020.\u00a0\n\u2191 WxWidgets Compared To Other Toolkits \u00abGTK+\u00bb.\u00a0\n\u2191 \u00abLanguage Bindings\u00bb. Archivado desde el original el 13 de julio de 2011. Consultado el 3 de diciembre de 2014.\u00a0\n\u2191 Felipe Borges, Gabe Ron. \u00abGtk+\u00bb. Fedora Developer (en ingl\u00e9s). Consultado el 6 de julio de 2020.\u00a0\n\u2191 PyGObject Team. \u00abGetting Started - PyGObject\u00bb. PyGObject (en ingl\u00e9s). Consultado el 10 de julio de 2020.\u00a0\n\u2191 Desarrolladores de GNOME (2019). \u00abPlease don\u2019t theme our apps\u00bb. stopthemingmy (en ingl\u00e9s). Consultado el 12 de septiembre de 2020.\u00a0\n\u2191 Medina, Eduardo (27 de agosto de 2019). \u00abEl tema Yaru de Ubuntu se basar\u00e1 en Adwaita para evitar la fragmentaci\u00f3n\u00bb. MuyLinux. Consultado el 12 de septiembre de 2020.\u00a0\n\u2191 Morten Welinder (23 de junio de 2014). \u00abHow Does One Create A Gtk+ Application?\u00bb. blogs.gnome.org (en ingl\u00e9s). Consultado el 1 de julio de 2020.\u00a0\n\u2191 MCLASEN (20 de noviembre de 2015). \u00abA GTK+ UPDATE\u00bb. blogs.gnome.org (en ingl\u00e9s). Consultado el 1 de julio de 2020.\u00a0\n\u2191 GUADEC (22 de octubre de 2013). \u00abIndex of /2013/GTK to infinity and beyond\u00bb. http://videos.guadec.org/ (en ingl\u00e9s). Consultado el 1 de julio de 2020.\u00a0\n\u2191 Michael Larabel (12 de enero de 2014). \u00abThe Biggest Problem With GTK & What Qt Does Good\u00bb. phoronix (en ingl\u00e9s). Consultado el 1 de julio de 2020.\u00a0\n\u2191 BROTHER (22 de julio de 2013). \u00ab\u201cThe future of Razor and LXDE-Qt\u201d\u00bb. blog.lxde.org (en ingl\u00e9s). Consultado el 1 de julio de 2020.\u00a0\n\u2191 PCMAN (26 de marzo de 2013). \u00abPCManFM Qt 0.1.0 released\u00bb. blog.lxde.org (en ingl\u00e9s). Consultado el 1 de julio de 2020.\u00a0\n\u2191 Audacious Developers (28 de febrero de 2015). \u00abAudacious 3.6 released\u00bb. https://audacious-media-player.org/ (en ingl\u00e9s). Consultado el 1 de julio de 2020.\u00a0\n\u2191 John Lindgren (6 de abril de 2014). \u00abUgly window decorations and how to fix them (GTK+ 3.12)\u00bb. redmine.audacious-media-player.org (en ingl\u00e9s). Consultado el 1 de julio de 2020.\u00a0\n\u2191 \u00abWe\u2019re switching to Qt.\u00bb. blog.wireshark.org (en ingl\u00e9s). octubre de 2013. Consultado el 1 de julio de 2020.\u00a0\n\u2191 Amundson, Shawn T. (13 de abril de 2020), \u00abANNOUNCE: GTK+ 1.0.0 Released!\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-list/1998-April/msg00303.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Amundson, Shawn T. (25 de febrero de 1999), \u00abANNOUNCE: GTK+ and GLib 1.2.0 Released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-list/1999-February/msg00756.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Taylor, Owen (11 de marzo de 2002), \u00abGTK+-2.0.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-list/2002-March/msg00136.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Taylor, Owen (22 de diciembre de 2002), \u00abGTK+-2.2.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-list/2002-December/msg00206.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Taylor, Owen (16 de marzo de 2004), \u00abGTK+-2.4.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-list/2004-March/msg00111.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (16 de diciembre de 2004), \u00abGTK+-2.6.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-list/2004-December/msg00155.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (13 de agosto de 2005), \u00abGTK+ 2.8.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-list/2005-August/msg00124.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (3 de julio de 2006), \u00abGTK+ 2.10 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2006-July/msg00004.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (14 de septiembre de 2007), \u00abGTK+ 2.12 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2007-September/msg00052.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (4 de septiembre de 2008), \u00abGTK+ 2.14.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2008-September/msg00024.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (13 de marzo de 2009), \u00abGTK+ 2.16.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2009-March/msg00101.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (23 de septiembre de 2009), \u00abGTK+ 2.18.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2009-September/msg00054.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (23 de marzo de 2010), \u00abGTK+ 2.20.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2010-March/msg00132.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (23 de septiembre de 2010), \u00abGTK+ 2.22.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2010-September/msg00263.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (20 de enero de 2011), \u00abGTK+ 2.24.0\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2011-January/msg00042.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 \u00abGtk+ 3.0 Theming API Hackfest\u00bb. Silicon Island. Consultado el 3 de junio de 2017.\u00a0\n\u2191 \u00abGtk+ 3 roadmap draft\u00bb. Consultado el 3 de junio de 2017.\u00a0\n\u2191 \u00abAttic/ProjectRidley - GNOME Wiki!\u00bb. wiki.gnome.org.\u00a0\n\u2191 Clasen, Mathias (25 de septiembre de 2011), \u00abGTK+ 3.2.0\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2011-September/msg00175.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (26 de marzo de 2012), \u00abGTK+ 3.4.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2012-March/msg00082.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (24 de septiembre de 2012), \u00abGTK+ 3.6.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2012-September/msg00045.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (25 de marzo de 2013), \u00abGTK+ 3.8.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2013-March/msg00108.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 \u00abFrame clock: GDK 3 Reference Manual\u00bb. developer.gnome.org.\u00a0\n\u2191 Clasen, Mathias (23 de septiembre de 2013), \u00abGTK+ 3.10.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2013-September/msg00057.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (25 de marzo de 2014), \u00abGTK+ 3.12 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2014-March/msg00060.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 \u00abClient-side decorations in themes | Goings on\u00bb.\u00a0\n\u2191 Clasen, Mathias (22 de septiembre de 2014), \u00abGTK+ 3.14.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2014-September/msg00007.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Matthias Clasen (15 de mayo de 2014). \u00abGtkInspector Author's blog entry\u00bb. Consultado el 17 de mayo de 2014.\u00a0\n\u2191 \u00abGtkInspector in GNOME wiki\u00bb. 15 de mayo de 2014. Consultado el 17 de mayo de 2014.\u00a0\n\u2191 \u00abMerging gestures into 3.14\u00bb. 23 de mayo de 2014. Consultado el 23 de mayo de 2014.\u00a0\n\u2191 \u00abRFC: gestures\u00bb. 4 de abril de 2014. Consultado el 23 de mayo de 2014.\u00a0\n\u2191 \u00abgtk+ 3.13.2\u00bb. 27 de mayo de 2014.\u00a0\n\u2191 \u00abgtk+ 3.13.3\u00bb. 24 de junio de 2014.\u00a0\n\u2191 Clasen, Mathias (22 de marzo de 2015), \u00abGTK+ 3.16.0 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-devel-list/2015-March/msg00062.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 online, heise. \u00abLinux-Desktop: Neues Gnome zeigt Nachrichten oben\u00bb. heise online. Consultado el 3 de junio de 2017.\u00a0\n\u2191 \u00abGTK+ 3.16.0 released\u00bb. mail.gnome.org. Consultado el 3 de junio de 2017.\u00a0\n\u2191 Nestor, Marius (24 de septiembre de 2015). \u00abGTK+ 3.18.0 Officially Released as Part of the GNOME 3.18 Desktop Environment\u00bb. Softpedia. Consultado el 25 de mayo de 2019.\u00a0\n\u2191 Clasen, Mathias (21 de marzo de 2016), \u00abGTK+ 3.20\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-list/2016-March/msg00026.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 \u00abGTK+ 3.20 \u2013 Style Classes and Element Names\u00bb. 20 de noviembre de 2015.\u00a0\n\u2191 Clasen, Mathias (21 de septiembre de 2016), \u00abGTK+ 3.22 released\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/gtk-list/2016-September/msg00006.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 \u00abGTK+ Wayland tablet support is merged \u2013 Carlos Garnacho\u00bb.\u00a0\n\u2191 \u00abhutterer input\u00bb. www.x.org.\u00a0\n\u2191 \u00abGUADEC2013: Benjamin Otte talks about GTK+\u00bb. GUADEC.\u00a0\n\u2191 a b \u00abGtk 4.0 will not be stable until Gtk 4.6\u00bb. 13 de junio de 2016.\u00a0\n\u2191 a b \u00abGtk 5.0 will not be stable until Gtk 5.6\u00bb. 14 de junio de 2016.\u00a0\n\u2191 Clasen, Mathias (31 de marzo de 2017), \u00abgtk+ 3.90.0\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/ftp-release-list/2017-March/msg00243.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 \u00abProjects/GTK/Roadmap - GNOME Wiki!\u00bb. wiki.gnome.org.\u00a0\n\u2191 \u00abCommits \u00b7 master \u00b7 GNOME / gtk\u00bb. GitLab. Archivado desde el original el 22 de junio de 2020. Consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (18 de octubre de 2017), \u00abgtk+ 3.92.1\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/ftp-release-list/2017-October/msg00117.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (23 de octubre de 2017). \u00abGTK+ 3.92\u00bb. GTK Development Blog. Consultado el 25 de mayo de 2019.\u00a0\n\u2191 \u00abGNOME 3.26 Released\u00bb. 13 de septiembre de 2017.\u00a0\n\u2191 Clasen, Mathias (26 de junio de 2018), \u00abgtk+ 3.94.0\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/ftp-release-list/2018-June/msg00073.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (7 de mayo de 2019), \u00abgtk 3.96\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/ftp-release-list/2019-May/msg00032.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 \u00abIntroducing amtk\u00bb. Archivado desde el original el 22 de junio de 2020. Consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Mathias (6 de junio de 2020), \u00abgtk 3.98.5\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/ftp-release-list/2020-June/msg00024.html, consultado el 6 de julio de 2020.\u00a0\n\u2191 Clasen, Matthias (13 de febrero de 2020). \u00abGTK 3.98\u00bb. GTK+ Development Blog (en ingl\u00e9s). Consultado el 18 de febrero de 2020.\u00a0\n\u2191 Clasen, Mathias (31 de julio de 2020), \u00abgtk 3.99.0\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/ftp-release-list/2020-July/msg00096.html, consultado el 28 de agosto de 2020.\u00a0\n\u2191 Clasen, Mathias (16 de diciembre de 2020), \u00abgtk 4.0.0\u00bb, lista de correo GNOME Mail Services, https://mail.gnome.org/archives/ftp-release-list/2020-December/msg00029.html, consultado el 25 de diciembre de 2020.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": "GTK.org (ingl\u00e9s)\nPango.org (ingl\u00e9s).\nGTK.ALKIA.ORG (ingl\u00e9s).\nRubyGTK, bindings de GTK para Ruby. (ingl\u00e9s).\ngtk-fortran, bindings de GTK para Fortran 2003. (ingl\u00e9s).\nPyGObject, bindings de GTK para Python.\nGTK#, bindings de GTK para Mono.\ngtk2-perl, bindings de GTK para perl.\nPHP-GTK, bindings de GTK para PHP.\nJava-Gnome, bindings de GTK/Gnome para Java.\ngtkmm, bindings de GTK para C++.\nRoadmap (ingl\u00e9s).\nVideo tutorial: Calculadora con GTK (Espa\u00f1ol", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/GUI", "title": "Interfaz gr\u00e1fica de usuario", "summary": "La interfaz gr\u00e1fica de usuario, conocida tambi\u00e9n como GUI (del ingl\u00e9s graphical user interface), es un programa inform\u00e1tico que act\u00faa de interfaz de usuario, utilizando un conjunto de im\u00e1genes y objetos gr\u00e1ficos para representar la informaci\u00f3n y acciones disponibles en la interfaz. Su principal uso consiste en proporcionar un entorno visual sencillo para permitir la comunicaci\u00f3n con el sistema operativo de una m\u00e1quina o computador.\nHabitualmente las acciones se realizan mediante manipulaci\u00f3n directa, para facilitar la interacci\u00f3n del usuario con la computadora. Surge como evoluci\u00f3n de las interfaces de l\u00ednea de comandos que se usaban para operar los primeros sistemas operativos y es pieza fundamental en un entorno gr\u00e1fico. Como ejemplos de interfaz gr\u00e1fica de usuario, cabe citar los entornos de escritorio Windows, el de GNU/Linux o el de Mac OS X, Aqua.\nEn el contexto del proceso de interacci\u00f3n persona-computadora, la interfaz gr\u00e1fica de usuario es el artefacto tecnol\u00f3gico de un sistema interactivo que posibilita, a trav\u00e9s del uso y la representaci\u00f3n del lenguaje visual, una interacci\u00f3n amigable con un sistema inform\u00e1tico.", "sections": [{"name": "Dise\u00f1o de la interfaz de usuario y de interacci\u00f3n", "text": "Dise\u00f1ar la composici\u00f3n visual y el comportamiento temporal de una GUI es una parte importante de la programaci\u00f3n de aplicaciones en el campo de la Interacci\u00f3n persona-ordenador. Su objetivo es mejorar la eficiencia y la facilidad de uso del dise\u00f1o l\u00f3gico subyacente de un programa almacenado, una disciplina de dise\u00f1o llamada usabilidad. Varios m\u00e9todos de dise\u00f1o centrado en el usuario se utilizan para garantizar que el lenguaje visual introducido en el dise\u00f1o se adapta bien a las tareas.\nLas caracter\u00edsticas visibles de la interfaz gr\u00e1fica de una aplicaci\u00f3n a veces se llaman cromo o GUI.[1]\u200b[2]\u200b[3]\u200b Normalmente, los usuarios interact\u00faan con la informaci\u00f3n mediante la manipulaci\u00f3n visual de widgets que permitan interacciones adecuadas al tipo de datos que tienen. Los widgets de una interfaz bien dise\u00f1ada se seleccionan para apoyar las acciones necesarias para alcanzar los objetivos de los usuarios. Un Modelo-Vista-Controlador permite estructuras flexibles en las que la interfaz es independiente e indirectamente vinculada a las funciones de la aplicaci\u00f3n, de modo que la GUI puede personalizarse f\u00e1cilmente. Esto permite a los usuarios seleccionar o dise\u00f1ar otros skins a voluntad y facilita el trabajo del dise\u00f1ador para cambiar la interfaz a medida que evolucionan las necesidades del usuario. Un buen dise\u00f1o de la interfaz de usuario se relaciona m\u00e1s con los usuarios y menos con la arquitectura del sistema.\nLos widgets grandes, como las ventanas, normalmente proporcionan un marco o contenedor para el contenido principal de la presentaci\u00f3n, como una p\u00e1gina web, un mensaje de correo electr\u00f3nico o un dibujo. Los m\u00e1s peque\u00f1os suelen actuar como una herramienta de entrada del usuario.\nSe puede dise\u00f1ar una GUI para los requisitos de un mercado vertical como interfaces gr\u00e1ficas de usuario espec\u00edficas de la aplicaci\u00f3n. Algunos ejemplos incluyen cajeros autom\u00e1ticos (ATM), pantallas de puntos de venta (POS) en restaurantes,[4]\u200b sistemas de autopago utilizados en tiendas minoristas, para billetes de avi\u00f3n y facturaci\u00f3n autom\u00e1tica, quioscos de informaci\u00f3n en un espacio p\u00fablico, como una estaci\u00f3n de tren o un museo, y monitores o pantallas de control en una aplicaci\u00f3n industrial incrustada que utilizan un sistema operativo de tiempo real (RTOS).\nLos tel\u00e9fonos m\u00f3viles y los sistemas de videojuegos port\u00e1tiles tambi\u00e9n utilizan el GUI de pantalla t\u00e1ctil espec\u00edficas de aplicaciones. Los autom\u00f3viles m\u00e1s novedosos utilizan el GUI en sus sistemas de navegaci\u00f3n y centros multimedia, o combinaciones de centros multimedia de navegaci\u00f3n.", "subsections": []}, {"name": "Historia", "text": "", "subsections": [{"name": "Precursores", "text": "Los investigadores del Stanford Research Institute liderados por Douglas Engelbart, desarrollaron una interfaz de hiperv\u00ednculos en modo texto gobernada por un rat\u00f3n, que tambi\u00e9n inventaron. Este concepto fue ampliado y trasladado al entorno gr\u00e1fico por los investigadores del Xerox PARC en la ciudad estadounidense de Palo Alto. El entorno se denomin\u00f3 PARC User Interface y en \u00e9l se definieron los conceptos de ventanas, casilla de verificaci\u00f3n, botones de radio, men\u00fas y puntero del rat\u00f3n. La interfaz fue implementada comercialmente en el computador Xerox Star 8010."}, {"name": "Xerox Alto", "text": "El Xerox Alto, desarrollado en el Xerox PARC en 1973, fue una de las primeras computadoras personales, as\u00ed como el primero que utiliz\u00f3 la met\u00e1fora de escritorio y una interfaz gr\u00e1fica de usuario."}, {"name": "Xerox Star 8010", "text": "La estaci\u00f3n de trabajo Xerox Star, conocida oficialmente como el 8010 Star Information System (Sistema de Informaci\u00f3n Estrella 8010) fue introducida por Xerox Corporation en 1981. Fue el primer sistema comercial en incorporar varias tecnolog\u00edas que han llegado a ser hoy en d\u00eda corrientes en computadores personales, incluyendo la pantalla con bitmaps en lugar de solo texto, una interfaz gr\u00e1fica de usuario basada en ventanas, iconos, carpetas, rat\u00f3n, red Ethernet, servidores de archivos, servidores de impresoras y correo electr\u00f3nico."}, {"name": "Apple Lisa, Macintosh, Apple II GS.", "text": "Tras una visita al Xerox PARC en 1979, el equipo de Apple encabezado por Jef Raskin se concentra en dise\u00f1ar un entorno gr\u00e1fico para su nueva generaci\u00f3n de 16 bits, que se ver\u00e1 plasmado en el Apple Lisa en 1983. Ese sistema gr\u00e1fico es portado al sucesor del Apple II, el Apple II GS. Un segundo equipo trabaja en el Apple Macintosh que ver\u00e1 la luz en 1984 con una versi\u00f3n mejorada del entorno gr\u00e1fico del Lisa (\"pretendimos hacer una computadora tan simple de manejar como una tostadora\"). Desde ese momento el Mac reinar\u00e1 como paradigma de usabilidad de un entorno gr\u00e1fico; pese a que por debajo el sistema operativo sufra cambios radicales, los usuarios no avanzados no son conscientes de ello y no sufren los problemas de otras plataformas."}, {"name": "Workbench", "text": "Workbench es el nombre dado por Commodore a la interfaz gr\u00e1fica del AmigaOS, el sistema operativo del Commodore Amiga lanzado en 1985. A diferencia de los sistemas m\u00e1s populares (GEM, Mac OS, MS Windows...) es un verdadero entorno multitarea solo rivalizado por la interfaz X Window System de los diferentes sabores de Unix. La frase m\u00e1s repetida por un amiguero es: \u00abpara masacrar marcianos, formatear un disquete y enviar o recibir un Fax todo a la vez y sin colgarse, necesitas un 386 con disco duro, 16 MB de RAM y OS/2; un Amiga 500 con disquete y solo su memoria base (512 KB de RAM y 512 KB de ROM) es capaz de todo eso\u00bb. Aunque muy popular por los espectaculares (para entonces) gr\u00e1ficos de la m\u00e1quina y su gran plantel de videojuegos, ser\u00e1 la negligencia de sus sucesivos propietarios la principal causa de que acabe restringido a solamente la plataforma Amiga."}, {"name": "GEOS", "text": "Para el Commodore 64 y su sucesor el Commodore 128 se desarroll\u00f3 el entorno gr\u00e1fico GEOS en 1986. Este entorno se port\u00f3 al IBM PC, fue utilizado en varias PDA y Nokia lo us\u00f3 como base de su actual sistema operativo."}, {"name": "GEM", "text": "GEM (Graphical Environment Manager) es un GUI dise\u00f1ado por Digital Research en 1985 para ejecutarse sobre varios sistemas operativos de l\u00ednea de comandos del IBM PC y compatibles: funciona tanto sobre IBM DOS /MS-DOS como sobre CP/M 86. Su m\u00e1xima popularidad en el PC llega de la mano del Amstrad PC1512 y del Amstrad PC1640, los cl\u00f3nicos que rompieron en Europa la barrera del precio popularizando el PC, hasta ese momento relegado mayoritariamente a oficinas. Aunque se incorpora en su primera generaci\u00f3n de port\u00e1tiles y en el Sinclair PC200, ser\u00e1 sustituido en la siguiente generaci\u00f3n de PCs Amstrad por Microsoft Windows 2.xx. En el PC vivir\u00e1 una segunda juventud al venir de serie con DR-DOS como TaskMax.\nPero ser\u00e1 en los Atari ST y sucesores donde se convertir\u00e1 en el entorno gr\u00e1fico oficial de la plataforma, alcanzando gran popularidad, tanto por ser en principio una alternativa barata al MAC en autoedici\u00f3n, como por hacerse con el nicho de mercado de la m\u00fasica profesional."}, {"name": "Apple y Microsoft", "text": "En 1982, Apple hab\u00eda comenzado como una microempresa formada por dos empleados, Steve Jobs y Steve Wozniak, y hab\u00eda crecido hasta convertirse en una empresa de 300 millones de d\u00f3lares. En 1983, ya se hab\u00eda convertido en una empresa de 1000 millones de d\u00f3lares, el mismo valor que IBM.\nEn 1985, Microsoft saca al mercado Windows 1.0, entorno gr\u00e1fico para computadoras PC IBM compatibles, con muchos parecidos al Mac OS. La respuesta de Apple a la introducci\u00f3n del sistema operativo Windows fue la interposici\u00f3n de una demanda de varios miles de millones de d\u00f3lares contra Microsoft, por violaci\u00f3n de copyright.\nEn 1987 IBM se vio obligada a entrar en el mercado de las computadoras personales con entorno gr\u00e1fico con su modelo IBM Personal System/2 (PS/2), ali\u00e1ndose con Bill Gates (Microsoft), que hab\u00eda desarrollado el OS/2. La interfaz gr\u00e1fica de este sistema operativo era muy similar a la de Apple. El OS/2 no se convirti\u00f3 en el nuevo est\u00e1ndar del sector, debido fundamentalmente al conflicto de intereses entre IBM y Microsoft.\nLa aparici\u00f3n de computadoras IBM cl\u00f3nicas hizo que el sistema Windows se popularizara, lo que rest\u00f3 mercado a Apple. Esta se recuper\u00f3 a finales de 1990 lanzando nuevos productos.\nUna se\u00f1al inequ\u00edvoca del \u00e9xito de Apple fue la aparici\u00f3n de productos similares: una peque\u00f1a compa\u00f1\u00eda llamada Nutek Computers Inc., anunci\u00f3 que estaba desarrollando una computadora compatible con el Macintosh.\nEn 1991, John Sculley, director de Apple, revel\u00f3 que la compa\u00f1\u00eda estaba considerando competir contra Microsoft en el campo del software vendiendo su sistema operativo a terceros. Apple revel\u00f3 que estaba manteniendo conversaciones con su antiguo rival, IBM, destinadas a compartir tecnolog\u00edas. Decidieron crear una joint venture para desarrollar un sistema operativo avanzado que ambas utilizar\u00edan en sus nuevas m\u00e1quinas y licenciar\u00edan a terceros. Este plan presentaba un desaf\u00edo directo a Microsoft.\nMicrosoft consigue convertir a Windows en el sistema operativo m\u00e1s utilizado en el mundo, dejando a Apple en un segundo lugar."}]}, {"name": "Tipos de interfaces gr\u00e1ficas de usuario", "text": "", "subsections": [{"name": "Las GUI y ZUI", "text": "Los tipos de interfaces gr\u00e1ficas de usuarios (GUI) que se encuentran en juegos de computadora, y las GUI avanzados basados en realidad virtual, se usan con frecuencia en tareas de investigaci\u00f3n. Muchos grupos de investigaci\u00f3n en Norteam\u00e9rica y Europa est\u00e1n trabajando actualmente en la interfaz de enfoque del usuario o ZUI (Zooming User Interface), que es un adelanto l\u00f3gico de las GUI, mezclando 3D con 2D. Podr\u00eda expresarse como \u00ab2 dimensiones y media en objetos vectoriales de una dimensi\u00f3n\u00bb."}, {"name": "Interfaz de usuario de pantalla t\u00e1ctil", "text": "Algunas GUI son dise\u00f1adas para cumplir con los rigurosos requisitos de los mercados verticales. Estos se conocen como las GUI de uso espec\u00edfico. Un ejemplo de un GUI de uso espec\u00edfico es la ahora familiar pantalla t\u00e1ctil o touchscreen (pantalla que al ser tocada efect\u00faa los comandos del rat\u00f3n en el software). Se encuentra actualmente implementado en muchos restaurantes y en muchas tiendas de autoservicio de todo el mundo. Fue iniciado por Gene Mosher en la computadora del ST de Atari en 1986, el uso que \u00e9l espec\u00edfic\u00f3 en las GUI de pantalla t\u00e1ctil ha encabezado una revoluci\u00f3n mundial e innovadora en el uso de las computadoras a trav\u00e9s de las industrias alimenticias y de bebidas, y en ventas al por menor.\nOtros ejemplos de GUI de uso espec\u00edfico, relacionados con la pantalla t\u00e1ctil son los cajeros autom\u00e1ticos, los kioscos de informaci\u00f3n y las pantallas de monitoreo y control en los usos industriales, que emplean un sistema operativo de tiempo real (RTOS). Los tel\u00e9fonos m\u00f3viles y los sistemas o consolas de juego tambi\u00e9n emplean las pantallas t\u00e1ctiles. Adem\u00e1s la dom\u00f3tica no es posible sin una buena interfaz de usuario, o GUI."}, {"name": "Interfaz Natural de Usuario (NUI)", "text": "Las NUI naturales son aquellas en las que se interact\u00faa con un sistema, aplicaci\u00f3n, etc\u00e9tera, sin utilizar dispositivos de entrada como rat\u00f3n, teclado, l\u00e1piz \u00f3ptico, etc. En lugar de estos se utilizan las manos o las yemas de los dedos."}, {"name": "Interfaz de Voz (VUI)", "text": "Se trata de programas capaces de identificar e interpretar el habla. El ejemplo m\u00e1s claro que tenemos es el reciente auge de las inteligencias artificiales, como Siri, que se controlan por medio de la voz."}, {"name": "Interfaz de texto (TUI)", "text": "Se utiliza principalmente en el \u00e1mbito de la programaci\u00f3n de sistemas operativos y es la evoluci\u00f3n de la interfaz de l\u00ednea de comando primitiva que usaban los primeros programas de computadora."}, {"name": "Interfaz cerebro-ordenador", "text": "O tambi\u00e9n llamada tecnolog\u00eda BCI (Brain-Computer Interface). Es el tipo de interfaz m\u00e1s innovadora que existe hasta el momento, y aunque a\u00fan no cuenta con muchas aplicaciones cotidianas, se est\u00e1 utilizando para controlar pr\u00f3tesis bi\u00f3nicas y dar instrucciones sencillas a un software por medio de las ondas cerebrales."}]}, {"name": "Idioma", "text": "Es habitual poder cambiar el idioma de la interfaz de usuario.[5]\u200b", "subsections": []}, {"name": "Interfaz gr\u00e1fica de usuario tridimensional", "text": "Muchos entornos y juegos utilizan los m\u00e9todos de los gr\u00e1ficos 3D para proyectar objetos en 3D de la interfaz gr\u00e1fica de usuario en la pantalla. El uso de gr\u00e1ficos 3D se ha vuelto cada vez m\u00e1s com\u00fan en los principales sistemas operativos (por ejemplo, Windows Aero, y Aqua (MacOS)) para crear interfaces atractivas, denominadas eye candy, o con fines funcionales que s\u00f3lo son posibles utilizando las tres dimensiones. Por ejemplo, el cambio de usuario se representa girando un cubo con caras que representan el espacio de trabajo de cada usuario, y la gesti\u00f3n de ventanas se representa mediante un mecanismo de volteo al estilo de Rolodex en Windows Vista (v\u00e9ase Windows Flip 3D). En ambos casos, el sistema operativo transforma las ventanas sobre la marcha mientras sigue actualizando el contenido de las mismas.\nLa interfaz de usuario con zoom (Zooming user interface en ingl\u00e9s, ZUI) es una tecnolog\u00eda relacionada que promete ofrecer las ventajas de representaci\u00f3n de los entornos 3D sin sus inconvenientes de usabilidad de problemas de orientaci\u00f3n y objetos ocultos. En 2006, Hillcrest Labs present\u00f3 la primera ZUI para televisi\u00f3n.[6]\u200b Otras innovaciones incluyen el Proyecto Looking Glass de Sun, Metisse, que era similar al Proyecto Looking Glass,[7]\u200b BumpTop, en el que los usuarios pueden manipular documentos y ventanas con movimiento realista y f\u00edsica como si fueran documentos f\u00edsicos, Croquet OS, que est\u00e1 construido para la colaboraci\u00f3n, y compositing window managers como Enlightenment y Compiz.  La realidad aumentada y la realidad virtual tambi\u00e9n hacen uso de elementos de interfaz gr\u00e1fica de usuario en 3D.[8]\u200b", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "AJAX\nArquitectura de la informaci\u00f3n\nBiblioteca de enlace din\u00e1mico\nIngenier\u00eda de software\nInterfaz\nInterfaz de usuario\nInteracci\u00f3n persona-computadora\nInterfaz de l\u00ednea de comandos (CLI)\nLey de Fitts\nLook and feel\nMet\u00e1fora de escritorio\nRich Internet Applications, en espa\u00f1ol: Aplicaciones ricas de internet.\nUsabilidad", "subsections": []}, {"name": "Referencias", "text": "\u2191 \u00abchrome\u00bb. www.catb.org. Consultado el 3 de abril de 2020.\u00a0\n\u2191 Jakob Nielsen (29 de enero de 2012). \u00abBrowser and GUI Chrome\u00bb. Nngroup. Archivado desde el original el 25 de agosto de 2012. Consultado el 7 de diciembre de 2021.\u00a0\n\u2191 Martinez, Wendy L. (23 de febrero de 2011). \u00abGraphical user interfaces: Graphical user interfaces\u00bb. Wiley Interdisciplinary Reviews: Computational Statistics (en ingl\u00e9s) 3 (2): 119-133. doi:10.1002/wics.150.\u00a0\n\u2191 The ViewTouch restaurant system by Giselle Bisson\n\u2191 http://www.howtogeek.com/howto/17528/change-the-user-interface-language-in-ubuntu/\n\u2191 Macworld.com 11 de noviembre de 2006. Dan Moren. CES Unveiled@NY '07: \u00bfApuntar y hacer clic llega a los decodificadores? Archivado el 8 de noviembre de 2011 en Wayback Machine.\n\u2191 org/story/04/06/29/229243/metisse---new-looking-glass-alternative \u00abMetisse - New Looking Glass Alternative\u00bb. 29 de junio de 2004. Consultado el 2 de julio de 2020.\u00a0\n\u2191 Purwar, Sourabh (4 de marzo de 2019). \u00abDise\u00f1o de la experiencia del usuario para aplicaciones de realidad virtual (VR)\u00bb. Medium (en ingl\u00e9s). Consultado el 6 de mayo de 2022.\u00a0", "subsections": []}, {"name": "Bibliograf\u00eda", "text": "Royo, Javier. Dise\u00f1o Digital. Ediciones Paid\u00f3s Ib\u00e9rica, 2018.\nShneiderman, Ben. Designing The user interface, Strategies for effective Human-computer interaction. Addison-wesley,1998", "subsections": []}, {"name": "Enlaces externos", "text": " Wikimedia Commons alberga una categor\u00eda multimedia sobre Interfaz gr\u00e1fica de usuario.\nApple v. Microsoft (en la Wikipedia en ingl\u00e9s)\nArs Technica: A History of the GUI por Jeremy Reimer (en ingl\u00e9s).\nInterfaces Gr\u00e1ficas de Usuario (Historia).\nIm\u00e1genes de casi todos los entornos gr\u00e1ficos de sistemas operativos \ncydiaimpactor.web.ap", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Generador_(inform%C3%A1tica)", "title": "Generador (inform\u00e1tica)", "summary": "En programaci\u00f3n, un generador es una rutina especial que se puede usar para controlar el comportamiento de un iterador en un bucle.\nUn generador es muy similar a una funci\u00f3n que devuelve un vector, en el que un generador tiene los par\u00e1metros que se pueden llamar, y genera una secuencia de valores.\nLa manera m\u00e1s simple de conseguir una secuencia de datos es declarando un array o vector declarando manualmente cada valor. Esta pr\u00e1ctica puede volverse tediosa y consumir mucho tiempo al desarrollador si el array o vector requiere que existan una gran cantidad de elementos dentro de \u00e9l. En ese caso un generador resulta ser una manera m\u00e1s r\u00e1pida de declarar el array o vector.\nOtra gran ventaja de los generadores radica en que consume una menor cantidad de recursos en memoria, por lo tanto, permite que quien lo llama comience a procesar los primeros valores inmediatamente. En resumen, un generador se asemeja a una funci\u00f3n pero se comporta como un iterador.\nLos generadores pueden implementarse en construcciones de control de flujo m\u00e1s expresivas, como la continuaci\u00f3n de objetos de primera clase o como co-funciones.\nLos generadores aparecen por primera vez en 1975 en el lenguaje CLU; y est\u00e1n disponibles en Python, C#, JavaScript, [Ruby] y en otros lenguajes. En CLU y C#, los generadores se llaman iteradores y en Ruby enumeradores.", "sections": [{"name": "Python", "text": "Un ejemplo de generador en Python:\ndef\ncountfrom\n(\nn\n):\nwhile\nTrue\n:\nyield\n+=\n1\n# Ejemplo: mostrar los enteros entre 10 y 20.\n# Hay que tener en cuenta que esta iteraci\u00f3n normalmente termina,\n# aunque el countfrom() se escriba como un bucle infinito.\nfor\ni\nin\ncountfrom\n10\nif\n<=\n20\nprint\n)\nelse\nbreak\n# Otro generador, que produce los primeros n\u00fameros primos\n# a \"to\" si a> = 2, de lo contrario indefinidamente dependiendo de la necesidad.\nprimos\nto\n2\n# primer n\u00famero primero, y \u00fanico par\n=\n3\np\n[]\nor\n<\nsqr_n\nint\n**\n0.5\nnot\nany\n%\nf\n==\n0\n# funciona desde Python 2.5  con el paquete NumPy que introduce any()\n.\nappend\n# S\u00f3lo revisar impares\nraise\nStopIteration", "subsections": []}, {"name": "Ruby", "text": "Ruby soporta generadores (a partir de la versi\u00f3n 1.9) en la clase Enumerator.\n# Generador de un objeto enumerable\nchars\n \nEnumerator\nnew\n[\n'A'\n,\n'B'\n'C'\n'Z'\n]\n4\ntimes\n{\nputs\nnext\n}\n# Generatore de un bloque\ncount\ndo\n|\nyielder\n  \nloop\nyield\nend\n100", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Iterador\nCorrutinas\n Portal:inform\u00e1tica. Contenido relacionado con inform\u00e1tica", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Genie_(lenguaje_de_programaci%C3%B3n)", "title": "Genie (lenguaje de programaci\u00f3n)", "summary": "Genie es un lenguaje de programaci\u00f3n de alto nivel, moderno, y de prop\u00f3sito general en desarrollo activo desde el a\u00f1o 2008.[1]\u200b Fue dise\u00f1ado como un dialecto  alternativo m\u00e1s simple y limpio para el compilador Vala, preservando al mismo tiempo la misma funcionalidad del lenguaje Vala. La sintaxis de Genie se deriva de numerosos lenguajes modernos como Python, Boo, D y Delphi.\nAl igual que Vala, Genie usa el sistema de tipos GObject para crear clases e interfaces declaradas en el c\u00f3digo fuente de Genie, sin imponer requisitos adicionales de tiempo de ejecuci\u00f3n (es decir, a diferencia de Python, Java o Mono, este no requiere una m\u00e1quina virtual).\nGenie permite el acceso a las bibliotecas de C, especialmente las basadas en GObject (como GTK+), sin necesidad de utilizar otro API. Durante la compilaci\u00f3n, el c\u00f3digo se traduce primero a c\u00f3digo fuente y cabeceras de C, que se compilan entonces al c\u00f3digo de m\u00e1quina con cualquier compilador C disponible como GCC, lo cual permite el desarrollo de software multi-plataforma.\nAunque tanto Vala como Genie son desarrollados y promovidos por el proyecto Gnome, los programas desarrollados en Genie no dependen del entorno de escritorio Gnome, y usualmente requieren solo de GLib.", "sections": [{"name": "Diferencias con Vala", "text": "Genie usa el mismo compilador y bibliotecas que Vala; de hecho, los dos se pueden utilizar juntos.[2]\u200b Las diferencias son solo sint\u00e1cticas.", "subsections": []}, {"name": "Sangr\u00eda", "text": "Como un lenguaje que toma a Python como referencia, Genie utiliza espacios en blanco o tabuladores en lugar de llaves para delimitar bloques.", "subsections": []}, {"name": "Ejemplos de c\u00f3digo", "text": "", "subsections": [{"name": "Un simple \"Hola Mundo\"", "text": "En este ejemplo se utiliza de forma expl\u00edcita cuatro espacios para el sangrado.\n[\nindent\n=\n4\n]\ninit\nprint\n\"Hola, mundo!\"\nOtro ejemplo:\na\n:\nint\n0\nif\n(\n>\n)\n\"a es mayor que 0\"\nelse\n\"a no es mayor que 0\""}, {"name": "Objetos", "text": "Sin ninguna declaraci\u00f3n expl\u00edcita para el sangrado, por defecto se usa la tabulaci\u00f3n.\nclass\nEjemplo\ndef\nrun\n()\nstdout\n.\nprintf\n\"Hola, mundo!\n\\n\n\"\nvar\nejemplo\nnew\nEjemplo\nrun"}]}, {"name": "Referencias", "text": "\u2191 Jamie McCracken (ed.). \u00abIntroducing Genie - the smart programming language\u00bb (en ingl\u00e9s). Consultado el 13 de junio de 2010.\u00a0\n\u2191 Using Genie and Vala together (en ingl\u00e9s).", "subsections": []}, {"name": "Enlaces externos", "text": "P\u00e1gina principal de Genie (en ingl\u00e9s)\nP\u00e1gina principal de Vala (en ingl\u00e9s)\nP\u00e1gina de Barry Kauler sobre Genie (en ingl\u00e9s)\nP\u00e1gina de Nicolas Joseph con muchos ejemplos de c\u00f3digo\nDocumentaci\u00f3n de la API\nCharla IRC sobre Genie en Gnome hispano, febrero de 2010\nC\u00f3digo de Genie para principiantes\nGenie Do", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Gesti%C3%B3n_de_memoria", "title": "Gesti\u00f3n de memoria", "summary": "La gesti\u00f3n de memoria o administraci\u00f3n de memoria es el acto de gestionar la memoria de un dispositivo inform\u00e1tico. El proceso de asignaci\u00f3n de memoria a los programas que la solicitan.[1]\u200b \nLos sistemas de memoria virtual separan las direcciones de memoria utilizadas por un proceso de las direcciones f\u00edsicas reales, permitiendo la separaci\u00f3n de procesos e incrementando la cantidad efectiva de memoria de acceso aleatorio utilizando la paginaci\u00f3n. La calidad de la gesti\u00f3n de la memoria es crucial para las prestaciones del sistema.\nEl recolector de basura es la asignaci\u00f3n y liberaci\u00f3n autom\u00e1tica de los recursos de memoria para un programa. La implementaci\u00f3n suele ser a nivel del lenguaje de programaci\u00f3n en contraposici\u00f3n a la gesti\u00f3n manual de memoria, que asigna y libera los recursos de memoria de una computadora de forma expl\u00edcita.\nLa administraci\u00f3n de memoria se refiere a los distintos m\u00e9todos y operaciones que se encargan de obtener la m\u00e1xima utilidad de la memoria, organizando los procesos y programas que se ejecutan de manera tal que se aproveche de la mejor manera posible el espacio disponible.\nPara poder lograrlo, la operaci\u00f3n principal que realiza es trasladar la informaci\u00f3n que deber\u00e1 ser ejecutada por la unidad central de procesamiento o procesador, a la memoria principal. Actualmente esta administraci\u00f3n se conoce como memoria virtual, porque no es la memoria f\u00edsica del procesador sino una memoria virtual que la representa. Entre algunas ventajas, esta memoria permite que el sistema cuente con una memoria m\u00e1s extensa teniendo la misma memoria real, por lo que esta se puede utilizar de manera m\u00e1s eficiente. Y por supuesto, que los programas que son utilizados no ocupen lugar innecesario.\nLas t\u00e9cnicas que existen para la carga de programas en la memoria son: partici\u00f3n fija, que es la divisi\u00f3n de la memoria libre en varias partes (de igual o distinto tama\u00f1o) y la partici\u00f3n din\u00e1mica, que son las particiones de la memoria en tama\u00f1os que pueden ser variables, seg\u00fan la cantidad de memoria que necesita cada proceso.\nEntre las principales operaciones que desarrolla la administraci\u00f3n de memoria se encuentran la reubicaci\u00f3n, que consiste en trasladar procesos activos dentro y fuera de la memoria principal para maximizar la utilizaci\u00f3n del procesador; la protecci\u00f3n, mecanismos que protegen los procesos que se ejecutan de interferencias de otros procesos; uso compartido de c\u00f3digos y datos, con lo que el mecanismo de protecci\u00f3n permite que ciertos procesos de un mismo programa que comparten una tarea tengan memoria en com\u00fan.", "sections": [{"name": "Requisitos", "text": "Los sistemas de gesti\u00f3n de memoria de sistemas operativos multitarea normalmente tratan con las siguientes tareas.", "subsections": [{"name": "Reasignaci\u00f3n", "text": "En los sistemas con memoria virtual, los programas durante su ejecuci\u00f3n pueden salir por un tiempo de la memoria y luego regresar, de modo que no pueden colocarse en el lugar que ocupaban previamente. Por ello debe ser posible que residan en diferentes partes de la memoria en diferentes momentos. As\u00ed, la gesti\u00f3n de memoria en el sistema operativo debe ser capaz de trasladar los programas en memoria y manejar referencias a la memoria y las direcciones en el c\u00f3digo del programa para que siempre apunten a la ubicaci\u00f3n correcta. La unidad de gesti\u00f3n de memoria virtual tambi\u00e9n debe hacer frente a la concurrencia."}, {"name": "Protecci\u00f3n", "text": "Art\u00edculo principal:\nLos procesos no deber\u00edan poder referenciar la memoria de otros procesos sin permiso, para evitarlo existe la protecci\u00f3n de memoria, que evita que c\u00f3digo malicioso o err\u00f3neo de un programa interfiera con la operaci\u00f3n de otros programas en ejecuci\u00f3n."}, {"name": "Memoria compartida", "text": "Aunque la memoria utilizada por diferentes procesos suele estar protegida, algunos procesos puede que s\u00ed tengan que compartir informaci\u00f3n y, para ello, han de acceder la misma secci\u00f3n de memoria. La memoria compartida es una de las t\u00e9cnicas m\u00e1s r\u00e1pidas para posibilitar la comunicaci\u00f3n entre procesos."}, {"name": "Organizaci\u00f3n l\u00f3gica", "text": "Los programas a menudo est\u00e1n organizados en m\u00f3dulos, algunos de los cuales pueden ser compartidos por diferentes programas, algunos son de solo-lectura y otros contienen datos que se pueden modificar. Se escriben y se compilan independientemente. La gesti\u00f3n de memoria es responsable de manejar esta organizaci\u00f3n l\u00f3gica, que se contrapone al espacio de direcciones f\u00edsicas lineales. Una forma de lograrlo es mediante la segmentaci\u00f3n de memoria."}, {"name": "Organizaci\u00f3n f\u00edsica", "text": "La memoria suele dividirse en un almacenamiento primario de alta velocidad y uno secundario de menor velocidad. La gesti\u00f3n de memoria del sistema operativo se ocupa de trasladar la informaci\u00f3n entre estos dos niveles de memoria."}]}, {"name": "Gesti\u00f3n de memoria en DOS", "text": "V\u00e9ase tambi\u00e9n:\nAdem\u00e1s de la gesti\u00f3n est\u00e1ndar de memoria, la barrera de los 640 KB de MS-DOS y los sistemas compatibles dieron lugar al desarrollo de programas conocidos como gestores de memoria cuando las memorias principales de las PC comenzaron a ser mayores que 640 KB a finales de los a\u00f1os 1980. Estos desplazan porciones del sistema operativo fuera de su localizaci\u00f3n tradicional para incrementar la cantidad de memoria convencional o semiconvencional disponible para otras aplicaciones. El EMM386, es un ejemplo, fue parte de la instalaci\u00f3n est\u00e1ndar de las \u00faltimas versiones de DOS, as\u00ed como el QEMM. Estos permitieron el uso de memoria m\u00e1s all\u00e1 de la barrera de los 640 KB, donde la memoria sol\u00eda estar reservada a la memoria de acceso aleatorio, y memorias superiores.", "subsections": []}, {"name": "Notas y referencias", "text": "\u2191 La Asignaci\u00f3n de memoria es llamada por algunos \"alocar\" (del ingl\u00e9s allocate que significa \"asignar\"), pero la palabra  tiene otro significado para el Diccionario de la lengua espa\u00f1ola de la Real Academia Espa\u00f1ola.", "subsections": []}, {"name": "Bibliograf\u00eda", "text": "Ciriaco Garc\u00eda de Celis (1994). \u00abCap\u00edtulo VIII: La gesti\u00f3n de memoria del DOS\u00bb. El universo digital del IBM PC, AT y PS/2 (4\u00aa edici\u00f3n). Facultad de Ciencias de Valladolid: Grupo Universitario de Inform\u00e1tica.\u00a0\nWilson, P.R.; Johnstone, M.S.; Neely, M.; Boles, D. (1995). \u00abDynamic Storage Allocation: A Survey and Critical Review\u00bb. Memory Management: International Workshop, Iwmm'95, Kinross, Uk, September 27\u201329, 1995: Proceedings (en ingl\u00e9s) (Springer). ISBN\u00a0978-3-540-60368-9. Consultado el 6 de enero de 2008.\u00a0\nBerger, E.D.; Zorn, B.G.; McKinley, K.S. (2001). \u00abComposing high-performance memory allocators\u00bb. ACM SIGPLAN Notices (en ingl\u00e9s) 36 (5): 114-124. doi:10.1145/381694.\u00a0\nBerger, E.D.; Zorn, B.G.; McKinley, K.S. (2002). \u00abReconsidering custom memory allocation\u00bb. Proceedings of the 17th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications (en ingl\u00e9s). ACM Press New York, NY, USA. pp.\u00a01-12.\u00a0 La referencia utiliza el par\u00e1metro obsoleto |coauthors= (ayuda)", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Asignaci\u00f3n de memoria\nConmutaci\u00f3n de bancos de memoria\nMemoria virtual\nPaginaci\u00f3n de memoria\nPuntero\nRecolector de basura\nTabla de paginaci\u00f3n\nUnidad de gesti\u00f3n de memoria", "subsections": []}, {"name": "Enlaces externos", "text": "www.memorymanagement.org The Memory Management Reference.\nlinux-mm.org Linux Memory Management.\nwww.enderunix.org/docs/memory.pdf Archivado el 10 de mayo de 2012 en Wayback Machine. Memory Management For System Programmers", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Go_(lenguaje_de_programaci%C3%B3n)", "title": "Go (lenguaje de programaci\u00f3n)", "summary": "[\n]\nGo es un lenguaje de programaci\u00f3n concurrente y compilado con tipado est\u00e1tico inspirado en la sintaxis de C, pero con seguridad de memoria y recolecci\u00f3n de basura. Ha sido desarrollado por Google[9]\u200b y sus dise\u00f1adores iniciales fueron Robert Griesemer, Rob Pike y Ken Thompson.[10]\u200b Actualmente est\u00e1 disponible en formato binario para los sistemas operativos Windows, GNU/Linux, FreeBSD  y Mac OS X, pudiendo tambi\u00e9n ser instalado en estos y en otros sistemas mediante el c\u00f3digo fuente.[11]\u200b[12]\u200b Go es un lenguaje de programaci\u00f3n compilado, concurrente, imperativo, estructurado y orientado a objetos que de momento est\u00e1 disponible para diferentes tipos de sistemas Unix-like, incluidos Linux, FreeBSD, Mac OS X y Plan 9 (puesto que parte del compilador est\u00e1 basado en un trabajo previo sobre el sistema operativo Inferno). Las arquitecturas soportadas son i386, amd64 y ARM.", "sections": [{"name": "Nombrado", "text": "El d\u00eda de la publicaci\u00f3n del lenguaje Go, Francis McCabe, desarrollador del lenguaje de programaci\u00f3n Go! (anteriormente llamado Go), solicit\u00f3 que se le cambiase el nombre al lenguaje de Google para evitar confusiones con su lenguaje.[13]\u200b McCabe cre\u00f3 Go! en el a\u00f1o 2003; sin embargo, a\u00fan no ha registrado el nombre.[14]\u200b Go es un nuevo lenguaje de programaci\u00f3n para sistemas lanzado por Google en noviembre de 2009. Aunque empez\u00f3 a ser desarrollado en septiembre de 2007 por Robert Griesemer, Rob Pike y Ken Thompson.", "subsections": []}, {"name": "Caracter\u00edsticas", "text": "Go es un proyecto de c\u00f3digo abierto.[15]\u200b\nGo usa una sintaxis similar a C.[16]\u200b\nGo usa tipado est\u00e1tico.\nGo es un lenguaje compilado, al igual que C y C++.\nProvee un recolector de basura, reflexi\u00f3n y algunas otras capacidades de lenguajes de alto nivel.\nLos binarios de Go tienen la caracter\u00edstica de compilaci\u00f3n cruzada de manera nativa.\nGo admite el paradigma de programaci\u00f3n orientada a objetos, pero a diferencia de otros lenguajes de programaci\u00f3n no dispone de herencia de tipos y tampoco de palabras clave que denoten claramente que soporta este paradigma.\nEn Go, la definici\u00f3n de un tipo (\"clase\") se realiza por medio de declaraciones separadas (interfaces, types, structs, embedded values).\nGo permite el uso de delegaci\u00f3n (a trav\u00e9s de embedded values) y polimorfismo (por medio de interfaces).\nGo utiliza la concurrencia a trav\u00e9s de las gorutinas.\nGo esta orientado a aprovechar sistemas con m\u00faltiples procesadores y procesamiento en red.[17]\u200b\nGo admite la tipificaci\u00f3n din\u00e1mica de datos tambi\u00e9n conocida como Duck typing.[18]\u200b[19]\u200b\nUn struct puede implementar una interfaz de forma autom\u00e1tica.[20]\u200b", "subsections": []}, {"name": "Excepciones", "text": "Go no utiliza excepciones.[21]\u200b Los creadores del lenguaje han dado varios motivos para que esto sea as\u00ed. La principal es que a\u00f1adir una capa de excepciones agrega una complejidad innecesaria al lenguaje y al entorno de ejecuci\u00f3n. Por definici\u00f3n las excepciones deber\u00edan ser excepcionales, pero al final se acaban usando como controladores del flujo de la aplicaci\u00f3n y dejan de tener la finalidad de excepcionalidad. Seg\u00fan los creadores, las excepciones tienen que ser realmente excepcionales y el uso que se le da mayoritariamente no justifica su existencia.\nAdem\u00e1s, resulta en flujos con saltos no obvios. Por ejemplo, una excepci\u00f3n no controlada en una funci\u00f3n, que se esperaba no pudiese lanzarla, lleva la ejecuci\u00f3n hasta el primer catch que se encuentre. Eso puede dificultar la depuraci\u00f3n.\nOtros lenguajes modernos como Rust tambi\u00e9n han prescindido de las excepciones por las mismas razones.", "subsections": []}, {"name": "Diferencias principales con C", "text": "Aunque su sintaxis es similar, Go difiere mucho de C. V\u00e9anse algunos ejemplos.", "subsections": [{"name": "Declaraciones al rev\u00e9s", "text": "En Go las declaraciones se realizan al rev\u00e9s desde la perspectiva de C (o C++ o Java). La idea principal en C es que se declara una variable como una expresi\u00f3n que denota su tipo. Seg\u00fan los creadores, aunque la idea detr\u00e1s de la declaraci\u00f3n de tipos en C es buena, los tipos y las expresiones gramaticales no se mezclan demasiado bien y el resultado puede ser confuso. Go sin embargo, separa la expresi\u00f3n y la sintaxis de tipo, lo cual simplifica las cosas."}, {"name": "Par\u00e9ntesis", "text": "En C es necesario utilizar par\u00e9ntesis al evaluar expresiones dentro de estructuras de control (por ejemplo, en estructuras if-then-else y for-next). En Go es considerado poco \"idiom\u00e1tico\" utilizar par\u00e9ntesis en estructuras de control."}, {"name": "Punto y coma", "text": "En Go el uso del car\u00e1cter punto y coma \u201c;\u201c al final de una instrucci\u00f3n es opcional."}, {"name": "Aritm\u00e9tica de punteros", "text": "Go no tiene aritm\u00e9tica de punteros. Seg\u00fan los creadores, la raz\u00f3n es la seguridad. Sin aritm\u00e9tica de punteros es posible crear un lenguaje en el que no se puede obtener una direcci\u00f3n ilegal que sea usada de forma incorrecta. La falta de aritm\u00e9tica de punteros simplifica la implementaci\u00f3n del recolector de basura. Adem\u00e1s, optimizando el compilador y con el hardware actual, un bucle que utiliza los \u00edndices de un array puede ser tan eficaz como un bucle que utiliza aritm\u00e9tica de punteros."}, {"name": "++ y --", "text": "En Go, el uso de ++ y -- para incrementar y decrementar el valor de una variable es una sentencia y no una expresi\u00f3n. Adem\u00e1s, solo puede utilizarse en su versi\u00f3n sufija pues seg\u00fan los autores, la versi\u00f3n prefija pierde todo su sentido en la ausencia de aritm\u00e9tica de punteros."}]}, {"name": "Programaci\u00f3n orientada a objetos", "text": "Para algunos autores, la herencia o las clases no son conceptos esenciales para el paradigma de POO, sino m\u00e1s bien un medio de implementaci\u00f3n. Existen desde hace tiempo lenguajes orientados a objetos que no admiten clases, sino que se basan en prototipos, como Javascript o Self. Seg\u00fan declaraciones de Alan Kay, creador de Smalltalk, lo esencial del paradigma es el paso de mensajes.[22]\u200b\nGo tiene tipos y m\u00e9todos, y permite un estilo de programaci\u00f3n orientado a objetos que reemplaza el uso de clases por estructuras las cuales admiten construir jerarqu\u00edas, es decir, no soporta el uso herencia y favorece en su lugar el patr\u00f3n de composici\u00f3n. En Go, el concepto de \u201cinterfaz\u201c es similar al usado en Java: cualquier objeto (value) que cumpla el contrato especificado por una interfaz (sin necesidad de una declaraci\u00f3n expl\u00edcita) obtiene ese tipo. Tambi\u00e9n existen formas de embeber estructuras dentro de otras estructuras para obtener algo an\u00e1logo a las subclases. Los m\u00e9todos de Go son m\u00e1s generales que los de C++ o Java, y se incluyen en las estructuras declarando funciones asociadas a estas. Pueden ser definidos para cualquier tipo de datos; no solo para los registros. Por su parte las interfaces de Go a diferencia de lenguajes como Java, son de tipo impl\u00edcito, es decir que se considera que la interfaz ha sido implementada cuando una estructura implementa sus m\u00e9todos aun cuando esto no se especifique.", "subsections": []}, {"name": "Aplicaciones", "text": "Algunas aplicaciones notables de c\u00f3digo abierto escritas en Go son:[23]\u200b\nCaddy, un servidor web HTTP/2 de c\u00f3digo abierto con capacidad HTTPS autom\u00e1tica\nCockroachDB, una base de datos SQL de c\u00f3digo abierto, con capacidad de supervivencia, fuertemente consistente y escalable\nConsul, un software para el descubrimiento de servicios basado en DNS y que proporciona almacenamiento distribuido de valores clave, segmentaci\u00f3n y configuraci\u00f3n.\nDocker, un conjunto de herramientas para desplegar contenedores Linux\nEdgeX, una plataforma de c\u00f3digo abierto independiente de los proveedores, alojada por la Fundaci\u00f3n Linux, que proporciona un marco com\u00fan para la inform\u00e1tica de borde del IoT industrial[24]\u200b.\nHugo, un generador de sitios est\u00e1ticos\nGrafana, aplicaci\u00f3n web de visualizaci\u00f3n y formato de datos m\u00e9tricos\nInfluxDB, una base de datos de c\u00f3digo abierto espec\u00edfica para manejar datos de series temporales con requisitos de alta disponibilidad y alto rendimiento\nInterPlanetary File System, un protocolo hipermedia peer-to-peer con direcciones de contenido[25]\u200b.\nJuju, una herramienta de orquestaci\u00f3n de servicios de Canonical, empaquetadores de Ubuntu Linux\nSistema de gesti\u00f3n de contenedores Kubernetes\nGolang Pagoda framework[26]\u200b\nlnd, una implementaci\u00f3n de la red Bitcoin Lightning[27]\u200b\nMattermost, un sistema de chat en equipo\nNATS Messaging, un sistema de mensajer\u00eda de c\u00f3digo abierto que se basa en los principios de rendimiento, escalabilidad y facilidad de uso.\nOpenShift, una plataforma de computaci\u00f3n en la nube como servicio de Red Hat\nRclone, un programa de l\u00ednea de comandos para gestionar archivos en el almacenamiento en la nube y otros servicios de alta latencia\nSnappy, un gestor de paquetes para Ubuntu Touch desarrollado por Canonical\nSyncthing, una aplicaci\u00f3n cliente/servidor de sincronizaci\u00f3n de archivos de c\u00f3digo abierto\nTerraform, una herramienta de aprovisionamiento de infraestructura de nube m\u00faltiple de c\u00f3digo abierto de HashiCorp\nTiDB, una base de datos distribuida HTAP de c\u00f3digo abierto compatible con el protocolo MySQL de PingCAP\nVitess, una base de datos de c\u00f3digo abierto, distribuida y compatible con MySQL, de YouTube, que ahora est\u00e1 alojada en la Cloud Native Computing Foundation[28]\u200b[29]\u200b.\narctil, herramienta de evaluaci\u00f3n de la seguridad web[30]\u200b", "subsections": []}, {"name": "Ejemplos", "text": "El cl\u00e1sico programa Hola mundo en Go es similar a como se har\u00eda en C++. Con este t\u00edpico ejemplo podemos apreciar que en cuanto a sintaxis son muy similares:\npackage\n \nmain\nimport\n\"fmt\"\nfunc\n()\n{\n    \nfmt\n.\nPrintln\n(\n\"Hola, mundo.\"\n)\n}\nLa notaci\u00f3n de los comentarios es exactamente la misma que la de C++\n/* ...\n   ...\n   ... */\n// ...\nUn programa para una aplicaci\u00f3n web.\n\"log\"\n\"net/http\"\nholaFunc\nw\nhttp\nResponseWriter\n,\nr\n*\nRequest\nFprintln\n\"Hola mundo!\"\nHandleFunc\n\"/\"\nlog\nFatal\nListenAndServe\n\":8080\"\nnil\n))", "subsections": []}, {"name": "Referencias", "text": "\u2191 \u00abFirst-Class Functions in Go\u00bb. Consultado el 14 de noviembre de 2018. \u00abGo supports ... a functional programming style in a strongly typed language.\u00bb\u00a0\n\u2191 \u00abIs Go an object-oriented language?\u00bb. Consultado el 13 de abril de 2019. \u00abAlthough Go has types and methods and allows an object-oriented style of programming, there is no type hierarchy.\u00bb\u00a0\n\u2191 \u00abGo: code that grows with grace\u00bb. Consultado el 24 de junio de 2018. \u00abGo is Object Oriented, but not in the usual way.\u00bb\u00a0\n\u2191 https://go.dev/doc/devel/release\n\u2191 \u00ablang/go: go-1.4 \u2013 Go programming language\u00bb. OpenBSD ports. 23 de diciembre de 2014. Consultado el 19 de enero de 2015.\u00a0\n\u2191 \u00abGo Porting Efforts\u00bb. Go Language Resources. cat-v. 12 de enero de 2010. Consultado el 18 de enero de 2010.\u00a0\n\u2191 \u00abText file LICENSE\u00bb. The Go Programming Language. Consultado el 5 de octubre de 2012.\u00a0\n\u2191 \u00abAdditional IP Rights Grant\u00bb. The Go Programming Language. Consultado el 5 de octubre de 2012.\u00a0\n\u2191 Kincaid, Jason (10 de noviembre de 2009). \u00abGoogle's Go: A New Programming Language That's Python Meets C++\u00bb. TechCrunch. Consultado el 18 de enero de 2010.\u00a0\n\u2191 \u00abLanguage Design FAQ\u00bb. golang.org. 16 de enero de 2010. Consultado el 27 de febrero de 2010.\u00a0\n\u2191 Gu\u00eda de instalaci\u00f3n (ingl\u00e9s)\n\u2191 Gu\u00eda de instalaci\u00f3n (espa\u00f1ol)\n\u2191 Francis McCabe (10 de noviembre de 2009). \u00abI have already used the name for *MY* programming language\u00bb (en ingl\u00e9s). Consultado el 13 de noviembre de 2009.\u00a0\n\u2191 Thomas Claburn (11 de noviembre de 2009).  InformationWeek, ed. \u00abGoogle 'Go' Name Brings Accusations Of 'Evil'\u00bb (en ingl\u00e9s). Archivado desde el original el 22 de julio de 2010. Consultado el 13 de noviembre de 2009.\u00a0\n\u2191 \u00abThe Go Programming Language\u00bb. golang.org. Consultado el 4 de diciembre de 2020.\u00a0\n\u2191 Metz, Cade (5 de mayo de 2011). \u00abGoogle Go boldly goes where no code has gone before\u00bb. The Register.\u00a0\n\u2191 \u00abDocumentation - The Go Programming Language\u00bb. golang.org. Consultado el 4 de diciembre de 2020.\u00a0\n\u2191 Ryer, Mat (3 de junio de 2016). \u00abDuck typing in Go\u00bb. Medium (en ingl\u00e9s). Consultado el 4 de diciembre de 2020.\u00a0\n\u2191 \u00abIs Go Duck-Typed?\u00bb. Bionic | FullStory. 4 de marzo de 2020. Consultado el 4 de diciembre de 2020.\u00a0\n\u2191  Go by Example: Structs \n\u2191 \u00abError handling and Go - The Go Blog\u00bb. blog.golang.org. Consultado el 4 de diciembre de 2020.\u00a0\n\u2191 Alan Kay (10 de octubre de 1998). \u00abprototypes vs classes was: Re: Sun's HotSpot\u00bb. Lista de distribuci\u00f3n de Squeak (en ingl\u00e9s). squeakfoundation.org. Consultado el 21 de noviembre de 2015.\u00a0\n\u2191 avelino/awesome-go: A curated list of awesome Go frameworks, libraries and software, consultado el 10 de enero de 2018\u00a0.\n\u2191 \u00abEdgeX Foundry Project\u00bb. GitHub (en ingl\u00e9s). Consultado el 6 de febrero de 2021.\u00a0\n\u2191 \u00abipfs/go-ipfs\u00bb. GitHub (en ingl\u00e9s). Consultado el 1 de junio de 2018.\u00a0\n\u2191 \u00abGolang Pagoda framework\u00bb. Qualified.One. 29 de noviembre de 2022.\u00a0\n\u2191 \u00ablightningnetwork/lnd\u00bb, GitHub, consultado el 29 de abril de 2020\u00a0.\n\u2191 \u00abCNCF to host Vitess\u00bb. Cloud Native Computing Foundation. 5 de febrero de 2018.\u00a0\n\u2191 \u00abCloud Native Computing Foundation Announces Vitess Graduation\u00bb. Cloud Native Computing Foundation. 5 de noviembre de 2019.\u00a0\n\u2191 \u00abarctil\u00bb. arctil.com.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": "Sitio web oficial (en ingl\u00e9s)\nGo en Espa\u00f1ol.\nExamples of the most important features of this languages. (en ingl\u00e9s", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Gr%C3%A1ficas_tortuga", "title": "Gr\u00e1ficas tortuga", "summary": "Gr\u00e1fica tortuga es un t\u00e9rmino usado en computaci\u00f3n gr\u00e1fica como m\u00e9todo para programar gr\u00e1ficos vectoriales usando un cursor (la \u00abtortuga\u00bb) relativo a unas coordenadas cartesianas. Las gr\u00e1ficas tortuga son un elemento clave en el Lenguaje de programaci\u00f3n Logo.", "sections": [{"name": "Resumen", "text": "La tortuga tiene tres atributos:\nUna posici\u00f3n\nUna orientaci\u00f3n\nUna pluma, teniendo atributos como color, ancho y un indicador de pluma  arriba y abajo.\nLa tortuga se mueve con comandos relativos a su posici\u00f3n, como \u00abavanza 10\u00a0\u00bb y \u00abgira a la izquierda 90\u00a0\u00bb. Los valores \u00ab10\u00bb o \u00ab90\u00bb representan magnitudes diferentes, las cuales se verifican en la pr\u00e1ctica. En general las diferentes versiones de LOGO no acompa\u00f1an el n\u00famero con la magnitud, como pixeles, espacios o grados sexagesimales. La pluma que lleva la tortuga tambi\u00e9n se puede controlar, estableci\u00e9ndola, d\u00e1ndole color o un ancho. Un estudiante puede entender (y predecir y razonar) el movimiento de la tortuga imagin\u00e1ndose qu\u00e9 har\u00eda \u00e9l mismo si fuera una tortuga. Seymour Papert llama a esto razonamiento de sincronicidad corporal.\nDesde estos bloques de construcci\u00f3n uno puede construir formas m\u00e1s complejas como cuadrados, tri\u00e1ngulos, c\u00edrculos y otras figuras compositivas. Combinadas con control de flujo, procedimientos y recursi\u00f3n. La idea de las gr\u00e1ficas tortuga tambi\u00e9n es \u00fatil en los sistema-L para generar fractales.\nLa geometr\u00eda tortuga tambi\u00e9n se usa a veces en entornos gr\u00e1ficos como alternativa a los sistemas de direcci\u00f3n de coordenadas estrictos.", "subsections": []}, {"name": "Historia", "text": "Las gr\u00e1ficas tortuga fueron a\u00f1adidas al lenguaje de programaci\u00f3n Logo por Seymour Papert a finales de la d\u00e9cada de 1960 para apoyar la versi\u00f3n de Papert del robot tortuga, un simple robot controlado desde el puesto de trabajo del usuario dise\u00f1ado para llevar a cabo funciones de dibujo asignadas mediante una peque\u00f1a pluma retr\u00e1ctil en su interior o adjuntada al cuerpo del robot. La geometr\u00eda tortuga trabaja diferente de la que geometr\u00eda cartesiana (direcciones x,y), estando basada en vectores (direcci\u00f3n relativa a una distancia desde el punto inicial) en vez de sistemas de direcci\u00f3n de coordenadas como el PostScript. De forma pr\u00e1ctica, el uso de geometr\u00eda tortuga en lugar de otros modelos tradicionales mimetiza el movimiento l\u00f3gico real del robot tortuga. La tortuga suele ser representada como un tri\u00e1ngulo o como un icono de una tortuga (aunque pueda representarse con cualquier icono).\nLa hija de Papert, Artemis, ha usado gr\u00e1ficas tortuga para explorar la relaci\u00f3n entre arte y algoritmos.\nLos gr\u00e1ficos tortuga son soportados por la mayor\u00eda de plataformas. KTurtle es una aplicaci\u00f3n de programaci\u00f3n disponible en la mayor\u00eda de distribuciones Linux que no usa el lenguaje Logo, y Vectoria es una app disponible para iPhone.[1]\u200b", "subsections": []}, {"name": "Extensi\u00f3n a las tres dimensiones", "text": "Las ideas tras los gr\u00e1ficos tortuga se pueden extender hasta incluir el espacio tridimensional. Esto se consigue usando uno o varios modelos de coordenadas diferentes. Si la tortuga opera en coordenadas cil\u00edndricas, tiene entonces una localizaci\u00f3n y un grado en su plano, y su plano puede ser rotado sobre el eje vertical. Esto se suele representar con la tortuga teniendo dos \u00e1ngulos rotacionales diferentes, uno para el plano y otro que determina el \u00e1ngulo del plano. Normalmente cambiar el \u00e1ngulo del plano no mueve a la tortuga.\nTambi\u00e9n se usan otros modelos de coordenadas.", "subsections": []}, {"name": "Gr\u00e1fica tortuga programada en Python", "text": "Con el m\u00f3dulo Turtle del lenguaje Python se pueden dibujar figuras intrincadas utilizando programas que repiten movimientos simples.[2]\u200b\nfrom\nturtle\nimport\n*\ncolor\n(\n'red'\n,\n'yellow'\n)\nbegin_fill\n()\nwhile\nTrue\n:\nforward\n200\nleft\n170\nif\nabs\npos\n())\n<\n1\nbreak\nend_fill\ndone", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Tortuga (robot)\nLenguaje de programaci\u00f3n Logo\nMSWLogo\nPython M\u00f3dulo Turtle\nPythonTurtle - Standalone application\nKTurtle\nCheloniidae Turtle Graphics\nStarLogo\nLos ordenadores de One Laptop per Child contienen una actividad Turtle Art para jugar con las gr\u00e1ficas tortuga\nSistema-L", "subsections": []}, {"name": "Referencias", "text": "\u2191 Vectoria Company Website\n\u2191 \u00abGr\u00e1ficos con Turtle\u00bb. https://docs.python.org/. Consultado el 25 de abril de 2021.\u00a0", "subsections": []}, {"name": "Bibliograf\u00eda", "text": "Abelson and diSessa. Turtle geometry: the computer as a medium for exploring mathematics. Cambridge, MA: MIT Press, 1981.", "subsections": []}, {"name": "Enlaces externos", "text": "\"Web Turtle\", gr\u00e1ficas tortuga en una p\u00e1gina web, por Bill Kendrick, autor de Tux Paint\nArte creado con gr\u00e1ficas tortuga por Artemis Papert\n\"3D Flying Pipe-laying Turtle\" por Tom Verhoeff de The Wolfram Demonstrations Project (retrieved on 2009-01-31)\n\"Gr\u00e1ficas tortuga\", escritas en MGrammar, por Jason Hogg\nTurtle Art website mantenido por Brian Silverman y Artemis Papert\nTurtle Art activity incluido en Sugar plataforma de aprendizaje\nJS Turtle Graphics una implementaci\u00f3n simple de Javascript de gr\u00e1ficas tortuga, por John Villar\nJSTurtlegraphics V0.2 a simple browser-based implementation aimed at children (using the more common command names)\nTurtleWax gr\u00e1ficas tortuga en JavaScript, por Dave Balmer\nParaiso del Logo el para\u00edso del logo\nVersiones versiones de logo para descarga", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Groovy_(lenguaje_de_programaci%C3%B3n)", "title": "Groovy (lenguaje de programaci\u00f3n)", "summary": "Groovy es un lenguaje de programaci\u00f3n orientado a objetos implementado sobre la plataforma Java. Tiene caracter\u00edsticas similares a Python, Ruby, Perl y Smalltalk. La especificaci\u00f3n JSR 241 se encarga de su estandarizaci\u00f3n para una futura inclusi\u00f3n como componente oficial de la plataforma Java. \nGroovy usa una sintaxis muy parecida a Java, comparte el mismo modelo de objetos, de hilos y de seguridad. Desde Groovy se puede acceder directamente a todas las API existentes en Java. El bytecode generado en el proceso de compilaci\u00f3n es totalmente compatible con el generado por el lenguaje Java para la Java Virtual Machine (JVM), por tanto puede usarse directamente en cualquier aplicaci\u00f3n Java. Todo lo anterior unido a que la mayor parte de c\u00f3digo escrito en Java es totalmente v\u00e1lido en Groovy hacen que este lenguaje sea de muy f\u00e1cil adopci\u00f3n para programadores Java; la curva de aprendizaje se reduce mucho en comparaci\u00f3n con otros lenguajes que generan bytecode para la JVM, tales como Jython  o JRuby. Groovy puede usarse tambi\u00e9n de manera din\u00e1mica como un lenguaje de scripting. \nGroovy 1.0 apareci\u00f3 el 2 de enero de 2007. Despu\u00e9s de varias versiones beta y otras tantas candidatas a release, el 7 de diciembre de 2007 apareci\u00f3 la versi\u00f3n Groovy 1.1 que finalmente fue renombrada a Groovy 1.5 con el fin de notar la gran cantidad de cambios que ha sufrido con respecto a la versi\u00f3n 1.0. En diciembre de 2009 se public\u00f3 la versi\u00f3n 1.7.", "sections": [{"name": "Referencias", "text": "Koenig, Dierk; Andrew Glover; Paul King; Guillaume Laforge; Jon Skeet (2006). Groovy in Action. Manning. ISBN 1-932394-84-2.\u00a0\nKenneth, Barclay; John Savage. Groovy Programming: An Introduction for Java Developers. ISBN 978-0-12-372507-3. Archivado desde el original el 12 de enero de 2010. Consultado el 16 de diciembre de 2007.\u00a0\nBosanac, Dejan. Scripting in Java: Languages, Frameworks, and Patterns. ISBN 0-321-32193-6. Archivado desde el original el 14 de noviembre de 2011. Consultado el 18 de noviembre de 2018.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": "Sitio oficial\nTutorial de introducci\u00f3n a Groovy\nJSR 241\nGroovy and Apache Derby database - tutorial\nOpen Directory: Java: Extensions: Groov", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Guido_van_Rossum", "title": "Guido van Rossum", "summary": " \n \n \n \n \nPythonABC \nGuido van Rossum (Haarlem, Pa\u00edses Bajos, 31 de enero de 1956) es un inform\u00e1tico,[1]\u200b conocido por ser el autor del lenguaje de programaci\u00f3n Python. Naci\u00f3 y creci\u00f3 en los Pa\u00edses Bajos.\nEs la primera persona en obtener el t\u00edtulo BDFL (Benevolent Dictator for Life), cuyo t\u00edtulo es otorgado a personajes importantes en el mundo del c\u00f3digo abierto, teniendo asignada la tarea de fijar las directrices sobre la evoluci\u00f3n de Python, as\u00ed como la de tomar decisiones finales sobre el lenguaje que todos los desarrolladores acatan. Van Rossum tiene fama de ser bastante conservador, realizando pocos cambios al lenguaje entre versiones sucesivas, intentando mantener siempre la compatibilidad con versiones anteriores. El 12 de julio de 2018, con un mensaje enviado a la lista de python-committers, anunci\u00f3 su retiro de los procesos de decisi\u00f3n.[2]\u200b\nEn el a\u00f1o 2001 recibi\u00f3 el FSF Award for the Advancement of Free Software como reconocimiento por su trabajo.[3]\u200b En diciembre de 2005 fue contratado como desarrollador por la empresa estadounidense Google. Despu\u00e9s de siete a\u00f1os en Google, a principios de diciembre de 2012, anuncia su retirada de la empresa norteamericana para incorporarse en enero de 2013 a la plantilla de la compa\u00f1\u00eda Dropbox.[4]\u200b Desde noviembre del 2020 es parte de la Divisi\u00f3n de Desarrolladores de la empresa Microsoft.", "sections": [{"name": "Biograf\u00eda", "text": "Van Rossum naci\u00f3 y creci\u00f3 en los Pa\u00edses Bajos, donde obtuvo su titulaci\u00f3n universitaria en matem\u00e1ticas y computaci\u00f3n por la Universidad de \u00c1msterdam en 1982. A lo largo de su vida ha trabajado tanto en la industria, ya mencionado en la introducci\u00f3n, como en diversos centros de investigaci\u00f3n como el instituto holand\u00e9s Centrum Wiskunde & Inform\u00e1tica (CWI), el estadounidense Instituto Nacional de Est\u00e1ndares y Tecnolog\u00eda o la Corporaci\u00f3n para las Iniciativas Investigadoras Nacionales en Reston, Virginia.", "subsections": []}, {"name": "Trabajo", "text": "Aunque durante su estancia en el CWI contribuy\u00f3 a desarrollar rutinas para BSD Unix y tambi\u00e9n trabaj\u00f3 en el desarrollo del lenguaje de programaci\u00f3n ABC, su trabajo m\u00e1s destacado es el lenguaje de programaci\u00f3n Python.", "subsections": [{"name": "Python", "text": "Van Rossum escribi\u00f3 en 1996:\n\u00abHace seis a\u00f1os, en diciembre de 1989, estaba buscando un proyecto de programaci\u00f3n como hobby que me mantuviera ocupado durante las semanas de Navidad. Mi oficina estar\u00eda cerrada y no tendr\u00eda m\u00e1s que mi ordenador de casa a mano. Decid\u00ed escribir un int\u00e9rprete para el nuevo lenguaje de scripting que hab\u00eda estado ideando recientemente: un descendiente de ABC que gustar\u00eda a los hackers de Unix/c. Eleg\u00ed el nombre de Python para el proyecto, encontr\u00e1ndome en un estado de \u00e1nimo ligeramente irreverente (y siendo un gran fan de Monty Python's Flying Circus)\u00bb.[5]\u200b\nEn el a\u00f1o 2000 agreg\u00f3:\n\u00abEl predecesor de Python, ABC, estaba inspirado en SETL - Lambert Meertens se pas\u00f3 un a\u00f1o trabajando en el grupo de SETL en la Universidad de Nueva York antes de que surgiera el dise\u00f1o final de ABC\u00bb.[6]\u200b"}, {"name": "Programaci\u00f3n para todos", "text": "En el a\u00f1o 1999 Van Rossum realiz\u00f3 una propuesta a DARPA llamada Computer Programming for Everybody, en la que describi\u00f3 qu\u00e9 y c\u00f3mo deber\u00eda ser Python:\nPython deber\u00eda ser f\u00e1cil, intuitivo y tan potente como sus principales competidores.\nEl proyecto ser\u00eda de c\u00f3digo abierto para que cualquiera pudiera colaborar.\nEl c\u00f3digo escrito en Python ser\u00eda tan comprensible como cualquier texto en ingl\u00e9s.\nPython deber\u00eda ser apto para las actividades diarias permitiendo la construcci\u00f3n de prototipos en poco tiempo.\nPython es al d\u00eda de hoy uno de los lenguajes de programaci\u00f3n m\u00e1s populares. En 2011 se proclam\u00f3 el tercer lenguaje m\u00e1s popular de la forja GitHub y seg\u00fan la encuesta[7]\u200b se encuentra entre los 10 lenguajes de programaci\u00f3n m\u00e1s demandados en las ofertas de trabajo."}, {"name": "Mondrian (software de Google)", "text": "Durante su estancia en Google, Van Rossum desarroll\u00f3 Mondrian, un sistema de revisi\u00f3n de c\u00f3digo que ser\u00eda internamente utilizado en la compa\u00f1\u00eda. Se trata de una aplicaci\u00f3n web cuyo c\u00f3digo est\u00e1 mayormente escrito en Python. El nombre del software es en honor a Piet Mondrian, un pintor holand\u00e9s."}, {"name": "Dropbox", "text": "El 7 de diciembre de 2012 Van Rossum empez\u00f3 a trabajar en Dropbox[8]\u200b\nDespu\u00e9s de seis a\u00f1os y medio, se hace p\u00fablica (29/10/2019) su partida de Dropbox para jubilarse."}, {"name": "Microsoft", "text": "Casi un a\u00f1o despu\u00e9s de estar retirado, Guido decide volver el 12/11/2020 para trabajar en la divisi\u00f3n de Desarrollo de la compa\u00f1\u00eda Microsoft."}, {"name": "Premios y reconocimientos", "text": "En 2001 Van Rossum recibi\u00f3 el FSF Award for the Advancement of Free Software por parte de la Free Software Foundation (FSF). El premio le fue entregado en 2002 en la conferencia FOSDEM llevada a cabo en Bruselas, B\u00e9lgica.\nEn mayo de 2003 le fue otorgado el premio NLUUG.\nLa Association for Computing Machinery reconoci\u00f3 en 2006 a Van Rossum como un Ingeniero Sobresaliente."}]}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Python", "subsections": []}, {"name": "Notas y referencias", "text": "\u2191 https://www.python.org/~guido/Resume.html\n\u2191 van Rossum, Guido (12 de julio de 2018). \u00abpython-committers Transfer of power\u00bb. python-committers (en ingl\u00e9s). Consultado el 13 de julio de 2018.\u00a0\n\u2191 2001 Free Software Awards Consultado 14 de agosto de 2010.\n\u2191 2012 El creador de Python, Guido Van Rossum, deja Google y ficha por Dropbox.\n\u2191 Foreword for \"Programming Python\" (1st ed.)\n\u2191 [Python-Dev] SETL (was: Lukewarm about range literals)\n\u2191 Programming Language Popularity\n\u2191 \u00abDropbox Tech Blog\u00a0\u00bb Blog Archive\u00a0\u00bb Welcome Guido!\u00bb. Tech.dropbox.com. 7 de diciembre de 2012. Consultado el 6 de septiembre de 2013.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": " Wikimedia Commons alberga una categor\u00eda multimedia sobre Guido van Rossum.\nGuido van Rossum", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Haskell", "title": "Haskell", "summary": "Haskell (pronunciado /h\u00e6sk\u0259l/)[1]\u200b es un lenguaje de programaci\u00f3n estandarizado multi-prop\u00f3sito, funcionalmente puro, con evaluaci\u00f3n no estricta y memorizada, y fuerte tipificaci\u00f3n est\u00e1tica. Su nombre se debe al l\u00f3gico estadounidense Haskell Curry, debido a su aporte al c\u00e1lculo lambda, el cual tiene gran influencia en el lenguaje. En Haskell, \"una funci\u00f3n es un ciudadano de primera clase\" del lenguaje de programaci\u00f3n. Como lenguaje de programaci\u00f3n funcional, el constructor de controles primario es la funci\u00f3n. El lenguaje tiene sus or\u00edgenes en las observaciones de Haskell Curry y sus descendientes intelectuales.\nEn los a\u00f1os 1980 se constituy\u00f3 un comit\u00e9 cuyo objetivo era crear un lenguaje funcional que reuniera las caracter\u00edsticas de los m\u00faltiples lenguajes funcionales de la \u00e9poca, el m\u00e1s notable Miranda, y resolviera la confusi\u00f3n creada por la proliferaci\u00f3n de los mismos.\nEl lenguaje evoluciona r\u00e1pidamente y (ver m\u00e1s abajo) como los representantes actuales del est\u00e1ndar de facto. El \u00faltimo est\u00e1ndar oficial es: Haskell 2010, cuyas diferencias respecto al anterior est\u00e1ndar Haskell 98 son:\nNuevas caracter\u00edsticas del lenguaje:\nInterfaz de funciones for\u00e1neas (FFI), que permite usar c\u00f3digo C en un programa Haskell y c\u00f3digo Haskell en un programa C. Un ejemplo explicativo se puede encontrar aqu\u00ed\nNombres jer\u00e1rquicos para los m\u00f3dulos, por ejemplo Data.Bool.\nGuardianes con patrones.\nCaracter\u00edsticas eliminadas del lenguaje:\nSintaxis de patrones (n+k). Con lo cual, la siguiente definici\u00f3n de la funci\u00f3n factorial no es v\u00e1lida en Haskell 2010 y posteriores: fact (n+1) = (n+1) * fact n.\nLas caracter\u00edsticas m\u00e1s interesantes de Haskell incluyen el soporte para tipos de datos y funciones recursivas, listas, tuplas, guardas y encaje de patrones. La combinaci\u00f3n de las mismas pueden resultar en algunas funciones casi triviales cuya versi\u00f3n en lenguajes imperativos pueden llegar a resultar extremadamente tediosas de programar. Haskell es, desde 2002, uno de los lenguajes funcionales sobre los que m\u00e1s se ha investigado. Se han desarrollado muchas variantes:\nVersiones paralelas del MIT y Glasgow, ambas denominadas Parallel Haskell.\nM\u00e1s versiones paralelas y distribuidas de Haskell llamadas Distributed Haskell (anteriormente Goffin) y Eden.\nUna versi\u00f3n con ejecuci\u00f3n especulativa: Eager Haskell.\nVarias versiones orientadas a objetos: Haskell++, O'Haskell y Mondrian.\nUna versi\u00f3n educativa llamada Gofer desarrollada por Mark Jones que fue suplantada por Hugs (ver abajo).\nPara informaci\u00f3n m\u00e1s detallada, referirse al sitio oficial o a los enlaces al final de este art\u00edculo.", "sections": [{"name": "Historia", "text": "A partir de la publicaci\u00f3n de Miranda, en 1985, los lenguajes funcionales proliferaron. En 1987, exist\u00edan compitiendo entre ellos m\u00e1s de una docena de lenguajes de programaci\u00f3n puros funcionales no estrictos. Durante la conferencia sobre Lenguajes de Programaci\u00f3n Funcional y Arquitecturas de Ordenador (FPCA '87) en Portland, Oreg\u00f3n, se mantuvo un encuentro durante el cual se alcanz\u00f3 un fuerte consenso entre sus participantes para formar un comit\u00e9 que definiese un est\u00e1ndar abierto para tales lenguajes. Esto se hizo con el prop\u00f3sito expreso de consolidar los lenguajes existentes en uno \u00fanico que sirviera como base para la investigaci\u00f3n futura en dise\u00f1o de lenguajes.[2]\u200b La primera versi\u00f3n de Haskell (\"Haskell 1.0\") se defini\u00f3 en 1990.[3]\u200b Los esfuerzos del comit\u00e9 resultaron en una serie de definiciones del lenguaje, que culminaron a finales de 1997 en Haskell 98, que se intent\u00f3 fuera una versi\u00f3n del lenguaje m\u00ednima, estable y portable, junto con una biblioteca est\u00e1ndar asociada para la ense\u00f1anza, y como base de futuras extensiones. El comit\u00e9 expresamente aprob\u00f3 la creaci\u00f3n de extensiones y variantes de Haskell 98 mediante la adici\u00f3n e incorporaci\u00f3n de caracter\u00edsticas experimentales.\nEn enero de 1999, el est\u00e1ndar del lenguaje Haskell 98 se public\u00f3 en \"The Haskell 98 Report\". En enero de 2003, se public\u00f3 una versi\u00f3n revisada en \"Haskell 98 Language and Libraries: The Revised Report\".[4]\u200b El lenguaje contin\u00faa evolucionando r\u00e1pidamente, con las implementaciones de Hugs y de GHC (v\u00e9ase m\u00e1s adelante), que representan el actual est\u00e1ndar de facto. A principios del 2006 comenz\u00f3 el proceso de definici\u00f3n de un sucesor del est\u00e1ndar de Haskell 98, llamado informalmente Haskell\u2032 (\"Haskell Prime\").[5]\u200b Este proceso intenta producir una revisi\u00f3n menor de Haskell 98.[6]\u200b En 2010 se lanza Haskell 2010.", "subsections": []}, {"name": "Tipos simples predefinidos", "text": "En Haskell, y en lo siguiente, \"o\u00a0:: t\" quiere decir que la expresi\u00f3n \"o\" es tiene tipo \"t\", y \"t -> s\" es un tipo, espec\u00edficamente una funci\u00f3n, que consume algo de tipo \"t\" y produce algo de tipo \"s\". El operador (->) asocia a la derecha, ya que \"t -> s -> r\" quiere decir \"t -> (s -> r)\".", "subsections": [{"name": "El tipo Bool", "text": "Los valores con este tipo representan expresiones l\u00f3gicas cuyo resultado puede ser True o False.\nFunciones y operadores\n(&&)\u00a0:: Bool -> Bool -> Bool. Conjunci\u00f3n l\u00f3gica.\n(||)\u00a0:: Bool -> Bool -> Bool. Disyunci\u00f3n l\u00f3gica.\nnot\u00a0:: Bool -> Bool. Negaci\u00f3n l\u00f3gica.\notherwise\u00a0:: Bool. Funci\u00f3n constante que devuelve el valor True."}, {"name": "El tipo Int", "text": "Los valores de este tipo son n\u00fameros enteros de precisi\u00f3n limitada que cubren al menos el intervalo [-2^29, 2^29 - 1] ([minBound, maxBound])."}, {"name": "El tipo Integer", "text": "Los valores de este tipo son n\u00fameros enteros de precisi\u00f3n ilimitada que tienen las mismas funciones y operadores del tipo Int."}, {"name": "El tipo Float", "text": "Los valores de este tipo son n\u00fameros reales. ( 2010, 23.4, 5.7 )\nFunciones y operadores\n(+), (-), (*), (/), (^)\u00a0:: Float -> Float -> Float. Suma, resta, producto, divisi\u00f3n real y potencia de exponente entero.\nabs, signum, negate\u00a0:: Int -> Int. Valor absoluto, signo y negaci\u00f3n.\n(**)\u00a0:: Float -> Float. Potencia de exponente real"}, {"name": "El tipo Double", "text": "Los valores de este tipo son n\u00fameros reales, de mayor rango y con aproximaciones m\u00e1s precisas que los de tipo Float."}, {"name": "El tipo Char", "text": "Los valores de este tipo son caracteres que se encuentran en una masa de alta complejidad de en una suma de caracteres dados con su alta definici\u00f3n.\nAntes de utilizar esta funci\u00f3n en hugs debemos utilizar IMPORT CHAR antes de nuestro algoritmo."}, {"name": "Tuplas", "text": "Los elementos que forman una tupla pueden ser del mismo o de distintos tipos. Es un conjunto de componentes relacionados.\nPor ejemplo: ('a', True,3)"}, {"name": "Listas", "text": "Los valores de este tipo son una colecci\u00f3n de elementos del mismo tipo. Existen dos constructores para listas:\n[Elementos_separados_por_comas], por ejemplo: [1,2,3,4]\n(primer_elemento:resto_de_la_lista), por ejemplo: (1:(2:(3:(4:[]))))"}]}, {"name": "Implementaciones", "text": "Todas las siguientes implementaciones cumplen en su totalidad, o casi en su totalidad, con los est\u00e1ndares de Haskell 98 y son distribuidas bajo licencias Open Source. No se conocen implementaciones comerciales del lenguaje.\nHugs ([1]) es un int\u00e9rprete. Ofrece una compilaci\u00f3n r\u00e1pida de los programas y un tiempo razonable de ejecuci\u00f3n. Tambi\u00e9n viene con una biblioteca gr\u00e1fica muy simple, lo que lo hace adecuado para quienes lo est\u00e1n aprendiendo. Sin embargo no es una implementaci\u00f3n a despreciar, es una de las m\u00e1s livianas y compatibles.\nGHC ([2]): \"Glasgow Haskell Compiler\" compila a c\u00f3digo nativo en una variedad de arquitecturas y puede tambi\u00e9n compilar a C. Es, probablemente, uno de los compiladores m\u00e1s populares e incluso tiene unas cuantas bibliotecas (por ejemplo OpenGL) que, aunque muy \u00fatiles, s\u00f3lo funcionan bajo GHC.\nnhc98 ([3]) es otro compilador con un mejor tiempo de ejecuci\u00f3n que Hugs. Esta implementaci\u00f3n se enfoc\u00f3 a minimizar la utilizaci\u00f3n de la memoria convirti\u00e9ndola en una buena opci\u00f3n para arquitecturas lentas o antiguas.\nHBC ([4]) es otro compilador a c\u00f3digo nativo de Haskell. Si bien no ha sido actualizado en el \u00faltimo tiempo sigue siendo bastante \u00fatil.\nHelium ([5]) es un nuevo dialecto de Haskell. Se centr\u00f3 en ser muy f\u00e1cil de aprender; por ello, no incluye soporte para todo el est\u00e1ndar de Haskell, haciendo que no sea totalmente compatible.", "subsections": []}, {"name": "Entornos de desarrollo", "text": "Existen varios IDEs (Integrated Development Environment, o en espa\u00f1ol, entornos de desarrollo integrado) y/o plugins que se pueden utilizar para desarrollar aplicaciones en Haskell. La mayor\u00eda son open source, pero tambi\u00e9n existen con licencia comercial.", "subsections": [{"name": "Open Source", "text": "IntelliJ plugin for Haskell\nEclipseFP plugin for Eclipse IDE\nColorer plugin for Eclipse IDE\nLeksah\nKDevelop\nVim\nEmacs\nAtom"}, {"name": "Comerciales", "text": "Haskell for Mac\nSublime-Haskell"}]}, {"name": "Web Frameworks", "text": "La comunidad de desarrollo web en Haskell ha tenido recientemente un gran impulso en la actividad, lo que resulta en una gran cantidad de opciones de bibliotecas para utilizar.[7]\u200b A continuaci\u00f3n se presenta la lista de framework activos en Haskell para desarrollo web. ", "subsections": [{"name": "Happstack", "text": "Est\u00e1 dise\u00f1ado para que los desarrolladores puedan prototipar r\u00e1pidamente, implementar sin dolor, escalar masivamente, operar confiablemente y cambiar f\u00e1cilmente. Soporta entornos GNU/Linux, macOS, FreeBSD y Windows.\nSe considera un framework web completo, el principal componente es happstack-server: un servidor HTTP integrado, combinadores de enrutamiento y fileserving. Adem\u00e1s, una serie de paquetes que sol\u00edan ser acoplados a Happstack ahora han sido desacoplados de \u00e9l, pero siguen promocionados y documentados para su uso con Happstack:\nSafecopy: soporte de serializaci\u00f3n y migraci\u00f3n de tipos de datos\nAcid-state: un sistema de almacenamiento NoSQL ACID con soporte nativo para tipos Haskell"}, {"name": "Snap", "text": "Es un framework de desarrollo web basado en una arquitectura snaplet.\nTiene una completa documentaci\u00f3n y cuenta con una suite de pruebas con un alto nivel de cobertura de c\u00f3digo, pero es un software de etapa inicial con interfaces en constante evoluci\u00f3n"}, {"name": "Yesod", "text": "Est\u00e1 dise\u00f1ado para aplicaciones web RESTful, de tipo seguro y con alto rendimiento.\nAprovechando la cuasi-cotizaci\u00f3n para las tareas m\u00e1s f\u00e1ciles, se provee aplicaciones web concisas con altos niveles de seguridad. Las plantillas de Hamlet se comprueban en tiempo de compilaci\u00f3n para ver si son correctas y el controlador utiliza URL seguras para asegurarse de que s\u00f3lo est\u00e1 generando URL v\u00e1lidas. Sigue los principios del Modelo-Vista-Controlador de forma holgada."}, {"name": "Miku", "text": "Una biblioteca sencilla para el r\u00e1pido prototipado web en Haskell, inspirada en Ruby's Rack y Sinatra."}, {"name": "Lemmachine", "text": "Es un RESTful web framework. La arquitectura principal es una copia de Webmachine basada en Erlang, que es actualmente la mejor referencia de documentaci\u00f3n. Se destaca por su din\u00e1mico Webmachine escrito de forma tipada dependiente en Agda."}, {"name": "Mohws", "text": "Es un servidor web con un sistema de m\u00f3dulos y soporte para CGI. Basado en el Servidor Web Haskell original de Simon Marlow."}, {"name": "Salvia", "text": "Es un servidor web y un framework de aplicaciones web que puede ser utilizado para escribir sitios web din\u00e1micos en Haskell. Desde el c\u00f3digo de protocolo de nivel inferior hasta el c\u00f3digo de aplicaci\u00f3n de alto nivel, todo est\u00e1 escrito como un controlador de Salvia. Este enfoque hace que el servidor sea extremadamente extensible."}, {"name": "Scotty", "text": "Es un framework web inspirado en Sinatra de Ruby, usando WAI y Warp. Es una manera sencilla de escribir aplicaciones web RESTful y declarativas. Tiene buena documentaci\u00f3n para todas las funciones relevantes."}, {"name": "Servant", "text": "Es un framework ligero principalmente para APIs REST. Permite especificar las especificaciones de una API como alias de tipo y luego trabajar con estos alias de tipo para crear servidores, documentaci\u00f3n, c\u00f3digo de cliente en Haskell y Javascript. Est\u00e1 basado en WAI."}, {"name": "MFlow", "text": "Es un servidor de aplicaciones web. MFlow es una abreviatura de \"Flujo de mensajes\". Se trata de un framework basado en la continuaci\u00f3n, en lugar de otros frameworks basados en la continuaci\u00f3n como Ocsigen (Ocaml), Coccoon (javascript) o Seaside (Smalltalk), se basa en una m\u00f3nada de retroceso que mantiene la sincronizaci\u00f3n del estado de ejecuci\u00f3n con la navegaci\u00f3n del usuario. Desde la discontinuaci\u00f3n de WASH, MFlow es el \u00fanico marco de estilo de continuaci\u00f3n escrito en Haskell hasta la fecha.\nUtiliza las bibliotecas web Haskell est\u00e1ndares y/o t\u00e9cnicas: WAI, Warp, Blaze HTML, HSP. Su n\u00facleo es el servidor y la renderizaci\u00f3n independiente. Una clase de formlets extendidos se utilizan para crear componentes aut\u00f3nomos, llamados widgets. Tienen formato, AJAX y c\u00f3digo de servidor. Se pueden componer para crear la interfaz de usuario."}, {"name": "Spock", "text": "Es un framework orientado al r\u00e1pido desarrollo web: Ofrece todo lo necesario para iniciar r\u00e1pidamente el hacking web con Haskell: enrutamiento, middleware, JSON, blaze, sesiones, cookies, ayudante de base de datos, protecci\u00f3n csrf, estado global."}, {"name": "Wheb", "text": "Es un framework WAI para crear aplicaciones web robustas, de alta concurrencia, simples y efectivas. Su objetivo principal es ampliar la funcionalidad de la base de la biblioteca WAI y proporcionar un punto de entrada f\u00e1cil en los servidores web de Haskell. Facilita la creaci\u00f3n de plugins. Los plugins pueden agregar rutas, middleware, configuraciones e incluso manejar la limpieza de recursos en el apagado del servidor. Las rutas denominadas permiten a los plugins generar din\u00e1micamente sus rutas en tiempo de ejecuci\u00f3n basadas en la configuraci\u00f3n"}, {"name": "WebAPI", "text": "WebApi es una biblioteca ligera basada en WAI que permite definir peticiones y respuestas para los puntos finales como tipos a trav\u00e9s de un contrato. El contrato se considera la \u00fanica fuente de verdad, con lo que WebApi permite crear servicios Web / API REST, generar un cliente Haskell para los servicios existentes de la API, generar un servidor simulador para simular las solicitudes y respuestas."}, {"name": "DAML", "text": "Es un framework de contrato inteligente basado en el Glasgow Haskell Compiler."}]}, {"name": "Comunidad", "text": "", "subsections": [{"name": "The Haskell Symposium", "text": "\"The Haskell Symposium\" es un simposio anual organizado por la International Conference on Functional Programming (ICFP). El simposio est\u00e1 patrocinado por la Association for Computing Machinery (ACM), bajo los auspicios del ACM Special Interest Group on programming languages (SIGPLAN).\nEl prop\u00f3sito del evento es discutir la experiencia de los programadores con Haskell, y el futuro desarrollo del lenguaje. El alcance del simposio incluye todos los aspectos del dise\u00f1o, la sem\u00e1ntica, la teor\u00eda, la aplicaci\u00f3n, la ejecuci\u00f3n, y la ense\u00f1anza de Haskell.\nAntes de 2008, el evento era conocido como \"The Haskell Workshop\". El cambio de nombre refleja el aumento constante de la influencia del evento en la comunidad en general, as\u00ed como un creciente n\u00famero de presentaciones de alta calidad que hacen el proceso de aceptaci\u00f3n muy competitivo."}, {"name": "The Summer of Haskell", "text": "\"The Summer of Haskell\" es un evento organizado por haskell.org para llegar a los estudiantes y animarles a contribuir a la comunidad Haskell con la ayuda de mentores experimentados. Este programa est\u00e1 abierto a estudiantes universitarios, mayores de 18 a\u00f1os, en la mayor\u00eda de los pa\u00edses."}]}, {"name": "Ejemplos", "text": "Funci\u00f3n recursiva para calcular el factorial de un n\u00famero natural:\n   \n--Funci\u00f3n recursiva que calcula el factorial de un n\u00famero natural\nfactorial\n \n::\nInteger\n->\nn\n      \n|\n<\n0\n  \n=\nerror\n\"no existe el factorial para enteros negativos\"\n==\n1\notherwise\n*\n(\n-\n)\nOtra versi\u00f3n de la funci\u00f3n para calcular el factorial de un natural usando la funci\u00f3n product del m\u00f3dulo Data.List:\n--Funci\u00f3n para calcular el factorial de un entero usando la funci\u00f3n product del m\u00f3dulo Data.List\nproduct\n[\n..\n]\nFunci\u00f3n sumatorio de los elementos de una lista de enteros\n--Sumar elementos de una lista\nsumar\nInt\n[]\nx\n:\nxs\n+\nFunci\u00f3n para calcular las ra\u00edces de una ecuaci\u00f3n de segundo grado a partir de sus coeficientes\n--Funci\u00f3n para calcular las ra\u00edces de una ecuaci\u00f3n de segundo grado a partir de sus coeficientes\nra\u00edces\nFloat\n,\na\nb\nc\n    \ndisc\n>=\n((\nraizDisc\n/\ndenom\n                   \n\"La ecuaci\u00f3n tiene ra\u00edces complejas\"\nwhere\n         \n4\nsqrt\n2\nFunci\u00f3n que aproxima el n\u00famero e\n--Funci\u00f3n para calcular el valor de e (2.71828182845905)\neuler\nDouble\n0.0\n1.0\nFunci\u00f3n para calcular el m\u00e1ximo com\u00fan divisor de dos n\u00fameros enteros mediante el algoritmo de Euclides\nmcd\ny\nmod\nFunci\u00f3n que realiza la criba de Erat\u00f3stenes (de una lista dada deja solo los n\u00fameros primos)\neratostenes\nnot\nnull\n&&\n^\n>\nlast\n                      \n<-\n`\n/=\nFunci\u00f3n que determina si un n\u00famero natural es pal\u00edndromo (en base 10)\nisPalindrome\nBool\nFalse\nlet\ns\nshow\nin\nreverse\nFunci\u00f3n que realiza la potencia de un n\u00famero con recursividad dividiendo el expediente entre 2\npotencia\ne\nif\nthen\npotencia\n))\nelse\np\ndiv\nFunci\u00f3n que eval\u00faa de manera perezosa la lista de n\u00fameros primos utilizando una cl\u00e1usula where y listas intencionales\nnumerosPrimos\n3\n],\nes_primo\n        \neven\nm\n5\nImplementaci\u00f3n del algoritmo Quicksort\nqsort\nOrd\n=>\nqsort\n<=\n++", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Example of most Haskell features\nQuickCheck", "subsections": []}, {"name": "Notas y referencias", "text": "\u2191 Chevalier, Tim (28 de enero de 2008), \u00abanybody can tell me the pronuncation of \"haskell\"?\u00bb, lista de correo Haskell-cafe, http://www.haskell.org/pipermail/haskell-cafe/2008-January/038756.html, consultado el 12 de marzo de 2011.\u00a0\n\u2191 \u00abPreface\u00bb. Haskell 98 Language and Libraries: The Revised Report. diciembre de 2002.\u00a0\n\u2191 \u00abThe History of Haskell\u00bb. Archivado desde el original el 29 de abril de 2009.\u00a0\n\u2191 Simon Peyton Jones (diciembre de 2002). \u00abHaskell 98 Language and Libraries: The Revised Report\u00bb.\u00a0\n\u2191 \u00abFuture development of Haskell\u00bb.\u00a0\n\u2191 \u00abWelcome to Haskell'\u00bb. The Haskell' Wiki. Archivado desde el original el 23 de abril de 2009. Consultado el 5 de mayo de 2007.\u00a0\n\u2191 \u00abWeb - HaskellWiki\u00bb. wiki.haskell.org (en ingl\u00e9s). Consultado el 26 de junio de 2017.\u00a0", "subsections": []}, {"name": "Bibliograf\u00eda", "text": "Ruiz, Blas; Guti\u00e9rrez, Francisco; Guerrero, Pablo; y Gallardo, Jos\u00e9. Razonando con Haskell. Un curso sobre programaci\u00f3n funcional. Thomson.", "subsections": []}, {"name": "Enlaces externos", "text": "Espa\u00f1ol:\nExample of most Haskell features\nIntroducci\u00f3n a Haskell Archivado el 5 de abril de 2010 en Wayback Machine.\nLenguaje de Programaci\u00f3n Funcional Haskell Haskell B\u00e1sico\nUna Introducci\u00f3n Agradable a Haskell Versi\u00f3n en espa\u00f1ol del libro \"A Gentle Introduction to Haskell\".\n\u00a1Aprende Haskell por el bien de todos! Traducci\u00f3n de la obra \"Learn you a Haskell for great good\".\nHaskell B\u00e1sico Curso de Haskell\nIngl\u00e9s:\nExample of most Haskell features\nHaskell P\u00e1gina oficial de Haskell\nHaskell in examples Examples of how to use Haskell\nTry Haskell Prueba Haskell en l\u00ednea\nA Gentle Introduction to Haskell 98 (pdf format) Una simple introducci\u00f3n a Haskell 98\nThe Evolution of a Haskell Programmer Una forma c\u00f3mica de ver los distintos estilos de programaci\u00f3n en Haskell\nOnline Bibliography of Haskell Research Bibliograf\u00eda de investigaciones en Haskell\nLearn You a Haskell for Great Good\nImplementaciones:\nHugs Haskell User's Gofer System\nGHC The Glasgow Haskell Compiler\nHelium, Heliu", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Herencia_(inform%C3%A1tica)", "title": "Herencia (inform\u00e1tica)", "summary": "Busca fuentes: \u00abHerencia (inform\u00e1tica)\u00bb \u2013 noticias\u00a0\u00b7 libros\u00a0\u00b7 acad\u00e9mico\u00a0\u00b7 im\u00e1genes\nEn programaci\u00f3n orientada a objetos, la herencia es, despu\u00e9s de la agregaci\u00f3n o composici\u00f3n, el mecanismo m\u00e1s utilizado para alcanzar algunos de los objetivos m\u00e1s preciados en el desarrollo de software como lo son la reutilizaci\u00f3n y la extensibilidad. A trav\u00e9s de ella, los dise\u00f1adores pueden crear nuevas clases partiendo de una clase o de una jerarqu\u00eda de clases preexistente (ya comprobadas y verificadas) evitando con ello el redise\u00f1o, la modificaci\u00f3n y verificaci\u00f3n de la parte ya implementada. La herencia facilita la creaci\u00f3n de objetos a partir de otros ya existentes e implica que una subclase obtiene todo el comportamiento (m\u00e9todos) y finalmente los atributos (variables) de su superclase.\nEs la relaci\u00f3n entre una clase general y otra clase m\u00e1s espec\u00edfica.\nPor ejemplo: Si declaramos una clase p\u00e1rrafo derivada de una clase texto, todos los m\u00e9todos y variables asociadas con la clase texto, son autom\u00e1ticamente heredados por la subclase p\u00e1rrafo.\nLa herencia es uno de los mecanismos de los lenguajes de programaci\u00f3n orientada a objetos basados en clases, por medio del cual una clase se deriva de otra de manera que extiende su funcionalidad. La clase de la que se hereda se suele denominar clase base, clase padre, superclase, clase ancestro (el vocabulario que se utiliza suele depender en gran medida del lenguaje de programaci\u00f3n).\nEn los lenguajes que cuentan con un sistema de tipos fuerte y estrictamente restrictivo con el tipo de datos de las variables, la herencia suele ser un requisito fundamental para poder emplear el Polimorfismo, al igual que un mecanismo que permita decidir en tiempo de ejecuci\u00f3n qu\u00e9 m\u00e9todo debe invocarse en respuesta a la recepci\u00f3n de un mensaje, conocido como enlace tard\u00edo o enlace din\u00e1mico.", "sections": [{"name": "Ejemplo en Java", "text": "import\n \njavax.*\n;\njavax.swing.JOptionPane\npublic\nclass\nMamifero\n{\n    \nprivate\nint\npatas\nString\nnombre\nvoid\nimprimirPatas\n(){\n      \nJOptionPane\n.\nshowMessageDialog\n(\nnull\n,\n\" Tiene \"\n+\n\" patas\\n\"\n\"Mamifero\"\nINFORMATION_MESSAGE\n);\n}\nMamifero\n){\nthis\nnombre\n=\npatas\n  \nPerro\nextends\nMamifero\nPerro\nsuper\n4\nGato\nGato\nCrearPerro\nstatic\nmain\n[]\nargs\n)\nPerro\nperrito\nnew\n\"Pantaleon\"\nimprimirPatas\n();\n   \n/*Est\u00e1 en la clase mam\u00edfero*/\nSe declaran las clases mam\u00edferos, gato y perro, haciendo que gato y perro sean unos mam\u00edferos (derivados de esta clase), y se ve c\u00f3mo a trav\u00e9s de ellos se nombra al animal pero as\u00ed tambi\u00e9n se accede a patas d\u00e1ndole el valor por defecto para esa especie.\nEs importante destacar tres cosas. La primera, es que la herencia no es un mecanismo esencial en el paradigma de programaci\u00f3n orientada a objetos; en la mayor\u00eda de los lenguajes orientados a objetos basados en prototipos las clases no existen, en consecuencia tampoco existe la herencia y el polimorfismo se logra por otros medios. La segunda, es que el medio preferido para lograr los objetivos de extensibilidad y reutilizaci\u00f3n es la agregaci\u00f3n o composici\u00f3n. La tercera, es que en lenguajes con un sistema de tipos d\u00e9biles, el polimorfismo se puede lograr sin utilizar la herencia.\nPor otra parte y aunque la herencia no es un concepto indispensable en el paradigma de programaci\u00f3n orientada a objetos, es mucho m\u00e1s que un mecanismo de los lenguajes basados en clases, porque implica una forma de razonar sobre c\u00f3mo dise\u00f1ar ciertas partes de un programa. Es decir, no solo es un mecanismo que permite implementar un dise\u00f1o, sino que establece un marco conceptual que permite razonar sobre c\u00f3mo crear ese dise\u00f1o.", "subsections": []}, {"name": "Clase Abstracta", "text": "La herencia permite que existan clases que nunca ser\u00e1n instanciadas directamente. En el ejemplo anterior, una clase \"perro\" heredar\u00eda los atributos y m\u00e9todos de la clase \"mam\u00edfero\", as\u00ed como tambi\u00e9n \"gato\", \"delf\u00edn\" o cualquier otra subclase; pero, en ejecuci\u00f3n, no habr\u00e1 ning\u00fan objeto \"mam\u00edfero\" que no pertenezca a alguna de las subclases. En ese caso, a una clase as\u00ed se la conocer\u00eda como Clase Abstracta. La ausencia de instancias espec\u00edficas es su \u00fanica particularidad, para todo lo dem\u00e1s es como cualquier otra clase.", "subsections": []}, {"name": "Herencia y ocultaci\u00f3n de informaci\u00f3n", "text": "En ciertos lenguajes, el dise\u00f1ador puede definir qu\u00e9 variables de instancia y m\u00e9todos de los objetos de una clase son visibles. En C++ y java esto se consigue con las especificaciones private, protected y public. Solo las variables y m\u00e9todos definidos como p\u00fablicos en un objeto ser\u00e1n visibles por todos los objetos. En otros lenguajes como Smalltalk, todas las variables de instancia son privadas y todos los m\u00e9todos son p\u00fablicos.\nDependiendo del lenguaje que se utilice, el dise\u00f1ador tambi\u00e9n puede controlar qu\u00e9 miembros de las superclases son visibles en las subclases. En el caso de java y C++ los especificadores de acceso (private, protected, public) de los miembros de la superclase afectan tambi\u00e9n a la herencia:", "subsections": []}, {"name": "Redefinici\u00f3n de m\u00e9todos", "text": "En la clase derivada se puede redefinir alg\u00fan m\u00e9todo existente en la clase base, con el objeto de proveer una implementaci\u00f3n diferente. Para redefinir un m\u00e9todo en la subclase, basta con declararlo nuevamente con la misma signatura (nombre y par\u00e1metros).\nSi se invoca un cierto m\u00e9todo de un objeto que no est\u00e1 definido en su propia clase, se dispara la b\u00fasqueda hacia arriba en la jerarqu\u00eda a la que dicha clase pertenece. Sin embargo, si existieran dos m\u00e9todos con la misma signatura, uno en la clase y otro en una superclase, se ejecutar\u00eda el de la clase, no el de la superclase.\nCuando se redefine un m\u00e9todo en una clase es posible acceder expl\u00edcitamente al m\u00e9todo original de su superclase, mediante una sintaxis espec\u00edfica que depende del lenguaje de programaci\u00f3n empleado (en muchos lenguajes se trata de la palabra clave super).", "subsections": []}, {"name": "Ventajas", "text": "Ayuda a los programadores a ahorrar c\u00f3digo y tiempo, ya que la clase padre ha sido implementada y verificada con anterioridad, restando solo referenciar desde la clase derivada a la clase base (que suele ser extends, inherits, subclass u otras palabras clave similares, dependiendo del lenguaje).\nLos objetos pueden ser construidos a partir de otros similares. Para ello es necesario que exista una clase base (que incluso puede formar parte de una jerarqu\u00eda de clases m\u00e1s amplia).\nLa clase derivada hereda el comportamiento y los atributos de la clase base, y es com\u00fan que se le a\u00f1ada su propio comportamiento o que modifique lo heredado.\nToda clase pueden servir como clase base para crear otras.", "subsections": []}, {"name": "Desventajas", "text": "Si la jerarqu\u00eda de clases es demasiado compleja, el programador puede tener problemas para comprender el funcionamiento de un programa. Adem\u00e1s puede volverse m\u00e1s complejo detectar y resolver errores de programaci\u00f3n, por ejemplo al modificar una clase padre que afecta el funcionamiento de las subclases.\nOtro problema es que las subclases se deben definir en c\u00f3digo, por lo que los usuarios del programa no puede definir subclases nuevas. Otros patrones de dise\u00f1o permiten que los usuarios puedan definir variantes de una entidad en tiempo de ejecuci\u00f3n.\n==Estereotipos de herencia=", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Herencia_m%C3%BAltiple", "title": "Herencia m\u00faltiple", "summary": "Herencia m\u00faltiple hace referencia a la caracter\u00edstica de los lenguajes de programaci\u00f3n orientada a objetos en la que una clase puede heredar comportamientos y caracter\u00edsticas de m\u00e1s de una superclase. Esto contrasta con la herencia simple, donde una clase solo puede heredar de una superclase.\nAlgunos lenguajes que soportan herencia m\u00faltiple en su mayor parte son: C++, Centura SQL Windows, CLOS, Eiffel, Object REXX, Perl y Python.\nLa herencia m\u00faltiple permite a una clase tomar funcionalidades de otras clases, como permitir a una clase llamada MusicoEstudiante heredar de una clase llamada Persona, una clase llamada M\u00fasico, y una clase llamada Trabajador. Esto puede ser abreviado como MusicoEstudiante\u00a0: Persona, M\u00fasico, Trabajador.", "sections": [{"name": "Ambig\u00fcedades", "text": "En la herencia m\u00faltiple aparecen ambig\u00fcedades, como en el ejemplo de encima: si la clase M\u00fasico heredaba de Persona y Trabajador, y la clase Trabajador heredaba de Persona. Existir\u00edan las siguientes reglas::\nMusicoEstudiante\u00a0: Persona, M\u00fasico, Trabajador\nM\u00fasico\u00a0: Persona, Trabajador\nTrabajador: Persona\nSi un compilador est\u00e1 mirando la clase MusicoEstudiante necesita saber si debe juntar las caracter\u00edsticas iguales o si deben estar separadas. Por ejemplo, tendr\u00eda sentido unir las caracter\u00edsticas \"Edad\" de Persona para MusicoEstudiante. La edad de una persona no cambia si le consideras una Persona, un Trabajador o un M\u00fasico. Sin embargo, tendr\u00eda sentido separar la caracter\u00edstica \"Nombre\" de Persona y M\u00fasico si los m\u00fasicos usan un nombre art\u00edstico diferente de su nombre real. Las opciones de juntar y separar son v\u00e1lidas seg\u00fan el contexto, y solo el programador sabe qu\u00e9 opci\u00f3n es correcta para la clase que est\u00e1 dise\u00f1ando.\nCada lenguaje de programaci\u00f3n trata estos problemas de herencia repetida de diferente forma:\nC++ requiere que el programador establezca de qu\u00e9 clase padre vendr\u00e1 la caracter\u00edstica a usar. Por ejemplo con \"Trabajador::Persona.Edad\". C++ no soporta herencia repetida expl\u00edcita porque no habr\u00eda forma de indicar qu\u00e9 superclase usar.\nCLOS permite al programador control total del m\u00e9todo de combinaci\u00f3n, y si no es suficiente, el protocolo de metaobjetos ofrece al programador formas de modificar la herencia, env\u00edo de m\u00e9todos, instanciaci\u00f3n de clases, y otros mecanismos internos sin afectar a la estabilidad del sistema.\nEiffel permite al programador explicitar si junta o separa caracter\u00edsticas que son heredadas de superclases. Eiffel juntar\u00e1 caracter\u00edsticas autom\u00e1ticamente si tienen el mismo nombre e implementaci\u00f3n. El programador tiene la opci\u00f3n de renombrar las caracter\u00edsticas para separarlas. Eiffel tambi\u00e9n permite explicitar herencia repetida como A: B, B.\nLogtalk soporta tanto interfaces como multi-herencia de implementaci\u00f3n, permitiendo declarar alias de m\u00e9todos que ofrecen renombrar y acceder a m\u00e9todos que quedar\u00edan ocultados por el mecanismo de resoluci\u00f3n de conflictos convencional.\nPerl usa la lista de clases para heredar de una lista ordenada. El compilador usa el primer m\u00e9todo que encuentra mediante b\u00fasqueda en profundidad por la lista de superclases.\nJava, Nemerle, Delphi, C# y Objective-C no permiten herencia m\u00faltiple; esto hace que no haya ambig\u00fcedad. Sin embargo, permiten a las clases implementar m\u00faltiples interfaces.", "subsections": []}, {"name": "Debate", "text": "Hay debate sobre si la herencia m\u00faltiple puede ser implementada de forma simple y sin ambig\u00fcedad. Con frecuencia es criticada por su aumentada complejidad y su ambig\u00fcedad, as\u00ed como los problemas de versiones y mantenimiento que puede causar (a menudo resumido como el problema del diamante).[1]\u200b\nLos detractores tambi\u00e9n se\u00f1alan que hay problemas de implementaci\u00f3n de la herencia m\u00faltiple como no ser capaces de explicitar herencia de m\u00faltiple clases y el orden de las sem\u00e1nticas de clase que cambian con la herencia. Hay lenguajes que solucionan todos los problemas t\u00e9cnicos de la herencia m\u00faltiple, pero el debate principal sigue sobre si implementar y usar herencia m\u00faltiple es m\u00e1s f\u00e1cil que usar herencia simple y patrones de dise\u00f1o de software.", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Mixin", "subsections": []}, {"name": "Referencias", "text": "\u2191 (en ingl\u00e9s) Traits: Composable Units of Behavior", "subsections": []}, {"name": "Enlaces externos", "text": "Tutorial sobre el uso de herencia en Eiffel (en ingl\u00e9s", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Historia_de_Python", "title": "Historia de Python", "summary": "Art\u00edculo principal:\nPython es uno de los lenguajes de programaci\u00f3n din\u00e1micos m\u00e1s populares que existen entre los que se encuentran Java, JavaScript, Go y C#. Aunque es considerado a menudo como un lenguaje \"scripting\", es realmente un lenguaje de prop\u00f3sito general. En la actualidad, Python es usado para todo, desde simples \"scripts\", hasta grandes servidores web que proveen servicio ininterrumpido 24\u00d77. Es utilizado para la programaci\u00f3n de interfaces gr\u00e1ficas y bases de datos, programaci\u00f3n web tanto en el cliente como en el servidor (v\u00e9ase Django o Flask) y \"testing\" de aplicaciones. Adem\u00e1s tiene una amplia aceptaci\u00f3n por cient\u00edficos que hacen aplicaciones para las supercomputadores m\u00e1s r\u00e1pidas del mundo y por los ni\u00f1os que reci\u00e9n est\u00e1n comenzando a programar.\nLa historia del lenguaje de programaci\u00f3n Python se remonta hacia finales de los 80s y principio de los 90s,[1]\u200b su implementaci\u00f3n comenz\u00f3 en diciembre de 1989[2]\u200b cuando en Navidad Guido van Rossum que trabajaba en el (CWI) (un centro de investigaci\u00f3n holand\u00e9s de car\u00e1cter oficial que, entre otras cosas, actualmente alberga la oficina central del W3C) decidi\u00f3 empezar el proyecto como un pasatiempo d\u00e1ndole continuidad al lenguaje de programaci\u00f3n ABC del que hab\u00eda formado parte del equipo de desarrollo en el CWI,[3]\u200b dicho lenguaje se enfocaba en ser f\u00e1cil de usar y aprender manteniendo potencia en su desempe\u00f1o pero el hardware disponible en la \u00e9poca de su creaci\u00f3n hac\u00eda dif\u00edcil su uso y el proyecto no trascendi\u00f3 como se esperaba. Van Rossum es por tanto el autor principal de Python y contin\u00faa ejerciendo un rol central decidiendo la direcci\u00f3n del lenguaje, en la comunidad de Python se le conoce como Benevolente Dictador Vitalicio (en ingl\u00e9s: Benevolent Dictator for Life, BDFL). El nombre \"Python\" viene dado por la afici\u00f3n de Van Rossum al grupo Monty Python.\nEl lenguaje de programaci\u00f3n Python fue originalmente desarrollado para el sistema operativo Amoeba.", "sections": [{"name": "Principales influencias de otros lenguajes", "text": "El n\u00facleo de la sintaxis de Python y grandes aspectos de su filosof\u00eda fueron heredados directamente del lenguaje de programaci\u00f3n ABC. Por ejemplo el siguiente c\u00f3digo muestra una funci\u00f3n para obtener el conjunto de todas las palabras en un documento en ABC[4]\u200b y en Python:\ndef\nwords\n(\ndocument\n):\ncollection\n=\nset\n()\nfor\nline\nin\n:\nword\n.\nsplit\n():\nif\nnot\nadd\n)\nreturn\nEn ABC no existe propiamente el tipo de dato conjunto, sino algo como multiconjuntos, es decir, si se inserta un elemento dos veces, aparecer\u00e1 dos veces en esa colecci\u00f3n, pero en Python el if puede ser eliminado porque la operaci\u00f3n add sobre los conjuntos en Python no hace nada si el elemento ya est\u00e1 en el conjunto. Se puede observar perfectamente las similitudes entre ambos c\u00f3digos, la sangr\u00eda, el ciclo for, el operador in, pero tambi\u00e9n sus diferencias, como por ejemplo en ABC no se utilizan par\u00e9ntesis y en Python s\u00ed, adem\u00e1s las palabras claves en ABC son escritas en may\u00fasculas as\u00ed como los nombres de los procedimientos o funciones; ABC hace distinci\u00f3n entre procedimiento y funci\u00f3n, otra diferencia con Python.\nLas principales ideas de ABC que influyeron o se incluyeron en Python fueron seg\u00fan el propio Guido:[5]\u200b\nLa sangr\u00eda para agrupar el c\u00f3digo\nEl car\u00e1cter : para indicar que comienza un bloque indentado (despu\u00e9s de pruebas con usuarios)\nEl dise\u00f1o simple de las instrucciones: if, while, for,...\nTuplas, listas, diccionarios (fuertemente modificados en Python)\nTipos de datos inmutables\nNo imponer l\u00edmites, como tama\u00f1o de un array, etc...\nEl \"prompt\" >>>\nOtras ideas que influyeron en la concepci\u00f3n de Python fue tener un lenguaje que pudiera ser tan potente como C pero tambi\u00e9n expresivo para ejecutar \"scripts\" como sh.[6]\u200b De hecho la sintaxis de Python copia much\u00edsimo de C. Por ejemplo, las palabras claves (if, else, while, for, etc.) son las mismas que en C, los identificadores tienen las mismas reglas para nombrarlos que C, y la mayor\u00eda de los operadores est\u00e1ndar tienen el mismo significado que en C. Una de las mayores diferencias es que Python en lugar de usar llaves para agrupar c\u00f3digo usa sangr\u00eda, la otra gran diferencia es que Python usa tipado din\u00e1mico.\nLos generadores e iteradores fueron inspirados por Icon, y fusionados con las ideas de la programaci\u00f3n funcional en un modelo unificado. Modula-3 fue la base del modelo de excepciones y del sistema de m\u00f3dulos.[1]\u200b[3]\u200b Perl contribuy\u00f3 en las expresiones regulares, usadas para la manipulaci\u00f3n de \"string\".[7]\u200b Las adiciones a biblioteca est\u00e1ndar de Python standard library y algunas opciones sint\u00e1cticas fueron influenciadas por Java algunos ejemplos son: el paquete de logging,[8]\u200b introducido en la versi\u00f3n 2.3,[9]\u200b el paquete threading para aplicaciones multihilos,[10]\u200b el parser SAX, introducido en la versi\u00f3n 2.0, y la sintaxis del decorador que usa @,[11]\u200b incluida en la versi\u00f3n 2.4[12]\u200b", "subsections": []}, {"name": "Cronolog\u00eda de Python", "text": "Fechas de publicaci\u00f3n:[13]\u200b[14]\u200b\nComienzo de la implementaci\u00f3n - December, 1989\nPublicaci\u00f3n interna en CWI - 1990\nPython 0.9.0 - 20 de febrero de 1991\t(publicado en alt.sources)[15]\u200b\nPython 0.9.1 - febrero de 1991\nPython 0.9.2 - oto\u00f1o de 1991\nPython 0.9.4 - 24 de diciembre de 1991\nPython 0.9.5 - 2 de enero de 1992 (solo para Macintosh)\nPython 0.9.6 - 6 de abril de 1992\nPython 0.9.7 beta - 1992\nPython 0.9.8 - 9 de enero de 1993\nPython 0.9.9 - 29 de julio de 1993\nPython 1.0 - enero de 1994\nPython 1.5 - 31 de diciembre de 1997\nPython 1.6 - 5 de septiembre de 2000\nPython 2.0 - 16 de octubre de 2000\nPython 2.1 - 17 de abril de 2001\nPython 2.2 - 21 de diciembre de 2001\nPython 2.3 - 29 de julio de 2003\nPython 2.4 - 30 de noviembre de 2004\nPython 2.5 - 19 de septiembre de 2006\nPython 2.6 - 1 de octubre de 2008\nPython 2.7 - 3 de julio de 2010\nPython 3.0 - 3 de diciembre de 2008\nPython 3.1 - 27 de junio de 2009\nPython 3.2 - 20 de febrero de 2011\nPython 3.3 - 29 de septiembre de 2012\nPython 3.4 - 16 de marzo de 2014\nPython 3.5 - 8 de febrero de 2015\nPython 3.6 - 23 de diciembre de 2016\nPython 3.7 - 12 de junio de 2018\nPython 3.8 - 14 de octubre de 2019\nPython 3.9 - 5 de octubre de 2020", "subsections": []}, {"name": "Primera publicaci\u00f3n", "text": "El 20 de febrero de 1991, van Rossum public\u00f3 el c\u00f3digo por primera vez en alt.sources, con el n\u00famero de versi\u00f3n 0.9.0.[15]\u200b En esta etapa del desarrollo ya estaban presentes clases con herencia, manejo de excepciones, funciones y los tipos modulares, como: str, list, dict, entre otros. Adem\u00e1s en este lanzamiento inicial aparec\u00eda un sistema de m\u00f3dulos adoptado de Modula-3; Van Rossum describe el m\u00f3dulo como \u201cuna de las mayores unidades de programaci\u00f3n de Python\u201d.[1]\u200b El modelo de excepciones en Python es parecido al de Modula-3, con la adici\u00f3n de una cl\u00e1usula else.[3]\u200b En el a\u00f1o 1994 se form\u00f3 comp.lang.python, el foro de discusi\u00f3n principal de Python, marcando un hito en el crecimiento del grupo de usuarios de este lenguaje.", "subsections": []}, {"name": "Versi\u00f3n 1.0", "text": "Python llega a la versi\u00f3n 1.0 en enero de 1994. Las caracter\u00edsticas m\u00e1s importantes incluidas en esta publicaci\u00f3n fueron las herramientas de la programaci\u00f3n funcional lambda, reduce, filter y map. Van Rossum ha comentado que \"Python adquiere lambda, reduce(), filter() y map(), cortes\u00eda de un hacker de Lisp que las extra\u00f1aba y envi\u00f3 parches que funcionaban\".[16]\u200b\nLa \u00faltima versi\u00f3n liberada proveniente de CWI fue Python 1.2. En 1995, van Rossum continu\u00f3 su trabajo en Python en la Corporation for National Research Initiatives (CNRI) en Reston, Virginia, donde lanz\u00f3 varias versiones del software.\nPara la versi\u00f3n 1.4, Python adquiri\u00f3 varias caracter\u00edsticas nuevas. Es notable entre estas los argumentos por nombre inspirados por Modula-3 (que tambi\u00e9n son similares a los de Common Lisp) y soporte \"built-in\" para los n\u00fameros complejos.\nDurante su estancia en CNRI, Van Rossum lanz\u00f3 la iniciativa Computer Programming for Everybody (CP4E), con el fin de hacer la programaci\u00f3n m\u00e1s accesible a m\u00e1s gente, con un nivel de 'alfabetizaci\u00f3n' b\u00e1sico en lenguajes de programaci\u00f3n, similar a las habilidades b\u00e1sicas en ingl\u00e9s y matem\u00e1ticas necesarias por muchos empleadores. Python tuvo un papel crucial en este proceso: debido a su orientaci\u00f3n hacia una sintaxis limpia, ya era id\u00f3neo, y las metas de CP4E presentaban similitudes con su predecesor, ABC. El proyecto fue patrocinado por DARPA.[17]\u200b El proyecto CP4E est\u00e1 inactivo, y mientras tanto Python intenta ser f\u00e1cil de aprender y no muy arcano en su sintaxis y sem\u00e1ntica, pero alcanzar a los no-programadores ya no es una preocupaci\u00f3n activa.[18]\u200b", "subsections": [{"name": "BeOpen", "text": "En el a\u00f1o 2000, el equipo principal de desarrolladores de Python se cambi\u00f3 a BeOpen.com para formar el equipo BeOpen PythonLabs. CNRI pidi\u00f3 que la versi\u00f3n 1.6 fuera publicada hasta el punto de desarrollo en que el equipo abandon\u00f3 CNRI. Consecuentemente su agenda de lanzamiento para la versi\u00f3n 1.6 y la versi\u00f3n 2.0 ten\u00edan una significativa cantidad de solapamiento.[19]\u200b Python 2.0 fue el primer y \u00fanico lanzamiento de BeOpen.com. Despu\u00e9s que Python 2.0 fuera publicado por BeOpen.com, Guido van Rossum y los otros desarrolladores de PythonLabs se unieron a Digital Creations.\nLa publicaci\u00f3n de Python 1.6 inclu\u00eda una nueva licencia de CNRI que era substancialmente m\u00e1s larga que la licencia de CWI que hab\u00eda sido usada en las publicaciones anteriores.\nLa nueva licencia inclu\u00eda una cl\u00e1usula estipulando que la licencia estaba gobernada por las leyes del estado de Virginia.  La Free Software Foundation (FSF) argumento la cl\u00e1usula era incompatible con GNU GPL.  Entonces BeOpen, CNRI, y FSF acordaron cambiar Python hacia una licencia de software libre que lo har\u00eda compatible con GPL.  Python 1.6.1 es b\u00e1sicamente el mismo que Python 1.6, con unos arreglos de bugs, y con la nueva licencia compatible con GPL.[20]\u200b"}]}, {"name": "Versi\u00f3n 2.0", "text": "Python 2.0 tom\u00f3 una importante caracter\u00edstica del lenguaje de programaci\u00f3n funcional Haskell: generaci\u00f3n de listas. La sintaxis de Python para esta construcci\u00f3n es muy similar a la de Haskell, salvo por la preferencia de los caracteres de puntuaci\u00f3n en Haskell, y la preferencia de Python por palabras claves. Python 2.0 introdujo adem\u00e1s un sistema de recolecci\u00f3n de basura capaz de recolectar referencias c\u00edclicas.\nPython 2.1 fue un trabajo derivado de Python 1.6.1, as\u00ed como tambi\u00e9n de Python 2.0. Su licencia fue renombrada a: Python Software Foundation License. Todo el c\u00f3digo, documentaci\u00f3n y especificaciones a\u00f1adidas, desde la fecha del lanzamiento de la versi\u00f3n alfa de Python 2.1, pertenece a Python Software Foundation (PSF), una organizaci\u00f3n sin \u00e1nimo de lucro fundada en el a\u00f1o 2001, tomando como modelo la Apache Software Foundation.[20]\u200b Este lanzamiento incluy\u00f3 un cambio en el lenguaje para soportar \u00e1mbitos anidados (m\u00e1s conocido en programaci\u00f3n como \"nested scopes\") como lo soportan otros lenguajes de \"static scoping\" (del cual Scheme es el originador).[21]\u200b (Esta caracter\u00edsticas fue deshabilitada por defecto, y no requerida, hasta Python 2.2.)\nUna gran innovaci\u00f3n en Python 2.2 fue la unificaci\u00f3n de los tipos en Python (tipos escritos en C), y clases (tipos escritos en Python) dentro de una jerarqu\u00eda. Esa unificaci\u00f3n logr\u00f3 un modelo orientado a objetos de Python puro y consistente.[22]\u200b Tambi\u00e9n fueron agregados los generadores que fueron inspirados por el lenguaje Icon.[23]\u200b", "subsections": []}, {"name": "Versi\u00f3n 3.0", "text": "Python 3.0 (tambi\u00e9n conocido como \"Python 3000\" o \"Py3K\") fue dise\u00f1ado para rectificar ciertas fallas fundamentales en el dise\u00f1o del lenguaje (los cambios requeridos no pod\u00edan ser implementados mientras se mantuviera compatibilidad hacia atr\u00e1s con la serie 2.x).  El principio que gu\u00eda Python 3 es: \"reducir la duplicaci\u00f3n de caracter\u00edsticas eliminando viejas formas de hacer las cosas (reduce feature duplication by removing old ways of doing things)\".", "subsections": [{"name": "Filosof\u00eda", "text": "Python 3.0 fue desarrollado con la misma filosof\u00eda que en las versiones anteriores. Sin embargo, como Python ha acumulado nuevas y redundantes formas de programar la misma tarea, Python 3.0 ha hecho \u00e9nfasis en eliminar constructores duplicados y m\u00f3dulos, en consecuencia con \"Debe haber un\u2014 y preferiblemente solo un \u2014modo obvio de hacerlo\".\nA pesar de esto, Python 3.0 se mantiene como un lenguaje de programaci\u00f3n multiparadigma. Los programadores todav\u00eda tienen opciones entre orientaci\u00f3n a objetos, programaci\u00f3n estructurada, programaci\u00f3n funcional y otros paradigmas, pero dentro de estas amplias opciones, los detalles intentan ser m\u00e1s obvios en Python 3.0 que como eran en Python 2.x."}, {"name": "Cronolog\u00eda y compatibilidad", "text": "Python 3.0 fue liberado el 3 de diciembre de 2008.[24]\u200b\nLas series Python 2.x y Python 3.x estaban planeadas para coexistir por varias publicaciones lanz\u00e1ndolas en paralelo, con la serie 2.x existente mayormente por compatibilidad y con algunas nuevas caracter\u00edsticas siendo importadas hacia atr\u00e1s de la serie 3.x.\nPython 2.6 fue liberado para coincidir con Python 3.0, e incluye algunas caracter\u00edsticas de esa publicaci\u00f3n, as\u00ed como un modo de \"alertas (warnings)\" que resalta el uso de caracter\u00edsticas que han sido eliminadas en Python 3.0.[25]\u200b\nSimilarmente, Python 2.7 coincide e incluye caracter\u00edsticas de Python 3.1,[26]\u200b que fue publicado el 26 de junio de 2009.\nPython 2.7 fue la \u00faltima publicaci\u00f3n en la serie 2.x;[27]\u200b las publicaciones en paralelo terminaron con Python 3.2.\nPython 3.0 rompe la compatibilidad hacia atr\u00e1s. El c\u00f3digo de Python 2.x no necesariamente debe \"correr\" en Python 3.0 sin modificarlo. Hay cambios b\u00e1sicos tales como el cambio de print en una funci\u00f3n (por lo tanto cualquier uso como print \"Hello Python\" provocar\u00e1 un error en Python 3.x), y el cambio a Unicode para todos los textos \"strings\". El tipado din\u00e1mico de Python combinado con los planes para cambiar la sem\u00e1ntica de ciertos m\u00e9todos de los diccionarios, por ejemplo, hacen que convertir perfectamente de Python 2.x a Python 3.0 sea muy dif\u00edcil de manera autom\u00e1tica. Sin embargo, una herramiento llamada \"2to3\" puede hacer la mayor\u00eda del trabajo de \"traducci\u00f3n\", se\u00f1alando \u00e1reas que son confusas para ella usando comentarios o alertas. Incluso en la etapa \"alpha\", 2to3 se mostraba claramente satisfactoria para ejecutar las traducciones del c\u00f3digo.[28]\u200b Para proyectos que requer\u00edan compatibilidad de ambas versiones 2.x y 3.x, el equipo de Python recomend\u00f3 guardar el c\u00f3digo fuente de las versiones 2.x, y generar versiones a Python 3.x usando 2to3. Se desaconsej\u00f3 esta forma de conversi\u00f3n a Python 3.x si el c\u00f3digo realmente necesitase ejecutarse en Python 2.x."}, {"name": "Caracter\u00edsticas", "text": "Algunos de los mayores cambios anunciados para Python 3.0 fueron:\nCambiar la instrucci\u00f3n print de modo que sea una funci\u00f3n \"built-in\", no una instrucci\u00f3n. Esto ha hecho que sea m\u00e1s f\u00e1cil cambiar un m\u00f3dulo para usar una funci\u00f3n print diferente, as\u00ed como hacer la sintaxis m\u00e1s regular.  En Python 2.6 y 2.7 esta caracter\u00edstica puede ser habilitada usando from __future__ import print_function.[29]\u200b\nMoviendo reduce (pero no map o filter) fuera del espacio de nombres \"built-in\" dentro de \"functools\".[30]\u200b\nAdicionar soporte para anotaci\u00f3n opcional en funciones que pueda ser usar para la declaraci\u00f3n informal de tipos u otros prop\u00f3sitos.[31]\u200b\nUnificar los tipos str/unicode, representando texto, e introduciendo un tipo immutable bytes; y un m\u00e1s correspondiente tipo mutable bytearray, ambos de los cuales representan \"arrays\" de bytes;[32]\u200b\nEliminar compatibilidad hacia atr\u00e1s, incluidas clases \"old-style\", excepciones \"string\", e impl\u00edcitos \"imports\" relativos.\nLas subsecuentes publicaciones de la serie Python 3.x han incluido sustanciales nuevas caracter\u00edsticas; todas al corriente del desarrollo que el lenguaje ha tenido en la serie 3.x."}]}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Python\nDjango\nFlask", "subsections": []}, {"name": "Referencias", "text": "\u2191 a b c \u00abThe Making of Python\u00bb. Artima Developer. Consultado el 22 de marzo de 2007.\u00a0\n\u2191 \u00abA Brief Timeline of Python\u00bb. Guido Van Rossum. Consultado el 5 de enero de 2015.\u00a0\n\u2191 a b c \u00abWhy was Python created in the first place?\u00bb. Python FAQ. Consultado el 5 de enero de 2015.\u00a0\n\u2191 \u00abThe ABC Programming Language\u00bb. Consultado el 5 de enero de 2015.\u00a0\n\u2191 \u00abThe History of Python\u00bb. Consultado el 5 de enero de 2015.\u00a0\n\u2191 \u00abInterview with Guido Van Rossum\u00bb. julio de 1998. Archivado desde el original el 1 de mayo de 2007. Consultado el 29 2007.\u00a0\n\u2191 https://docs.python.org/library/re.html\n\u2191 \u00abPEP 282 - A Logging System\u00bb. Python.org. Consultado el 24 de noviembre de 2008.\u00a0\n\u2191 \u00ab8 PEP 282: The logging Package\u00bb. Python.org. Archivado desde el original el 20 de diciembre de 2008. Consultado el 24 de noviembre de 2008.\u00a0\n\u2191 https://docs.python.org/library/threading.html\n\u2191 \u00abPEP 318 - Decorators for Functions and Methods\u00bb. Python.org. Consultado el 24 de noviembre de 2008.\u00a0\n\u2191 \u00ab5 PEP 318: Decorators for Functions and Methods\u00bb. Python.org. Archivado desde el original el 10 de diciembre de 2008. Consultado el 24 de noviembre de 2008.\u00a0\n\u2191 \u00abCopia archivada\u00bb. Archivado desde el original el 22 de diciembre de 2015. Consultado el 6 de enero de 2015.\u00a0\n\u2191 http://python-history.blogspot.com/2009/01/brief-timeline-of-python.html\n\u2191 a b van Rossum, Guido (20 de enero de 2009). \u00abA Brief Timeline of Python\u00bb. The History of Python (en ingl\u00e9s). Consultado el 14 de febrero de 2021.\u00a0\n\u2191 Guido Van Rossum. \u00abThe fate of reduce() in Python 3000\u00bb. Artima Developer. Consultado el 22 de marzo de 2007.\u00a0\n\u2191 Computer Programming for Everybody\n\u2191 \u00abComputer Programming for Everybody\u00bb. Python Software Foundation. Archivado desde el original el 29 de marzo de 2007. Consultado el 22 de marzo de 2007.\u00a0\n\u2191 What's New in Python 2.0\n\u2191 a b \u00abHistory of the software\u00bb. Python Library Reference. Archivado desde el original el 29 de marzo de 2007. Consultado el 22 de marzo de 2007.\u00a0\n\u2191 PEP 227 -- Statically Nested Scopes\n\u2191 PEPs 252 and 253: Type and Class Changes\n\u2191 PEP 255: Simple Generators\n\u2191 Python 3.0 release\n\u2191 Neal Norwitz; Barry Warsaw (29 de junio de 2006). \u00abPEP 361 -- Python 2.6 and 3.0 Release Schedule\u00bb. Consultado el 7 de octubre de 2012.\u00a0\n\u2191 A.M. Kuchling (3 de julio de 2010). \u00abWhat\u2019s New in Python 2.7\u00bb. Consultado el 7 de octubre de 2012. \u00abMuch as Python 2.6 incorporated features from Python 3.0, version 2.7 incorporates some of the new features in Python 3.1. The 2.x series continues to provide tools for migrating to the 3.x series.\u00bb\u00a0\n\u2191 Barry Warsaw (9 de noviembre de 2011). \u00abPEP 404 -- Python 2.8 Un-release Schedule\u00bb. Consultado el 7 de octubre de 2012.\u00a0\n\u2191 Sam Ruby, 2to3, September 1, 2007\n\u2191 PEP 3105\n\u2191 Thread on Artima programmer blog\n\u2191 PEP 3197\n\u2191 PEP 3137: Immutable Bytes and Mutable Buffer", "subsections": []}, {"name": "Enlaces externos", "text": "Guido Van Rossum blog on Python's Histor", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Holand%C3%A9s", "title": "Holand\u00e9s", "summary": "El t\u00e9rmino holand\u00e9s puede referirse a:\nEl natural de Holanda, o lo perteneciente o relativo a esta regi\u00f3n de los Pa\u00edses Bajos.\nEl dialecto holand\u00e9s hablado all\u00ed.\nAdem\u00e1s, es muy frecuente usarlo para referirse a: \nEl natural de Pa\u00edses Bajos (Nederland), o lo perteneciente o relativo a este Estado europeo.\nEl idioma neerland\u00e9s, la lengua oficial de dicho Estado.\nEl pueblo neerland\u00e9s, la poblaci\u00f3n nativa del mismo.", "sections": []}
{"url": "https://es.wikipedia.org/wiki/Huevo_de_pascua_(virtual)", "title": "Huevo de pascua (virtual)", "summary": "Un huevo de Pascua o huevo pascual[1]\u200b (en ingl\u00e9s Easter egg) es un mensaje o capacidad oculta contenido en pel\u00edculas, series de televisi\u00f3n, discos compactos, DVD, Blu-ray, programas inform\u00e1ticos o videojuegos.\nEntre los programadores, parece haber una motivaci\u00f3n en dejar una marca personal, casi un toque art\u00edstico sobre un producto intelectual, el cual es por naturaleza est\u00e1ndar y funcional.\nActualmente, los huevos de Pascua tratan de entretener, buscar nuevos trabajos potenciales, pagar tributo a los ejecutivos o divertir a los programadores.[2]\u200b", "sections": [{"name": "Origen", "text": "El origen del t\u00e9rmino se encuentra en el videojuego de Atari Adventure de 1979, que conten\u00eda el primer huevo de Pascua virtual que se conoce, introducido por el programador Warren Robinett.[3]\u200b\nEn aquel tiempo Atari no inclu\u00eda los nombres de los programadores en los cr\u00e9ditos del juego, por temor a que los competidores trataran de robarles sus empleados. Robinett estaba en desacuerdo con su supervisor sobre esta falta de reconocimiento y program\u00f3 el mensaje \u00abCreado por Warren Robinett\u00bb (Created by Warren Robinett) para que apareciera cuando el jugador mov\u00eda su avatar sobre un pixel espec\u00edfico, llamado punto gris, durante una cierta parte del juego y entrando en una habitaci\u00f3n secreta mediante una elaborada secuencia de pasos. Robinett lo pens\u00f3 como una maniobra de autopromoci\u00f3n.\nAtari vendi\u00f3 un mill\u00f3n de unidades del juego a 25 USD cada uno. Robinett se enfad\u00f3 con Atari porque ten\u00eda un salario de 22\u00a0000 USD al a\u00f1o, ning\u00fan bonus y no se le hac\u00eda llegar el correo de los jugadores.\nCuando Robinett abandon\u00f3 Atari, no inform\u00f3 a la compa\u00f1\u00eda del reconocimiento que hab\u00eda incluido en el juego. Poco despu\u00e9s el punto gris y su mensaje fue descubierto por Adam Clayton, un jugador de 15 a\u00f1os de Salt Lake City, que mand\u00f3 una carta a Atari el 4 de agosto de 1980.[4]\u200b La direcci\u00f3n de Atari inicialmente quiso retirar el mensaje y lanzar el juego otra vez, pero resultaba demasiado costoso. En su lugar, Steve Wright, director de desarrollo de software de la divisi\u00f3n de consumo de Atari, sugiri\u00f3 que se mantuviera el mensaje y que se potenciara su inclusi\u00f3n en juegos futuros. Los llam\u00f3 huevos de Pascua porque no estaban documentados y los encontraban los jugadores.\n[5]\u200b\n[6]\u200b\nEn la pel\u00edcula Ready Player One de Steven Spielberg el protagonista debe jugar el juego Adventure de Atari y descubrir su huevo de Pascua.\nMientras lo est\u00e1 jugando, Parzival dice:\n[2]\u200b", "subsections": []}, {"name": "En videojuegos", "text": "El primer juego de aventuras en texto Colossal Cave Adventure (1976), del que Adventure deriv\u00f3, incluy\u00f3 varias palabras secretas. Una de ellas era \"xyzzy\", un comando que permit\u00eda al jugador moverse entre dos puntos del juego.[7]\u200b\nEn 2004 se encontr\u00f3 un huevo de Pascua que mostraba el apellido del programador Bradley Reid-Selth en el videojuego Video Whizball (1978), un juego para el sistema Fairchild Channel F.[8]\u200b\nSeg\u00fan la investigaci\u00f3n de Ed Fries, el primer huevo de Pascua conocido en un juego arcade de monedas estaba en Starship 1 (1977), programado por Ron Milner. Pulsando los controles en un orden determinado, el jugador obten\u00eda en la pantalla el mensaje \u00ab\u00a1Hola, Ron!\u00bb y diez partidas gratis.\nHab\u00eda que introducir una moneda mientras se manten\u00edan pulsados los botones \u00abphasor\u00bb y \u00abstart\u00bb. Entonces, se soltaban esos botones y r\u00e1pidamente se mov\u00eda la palanca \u00abslow\u00bb.\nFries lo describe como el primer juego arcade conocido que se ajusta a la definici\u00f3n de huevo de Pascua. La existencia de este huevo de Pascua no se public\u00f3 hasta 2017, lo que llev\u00f3 a Fries a sugerir que los m\u00e1s de cien juegos arcade que preceden a Starship 1 podr\u00edan contener huevos de Pascua no descubiertos.[9]\u200b[10]\u200b\nDesde Adventure hay una larga historia de desarrolladores de videojuegos colocando huevos de Pascua en sus juegos.[11]\u200b\n:\u200a19\u200a\nLa mayor\u00eda de los huevos de Pascua son intencionados, un intento de comunicarse con el jugador o una forma de tomarse la revancha por desaires de la direcci\u00f3n de la empresa. Los huevos de Pascua en los videojuegos han tomado una variedad de formas, desde las pantallas puramente ornamentales hasta las mejoras est\u00e9ticas que cambian alg\u00fan elemento del juego durante la partida. El huevo de Pascua incluido en Age of Empires (1997) es un ejemplo de lo \u00faltimo: los proyectiles de la catapulta se cambian de piedras a vacas.[11]\u200b\n:\u200a19\u200a\nLos huevos de Pascua m\u00e1s elaborados incluyen niveles secretos y habitaciones de desarrolladores, que son \u00e1reas secretas del juego totalmente funcionales.\nLas habitaciones de desarrolladores frecuentemente incluyen bromas internas de los seguidores o del equipo de desarrollo y difieren de las habitaciones de depuraci\u00f3n en que est\u00e1n destinadas a que el jugador las encuentre.\nAlgunos juegos llegan a incluir minijuegos ocultos como huevos de Pascua. En el juego Day of the Tentacle (1993) de LucasArts, se puede jugar el juego original Maniac Mansion (1987) en su versi\u00f3n completa usando un ordenador personal virtual en la habitaci\u00f3n de un personaje.[12]\u200b[13]\u200b\nOtros huevos de Pascua se originaron no intencionadamente. El c\u00f3digo Konami se origin\u00f3 en el juego Gradius (1985) de Konami para Nintendo Entertainment System. El programador Kazuhisa Hashimoto cre\u00f3 un parte de c\u00f3digo para ayudarle a depurar el juego d\u00e1ndole salud y fuerzas adicionales a su avatar para avanzar en el juego r\u00e1pidamente. Esas partes de c\u00f3digo normalmente se retiran del juego antes de su lanzamiento. En el caso de Gradius, Hashimoto se olvid\u00f3 de retirarlo y el c\u00f3digo fue descubierto por los jugadores. Su popularidad inspir\u00f3 a Konami a reutilizar el c\u00f3digo y mantenerlo como huevo de Pascua en sus juegos futuros.[8]\u200b[12]\u200b[14]\u200b\nHay problemas t\u00e9cnicos que crean huevos de Pascua no intencionados. Jon Burton, fundador de Traveller's Tales, anunci\u00f3 que muchos de los huevos de Pascua aparentes en sus juegos para Mega Drive surgieron como resultado de trucos de programaci\u00f3n para atajar algunas dificultades para conseguir la estricta certificaci\u00f3n de Sega para sus juegos. La captura de excepciones durante la ejecuci\u00f3n pod\u00eda mantener usable el juego y pasar la certificaci\u00f3n.\nPor ejemplo, golpear el cartucho de Sonic 3D Blast (1996) mientras se introduc\u00eda en la consola llevar\u00eda el juego hasta la pantalla secreta de selecci\u00f3n de nivel, que seg\u00fan Burton explic\u00f3 era la forma de manejar cualquier error de procesador sin identificar que lo llevar\u00eda al bloqueo, como cuando temporalmente se perd\u00eda la comunicaci\u00f3n entre el cartucho y el microprocesador.[15]\u200b", "subsections": []}, {"name": "Computaci\u00f3n", "text": "", "subsections": [{"name": "Software", "text": "En software los huevos de Pascua son respuestas secretas que se producen como resultado a una serie de comandos no documentados. Los resultados var\u00edan entre un mensaje o imagen hasta una p\u00e1gina de cr\u00e9ditos a programadores o un video oculto dentro de un programa.\nMuchos ordenadores personales tienen huevos de Pascua ocultos en la memoria de solo lectura, que incluyen listas de desarrolladores, exhortos pol\u00edticos, trozos de m\u00fasica o im\u00e1genes del equipo de desarrollo.\nDEC\nEn el sistema operativo TOPS-10 (1967) para el ordenador DEC PDP-10 el comando make se usa para llamar al editor de texto TECO y crear un fichero. Si el argumento para el nombre de fichero era love, el comando completo quedaba como make love (haz el amor). Esto produc\u00eda una pausa y la respuesta not war? (\u00bfno la guerra?) antes de crear el fichero.[16]\u200b\nAlgunas versiones del sistema operativo DEC OpenVMS tienen c\u00f3digos de estado de salida ocultos, incluyendo una referencia al sketch Dirty Hungarian Phrasebook de Monty Python\u00a0: \"exit %xb70\" devuelve el mensaje \"%SYSTEM-W-FISH, my hovercraft is full of eels\" (%Sistema-con-pescado, mi hovercraft est\u00e1 lleno de anguilas), mientras que \"exit %x34b4\" devuelve una referencia a un antiguo meme: \"%SYSTEM-F-GAMEOVER, All your base are belong to us\" (%Sistema-F-juego-finalizado, Toda tu base nos pertenece).[17]\u200b\nMicrosoft\nLa versi\u00f3n de Microsoft Office de 1997 inclu\u00eda un simulador de vuelo dentro de Microsoft Excel y un juego de m\u00e1quina de bolas (pinball) en Microsoft Word.[18]\u200b[19]\u200b\nLos sistemas operativos Microsoft Windows anteriores a XP tienen el huevo de Pascua de volc\u00e1n. En el salvapantallas de texto si se introduce \u00abvolcano\u00bb se muestran todos los nombres de volcanes en los Estados Unidos. Microsoft retir\u00f3 este huevo de Pascua en XP, pero a\u00f1adi\u00f3 otros.\nMicrosoft Excel\u00a095 conten\u00eda un juego de acci\u00f3n oculto similar a Doom (1993) llamado The Hall of Tortured Souls.[20]\u200b\nDesde 2002 Microsoft no permite c\u00f3digo oculto o no documentado como parte de su iniciativa de computaci\u00f3n de confianza (trustworthy computing).[21]\u200b\nLinux\nDentro del sistema operativo Linux Debian la herramienta apt-get tiene un huevo de Pascua que dibuja una vaca con caracteres ASCII cuando se introduce en el terminal apt-get moo[22]\u200b\nEn un terminal Linux la orden apt-get help produce un texto de ayuda que al final contiene la frase Este APT tiene poderes de Super Vaca.[23]\u200b\nEn el editor de texto vim la orden :help 42 produce el texto \u00abWhat is the meaning of life, the universe and everything?  42. Douglas Adams, the only person who knew what this question really was about is now dead, unfortunately. So now you might wonder what the meaning of death is...\u00a0\u00bb (\u00ab\u00bfCu\u00e1l es el sentido de la vida, el universo y todo? 42. Douglas Adams, la \u00fanica persona que sab\u00eda de qu\u00e9 iba esta pregunta, ahora est\u00e1 muerta, desafortunadamente. As\u00ed que ahora te podr\u00edas preguntar cu\u00e1l es el sentido de la muerte...\u00bb).\nApple\nEn los comienzos de Apple Steve Jobs ped\u00eda a sus ingenieros que firmaran su trabajo como artistas. Cada programa incluido en el Macintosh ten\u00eda el men\u00fa \u00abAcerca de\u00bb que mostraba claramente los cr\u00e9ditos. Esto hizo que los usuarios conocieran a gente como Andy Hertzfeld, Bill Atkinson, Bruce Horn, Steve Capps o Susan Kare.\nJobs hizo firmar en el molde de la carcasa a todos los que participaron en el proyecto Macintosh, de modo que cuando se abre uno de los Macintosh originales se pueden ver todas esas firmas.\nEn el PowerMacintosh con System 7.5, si se escribe \u00absecret about box\u00bb en el editor SimpleText, y se arrastra al escritorio, aparece una ventana que contiene una bandera con una iguana y el texto \u00abiguana iguana powersurgius\u00bb. La bandera ondea seg\u00fan la posici\u00f3n del cursor y al rato aparece una foto del equipo de desarrollo con los nombres de todos en una caja inferior.\nSteve Jobs, tras su retorno a la compa\u00f1\u00eda, prohibi\u00f3 los huevos de Pascua como una forma de evitar que otras compa\u00f1\u00edas robaran a Apple los ingenieros con talento. En un tiempo en el que la empresa se hund\u00eda r\u00e1pidamente dijo que no ten\u00eda sentido facilitar las cosas a la competencia.\n[24]\u200b\nTras la muerte de Jobs el primer huevo de Pascua apareci\u00f3 en 2012 tras una actualizaci\u00f3n de la Mac App Store para OS X Mountain Lion, en la que las aplicaciones descargadas ten\u00edan temporalmente como fecha de descarga la de 24 de enero de 1984, la fecha de lanzamiento del Macintosh.[24]\u200b\nGoogle\nDan Sandler, cuando trabajaba en el software Android, dijo que los huevos de Pascua ayudaban a establecer el software como una forma de arte, siguiendo los pasos de pintores, m\u00fasicos y artesanos que introduc\u00edan peque\u00f1as bromas y referencias dentro de su trabajo desde hace siglos.\nPara la versi\u00f3n Android P crearon una app secreta de dibujo en la que los trazos desaparecen al poco tiempo y la obra no se puede guardar.\nEn la divisi\u00f3n de Google Maps lanzaron el huevo de Pascua el 10 de marzo de 2018, \u00abD\u00eda Internacional de Mario\u00bb (Mar10), en el que cambiaron el punto azul de posici\u00f3n por el coche de Mario Kart.\nLos huevos de Pascua est\u00e1n incorporados en la cultura de Google y tienen un grupo de correo interno sobre huevos de Pascua (llamado Poultry). Crearon herramientas de software para incorporar f\u00e1cilmente huevos de Pascua a los resultados de b\u00fasqueda.[2]\u200b\nEl buscador de Google a veces da huevos de Pascua como respuesta a ciertas preguntas. Por ejemplo, Google Maps una vez respondi\u00f3 a la petici\u00f3n de indicaciones para ir de Jap\u00f3n a China diciendo que usara un jet-ski para atravesar el Oc\u00e9ano Pac\u00edfico.\nEn Google Earth la combinaci\u00f3n de teclas \nCtrl\n+\nAlt\n+\nA\npone al usuario en un simulador de vuelo que le permite volar sobre la superficie de la Tierra.[25]\u200b\nWordPress\nEn el contrato de t\u00e9rminos de servicio de WordPress hay un p\u00e1rrafo de renuncia de garant\u00edas que dice:\nEl enlace abre una fotograf\u00eda de un bistec de carne y un tributo al restaurante de barbacoa Memphys Minnie de San Francisco.\nEste huevo de Pascua se ha copiado a muchas empresas que utilizan las plantillas de WordPress y no han adaptado el contrato de t\u00e9rminos de servicio.[2]\u200b"}, {"name": "Hardware", "text": "Los huevos de Pascua tambi\u00e9n pueden encontrarse en hardware o firmware de algunos aparatos como la BIOS ROM de algunos ordenadores personales.\nEl 13 de noviembre algunas AMI BIOS en lugar de arrancar se ponen a tocar en bucle la melod\u00eda de feliz cumplea\u00f1os hasta que se aprieta una tecla.[26]\u200b\nLos primeros Apple Macintosh ten\u00edan fotograf\u00edas del equipo de desarrollo en la ROM. Estos huevos de Pascua fueron muy publicitados en la prensa de entonces.[27]\u200b[28]\u200b[29]\u200b\nEn el Radio Shack Color Computer\u00a03 si se presionan a la vez las teclas \nCtrl\n+\nAlt\n+\nReset\n muestra la foto de tres desarrolladores que est\u00e1 almacenada en la ROM.[30]\u200b\nAlgunos osciloscopios contienen huevos de Pascua. El osciloscopio HP\u00a054600B, contiene un clon del juego Tetris (1984),[31]\u200b\nEl osciloscopio HP\u00a054622D contiene un juego similar a Asteroids (1979) llamado Rocks.[32]\u200b\nEl osciloscopio Tektronix 1755A Vector and Waveform Monitor muestra un pez nadando cuando en el men\u00fa de configuraci\u00f3n se selecciona \u00abRemote>Software version\u00bb.[33]\u200b\nLa calculadora Hewlett-Packard HP-45 (lanzada en 1973) contiene un cron\u00f3metro no documentado al que se accede mediante una secuencia de teclas.[34]\u200b\nEl ordenador Commodore Amiga 1000 tiene dentro de la carcasa las firmas de los componentes de los equipos de dise\u00f1o y desarrollo. Se incluye la firma de Jay Miner y la huella de su perro Mitchy.[35]\u200b\nLos ordenadores Commodore Amiga el sistema operativo Amiga OS contiene mensajes ocultos.[36]\u200b\n[37]\u200b\nMuchos dise\u00f1adores de circuitos integrados (chips) incluyen elementos gr\u00e1ficos llamados \u00abchip art\u00bb, que incluyen im\u00e1genes, frases, iniciales de desarrolladores, logos y m\u00e1s. Este arte, como el resto del chip, se reproduce en cada copia por litograf\u00eda y grabado. Solo se hace visible cuando se abre el chip y se examina con un microscopio.[38]\u200b\nA mediados de la d\u00e9cada de 1980 en un laboratorio de Kombinat Mikroelektronik Erfurt del Ministerio de Interior de la antigua Rep\u00fablica Democr\u00e1tica Alemana (RDA) se descubri\u00f3 un mensaje dentro de un microprocesador DEC cuando estaban analizando el chip. Estaba escrito en el nivel de metalizaci\u00f3n, que sirve para conectar los distintos componentes individuales en un circuito integrado. Como ese nivel no est\u00e1 arriba, el texto solo se pod\u00eda encontrar cuando se retiraba capa a capa para entender la tecnolog\u00eda de fabricaci\u00f3n mediante ingenier\u00eda inversa.\nLa foto original del texto est\u00e1 en algunos archivos de la Stasi (BStU, Ast. Erfurt, Abt. XVIII, Bd. 13, Bl. 70).[39]\u200b\nEl microchip CVAX de la CPU MicroVAX conten\u00eda grabada la frase en alfabeto cir\u00edlico:\nLos ingenieros de DEC intentaron copiar el eslogan de las tarjetas Hallmark que dec\u00eda:\ny lo cambiaron a:\nEn 1983, una fuente de inteligencia comunic\u00f3 a DEC que un ordenador VAX-11/780 que estaba operando en un complejo de misiles sovi\u00e9ticos SS-20 ten\u00eda escrita esa frase sobre la carcasa.[38]\u200b\nSabiendo que algunos CVAX terminar\u00edan en la Uni\u00f3n Sovi\u00e9tica, a pesar de la prohibici\u00f3n sobre su venta, DEC decidi\u00f3 incluir la frase para que los sovi\u00e9ticos supieran que estaban pensando en ellos cuando trataran de copiar el microprocesador con t\u00e9cnicas de ingenier\u00eda inversa.[40]\u200b[38]\u200b\nLa traducci\u00f3n al ruso es bastante mala y probablemente fue hecha palabra a palabra usando un diccionario.[41]\u200b"}]}, {"name": "Tesla", "text": "Art\u00edculo principal:\nTesla es una \u00abempresa de software que fabrica ordenadores sobre ruedas\u00bb. Desde sus inicios ha incluido huevos de Pascua y se han descubierto entre otros:\nModo Romance: La pantalla muestra una hoguera, la calefacci\u00f3n se enciende y suenan canciones rom\u00e1nticas.[43]\u200b\nModo Santa Claus: El icono del coche se transforma en trineo, caen copos de nieve y el intermitente suena como una campanilla.\nModo de Prueba de Emisiones: Suenan flatulencias en el punto determinado y a discreci\u00f3n.[44]\u200b\nRegreso al Futuro: Con la bater\u00eda cargada para una autonom\u00eda de 121 km (o 121 millas), se abre la APP del tel\u00e9fono y se toca en el icono de la bater\u00eda, aparecen m\u00faltiples referencias a la pel\u00edcula de 1985 Back to the Future.[45]\u200b\nMonty Python: Cambiando el nombre del coche a Patsy, Rabbit of Caerbannog, Mr. Creosote, Biggus Dickus o Unladen Swallow activar\u00e1 el pie de Cupido.[46]\u200b\nGu\u00eda del autoestopista gal\u00e1ctico: Si se intenta cambiar el nombre del coche a \u00ab42\u00bb este cambiar\u00e1 a \u00abLife, the Universe, and Everything\u00bb (La vida, el universo y todo).\nSpinal Tap: El volumen de sonido sube hasta 11 como gui\u00f1o a la pel\u00edcula This is Spinal Tap (1984) dirigida por Rob Reiner. En la pel\u00edcula falso documental un m\u00fasico muestra su amplificador Marshall en el que todos los diales llegan hasta 11.[47]\u200b\nAhoy-Hoy: Si se aprieta el icono de tel\u00e9fono durante tres segundos el texto cambia a Ahoy-Hoy, que fue la frase propuesta por el inventor del tel\u00e9fono, Alexander Graham Bell, para responder un tel\u00e9fono.\n1984: Los discos duros usados para el modo Centinela se pueden formatear en FAT32 o EXT4. Cuando el formato es EXT4 las grabaciones tendr\u00e1n como propietario y grupo el \u00ab1984\u00bb. Es un homenaje a la novela de ficci\u00f3n dist\u00f3pica 1984 escrita por George Orwell entre 1947 y 1948 y publicada el 8 de junio de 1949. La novela populariz\u00f3 los conceptos del omnipresente y vigilante Gran Hermano.\nMarte: Tras la activaci\u00f3n la pantalla muestra la superficie de Marte en lugar de la de la Tierra.\nHecho en la Tierra: Los Tesla Roadster llevan escrito en un circuito impreso \u00abHecho en la Tierra por humanos\u00bb (\u00abMade on Earth by humans\u00bb).93 9495 El circuito impreso PCB lleva los fusibles de 150A en la l\u00ednea de entrada de corriente. El n\u00famero de pieza es ASSY 09-000226-01 REV.[48]\u200b\nS3XY: En el sitio web de Tesla y en sus presentaciones el orden en que se muestran los modelos no es el cronol\u00f3gico y seg\u00fan Elon Musk est\u00e1 hecho a prop\u00f3sito para que sus letras formen el acr\u00f3nimo \u00abS3XY\u00bb que visualmente se parece a \u00abSEXY\u00bb.\nSuperbottle: Un sofisticado dep\u00f3sito para el sistema de refrigeraci\u00f3n del Tesla Model 3 lleva impreso en relieve la palabra \u00abSUPERBOTTLE\u00bb (Superbotella). Tambi\u00e9n lleva impresa una caricatura de una botella con capa al estilo de los superh\u00e9roes. La caricatura tiene brazos y piernas musculados y lleva la T del logo de Tesla en el pecho.[49]\u200b\nOctovalve: El dep\u00f3sito del sistema de refrigeraci\u00f3n del Tesla Model Y tiene impresa en relieve una caricatura de un pulpo con el s\u00edmbolo estrellado de un copo de nieve (octovalve).[50]\u200b[51]\u200b[52]\u200b[53]\u200b", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Entrada ficticia\nBomba l\u00f3gica", "subsections": []}, {"name": "Referencias", "text": "\u2191 \u00abdiccionario de la lengua espa\u00f1ola\u00bb.\u00a0\n\u2191 a b c d Pogue, David (8 de agosto de 2019). \u00abThe Secret History of 'Easter Eggs'\u00bb. The New York Times. Consultado el 10 de mayo de 2020.\u00a0\n\u2191 Robinett, Warren: Adventure as a Video Game. Adventure for the Atari 2600. In: Katie Salen a. Eric Zimmerman (eds.): The Game Design Reader. A Rules of the Play Anthology. MIT Press 2006, p. 690\u2013713 (here p. 713) ISBN 0-262-19536-4\n\u2191 \nWayback Machine, ed. (4 de agosto de 1980). \u00abLetter to Atari\u00bb. 2600 Connections. Archivado desde el original el 13 de octubre de 2016. Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nBaker, Chris (13 de marzo de 2015). \u00abHow One Man Invented the Console Adventure Game\u00bb. WIRED. Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nSalen, Katie; Zimmerman, Eric (2005).  MIT Press, ed. The Game Design Reader: A Rules of Play Anthology. Cambridge, Massachusetts. pp.\u00a0690-713. ISBN\u00a00262195364. OCLC\u00a058919795.\u00a0\n\u2191 \nJerz, Dennis G. (2007). \u00abSomewhere Nearby is Colossal Cave: Examining Will Crowther's Original \"Adventure\" in Code and in Kentucky\u00bb.  En The Alliance of Digital Humanities Organizations, ed. Digital Humanities Quarterly 1 (2). Consultado el 10 de mayo de 2020.\u00a0\n\u2191 a b \nWolf, Mark J.P. (2012).  Greenwood, ed. Encyclopedia of Video Games: The Culture, Technology, and Art of Gaming. Santa Barbara, California. p.\u00a0177. ISBN\u00a09780313379369.\u00a0\n\u2191 \nMachkovech, Sam (22 de marzo de 2017). \u00abThe arcade world's first Easter egg discovered after fraught journey\u00bb. Ars Technica (en ingl\u00e9s estadounidense). Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nFries, Ed (24 de marzo de 2017). \u00abThe Hunt For The First Arcade Game Easter Egg\u00bb. Kotaku. Consultado el 10 de mayo de 2020.\u00a0\n\u2191 a b \nConsalvo, Mia (2007).  MIT Press, ed. Cheating: Gaining Advantage in Videogames. Cambridge, Massachusetts. ISBN\u00a09780262033657.\u00a0\n\u2191 a b \nBj\u00f6rk, Staffan; Holopainen, Jussi (2005).  Charles River Media, ed. Patterns In Game Design (1 edici\u00f3n). Hingham, Massachusetts. p.\u00a0235. ISBN\u00a09781584503545. Consultado el 25 de enero de 2013.\u00a0\n\u2191 \nMeckler Publishing, ed. (1 de febrero de 1994). \u00abOptical Information Systems Update/library & Information Center Applications\u00bb. CD-ROM World (en ingl\u00e9s) 9 (1\u20135). Consultado el 4 de noviembre de 2017. \u00abThe best Easter egg of all is the entire Maniac Mansion game, which appears on a computer in Doctor Fred's mansion. Users can play the original game in its entirety.\u00bb\u00a0\n\u2191 \nGarmon, Jay (5 de marzo de 2007). \u00abGeek Trivia: The cheat goes on\u00bb. TechRepublic (en ingl\u00e9s). Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nOrland, Kyle (4 de octubre de 2017). \u00abHow hitting a game cartridge unlocks gaming's weirdest Easter egg\u00bb. Ars Technica (en ingl\u00e9s estadounidense). Consultado el 4 de octubre de 2017.\u00a0\n\u2191 \nMontfort, Nick; Bogost, Ian (2009).  MIT Press, ed. Racing the Beam: The Atari Video Computer System. Cambridge, Massachusetts. p.\u00a059. ISBN\u00a09780262012577. Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \n\u00abOpenVMS Undocumented Features\u00bb. PARSEC Group (en ingl\u00e9s). Consultado el 6 de abril de 2016.\u00a0\n\u2191 \nAnonymous (19 de julio de 1999). \u00abExcel Easter Egg - Excel 97 Flight to Credits\u00bb. The Easter Egg Archive (en ingl\u00e9s). Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nArima, Kevin (20 de julio de 2009). \u00abWord (Microsoft) Easter Egg - Pinball in Word 97\u00bb. The Easter Egg Archive (en ingl\u00e9s). Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nGaskell, John (19 de julio de 1999). \u00abExcel Easter Egg - Excel 95 Hall of Tortured Souls\u00bb. The Easter Egg Archive (en ingl\u00e9s). Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nLarry Osterman (21 de octubre de 2005). \u00abWhy no Easter Eggs?\u00bb.  En MSDN Blogs, ed. Larry Osterman's WebLog. Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nGrant, Rickford with; Bull, Phil (2010).  No Starch, ed. Ubuntu for Non-Geeks: A Pain-Free, Get-Things-Done Guide (4 edici\u00f3n). San Francisco. p.\u00a0168. ISBN\u00a09781593272579. Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nkcbhiw (24 de julio de 2001). \u00abApt-Get and Super Cow Powers\u00bb. The Easter Egg Archive (en ingl\u00e9s). Consultado el 10 de mayo de 2020.\u00a0\n\u2191 a b \nDiaz, Jesus (26 de julio de 2012). \u00abThe Easter Eggs Are Back in OS X\u2014And This One Is Insanely Great\u00bb. Gizmodo. Consultado el 4 de noviembre de 2017.\u00a0\n\u2191 \nFirth, Niall (29 de octubre de 2010). \u00abHow do I get to China? Jet ski! Google Maps joke gives users unorthodox instructions for crossing the Pacific\u00bb. Daily Mail. Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \n\u00abHappy Birthday Description\u00bb. F-Secure Labs (en ingl\u00e9s). Consultado el 3 de julio de 2012.\u00a0\n\u2191 \nKendig, Brain (1994). \u00abMacintosh/Newton Easter Egg List\u00bb. Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nhudson (21 de agosto de 2012). \u00abGhosts in the ROM\u00bb. NYC Resistor. Archivado desde el original el 17 de febrero de 2015. Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nTirosh, Udi (22 de agosto de 2012). \u00abPhotographs Of Apple Team Found In 25 Years Old Macintosh SE\u00bb. DIY Photography. Archivado desde el original el 26 de febrero de 2013. Consultado el 4 de noviembre de 2017.\u00a0\n\u2191 \nFARNA Systems, ed. (1 de mayo de 1998). The World of 68' Micros, The - Vol. 5 Number 6 5 (6). p.\u00a05. Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nkcbhiw (24 de julio de 2001). \u00abHP 54600B Oscilloscope Easter Egg - Tetris Within Oscilloscope\u00bb. The Easter Egg Archive (en ingl\u00e9s). Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nTonyK (24 de abril de 2002). \u00abHP 54622D Easter Egg - HP Asteroids\u00bb. The Easter Egg Archive (en ingl\u00e9s). Consultado el 10 de mayo de 2020.\u00a0\n\u2191 \nPavel (8 de abril de 2000). \u00abTektronix 1751 Digital Video Osciloscope / Vectorscope Easter Egg - Fishes Swimming on Screen\u00bb. The Easter Egg Archive (en ingl\u00e9s). Consultado el 10 de mayo de 2020.\u00a0\n\u2191 Paul E. Miller (de junio de 1976). \u00abHow To Use The HP-45 Calculator As a Stopwatch Or Elapsed-time Indicator\u00bb. Popular Electronics.\u00a0\n\u2191 \nCorrigan, Patricia (2007).  Reedy Press, ed. Bringing Science to Life: A Guide from the Saint Louis Science. St. Louis, Missouri. p.\u00a069. ISBN\u00a09781933370163.\u00a0\n\u2191 \nPetersen, Julie K. (2002).  CRC Press, ed. The Telecommunications Illustrated Dictionary (2nd edici\u00f3n). Boca Raton, Florida. p.\u00a0293. ISBN\u00a09780849311734. Consultado el 24 de enero de 2013.\u00a0\n\u2191 \nHyman, Michael (1995).  Programmers Press, ed. PC Roadkill (en ingl\u00e9s). Foster City, California. p.\u00a0c. ISBN\u00a09781568843483. Consultado el 24 de enero de 2013.\u00a0\n\u2191 a b c \nBob Supnik (24 de febrero de 2008). \u00abCVAX\u00bb. Computer Simulation and History. Archivado desde el original el 17 de enero de 2015. Consultado el 23 de mayo de 2019.\u00a0\n\u2191 Barkleit, Gerhard (2000).  Technischen Universit\u00e4t Dresden, ed. \u00abMikroelektronik in der DDR\u00bb (en alem\u00e1n). Dresden. Consultado el 11 de mayo de 2020.\u00a0\n\u2191 \n\u00abSteal The Best\u00bb. Molecular Expressions: The Silicon Zoo. 7 de julio de 1999. Consultado el 10 de mayo de 2020.\u00a0\n\u2191 stackexchange (ed.). \u00abWas there Cyrillic text visible on Intel 386 chips after decapping?\u00bb. skeptics (en ingl\u00e9s). Consultado el 11 de mayo de 2020.\u00a0\n\u2191 Nuno Cristovao (1 de diciembre de 2020). \u00abTesla Back to the Future Easter Egg\u00bb (en ingl\u00e9s). p.\u00a0notateslaapp.com. Consultado el 17 de marzo de 2022.\u00a0\n\u2191 P, Syp (1 de abril de 2019). \u00abAll 20 Tesla Easter Eggs Discovered so Far, and How to Find Them\u00bb. Drive Tribe (en ingl\u00e9s). Archivado desde el original el 6 de abril de 2020. Consultado el 20 de marzo de 2020.\u00a0\n\u2191 Lekach, Sasha (8 de febrero de 2019). \u00abTesla's fart mode is a real gem\u00bb. mashable (en ingl\u00e9s). Consultado el 16 de abril de 2020.\u00a0\n\u2191 \nLambert, Fred (12 de febrero de 2019). \u00abTesla hides extensive \u2018Back to the Future\u2019 Easter egg in latest software\u00bb. Electrek. Consultado el 15 de abril de 2020.\u00a0\n\u2191 \nLambert, Fred (6 de octubre de 2019). \u00abTesla owner finds Monty Python Easter egg in V10 software update\u00bb. Electrek. Consultado el 15 de abril de 2020.\u00a0\n\u2191 Ayre, James (30 de septiembre de 2015). \u00ab\u201cThese Go To 11\u201d \u2014 Tesla, Spinal Tap, Christopher Guest, & Jamie Lee Curtis\u00bb. ev obsession (en ingl\u00e9s). Consultado el 20 de marzo de 2020.\u00a0\n\u2191 \nBrown, Mike (7 de febrero de 2018). \u00abElon Musk Jokes About Confused Aliens Finding His Tesla in Space\u00bb. Inverse. Consultado el 15 de abril de 2020.\u00a0\n\u2191 \nTracy, David (18 de diciembre de 2018). \u00abThe Tesla Model 3 'Superbottle' Easter Egg Is a Fascinating Packaging Solution\u00bb. Jalopnik. Consultado el 15 de abril de 2020.\u00a0\n\u2191 \u00abOptimal source electric vehicle heat pump with extreme temperature heating capability and efficient thermal preconditioning\u00bb (en ingl\u00e9s). 7 de septiembre de 2018. Consultado el 12 de abril de 2020.\u00a0\n\u2191 Lambert, Fred (23 de marzo de 2020). \u00abElon Musk: Tesla Model Y heat pump is some of the best engineering I\u2019ve seen in a while\u00bb.  En Electrek, ed. ElecTrek (en ingl\u00e9s).\u00a0\n\u2191 Page, Trevor (17 de marzo de 2020). \u00abModel Y's secret trick\u00bb. Tesla Owners Online (en ingl\u00e9s). Archivado desde el original el 31 de marzo de 2022. Consultado el 12 de abril de 2020.\u00a0\n\u2191 Third Row Tesla Podcast, ed. (15 de abril de 2020). \u00abThird Row Tesla - Episode 14 - Tesla Manufacturing with Sandy Munro and Elon Musk!\u00bb (en ingl\u00e9s). Archivado desde el original el 19 de abril de 2020. Consultado el 17 de abril de 2020.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": "Sitio recopilatorio de huevos de Pascua virtuales (en ingl\u00e9s)\nEsta obra contiene una traducci\u00f3n  derivada de \u00abEaster egg (media)\u00bb de Wikipedia en ingl\u00e9s, publicada por sus editores bajo la Licencia de documentaci\u00f3n libre de GNU y la Licencia Creative Commons Atribuci\u00f3n-CompartirIgual 4.0 Internacional", "subsections": []}]}
