{"url": "https://es.wikipedia.org/wiki/Humorista", "title": "Humorista", "summary": "Por favor, ed\u00edtalo y/o discute los problemas en la discusi\u00f3n para mejorarlo:\nNecesita ser wikificado conforme a las convenciones de estilo de Wikipedia.\nSu redacci\u00f3n mantiene un punto de vista regional. Por favor, ampl\u00edalo para que cubra el tema desde una perspectiva global.\nUn humorista,  es una persona que en sus obras \u2014literarias o pl\u00e1sticas\u2014, o en sus actuaciones en espect\u00e1culos p\u00fablicos, cultiva el humor.[1]\u200b Puede ser una persona que se dedique profesionalmente a la producci\u00f3n de obras escritas o gr\u00e1ficas, o a hacer intervenciones p\u00fablicas con fines humor\u00edsticos. Un humorista no es un c\u00f3mico, a pesar de que hay casos en que se pueden combinar ambas profesiones. Tambi\u00e9n son frecuentes los ejemplos de producciones humor\u00edsticas parciales entre otras actividades de car\u00e1cter general referidas a una misma persona.", "sections": [{"name": "Humorismo literario", "text": "Muchos autores literarios cultivaron el humorismo. Algunos de forma casi exclusiva. Otros en forma parcial o limitada. Se incluye una lista tan solo a t\u00edtulo representativo. \n448 aC-380 aC. Arist\u00f2fanes\n411 aC. Lis\u00edstrata\nc 341 aC-c 290 aC. Menandre de Atenas\n216 aC-184 aC. Plaute\n184 aC-c 159 aC. Terenci", "subsections": [{"name": "Era cristiana", "text": "43 d.\u00a0C.-104 mi\u00e9. Marc Valeri Marcial."}, {"name": "A\u00f1o 1000", "text": "c 1283-c 1351. Juan Ru\u00edz Arcipreste de Hita\nLibro de buen amor\nc 1300. Geoffrey Chaucer\nc 1401-1478. Jaume Roig\nc 1450? Jaume Gassull\n1456-1460. La Farce de Ma\u00eetre Pathelin.[2]\u200b\n1480-1545. Antonio de Guevara.[3]\u200b\n1490-1553. Fran\u00e7ois Rabelais"}, {"name": "A\u00f1o 1500", "text": "1547-1616. Miguel de Cervantes Saavedra\nDon Quijote\n1565-1635. Alessandro Tassoni\nLa secchia rapita (El cubo robado).[4]\u200b[5]\u200b\n1578-1623. Rector de Vallfogona"}, {"name": "A\u00f1o 1600", "text": "1619-1655. Cyrano de Bergerac.[6]\u200b\n1622-1673. Moli\u00e8re\n1672-1719. Joseph Addison.[7]\u200b"}, {"name": "A\u00f1o 1700", "text": "1706-1790. Benjamin Franklin\n1707-1793. Carlo Goldoni\n1721\u20131771. Tobias Smollett\nThe Adventures of Peregrino Pickle.[8]\u200b"}, {"name": "A\u00f1o 1800", "text": "1812-1870. Charles Dickens\nLos papeles p\u00f3stumos del Club Pickwick.[9]\u200b[10]\u200b\n1815-1888. Eug\u00e8ne Labiche\n1835-1910. Mark Twain\n1840-1847. Alphonse Daudet\nTartarin de Tarascon.[11]\u200b\n1854-1900. Oscar Wilde\nThe Importance of Being Earnest, A Trivial Comedy for Serious People\n1859-1927. Jerome K. Jerome.[12]\u200b\nThree Men in a Boat.[13]\u200b\n1866-1943. Carlos Arniches Barreda\nLa se\u00f1orita de Tr\u00e9velez.[14]\u200b\n1874-1936.  Chesterton\n1879-1936. Pedro Mu\u00f1oz Seca\nLa venganza de Don Mendo\n1880-1950. Josep Maria Folch y Torres.\nLas Formidables aventuras de en Pere Fino.[15]\u200b\n1881 - 1975. P. G. Wodehouse.[16]\u200b\n1893-1971.Harold Lloyd.\n1899- 1995. Noel Claras\u00f3 y Serrat.[17]\u200b"}, {"name": "A\u00f1o 1900", "text": "1908-1968. Giovannino Guareschi.[18]\u200b\nIl destino si chiama Clotilde.[19]\u200b[20]\u200b\n1917-2000. Joan Capri\n1918-1990. Manuel de Pedrolo\nDomicilio provisional\n1928-2013. Tom Sharpe.\n1943.  Eduardo Mendoza\nSin noticias de Gurb.\n1958. Helen Fielding.[21]\u200b\nEl diario de Bridget Jones"}, {"name": "Humorismo teatral", "text": "La escena dram\u00e1tica cuenta con muchas obras c\u00f3micas universalmente reconocidas. Algunas de estas comedias, principalmente destinadas a dar risa, muestran aspectos humor\u00edsticos bastante sutiles. No siempre es f\u00e1cil seleccionar las obras de teatro (comedias o tragicomedies) que ofrecen matices de humor. Los autores seleccionados se han listado m\u00e1s arriba, entre los otros escritores."}]}, {"name": "Lista gen\u00e9rica de humoristas notables", "text": "Douglas Adams\nLuis Sandrini\nLuis Landriscina\nKev Adams\nScott Adams\nGeorge Ade\nMoin Akhter\nSholom Aleichem\nHenry Alford\nWoody Allen\nMichael Attree\nBugs Baer\nRussell Baker\nLinwood Barclay\nDave Barry\nGuy Bedos\nNicolas Bedos\nRobert Benchley\nStefano Benni\nAmbrose Bierce\nJean-Marie Bigard\nJosh Billings\nLewis Black\nRoy Blount, Jr.\nTom Bodett\nErma Bombeck\nVictor Borge\nAndy Borowitz\nDylan Brody\nCraig Brown\nArt Buchwald\nChristopher Buckley\nW. Bruce Cameron\nAl Capp\nLewis Carroll\nGuy Wetmore Carryl\nBennett Cerf\nG. K. Chesterton\nAl Clouston\nColuche\nWilliam Combe\nAlan Coren\nWill Cuppy\nIvor Cutler\nHugleikur Dagsson\nBertha Damon\nDick DeBartolo\nJamel Debbouze\nRaymond Devos\nDaniel Dickey\nDrew\nFranck Dubosc\nGad Elmaleh\nEvan Esar\nJohn O'Farrell\nMax Ferguson\nWill Ferguson\nScott Fivelson\nMichael Flanders\nBenjamin Franklin\nMichael Frayn\nIan Frazier\nLewis Burke Frumkes\nJames Finn Garner\nVeronica Geng\nMichael Gerber\nStrickland Gillilan\nJonathan Goldstein\nLewis Grizzard\nRobert Grossman\nDick Wick Hall\nJack Handey\nChelsea Handler\nSteve Hely\nA.P. Herbert\nDon Herold\nCarl Hiaasen\nNasrettin Hoca\nJohn Hodgman\nAndy Offutt Irwin\nDonald Jack\nRoberta Beach Jacobson\nDouglas William Jerrold\nJerome K. Jerome\nGeorge S. Kaufman\nGarrison Keillor\nWalt Kelly\nDoug Kenney\nMarvin Kitman\nRonald Knox\nHarvey Kurtzman\nJonathan Lambert\nChristian Lander\nRing Lardner\nGary Lautens\nStephen Leacock\nFran Lebowitz\nVirginie Lemoine\nMartin Lewis\nLennie Lower\nPaul B. Lowney\nDieudonn\u00e9 M'bala M'bala\nMerrill Markoe\nDon Marquis\nNin\u00ed Marshall\nDavid Martin\nDemetri Martin\nSteve Martin\nBruce McCall\nStuart McLean\nPatrick F. McManus\nMoli\u00e8re\nNurul Momen\nLorna Jean Moorhead\nJ. B. Morton\nEbrahim Nabavi\nPetroleum V. Nasby\nOgden Nash\nRichard J. Needham\nAziz Nesin\nEric Nicol\nChris Onstad\nRaffaele Palma\nDorothy Parker\nS. J. Perelman\nCharles Phoenix\nTerry Pratchett\nRoger Price\nBoles\u0142aw Prus\nJoe Queenan\nDavid Rakoff\nPaul Rhymer\nBill Richardson\nRyan Max Riley\nSteve Rizzo\nWill Rogers\nAndy Rooney\nAnne Roumanoff\nP. J. O'Rourke\nHelen Rowland\nPaul Rudnick\nPeter Sagal\nTim Sample\nGeorge Saunders\nDavid Sedaris\n\u00c9lie Semoun\nTom Sharpe\nJean Shepherd\nHerb Shriner\nWil Shriner\nMark Shulman\nMax Shulman\nNeil Simon\nH. Allen Smith\nJill Sobule\nEd Subitzky\nJulia Sweeney\nJonathan Swift\nHerbert Tarr\nJeremy Taylor\nWilliam Tenn\nLarry Thompson\nThomas Bangs Thorpe\nJames Thurber\nJohn Kennedy Toole\nCalvin Trillin\nMark Twain\nAisha Tyler\nBrian Unger\nPeter Ustinov\nKurt Vonnegut\nSarah Vowell\nArtemus Ward\nSam. R. Watkins\nBill Watterson\nEllis Weiner\nE.B. White\nOscar Wilde\nMarshall P. Wilder\nJustin Wilson\nRobert Wringham\nP. G. Wodehouse", "subsections": []}, {"name": "Humorismo gr\u00e1fico", "text": "1820-1914. John Tenniel\n1854-1936. Apeles Mestres y O\u00f1\u00f3s\n1881-1948. Joan Junceda\n1884-1954. Bud Fisher\n1914-2012. Joaquim Munta\u00f1ola y Puig\n1936-2023. Francisco Ib\u00e1\u00f1ez Talavera\n1941-1995. Jaume Perich y Escala", "subsections": [{"name": "Caricaturistas", "text": "1799\u20131846. Rodolphe T\u00f6pffer\n1858-1909. Caran d'Ache\n1900-1990. Xavier Cugat\n1909-1979. Manuel del Arco \u00c1lvarez"}]}, {"name": "Humorismo cinematogr\u00e1fico", "text": "Los films con elementos humor\u00edsticos pueden ser de varios grados. Por el hecho que las comedias cinematogr\u00e1ficas acostumbran a ser el resultado de varias personas (sociedad productora, productor, director, guionista, actores, redactor de di\u00e1logos, maquillaje, efectos especiales, etc.)  trabajando en equipo, la lista de humoristas cinematogr\u00e1ficos queda sustituida por una lista de pel\u00edculas ordenadas por el a\u00f1o de su estreno. En cada caso, el art\u00edculo puede recordar los responsables m\u00e1s importantes (particularmente el director y los actores m\u00e1s importantes), que tendr\u00edan que consultarse en el art\u00edculo espec\u00edfico del filme.\n1923. Safety Last!.\nHarold Lloyd\n1926. El maquinista de la General\nBuster Keaton\n1935. Una noche a la \u00f3pera\nHermanos Marx\n1942.  Tono Be oro Not tono Be.[22]\u200b\nErnst Lubitsch, director.\n1949. Passport tono Pimlico.[23]\u200b\nHenry Cornelius, director\nT. E. B. Clarke, guionista\n1952.  The Crimson Pirate.[24]\u200b\nRobert Siodmak, director\n1955. El quinteto de la muerte\n1958. Y soliti ignoti\n1965. Signore e signori\n1965. Those Magnificent Men in Their Flying Machines\n1965.  The Great Race\n1966. Golfus de Roma\n1971. Trafic de Jacques Tati.[25]\u200b\n1975.  Amici miei", "subsections": []}, {"name": "Referencias", "text": "\u2191 Real Academia Espa\u00f1ola. \u00abhumorista\u00bb. Diccionario de la lengua espa\u00f1ola (23.\u00aa edici\u00f3n). Consultado el 16 de octubre de 2023.\u00a0\n\u2191 La farce de Ma\u00eetre Pathelin. Librairie des bibliophiles. 1876. pp.\u00a017-.\u00a0\n\u2191 Antonio de Guevara (1673). Menosprecio de Corte y Alabanza de Aldea, aviso de privados, y doctrina de Cortesanos, Arte de Marear, y Trabajos de la Galera. Viuda de Melchor Alegre. pp.\u00a02-.\u00a0\n\u2191 Tassoni (Alessandro) (1834). La secchia rapita: poema eroicomico. presso G. Moro. pp.\u00a0173-.\u00a0\n\u2191 Alessandro Tassoni (1825). La secchia rapita. J. M. Richardson. pp.\u00a015-.\u00a0\n\u2191 Cyrano de Bergerac; P. L. Jacob (1858). \u0152uvres comiques, galantes et litt\u00e9raires. Delahays.\u00a0\n\u2191 Addison's humorous essays, selected from the 'Spectator'.. 1863.\u00a0\n\u2191 Tobias Smollett (1776). The Adventures of Peregrine Pickle: In which are Included, Memoirs of a Lady of Quality. In Four Volumes. .... R. Baldwin. [sic] and Robinson and Roberts; and T. Becket and T. Cadell. pp.\u00a0295-.\u00a0\n\u2191 Charles Dickens (1866). Posthumous Papers of the Pickwick Club. Chapman and Hall.\u00a0\n\u2191 The Monthly Review. R. Griffiths. 1837. pp.\u00a0153-.\u00a0\n\u2191 Revue britannique: ou Choix d'articles traduits des meilleurs \u00e9crits p\u00e9riodiques de la Grande-Bretagne. Revue britannique. 1872. pp.\u00a0280-.\u00a0\n\u2191 Hymns Ancient & Modern Ltd (November 1981). ThirdWay. Hymns Ancient & Modern Ltd. pp.\u00a014-.\u00a0\n\u2191 Stephen Lambe (15 de septiembre de 2012). The Three Men in a Boat Companion: The Thames of Jerome K. Jerome. Amberley Publishing Limited. ISBN\u00a0978-1-4456-1574-5.\u00a0\n\u2191 Video: LA SE\u00d1ORITA DE TREV\u00c9LEZ de CARLOS ARNICHES.\n\u2191 Josep Maria Folch i Torres (1983). Les Formidables aventures d'en Pere Fi. La Llar del Llibre. ISBN\u00a0978-84-7279-156-5.\u00a0\n\u2191 Brian Taves (18 de mayo de 2006). P.G. Wodehouse and Hollywood: Screenwriting, Satires and Adaptations. McFarland. ISBN\u00a0978-0-7864-8443-0.\u00a0\n\u2191 Salvador P\u00e1niker (1966). Conversaciones en Catalu\u00f1a. Editorial Kair\u00f3s. pp.\u00a087-. GGKEY:6PKZDBY98G0.\u00a0\n\u2191 Alan R. Perry (23 de febrero de 2008). Don Camillo Stories of Giovannino Guareschi: A Humorist Potrays the Sacred. University of Toronto Press. ISBN\u00a0978-1-4426-9239-8.\u00a0\n\u2191 Giovannino Guareschi (1 de junio de 2013). Il destino si chiama Clotilde. Bur. ISBN\u00a0978-88-586-3173-7.\u00a0\n\u2191 Gaetana Marrone; Paolo Puppa (26 de diciembre de 2006). Encyclopedia of Italian Literary Studies. Routledge. pp.\u00a0900-. ISBN\u00a0978-1-135-45530-9.\u00a0\n\u2191 Helen Fielding (12 de noviembre de 2013). El diari de Bridget Jones. Grup 62. ISBN\u00a0978-84-297-7272-2.\u00a0\n\u2191 Kevin Starr (28 de noviembre de 2002). The Dream Endures: California Enters the 1940s. Oxford University Press. pp.\u00a0462-. ISBN\u00a0978-0-19-992393-9.\u00a0\n\u2191 Wheeler W. Dixon (1994). Re-Viewing British Cinema, 1900-1992: Essays and Interviews. SUNY Press. pp.\u00a096-. ISBN\u00a0978-0-7914-1861-1.\u00a0\n\u2191 Ed Andreychuk (18 de abril de 2005). Burt Lancaster: A Filmography and Biography. McFarland. pp.\u00a060-. ISBN\u00a0978-1-4766-0649-1.\u00a0\n\u2191 Michel Chion (2003). The Films of Jacques Tati. Guernica Editions. pp.\u00a031-. ISBN\u00a0978-1-55071-175-2.\u00a0", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Historia del humor\nAnexo:Humoristas\nAnexo:Humoristas gr\u00e1ficos\nF\u00e1bulas de Esop", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/IDLE", "title": "IDLE", "summary": "IDLE (abreviatura de Integrated Development and Learning Environment, en espa\u00f1ol: \u00abEntorno de desarrollo y aprendizaje integrado\u00bb)[1]\u200b es un entorno de desarrollo integrado para Python, que se incluye con la implementaci\u00f3n predeterminada del lenguaje desde la versi\u00f3n 1.5.2b1.[2]\u200b Est\u00e1 empaquetado como una parte opcional del paquete de Python con muchas distribuciones de Linux.\nIDLE est\u00e1 destinado a ser un entorno de desarrollo integrado simple y enfocado para su uso por parte de usuarios principiantes, especialmente en un entorno educativo. Con ese fin, es multiplataforma y evita la sobrecarga de funcionalidades.\nSeg\u00fan el archivo README incluido, sus principales caracter\u00edsticas son:\nEditor de texto de m\u00faltiples ventanas con resaltado de sintaxis, autocompletado, sangr\u00eda inteligente y otros.\nInt\u00e9rprete de Python con resaltado de sintaxis.\nDepurador integrado con pasos, breakpoints persistentes y visualizaci\u00f3n de espacios de nombres locales y globales.[3]\u200b\nEl autor, Guido van Rossum, explic\u00f3 que IDLE significa \"Integrated DeveLopment Environment\",[4]\u200b y dado que van Rossum nombr\u00f3 al lenguaje Python en honor al grupo de comedia brit\u00e1nico Monty Python, el nombre IDLE probablemente tambi\u00e9n fue elegido para honrar a Eric Idle, uno de los miembros fundadores de Monty Python.[5]\u200b[6]\u200b", "sections": [{"name": "Referencias", "text": "\u2191 \u00abArchived copy\u00bb. Archivado desde el original el 4 de junio de 2020. Consultado el 4 de junio de 2020.\u00a0\n\u2191 IDLE 0.1 was distributed with the Python 1.5.2b1 release on 12/22/98., From: \\Python-1.5.2\\Tools\\idle\\NEWS.txt\n\u2191 \u00abIDLE \u2014 documentaci\u00f3n de Python - 3.9.0\u00bb. docs.python.org. Consultado el 14 de noviembre de 2020.\u00a0\n\u2191 Primer on Installing Python and VPython, Author: M. Haley\n\u2191 Lutz, Mark & Ascher, David (2004). Learning Python, p. 40. O'Reilly Media, Inc. ISBN\u00a00-596-00281-5.\n\u2191 Hammond, Mark & Robinson, Andy (2000). Python Programming On Win32: Help for Windows Programmers, p. 59. O'Reilly Media, Inc. ISBN\u00a0978-1565926219.", "subsections": []}, {"name": "Enlaces externos", "text": " Wikimedia Commons alberga una categor\u00eda multimedia sobre IDLE.\nEsta obra contiene una traducci\u00f3n total derivada de \u00abIDLE\u00bb de Wikipedia en ingl\u00e9s,\u00a0concretamente de esta versi\u00f3n del 21 de septiembre de 2020, publicada por sus editores bajo la Licencia de documentaci\u00f3n libre de GNU y la Licencia Creative Commons Atribuci\u00f3n-CompartirIgual 4.0 Internacional", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/IPython", "title": "IPython", "summary": "PythonJavaScriptC\nIPython es un shell interactivo que a\u00f1ade funcionalidades extra al modo interactivo incluido con Python, como resaltado de l\u00edneas y errores mediante colores, una sintaxis adicional para el shell, autocompletado mediante tabulador de variables, m\u00f3dulos y atributos; entre otras funcionalidades. Es un componente del paquete SciPy.", "sections": [{"name": "Computaci\u00f3n en paralelo Parallel computing", "text": "IPython est\u00e1 basado en una arquitectura que suministra computaci\u00f3n distribuida y en paralelo. IPython permite la ejecuci\u00f3n de aplicaciones en paralelo, pudi\u00e9ndose estas desarrollar, ejecutar, depurar y ser monitoreadas interactivamente. Es por esto que el nombre de IPython toma la letra I del inicio, como referencia a interactivo. La arquitectura abstrae situaciones en paralelo, lo que permite a IPython dar soporte a m\u00faltiples tipos de computaci\u00f3n en paralelo. Entre estos se incluyen:\nParalelismo \u00abun programa, m\u00faltiples datos\u00bb (SPMD por sus siglas en ingl\u00e9s).\nParalelismo \u00abm\u00faltiples programas, m\u00faltiples datos\u00bb (MPMD).\nPaso de mensajes usando MPI.\nParalelismo de control.\nParalelismo de datos.\nCombinaci\u00f3n de las aproximaciones anteriores.\nAproximaciones personalizables por los usuarios.", "subsections": []}, {"name": "Notebook", "text": "El cuaderno Notebook de IPython est\u00e1 basado en la web y es interactivo. Un notebook en IPython es un documento JSON que contiene una lista ordenada de entradas / salidas las cuales pueden tener c\u00f3digo, texto, matem\u00e1ticas, dibujos y rich media.\nLos notebooks de IPython pueden ser convertidos a otros formatos de archivos como HTML, presentaciones de diapositivas, LaTeX, PDF, Python, etc).", "subsections": []}, {"name": "Proyecto Jupyter", "text": "En 2014 Fernando P\u00e9rez anunci\u00f3 un proyecto alternativo a IPython llamado Jupyter.[1]\u200b IPython seguir\u00e1 existiendo como un shell de Python y como kernel para Jupyter, mientras que el notebook y otras partes de IPython pasar\u00e1n a formar parte del proyecto Jupyter.[2]\u200b Jupyter a\u00f1adi\u00f3 soporte para Julia, R, Haskell y Ruby al notebook", "subsections": []}, {"name": "Otras caracter\u00edsticas", "text": "IPython incluye adem\u00e1s una versi\u00f3n en GNU/Linux para ser ejecutado en X y usando la biblioteca wxWidgets. En el uso de bibliotecas GUI, IPython no permite el bloqueo en la interacci\u00f3n con Tkinter, GTK+, Qt ni wxWidgets; solo permite la interacci\u00f3n con Tkinter. Ipython puede gestionar de forma interactiva el uso paralelo de varios cl\u00fasteres. IPython puede ser utilizado para reemplazar el shell de sistema gracias a lo flexible y modificable que es mediante su archivo de configuraci\u00f3n, especialmente en windows. El shell de IPython recuerda a un shell de unix, e incluso permite usar comandos bash durante su uso para, por ejemplo, cambiar de directorio de trabajo.", "subsections": []}, {"name": "En los medios de comunicaci\u00f3n", "text": "IPython ha sido mencionado en prensa del \u00e1mbito inform\u00e1tico,[3]\u200b y en conferencias del mundo cient\u00edfico.[4]\u200b IPython es considerado como una herramienta para el trabajo cient\u00edfico, y frecuentemente ha sido presentado junto con Matplotlib[5]\u200b", "subsections": []}, {"name": "Fin de la compatibilidad con Python 2", "text": "La serie IPython 5.x (Long Time Support) es la \u00faltima versi\u00f3n de IPython compatible con Python 2. El proyecto IPython se comprometi\u00f3 a no admitir Python 2 despu\u00e9s de 2020[6]\u200b al ser uno de los primeros proyectos en unirse a la Declaraci\u00f3n de Python 3, el La serie 6.x solo es compatible con Python 3 y versiones posteriores. Sin embargo, todav\u00eda es posible ejecutar un kernel IPython y un servidor Jupyter Notebook en diferentes versiones de Python, lo que permite a los usuarios acceder a Python 2 en la versi\u00f3n m\u00e1s reciente de Jupyter.[7]\u200b", "subsections": []}, {"name": "Proyecto Jupyter", "text": "En 2014, Fernando P\u00e9rez anunci\u00f3 un proyecto derivado de IPython llamado Project Jupyter.[8]\u200b IPython continu\u00f3 existiendo como un shell y kernel de Python para Jupyter, pero la interfaz del notebook y otras partes independientes del lenguaje de IPython se movieron bajo el nombre de Jupyter. Jupyter es independiente del lenguaje y su nombre es una referencia a los lenguajes de programaci\u00f3n centrales compatibles con Jupyter, que son Julia, Python y R.[9]\u200b\nJupyter Notebook (anteriormente IPython Notebooks) es un entorno computacional interactivo basado en web para crear, ejecutar y visualizar cuadernos de Jupyter. Es similar a la interfaz de cuaderno de otros programas como Maple, Mathematica y SageMath, un estilo de interfaz computacional que se origin\u00f3 con Mathematica en la d\u00e9cada de 1980. Admite entornos de ejecuci\u00f3n (tambi\u00e9n conocidos como n\u00facleos) en docenas de idiomas. De forma predeterminada, Jupyter Notebook se env\u00eda con el kernel de IPython, pero hay m\u00e1s de 100 kernels de Jupyter a partir de mayo de 2018.", "subsections": []}, {"name": "Referencias", "text": "\u2191 Python for all (2): What are Jupyter Notebooks?\n\u2191 https://youtube.com/devicesupport, 17 de abril de 2015, consultado el 26 de mayo de 2015\u00a0.\n\u2191 Conrad Koziol (September 12, 2005). \"Introducing IPython\". NewsForge.\n\u2191 \u00abAbout/Presentations - IPython\u00bb. Archivado desde el original el 5 de febrero de 2010. Consultado el 26 de febrero de 2010.\u00a0\n\u2191 IPython: A System for Interactive Scientific Computing.\n\u2191 \u00abRelease of IPython 5.0 \u2013 Jupyter Blog\u00bb. Jupyter Blog. 8 de julio de 2016. Consultado el 11 de abril de 2018.\u00a0\n\u2191 Jake VanderPlas (2016). Python Data Science Handbook. O'Reilly Media. ISBN\u00a0978-1491912058.\u00a0\n\u2191 \u00abProject Jupyter // Speaker Deck\u00bb.\u00a0\n\u2191 \u00abJupyter Logo \u00b7 jupyter/Design Wiki\u00bb.\u00a0", "subsections": []}, {"name": "Enlaces de inter\u00e9s", "text": "Sitio web de IPython\nDocumentaci\u00f3n de IPython\nJeremy Jones (27, January 2005). \u00abEnhanced Interactive Python with IPython\u00bb. ONLamp.com (en ingl\u00e9s). Archivado desde el original el 23 de marzo de 2016. Consultado el 26 de febrero de 2010.\u00a0\nVarias presentaciones de IPython y Python en conferencias cient\u00edficas en the Scientific Python website.\nIPython introduction videos en showmed", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/ISBN", "title": "ISBN", "summary": "El ISBN (por las siglas en ingl\u00e9s de International Standard Book Number, en espa\u00f1ol \u00abc\u00f3digo Internacional normalizado para libros\u00bb)[1]\u200b es un identificador \u00fanico para libros.[Nota 1]\u200b Mediante este sistema, a cada libro se le asigna una cadena num\u00e9rica \u00fanica internacional que sirve para identificar datos b\u00e1sicos del objeto tales como t\u00edtulo, editorial, tirada, extensi\u00f3n, materia, pa\u00eds, traductor, lengua original, etc. No debe confundirse con el ISSN (International Standard Serial Number, en espa\u00f1ol \u00abn\u00famero internacional normalizado de publicaciones peri\u00f3dicas\u00bb),[2]\u200b que corresponde al de las publicaciones peri\u00f3dicas, como revistas y diarios.", "sections": [{"name": "Descripci\u00f3n", "text": "", "subsections": [{"name": "El ISBN de diez d\u00edgitos", "text": "Fue creado en 1970 al adoptar el est\u00e1ndar internacional ISO 2108,[3]\u200b hasta la reforma que entr\u00f3 en vigor en 2007, cada edici\u00f3n y variaci\u00f3n (excepto las reimpresiones) de un libro recib\u00eda un ISBN compuesto por 10 d\u00edgitos de longitud, y dividido en cuatro partes:\nel c\u00f3digo de pa\u00eds o lengua de origen,\nel editor,\nel n\u00famero del art\u00edculo y\nun d\u00edgito de control.\nEstas partes tienen distintas longitudes y, para mejorar su legibilidad (lectura humana), es conveniente, aunque no obligatorio, que se separen con espacios en blanco o con guiones. Adem\u00e1s, se utilizan prefijos para asegurarse de que dos c\u00f3digos no puedan comenzar de la misma forma.\nEn caso de usarse, tiene que estar situado correctamente, el primer guion se colocaba despu\u00e9s del primer d\u00edgito, el segundo guion era de ubicaci\u00f3n variable y el tercer guion despu\u00e9s del noveno, justo antes del d\u00edgito de control.[4]\u200b\nEl c\u00f3digo de pa\u00eds era 0 o 1 para pa\u00edses de habla inglesa, 2 para pa\u00edses de habla francesa, 3 para pa\u00edses de habla alemana, etc. El sistema original ISBN carec\u00eda del c\u00f3digo de pa\u00eds, pero anteponiendo un 0 a un n\u00famero SBN de 9 d\u00edgitos se creaba un ISBN v\u00e1lido. El c\u00f3digo de pa\u00eds puede tener hasta 5 d\u00edgitos de longitud; por ejemplo, el 99936 se usa para But\u00e1n. Se puede consultar la lista de ISBN por pa\u00edses.\nEl n\u00famero del editor es asignado por la agencia nacional del ISBN, y el n\u00famero del art\u00edculo es elegido por el editor.\nLos editores reciben bloques de ISBN m\u00e1s grandes de los que se espera que necesiten; un editor peque\u00f1o puede recibir ISBN que consistan en un d\u00edgito para el idioma, siete d\u00edgitos para el editor y un solo d\u00edgito para los art\u00edculos individuales. Una vez que termine ese bloque puede recibir otro, con un n\u00famero de editor diferente. Por tanto, a veces diferentes n\u00fameros de editor corresponden en realidad al mismo.\nEl d\u00edgito de control de un ISBN de diez cifras se halla mediante un c\u00e1lculo basado en el m\u00f3dulo 11: Se multiplica cada uno de los nueve primeros d\u00edgitos por la posici\u00f3n que ocupan en la secuencia num\u00e9rica, es decir, el primero por 1, el segundo por dos y as\u00ed sucesivamente hasta el noveno que se multiplica por 9. Luego se suman estas multiplicaciones y el resultado se divide entre 11. Dicha divisi\u00f3n dejar\u00e1 un resto entre 0 y 10. Si el resto est\u00e1 entre 0 y 9, este mismo valor es el del d\u00edgito de control. Pero si el resto es 10, entonces se establece como d\u00edgito de control la letra\u00a0X."}, {"name": "El ISBN de trece d\u00edgitos", "text": "Debido a la escasez existente en ciertas categor\u00edas del ISBN, la organizaci\u00f3n internacional de est\u00e1ndares adopt\u00f3 implantar un ISBN de trece d\u00edgitos desde el 1 de enero de 2007. Esta actualizaci\u00f3n pone a la par el sistema del ISBN con el sistema de c\u00f3digos de barras EAN.[5]\u200b Los ISBN existentes se prefijan con \u00ab978\u00bb (y el d\u00edgito de control ser\u00e1 recalculado); cuando se agoten los ISBN \u00ab978\u00bb, se introducir\u00e1 el prefijo 979. Cabe se\u00f1alar la poca probabilidad de que coincidan los n\u00fameros de identificaci\u00f3n del editor asignados en los ISBN \u00ab978\u00bb y \u00ab979\u00bb.\nEl d\u00edgito de control de un ISBN de trece cifras se calcula de un modo diferente al del ISBN de 10 cifras, con un c\u00e1lculo basado en el m\u00f3dulo 10: multiplicando el primero de los 12 n\u00fameros iniciales por 1, el segundo por 3, el tercero por 1, el cuarto por 3, y as\u00ed sucesivamente hasta llegar al n\u00famero 12; el d\u00edgito de control es el valor que se debe a\u00f1adir a la suma de todos estos productos para hacerla divisible por 10 (por ejemplo si la suma es 97, el d\u00edgito de control es 3, porque 97 + 3 = 100, que es divisible por 10; si la suma es 86, el d\u00edgito de control ser\u00e1 4; si suman 120, ser\u00e1 0; y as\u00ed en cualquier otro caso).[6]\u200b\nMuchos editores, incluida la editorial Barnes & Noble, han optado por utilizar los ISBN. Pero muchos detallistas prefieren el est\u00e1ndar m\u00e1s universal European Article Number (EAN), puesto que este se aplica a todos los soportes y no solo a los libros."}, {"name": "Bookland", "text": "Bookland es el nombre informal del prefijo de C\u00f3digo \u00danico de Pa\u00eds (UCC) asignado en la d\u00e9cada de 1980 para los identificadores de N\u00famero de Art\u00edculo Europeo (EAN) de los libros publicados, independientemente del pa\u00eds de origen, por lo que el espacio de nombres EAN puede mantener un sistema de numeraci\u00f3n paralela redundante. En otras palabras, Bookland es un pa\u00eds ficticio que existe \u00fanicamente en EAN con el prop\u00f3sito de catalogar geogr\u00e1ficamente los libros en el sistema de codificaci\u00f3n EAN, que de otro modo tendr\u00eda una clave geogr\u00e1fica."}]}, {"name": "Sistemas similares", "text": "ASIN: Amazon Standard Identification Number o \u2018N\u00famero de Identificaci\u00f3n Est\u00e1ndar de Amazon\u2019.\nISMN: International Standard Music Number o \u2018N\u00famero Musical Est\u00e1ndar Internacional\u2019.\nISAN: International Standard Audiovisual Number o \u2018N\u00famero Audiovisual Est\u00e1ndar Internacional\u2019.\nISSN: International Standard Serial Number o \u2018N\u00famero Internacional Normalizado de Publicaciones Peri\u00f3dicas\u2019,[7]\u200b que se utiliza en publicaciones peri\u00f3dicas, como revistas y peri\u00f3dicos.\nIBSN: Internet Blog Serial Number o \u2018N\u00famero Serie de Blogs de Internet\u2019.", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "ASIN\nEuropean Article Number\nP\u00e1gina especial: fuentes de libros\nWikipedia:Fuentes de libros", "subsections": []}, {"name": "Notas", "text": "\u2191 No siempre se ha mantenido este criterio; por ejemplo, la primera edici\u00f3n de The Ultimate Alphabet y The Ultimate Alphabet Answerbook tienen el mismo ISBN, y se ha publicado al menos un libro con cuatro n\u00fameros ISBN impresos, dependiendo el uso de uno de ellos de las consideraciones que los m\u00faltiples editores vean oportunas para una copia en particular.", "subsections": []}, {"name": "Referencias", "text": "\u2191 \u00ab\u00bfQu\u00e9 es un ISBN?\u00bb. International ISBN Agency. Consultado el 6 de diciembre de 2022.\u00a0\n\u2191 \u00abLey Federal de Derechos de Autor\u00bb (doc). C\u00e1mara de Diputados (M\u00e9xico). 24 de diciembre de 1996. Archivado desde el original el 8 de diciembre de 2018. Consultado el 7 de diciembre de 2018. \u00abArt\u00edculo 53.- Los editores deben hacer constar en forma y lugar visibles de las obras que publiquen, los siguientes datos: I. Nombre, denominaci\u00f3n o raz\u00f3n social y domicilio del editor; II. A\u00f1o de la edici\u00f3n o reimpresi\u00f3n; III. N\u00famero ordinal que corresponde a la edici\u00f3n o reimpresi\u00f3n, cuando esto sea posible, y IV. N\u00famero Internacional Normalizado del Libro (ISBN), o el N\u00famero Internacional Normalizado para Publicaciones Peri\u00f3dicas (ISSN), en caso de publicaciones peri\u00f3dicas.\u00bb\u00a0\n\u2191 \u00abISO 2108:2017(en) Information and documentation \u2014 International Standard Book Number (ISBN)\u00bb. ISO (en ingl\u00e9s). Consultado el 6 de diciembre de 2022.\u00a0\n\u2191 \u00abHyphenation Instructions\u00bb (html). ISBN Org. (en ingl\u00e9s). Archivado desde el original el 3 de abril de 2005. Consultado el 7 de diciembre de 2018. \u00abThe position of the hyphens are determined by the publisher prefix range established by each national agency in accordance with the industry needs. The knowledge of the prefix ranges for each country or group of countries is necessary to develop the hyphenation output program.\u00bb\u00a0\n\u2191 \u00abFrequently Asked Questions about changes to the ISBN\u00bb (html). Organizaci\u00f3n Internacional de Normalizaci\u00f3n (en ingl\u00e9s). 15 de octubre de 2004. Archivado desde el original el 6 de abril de 2005. Consultado el 7 de diciembre de 2018. \u00abWhen a barcode is applied to the publication, as is required by retail systems throughout the supply chain, that 10-digit ISBN has to become compatible with the 13-digit EAN-UCC international product coding system for bar codes. This is done by adding the 3-digit EAN product code for books \"978\" in front of the 10-digit ISBN and recalculating that ISBN's check digit to include those extra 3 digits. This 13-digit combination of the EAN 978 product code and an ISBN with a recalculated check digit is sometimes referred to as the \"Bookland EAN\".\u00bb\u00a0\n\u2191 Pearce, Bill (16 de marzo de 2015). \u00abAnatomy of a 13-digit ISBN\u00bb (html). isbn-information (en ingl\u00e9s). Archivado desde el original el 15 de agosto de 2015. Consultado el 7 de diciembre de 2018. \u00abIt is possible to validate a complete 13-digit ISBN, one that includes its check digit, by a similar procedure to calculating the check digit. Simply perform the same calculation, adding the check digit to the calculated product with a weighting of one. When the division by ten is performed, the remainder will be zero for a valid ISBN.\u00bb\u00a0\n\u2191 \u00daltima reforma (23 de julio de 2003) de la Ley Federal del Derecho de Autor de los Estados Unidos Mexicanos (publicada por el Diario Oficial de la Federaci\u00f3n el 24 de diciembre de 1996).", "subsections": []}, {"name": "Enlaces externos", "text": "Esta obra contiene una traducci\u00f3n parcial (secci\u00f3n Bookland) derivada de \u00abBookland \u00bb de Wikipedia en ingl\u00e9s,\u00a0concretamente de esta versi\u00f3n del 13 de junio de 2018, publicada por sus editores bajo la Licencia de documentaci\u00f3n libre de GNU y la Licencia Creative Commons Atribuci\u00f3n-CompartirIgual 4.0 Internacional.\nLista completa de ISBN (en ingl\u00e9s).\nComo hacer c\u00f3digos ISBN y EAN.\nC\u00f3digos de Barras EAN.\nConsultas al ISBN espa\u00f1ol.\nP\u00e1gina de ISBN.\nISBN Chile.\nBuscador de ISBN en Per\u00fa.\nConsultas al ISBN argentino.\nBuscador de ISBN en Ecuador.\nConsultas al ISBN en M\u00e9xico (Instituto Nacional del Derecho de Autor de la Secretar\u00eda de Educaci\u00f3n P\u00fablica del gobierno mexicano).\nN\u00famero Internacional Normalizado de Publicaciones Peri\u00f3dicas.\nP\u00e1gina de ISBN (en ingl\u00e9s).\nBreve resumen sobre el ISBN (en ingl\u00e9s).\nC\u00f3mo encontrar un libro desde Wikibooks (en ingl\u00e9s).\nGenerador de C\u00f3digo de Barras de ISBN 13 en l\u00ednea (en ingl\u00e9s).\nGenerador en l\u00ednea de c\u00f3digo de barras ISBN (de 10 o 13 d\u00edgitos).\nP\u00e1gina para generar c\u00f3digos IBSN para blogs.", "subsections": [{"name": "Agencias nacionales e internacionales", "text": "Agencia Internacional de ISBN. Coordina y supervisa el uso del ISBN a nivel mundial (en ingl\u00e9s).\nAgencia argentina del ISBN.\nAgencia peruana del ISBN.\nAgencia del ISBN de Espa\u00f1a.\nAgencia de ISBN para el Reino Unido y la Rep\u00fablica de Irlanda Nielsen BookData (en ingl\u00e9s).\nAgencia de ISBN para Estados Unidos y Puerto Rico R. R. Bowker LLC (en ingl\u00e9s).\nLista de identificadores por grupo Lista de prefijos de idioma y regi\u00f3n (en ingl\u00e9s).\nLa Agencia del ISBN de Venezuela.\nAgencia ISBN de Ecuador\nAgencia ISBN de Honduras."}, {"name": "Herramientas en l\u00ednea", "text": "ISBN Espa\u00f1a Busca de libros editados en Espa\u00f1a.\nISBNdb.com Busca libros por ISBN, autor, t\u00edtulo, tema, etc.; corrige autom\u00e1ticamente el d\u00edgito de control del ISBN si fuera necesario (en ingl\u00e9s).\nISBN.nu Ofrece b\u00fasquedas gratuitas en una base de datos de t\u00edtulos (en ingl\u00e9s).\nRFC 3187  Using International Standard Book Numbers as Uniform resource names (URN) (en ingl\u00e9s).\nBarcodeRobot  Permite generar c\u00f3digos de barras a partir de n\u00fameros ISBN format pdf (en ingl\u00e9s).\nGu\u00eda de Implementaci\u00f3n Para el c\u00f3digo ISBN de 13 d\u00edgitos (documento pdf en ingl\u00e9s"}]}]}
{"url": "https://es.wikipedia.org/wiki/Icon", "title": "Icon", "summary": "Icon es un lenguaje de programaci\u00f3n de muy alto nivel, especialmente recomendado para trabajar con cadenas de texto, ya que permite una programaci\u00f3n r\u00e1pida y concisa. Puede ser usado para an\u00e1lisis y formateo de textos, inteligencia artificial o programaci\u00f3n de prototipos. Las \u00faltimas versiones, adem\u00e1s, incluyen gr\u00e1ficos y facilidades GUI. Fue dise\u00f1ado en los a\u00f1os 1970 por Ralph E. Griswold, y otros colaboradores en el \"Department of Computer Science\" de la Universidad de Arizona. Griswold, que lideraba el proyecto, ya ten\u00eda experiencia anterior en el dise\u00f1o de lenguajes de alto nivel, ya que fue uno de los creadores de Snobol, del que tomaron algunas caracter\u00edsticas.", "sections": [{"name": "Sintaxis b\u00e1sica", "text": "Se deriva de la clase ALGOL de los lenguajes de programaci\u00f3n estructurada, por lo que tiene una sintaxis similar a la de C, pero sobre todo, a la de Pascal, ya que utiliza el s\u00edmbolo \u2018:=\u2019 para las asignaciones. Por otra parte, se asemeja a C en la utilizaci\u00f3n de los corchetes para estructurar el programa y en la ejecuci\u00f3n de un procedimiento principal llamado \"main\".\nOtras caracter\u00edsticas comunes a otros lenguajes de programaci\u00f3n de scripting es que no es necesario declarar las variables, los tipos son emitidos autom\u00e1ticamente y los n\u00fameros pueden ser convertidos a cadena de caracteres y volver autom\u00e1ticamente. Otro aspecto a destacar es la ausencia de un car\u00e1cter de fin de l\u00ednea. Las l\u00edneas no terminan en punto y coma como en el caso de C, por ejemplo, sino que terminan en una coma impl\u00edcita siempre que la l\u00ednea tenga sentido.\nLos procedimientos son los bloques de construcci\u00f3n b\u00e1sicos en los programas. Aunque los nombres y palabras utilizadas en ICON se asemejen m\u00e1s a Pascal, el funcionamiento es m\u00e1s similar al que se le da en C, y puede devolver valores.", "subsections": []}, {"name": "Evaluaci\u00f3n de expresiones", "text": "", "subsections": [{"name": "Condicional", "text": "Hay expresiones condicionales que pueden tener \u00e9xito y producir un resultado, o fallar y no producir ning\u00fan resultado. Un ejemplo es la operaci\u00f3n de comparaci\u00f3n, i > j que tendr\u00e1 \u00e9xito siempre que el valor de i sea mayor que el de j. Algo parecido ocurre con i > j > k que tendr\u00e1 \u00e9xito cuando el valor de j se encuentre entre el de i y el de k.\nEl \u00e9xito o el fracaso de las operaciones condicionales se utiliza en lugar de valores booleanos para conducir las estructuras de control en ICON. Por ejemplo: \nSe asignar\u00eda el valor de i a k en el caso de que el valor de i sea mayor que el de j, y se le asignar\u00eda el valor de j en el caso contrario.\nLa utilidad de estos conceptos de \u00e9xito o fracaso es ilustrada mediante la orden \u201cfind(s1,s2)\u201d, que falla en el caso de que s1 no sea una subcadena de s2. Por ejemplo:\nEsto devolver\u00eda i, que es la posici\u00f3n de la cadena \u201cline\u201d en la que se encuentra la subcadena \u201cor\u201d. En el caso de que no se encuentre la subcadena, el programa no devolver\u00eda ning\u00fan resultado.\nMuchas expresiones son condicionales. Un ejemplo es \u201cread()\u201d, que devuelve la siguiente l\u00ednea de un archivo de entrada, y termina cuando se alcanza el final del archivo.\nEsta expresi\u00f3n copia el archivo de entrada en el archivo de salida.\nSi un argumento de una funci\u00f3n falla, la funci\u00f3n no se llama, la llamada falla."}]}, {"name": "Generadores", "text": "En algunas situaciones, una expresi\u00f3n puede ser capaz de producir m\u00e1s de un resultado diferente. Por ejemplo:\nAqu\u00ed, la subcadena \u201cor\u201d se repite 3 veces a lo largo de la cadena, en la posici\u00f3n 3, 23 y 33. Muchos lenguajes superan este problema eligiendo solo una de las opciones, generalmente se quedan con el primer resultado obtenido, en este caso el 3. Sin embargo, en ICON, podemos generar los 3 resultados distintos.\nLos resultados que produce un generador depender\u00e1 del contexto. En una situaci\u00f3n en la que \u00fanicamente uno de los resultados en necesario, se produce as\u00ed:\nLo que asignar\u00eda a la variable i el valor 3.\nSi el resultado de un generador no da lugar al \u00e9xito de la expresi\u00f3n que encierra, entonces la condici\u00f3n falla, pero el generador se reanuda para producir otro valor. Un ejemplo:\nEn este ejemplo, el primer resultado obtenido ser\u00eda 3, pero como no cumple la condici\u00f3n de que sea menor que 5, la expresi\u00f3n falla, pero se volver\u00e1 a ejecutar hasta encontrar el siguiente resultado, 23, que s\u00ed cumple la condici\u00f3n impuesta (23 > 5), y lo mismo ocurre con el 33. En estos casos, la operaci\u00f3n de comparaci\u00f3n tiene \u00e9xito.\nLa anterior expresi\u00f3n se puede expresar tambi\u00e9n de la siguiente manera:\nEs posible utilizar las expresiones en situaciones dif\u00edciles y rebuscadas, como por ejemplo:\nTendr\u00e1 \u00e9xito cuando la subcadena \u201cor\u201d, de la cadena sentence1, se encuentre en la misma posici\u00f3n que la subcadena \u201cand\u201d en la cadena sentence2. \nUn generador se puede reanudar repetidas veces para producir todos sus resultados mediante el uso de las tareas de control de cada estructura:\nEste bucle escribir\u00e1 todas las posiciones en las que se encuentre la subcadena \u201cor\u201d dentro de la oraci\u00f3n \u201csentence\u201d. Otra expresi\u00f3n que realiza la misma tarea que la anterior es la siguiente:\nExisten varios generadores predise\u00f1ados en ICON. Uno de los m\u00e1s conocidos es:\nUn ejemplo de su uso:\nO esta otra opci\u00f3n m\u00e1s compacta:\nEstas expresiones ejecutaran f(k) para cada valor de \u201ck\u201d que se encuentre entre \u2018i\u2019 y \u2018j\u2019.\nHay otras estructuras de control relacionadas con la generaci\u00f3n. Una de ellas es la alternancia:\nQue generar\u00e1 los resultados de expr1 seguidos de los de expr2. Por ejemplo:\nEscribir\u00e1 la posici\u00f3n de \u201cor\u201d en sentence1, seguido de la posici\u00f3n de la misma subcadena \u201cor\u201d en sentence2. Otra forma de escribir esta instrucci\u00f3n:\nOtro uso de la alternancia es el que pone de manifiesto la siguiente orden:\nQue tendr\u00e1 \u00e9xito cuando o bien i, o bien j, o bien k, tengan el valor 0 o 1.\nLos procedimientos podr\u00e1n ser usados para a\u00f1adir generadores al repertorio de los incluidos en ICON. Por ejemplo:\nEste procedimiento genera el valor de las posiciones de s1 que tambi\u00e9n ocurren en s2. La estructura de control \u201csuspend\u201d devuelve un valor desde el procedimiento, pero lo deja en suspensi\u00f3n para que pueda ser reanudado por otro valor. Cuando el bucle termina, el control de las corrientes de fuera del final del procedimiento sin producir otro valor.", "subsections": []}, {"name": "Exploraci\u00f3n de cadenas", "text": "Para operaciones complicadas sobre las posiciones en las cadenas, y en las que es muy f\u00e1cil cometer un error, ICON facilita la tarea gestionando autom\u00e1ticamente las posiciones de cada cadena. Por ejemplo:\nDonde s es la cadena que hay que examinar y \u201cexpr\u201d es una expresi\u00f3n que se encarga de llevar a cabo la exploraci\u00f3n. La exploraci\u00f3n empieza en la posici\u00f3n 1.\nLa funci\u00f3n \u201cmove(i)\u201d se mueve por la cadena hasta la posici\u00f3n \u2018i\u2019 y produce en la salida la subcadena contenida entre las posiciones anteriores y dicha posici\u00f3n. Si esta subcadena no pudiera ser producida porque la cadena original no es lo suficientemente larga, la funci\u00f3n falla. Por ejemplo:\nQue escribe subcadenas de dos caracteres consecutivos de la l\u00ednea, y parar\u00e1 cuando acabe la l\u00ednea.\nOtra funci\u00f3n de combinaci\u00f3n es la \u201ctab(i)\u201d, que se establece en la posici\u00f3n \u2018i\u2019 y devuelve la subcadena contenida entre las anteriores y las nuevas posiciones. Por ejemplo:\nLo que escribir\u00eda todos los caracteres desde la posici\u00f3n 10 hasta el final, siempre y cuando la funci\u00f3n no falle, por lo que la cadena debe ser lo suficientemente larga.\nLas funciones de an\u00e1lisis, como \u201cfind()\u201d pueden ser usadas en la exploraci\u00f3n de una cadena. Por ejemplo:\nQue escribir\u00e1 todas las subcadenas que encuentre en la l\u00ednea antes de la posici\u00f3n en la que se encuentra la subcadena \u201cor\u201d. \u201cfind()\u201d encuentra una posici\u00f3n, que es utilizada por \u201ctab\u201d para producir las subcadenas.\nOtro ejemplo de utilizaci\u00f3n de las funciones de an\u00e1lisis en exploraci\u00f3n de cadenas es:\nEsto escribir\u00eda todas las palabras en l\u00ednea.", "subsections": []}, {"name": "Estructuras", "text": "", "subsections": [{"name": "Listas", "text": "Si bien las cadenas son secuencias de caracteres, las listas en ICON son secuencias de valores de tipo arbitrario. Son creadas asignando a una variable una lista de valores entre corchetes, as\u00ed:\nLa lista \u201ccar1\u201d tiene cuatro valores, dos de los cuales son cadenas y otros dos son enteros. Los valores de una lista no tienen porque ser todos del mismo tipo. De hecho, en una lista se pueden introducir cualquier tipo de valores, incluso una lista dentro de otra:\nTambi\u00e9n pueden ser creadas mediante:\nQue crear\u00e1 una lista de \u2018i\u2019 valores, cada uno con el valor de \u2018x\u2019.\nSe pueden a\u00f1adir valores en una lista directamente a una posici\u00f3n. Por ejemplo:\nEsta instrucci\u00f3n cambiar\u00eda el \u00faltimo valor de la lista \u201ccar1\u201d a 2400. Si la posici\u00f3n indicada no pertenece a la lista, falla:\nLos valores en una lista L son generados por !L. As\u00ed:\nEscribe todos los valores en L.\nLas listas pueden ser manipuladas como pilas o colas. La funci\u00f3n \u201cpush(L,x)\u201d a\u00f1ade el valor de \u2018x\u2019 al extremo izquierdo de la lista L, autom\u00e1ticamente, aumentando el tama\u00f1o de L en 1. Del mismo modo, \u201cpop(L)\u201d elimina el valor del extremo izquierdo de la lista, disminuyendo autom\u00e1ticamente en 1 el tama\u00f1o total, adem\u00e1s de devolver el valor eliminado."}, {"name": "Conjuntos", "text": "Un conjunto es una colecci\u00f3n de valores. Para crear un conjunto vac\u00edo se utiliza \u201cset()\u201d. Alternativamente, \u201cset(L)\u201d produce un conjunto de los valores en la lista L. Por ejemplo:\nSe asigna al conjunto que contiene el entero 1, la cadena \u201cabc\u201d y una lista vac\u00eda.\nLa funci\u00f3n \u201cmember(S,x)\u201d tiene \u00e9xito si \u2018x\u2019 es un miembro de la serie S pero falla en otro caso. La funci\u00f3n \u201cinsert(S,x)\u201d a\u00f1ade \u2018x\u2019 a la serie S, mientras que la funci\u00f3n \u201cdelete(S,x)\u201d hace justamente la operaci\u00f3n contraria. Los valores de un conjunto no se pueden repetir. Si se intenta insertar un valor \u2018x\u2019 en un conjunto que ya contiene dicho valor, fallar\u00e1. La instrucci\u00f3n !S generar\u00e1 los miembros del conjunto S.\nUn ejemplo simple de la utilizaci\u00f3n de los conjuntos, en el que se enumeran todas las palabras que aparecen en el fichero de entrada:"}]}, {"name": "Facilidades gr\u00e1ficas", "text": "ICON soporta gr\u00e1ficos de alto nivel, aportando una serie de facilidades:\nSe pueden abrir y cerrar ventanas cuando se desee.\nEl texto puede ser escrito en ventanas con una gran variedad de tama\u00f1os y estilos.\nSe pueden utilizar puntos, l\u00edneas, pol\u00edgonos, c\u00edrculos, \u00e1reas y suavizar las curvas.\nUtilizar colores en texto y elementos gr\u00e1ficos.\nLos archivos de imagen pueden ser le\u00eddos y escritos.", "subsections": []}, {"name": "Enlaces externos", "text": "Icon\nRalph E. Griswold & Madge T. Griswold, The Icon Programming Language. Coriolis Group Books, 2002. PDF | OpenLibra Libro gratuito (ingl\u00e9s", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Int%C3%A9rprete_(inform%C3%A1tica)", "title": "Int\u00e9rprete (inform\u00e1tica)", "summary": "En ciencias de la computaci\u00f3n, int\u00e9rprete o interpretador es un programa inform\u00e1tico capaz de analizar y ejecutar otros programas. Los int\u00e9rpretes se diferencian de los compiladores o de los ensambladores en que mientras estos traducen un programa desde su descripci\u00f3n en un lenguaje de programaci\u00f3n al c\u00f3digo de m\u00e1quina del sistema, los int\u00e9rpretes solo realizan la traducci\u00f3n a medida que sea necesaria, t\u00edpicamente, instrucci\u00f3n por instrucci\u00f3n, y normalmente no guardan el resultado de dicha traducci\u00f3n.\nUsando un int\u00e9rprete, un solo archivo fuente puede producir resultados iguales incluso en sistemas sumamente diferentes (ejemplo. una PC y una PlayStation 4). Usando un compilador, un solo archivo fuente puede producir resultados iguales solo si es compilado a distintos ejecutables espec\u00edficos a cada sistema.\nLos programas interpretados suelen ser m\u00e1s lentos que los compilados debido a la necesidad de traducir el programa mientras se ejecuta, pero a cambio son m\u00e1s flexibles como entornos de programaci\u00f3n y depuraci\u00f3n (lo que se traduce, por ejemplo, en una mayor facilidad para reemplazar partes enteras del programa o a\u00f1adir m\u00f3dulos completamente nuevos), y permiten ofrecer al programa interpretado un entorno no dependiente de la m\u00e1quina donde se ejecuta el int\u00e9rprete, sino del propio int\u00e9rprete (lo que se conoce com\u00fanmente como m\u00e1quina virtual).\nPara mejorar el desempe\u00f1o, algunas implementaciones de algunos lenguajes de programaci\u00f3n pueden interpretar o compilar el c\u00f3digo fuente original en una forma intermedia  m\u00e1s compacta, y despu\u00e9s traducir eso al c\u00f3digo de m\u00e1quina (ej. Perl, Python, MATLAB, y Ruby). Algunos aceptan los archivos fuente guardados en esta representaci\u00f3n intermedia (ej. Python, UCSD Pascal y Java).\nEn la actualidad, uno de los entornos m\u00e1s comunes de uso de los int\u00e9rpretes es en los navegadores web, debido a la posibilidad que estos tienen de ejecutarse independientemente de la plataforma.", "sections": [{"name": "Int\u00e9rpretes de bytecode", "text": "Art\u00edculo principal:\nHay un espectro de posibilidades entre la interpretaci\u00f3n y la compilaci\u00f3n, dependiendo de la cantidad de an\u00e1lisis realizados antes de que el programa sea ejecutado. Por ejemplo, el Emacs Lisp es compilado a bytecode, que es una representaci\u00f3n altamente comprimida y optimizada del c\u00f3digo fuente del Lisp, pero no es c\u00f3digo de m\u00e1quina (y por lo tanto no est\u00e1 atado a cualquier hardware particular). Este bytecode es entonces interpretado por un int\u00e9rprete de bytecode (que est\u00e1 escrito en C). En este caso, el c\u00f3digo compilado es el c\u00f3digo de m\u00e1quina para una m\u00e1quina virtual, que no est\u00e1 implementada en el hardware, sino en el int\u00e9rprete de bytecode. El mismo acercamiento es utilizado con el c\u00f3digo Forth usado en sistemas Open Firmware: el lenguaje fuente es compilado en \"c\u00f3digo F\" (un bytecode).", "subsections": []}, {"name": "Eficiencia", "text": "La desventaja principal de los interpretadores es que cuando se interpreta un programa, t\u00edpicamente corre m\u00e1s lentamente que si hubiera sido compilado. La diferencia en velocidades puede ser min\u00fascula o grande; a menudo un orden de magnitud y a veces m\u00e1s. Generalmente toma m\u00e1s tiempo correr un programa bajo un interpretador que correr el c\u00f3digo compilado, pero puede tomar menos tiempo para interpretarlo que el tiempo total requerido para compilarlo y ejecutarlo. Esto es especialmente importante si se est\u00e1 haciendo y probando un c\u00f3digo prototipo cuando un ciclo de editar, interpretar y depurar del interpretador, a menudo puede ser mucho m\u00e1s corto que el ciclo de editar, compilar, ejecutar y depurar del compilador.\nLa interpretaci\u00f3n de c\u00f3digo es m\u00e1s lenta que la ejecuci\u00f3n de c\u00f3digo compilado porque el interpretador debe analizar cada sentencia en el programa cada vez que es ejecutada y entonces realizar la acci\u00f3n deseada, mientras que el c\u00f3digo compilado solo realiza la acci\u00f3n dentro de un determinado contexto fijo por la compilaci\u00f3n. Este an\u00e1lisis en tiempo de ejecuci\u00f3n se conoce como \"sobrecarga interpretativa\". En un interpretador, el acceso a las variables es tambi\u00e9n m\u00e1s lento porque el mapeo de identificadores hacia las localizaciones de almacenamiento debe hacerse repetidamente en tiempo de ejecuci\u00f3n en vez de en el tiempo de compilaci\u00f3n. Hay varios compromisos entre la velocidad de desarrollo al usar un interpretador y la velocidad de ejecuci\u00f3n al usar un compilador. Algunos sistemas (ej., algunos LISPs) permiten al c\u00f3digo interpretado y al compilado llamarse el uno al otro y compartir variables. Esto significa que una vez que una rutina ha sido probada y depurada bajo el interpretador puede ser compilada y por lo tanto beneficiarse de una ejecuci\u00f3n m\u00e1s r\u00e1pida mientras que otras rutinas est\u00e1n siendo desarrolladas. Muchos interpretadores no ejecutan el c\u00f3digo fuente tal y como est\u00e1 sino que lo convierten en una forma interna m\u00e1s compacta. Por ejemplo, algunos interpretadores BASIC reemplazan palabras clave (keywords) con tokens de un simple byte que pueden ser usados para encontrar la instrucci\u00f3n en una tabla de saltos. Un interpretador puede bien usar el mismo analizador lexicogr\u00e1fico y el analizador sint\u00e1ctico (parser) que el compilador y entonces interpretar el \u00e1rbol de sintaxis abstracta resultante.", "subsections": []}, {"name": "Interpretadores de \u00e1rbol de sintaxis abstracta", "text": "En el espectro entre la interpretaci\u00f3n y la compilaci\u00f3n, otro acercamiento est\u00e1 transformando el c\u00f3digo fuente en un \u00e1rbol de sintaxis abstracta optimizado (AST), y despu\u00e9s procediendo a ejecutar el programa siguiendo esta estructura arborescente.[1]\u200b En este acercamiento cada sentencia necesita ser analizada (parsed) solo una vez. Como una ventaja sobre el bytecode, el AST mantiene la estructura y las relaciones globales del programa entre las sentencias (que se pierden en una representaci\u00f3n de bytecode), y proporciona una representaci\u00f3n m\u00e1s compacta.[2]\u200b\nAs\u00ed, el AST se ha propuesto como un mejor formato intermedio para los compiladores justo a tiempo que el bytecode. Tambi\u00e9n, permite realizar un mejor an\u00e1lisis durante tiempo de ejecuci\u00f3n. Un interpretador Java basado en AST ha demostrado ser m\u00e1s r\u00e1pido que un interpretador similar basado en bytecode,[3]\u200b gracias a las m\u00e1s poderosas optimizaciones permitidas al tener la estructura completa del programa, as\u00ed como tipos de datos de alto nivel, disponibles durante la ejecuci\u00f3n.", "subsections": []}, {"name": "Compilaci\u00f3n justo a tiempo", "text": "Para desdibujar m\u00e1s la distinci\u00f3n entre los interpretadores, los interpretadores de bytecode y la compilaci\u00f3n, est\u00e1 la compilaci\u00f3n justo a tiempo (o JIT), una t\u00e9cnica en la cual la representaci\u00f3n intermedia es compilada a c\u00f3digo de m\u00e1quina nativo en tiempo de ejecuci\u00f3n. Esto confiere la eficiencia de ejecutar el c\u00f3digo nativo, al costo de tiempo de inicio y de un uso creciente de la memoria cuando el bytecode o el AST es compilado por primera vez. La optimizaci\u00f3n adaptativa es una t\u00e9cnica complementaria en la cual el interpretador hace un an\u00e1lisis de desempe\u00f1o del programa que est\u00e1 corriendo (profiling) y compila sus partes m\u00e1s frecuentemente ejecutadas a c\u00f3digo nativo. Ambas t\u00e9cnicas tienen algunas d\u00e9cadas, apareciendo en lenguajes tales como Smalltalk en la d\u00e9cada de 1980.\nEn a\u00f1os recientes, la compilaci\u00f3n justo a tiempo ha ganado la atenci\u00f3n de la mayor\u00eda de los implementadores de lenguajes de programaci\u00f3n, con Java, Python, y el Microsoft .NET Framework todos ahora incluyendo JITs.", "subsections": []}, {"name": "Ejemplos", "text": "Algunos ejemplos de int\u00e9rpretes:\nMotor Zend\nCPython\nRuby MRI\nYARV\nBasic", "subsections": []}, {"name": "Lenguaje interpretado", "text": "Un lenguaje interpretado es un lenguaje de programaci\u00f3n para el que la mayor\u00eda de sus implementaciones ejecuta las instrucciones directamente, sin una previa compilaci\u00f3n del programa a instrucciones en lenguaje m\u00e1quina. El int\u00e9rprete ejecuta el programa directamente, traduciendo cada sentencia en una secuencia de una o m\u00e1s subrutinas ya compiladas en c\u00f3digo m\u00e1quina.\nLos t\u00e9rminos lenguaje interpretado y lenguaje compilado[4]\u200b no est\u00e1n bien definidos porque, en teor\u00eda, cualquier lenguaje de programaci\u00f3n puede ser interpretado o compilado. Cada vez es m\u00e1s popular, en las implementaciones m\u00e1s modernas de un lenguaje de programaci\u00f3n, ofrecer ambas opciones.\nLos lenguajes interpretados tambi\u00e9n pueden diferenciarse de los lenguajes de m\u00e1quina. Funcionalmente, tanto la ejecuci\u00f3n y la interpretaci\u00f3n significan lo mismo -obtener la siguiente instrucci\u00f3n/sentencia del programa y su ejecuci\u00f3n-. Aunque el bytecode (c\u00f3digo byte) interpretado es adem\u00e1s id\u00e9ntico a su forma en c\u00f3digo m\u00e1quina y tiene una representaci\u00f3n en ensamblador, el t\u00e9rmino \"interpretado\" se reserva en la pr\u00e1ctica para lenguajes \"procesados por software\" (como las m\u00e1quinas virtuales o emuladores) por encima del procesado nativo (por ejemplo, por hardware).\nEn principio, los programas de muchos lenguajes se pueden compilar o interpretar, emular o ejecutar nativamente, as\u00ed que esta designaci\u00f3n se aplica solamente a la implementaci\u00f3n pr\u00e1ctica m\u00e1s usual, en vez de representar una propiedad esencial del lenguaje. De forma parecida al microc\u00f3digo del procesador, muchos int\u00e9rpretes, internamente recaen en una compilaci\u00f3n en tiempo de ejecuci\u00f3n.\nEvitando la compilaci\u00f3n, los programas interpretados son m\u00e1s f\u00e1ciles de evolucionar durante el desarrollo y la ejecuci\u00f3n (transform\u00e1ndose en ocasiones de uno en la otra). De otra parte, ya que la compilaci\u00f3n implica una traducci\u00f3n a un formato m\u00e1s amigable con la m\u00e1quina, los programas interpretados corren m\u00e1s lentamente y menos eficientemente (es decir, gastan considerablemente m\u00e1s energ\u00eda). Esto es especialmente verdad para los lenguajes de guion, cuyas sentencias son m\u00e1s complejas de analizar comparadas con las instrucciones m\u00e1quina.\nMuchos lenguajes se han implementado usando tanto compiladores como int\u00e9rpretes, incluyendo  BASIC, C, Lisp, Pascal y Python. Java y C# se compilan a c\u00f3digo byte, el lenguaje interpretado espec\u00edfico para la m\u00e1quina virtual. Muchas implementaciones de Lisp pueden mezclar libremente c\u00f3digo interpretado y compilado.", "subsections": [{"name": "Antecedentes hist\u00f3ricos de interpretado y compilado", "text": "En los comienzos de la computaci\u00f3n, el dise\u00f1o de lenguajes fue fuertemente influenciado por la decisi\u00f3n de usar la compilaci\u00f3n o la interpretaci\u00f3n como modos de ejecuci\u00f3n. Por ejemplo, algunos lenguajes compilados requieren que los programas deban indicar expl\u00edcitamente el tipo de dato de una variable en el momento en que sea declarada o al ser usada por primera vez, mientras que algunos lenguajes interpretados toman ventaja de los aspectos din\u00e1micos de la interpretaci\u00f3n para hacer tales declaraciones innecesarias. Por ejemplo, Smalltalk (1980), que fue dise\u00f1ado para ser interpretado en tiempo de ejecuci\u00f3n, permite a objetos gen\u00e9ricos interactuar din\u00e1micamente entre s\u00ed.\nInicialmente, los lenguajes interpretados eran compilados l\u00ednea por l\u00ednea, es decir, cada l\u00ednea era compilada a medida que estaba a punto de ser ejecutada, y si un bucle o una subrutina hicieran que ciertas l\u00edneas se ejecutaran m\u00faltiples veces, ser\u00edan recompiladas repetidamente. Esto ha llegado a ser mucho menos com\u00fan. La mayor\u00eda de los lenguajes interpretados usan una representaci\u00f3n intermedia, que combina tanto la compilaci\u00f3n como la interpretaci\u00f3n. En este caso, un compilador puede producir el c\u00f3digo byte o el c\u00f3digo enhebrado, que entonces es ejecutado por un int\u00e9rprete de c\u00f3digo byte.\nLos ejemplos incluyen:\nJava\nPython\nRuby (de forma similar, utiliza un \u00e1rbol de sintaxis abstracta como representaci\u00f3n intermedia)\nForth\nLa representaci\u00f3n intermedia se puede compilar una sola vez (como en Java), cada vez que se vaya a ejecutar (como en Perl o Ruby), o cada vez que se detecte un cambio en el c\u00f3digo fuente antes de la ejecuci\u00f3n (como en Python)."}, {"name": "Ventajas de interpretar un lenguaje", "text": "Interpretar un lenguaje da a las implementaciones una flexibilidad adicional sobre las implementaciones compiladas. Algunas caracter\u00edsticas son m\u00e1s f\u00e1ciles de implementar en int\u00e9rpretes que en compiladores son (pero no se limitan a estas):\nIndependencia de la plataforma (por ejemplo el bytecode de Java)\nReflexi\u00f3n y uso reflexivo del evaluador (por ejemplo, una funci\u00f3n eval de primer orden)\nTipos din\u00e1micos\nUn tama\u00f1o del programa m\u00e1s peque\u00f1o (puesto que las implementaciones tienen la flexibilidad de elegir el conjunto de instrucciones)\n\u00c1mbito din\u00e1mico\nFacilidad en la depuraci\u00f3n (es m\u00e1s f\u00e1cil obtener informaci\u00f3n del c\u00f3digo fuente en lenguajes interpretados)"}, {"name": "Desventajas de los lenguajes interpretados", "text": "La principal desventaja de la interpretaci\u00f3n es una velocidad de ejecuci\u00f3n del programa mucho m\u00e1s lenta, comparada con la ejecuci\u00f3n directa del c\u00f3digo m\u00e1quina en la CPU del ordenador. Una t\u00e9cnica utilizada para mejorar las prestaciones es la compilaci\u00f3n en tiempo de ejecuci\u00f3n, que convierte las secuencias ejecutadas m\u00e1s frecuentes en c\u00f3digo m\u00e1quina del ordenador."}, {"name": "Lista de lenguajes m\u00e1s usados de forma interpretada", "text": "APL Un lenguaje orientado a vectores que usa un conjunto de caracteres inusual\nJ Una variante de en el que la definici\u00f3n t\u00e1cita ofrece algunos de los beneficios de la compilaci\u00f3n\nBASIC (aunque la versi\u00f3n original, era compilada, as\u00ed como muchos modernos)\nthinBasic\nECMAScript\nActionScript (versi\u00f3n 3.0 no es interpretado, por lo que se elimin\u00f3 la funci\u00f3n eval())\nE4X (ECMAScript for XML)\nJavaScript (primero se llam\u00f3 Mocha, y luego LiveScript)\nJScript\nManipulaci\u00f3n de ecuaciones y sistemas de resoluci\u00f3n\nGNU Octave\nIDL (Interactive Data Language)\nTK Solver\nMathematica\nMATLAB\nEUPHORIA interpretado o compilado\nForth\nGame Maker Language\nJava (lenguaje de programaci\u00f3n)\nMadness Script\nPerl\nPHP\nPostScript\nPython\nLisp\nLogo\nScheme\nMUMPS (tradicionalmente interpretado, compilado en las versiones modernas)\nREXX\nRuby\nJRuby (una implementaci\u00f3n Java de Ruby)\nSeed7 interpretado o compilado\nSmalltalk\nBistro\nDolphin Smalltalk\nF-Script\nLittle Smalltalk\nSqueak\nVisualAge\nVisualWorks\nLenguajes de scripting\nWebDNA\nHojas de c\u00e1lculo\nExcel almacena f\u00f3rmulas, y las interpreta desde un formato simb\u00f3lico\nS\nR\nTcl\nXOTcl\nVBScript\nPowerShell\nXMLmosaic Archivado el 2 de agosto de 2009 en Wayback Machine. Un lenguaje de programaci\u00f3n interpretado parecido a C# escrito en Visual Basic .NET\nLenguajes normalmente compilados a c\u00f3digo byte\nMuchos lenguajes interpretados son primero compilados a c\u00f3digo byte, que luego es normalmente interpretado por la m\u00e1quina virtual usando la compilaci\u00f3n en tiempo de ejecuci\u00f3n, del c\u00f3digo byte a c\u00f3digo nativo. Sin embargo, algunas veces, el c\u00f3digo byte tambi\u00e9n puede ser compilado a un binario nativo usando un compilador Ahead-of-time compilation (compilaci\u00f3n por adelantado), o ejecutado nativamente, por el procesador hardware.\nJava (se compila en c\u00f3digo byte Java para que sea interpretado por la JVM)\nGroovy\nJoin Java\nColdFusion\nScala\nLua\n.NET Framework (traducidos a c\u00f3digo byte, llamado CIL)\nC/C++\nC#\nVisual Basic .NET\nPike\nPython\nSqueak Smalltalk\nVisual FoxPro\nLisp\nAppleScript"}]}, {"name": "Notas y referencias", "text": "\u2191 AST intermediate representations, Lambda the Ultimate forum\n\u2191 A Tree-Based Alternative to Java Byte-Codes, Thomas Kistler, Michael Franz\n\u2191 Trees Versus Bytes, BComp Honours thesis by Kade Hansson\n\u2191 Colburn, Rafe (2003). Sams Teach Yourself CGI in 24 Hours (2003 edici\u00f3n). Estados Unidos: Sams Publishing. p.\u00a048. ISBN\u00a00672324040. Consultado el 13 de marzo de 2015.\u00a0. Consultado el 13 de marzo de 2015.", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Lenguaje de programaci\u00f3n\nProceso de traducci\u00f3n de programas\nCompilador\nDepurador\nLenguaje interpretado\nLenguaje compilado", "subsections": []}, {"name": "Enlaces externos", "text": "DrPubaGump (enlace roto disponible en Internet Archive; v\u00e9ase el historial, la primera versi\u00f3n y la \u00faltima). A tiny Interpreter written in Scheme, which provides to interpret PUBA-GUMP (a subset of BASIC) in Scheme\nIBM Card Interpreters page at Columbia Universit", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Int%C3%A9rprete_de_comandos", "title": "Int\u00e9rprete de comandos", "summary": "Para m\u00e1s informaci\u00f3n, v\u00e9ase la discusi\u00f3n.\nUn int\u00e9rprete de \u00f3rdenes o de comandos es un programa inform\u00e1tico que tiene la capacidad de traducir las \u00f3rdenes que introducen los usuarios, mediante un conjunto de instrucciones facilitadas por \u00e9l mismo directamente al n\u00facleo y al conjunto de herramientas que forman el sistema operativo.[1]\u200b Las \u00f3rdenes se introducen siguiendo la sintaxis incorporada por dicho int\u00e9rprete, dentro del entorno proporcionado por el emulador de terminal, mediante un inductor que espera a que le sean introducidos los comandos o instrucciones PROMPT>nombrecomando argumento/s /ruta/hacia/el/o/los/ficheros\nAl ingresar la orden con la tecla 'Intro', el int\u00e9rprete analiza la secuencia de caracteres ingresada y, si la sintaxis de la orden es correcta, la ejecuta, recurriendo para ello a las funciones que ofrece el sistema operativo o el programa que representa, bien sea un gestor de datos de banco, una sesi\u00f3n de FTP, de ssh, etc. La respuesta al usuario se representa en el monitor o en forma de segundo plano. Se trabaja de manera interactiva, es decir, usuario y m\u00e1quina se comunican de forma sucesiva.[2]\u200b\nIncorporan caracter\u00edsticas tales como control de procesos, redirecci\u00f3n de entrada/salida, listado y lectura de ficheros, protecci\u00f3n, comunicaciones y un lenguaje de \u00f3rdenes para escribir programas por lotes o (scripts o guiones). Uno de los int\u00e9rpretes m\u00e1s conocidos, es el Bourne Shell, el cual fue el int\u00e9rprete usado en las primeras versiones de Unix y se convirti\u00f3 en un est\u00e1ndar de facto.[3]\u200b", "sections": [{"name": "Interfaz de l\u00ednea de comandos", "text": "La interfaz de l\u00ednea de comandos o interfaz de l\u00ednea de \u00f3rdenes (en ingl\u00e9s: command-line interface, CLI) es un tipo de interfaz de usuario de computadora que permite a los usuarios dar instrucciones a alg\u00fan programa inform\u00e1tico o al sistema operativo por medio de una l\u00ednea de texto simple. Debe notarse que los conceptos de CLI, shell y emulador de terminal no son lo mismo ya que CLI se refiere al paradigma, mientras que un shell o un emulador de terminal son programas inform\u00e1ticos espec\u00edficos, que usualmente en conjunto implementan la CLI. Sin embargo, los tres suelen utilizarse como sin\u00f3nimos.\nLas CLI pueden emplearse interactivamente, escribiendo instrucciones en alguna especie de entrada de texto, o pueden utilizarse de una forma mucho m\u00e1s automatizada (archivo batch), leyendo \u00f3rdenes desde un archivo de scripts.\nEsta interfaz existe casi desde los comienzos de la computaci\u00f3n, superada en antig\u00fcedad solo por las tarjetas perforadas y mecanismos similares. Existen para diversos programas y sistemas operativos, para diverso hardware, y con distinta funcionalidad.\nPor ejemplo, las CLI son parte fundamental de los shells o emuladores de terminal. Aparecen en todas las interfaces de escritorio (GNOME, KDE, Microsoft Windows) como un m\u00e9todo para ejecutar aplicaciones r\u00e1pidamente. Aparecen como interfaz de lenguajes interpretados tales como Java, Python, Ruby o Perl. Tambi\u00e9n se utilizan en aplicaciones cliente-servidor, en gestores de bases de datos, en clientes FTP, etc. Las CLI son un elemento fundamental de aplicaciones de ingenier\u00eda tan importantes como MATLAB y AutoCAD.\nLa contraparte de CLI es la interfaz gr\u00e1fica de usuario (GUI) que ofrece una est\u00e9tica mejorada y una mayor simplificaci\u00f3n, a costa de un mayor consumo de recursos computacionales, y, en general, de una reducci\u00f3n de la funcionalidad alcanzable. Asimismo aparece el problema de una mayor vulnerabilidad dada su complejidad.\nLas CLI son usadas por muchos programadores y administradores de sistemas como herramienta primaria de trabajo, especialmente en sistemas operativos basados en Unix; en entornos cient\u00edficos y de ingenier\u00eda, y un subconjunto m\u00e1s peque\u00f1o de usuarios dom\u00e9sticos avanzados.\nEn dispositivos port\u00e1tiles y PDA, las CLI no se utilizan, debido a lo complejo que resulta ingresar datos de texto, o por la ausencia total de teclados.", "subsections": []}, {"name": "Historia", "text": "En los primeros a\u00f1os de las computadoras, y durante la era de los computadores denominados mainframes, el control de la ejecuci\u00f3n de los programas se hac\u00eda desde lugares especiales (normalmente ubicados cerca del computador en salas con aire acondicionado), donde el administrador manipulaba directamente la m\u00e1quina.\nSe escrib\u00eda la orden en el teclado y se recib\u00eda la respuesta impresa en papel. Estos sistemas basados en teletipos dieron origen a la primera forma eficiente de interactuar con computadores: l\u00edneas de texto simple.\nCon el advenimiento del sistema operativo Unix a inicios de la d\u00e9cada de 1970, el uso de la l\u00ednea de comandos se convirti\u00f3 en un est\u00e1ndar. Se canonizaron las reglas de ejecuci\u00f3n basadas en tuber\u00edas, filtrado de archivos utilizando comodines, y todas aquellas funcionalidades que permit\u00edan las nacientes interfaces de texto. Los sistemas operativos que vendr\u00edan (CP/M, DOS) adoptar\u00edan como propias aquellas cualidades.\nCon la popularizaci\u00f3n de la computadora personal en la d\u00e9cada de 1980, las aplicaciones entraron a un nuevo escenario donde ya no se ten\u00eda que compartir los recursos del sistema con otros usuarios. Ahora cada usuario contaba con su propia m\u00e1quina, con la que interactuaba de una forma mucho m\u00e1s personalizada. Apple y luego Microsoft lanzaron exitosamente al mercado sistemas que explotaban todos los conceptos visuales que hab\u00edan sido desarrollados por Alan Kay y su equipo del PARC, es decir, una interfaz gr\u00e1fica para controlar al computador por medio de un rat\u00f3n.\nHasta la actualidad las GUI permanecen como la interfaz dominante y las CLI como interfaz secundaria. No obstante, el mismo Dr. Alan Kay ha se\u00f1alado que \u00abes necesario desarrollar un nuevo tipo de interfaz\u00bb para optimizar la relaci\u00f3n entre humanos y computadores.[4]\u200b", "subsections": []}, {"name": "Funcionamiento", "text": "Las \u00f3rdenes dadas a la CLI son con frecuencia de la forma:\nPROMPT>aplicaci\u00f3n [parametros] ficheros o URI...\nAl finalizar y enviar la orden con la tecla Entrar, un m\u00f3dulo interpretador de \u00f3rdenes analiza la secuencia de caracteres recibida y, si la sintaxis de la orden es correcta, ejecuta la orden dentro del contexto del programa o del sistema operativo donde se encuentra. Esta forma de trabajo es secuencial, y equivale a un tipo de programaci\u00f3n paso a paso.\nEl usuario percibe el procesamiento de sus instrucciones en forma de acci\u00f3n. Si al usuario se le env\u00eda esta informaci\u00f3n de procesamiento en forma de texto simple, entonces se le llama salida est\u00e1ndar o \u00abstdout\u00bb. El usuario tambi\u00e9n puede recibir un informe textual de errores en un canal especializado llamado \u00abstderr\u00bb. Casi todos los shells implementan la visualizaci\u00f3n de \u00abstdout\u00bb y \u00abstderr\u00bb al mismo dispositivo, en la mayor\u00eda de los casos la pantalla.\nTambi\u00e9n es posible usar scripts, es decir, archivos con instrucciones guardadas como si se estuviesen escribiendo en el momento. En caso de error, la ejecuci\u00f3n del script puede abortarse. De esta forma, la l\u00ednea de comandos puede utilizarse sin siquiera tener que lidiar con el prompt, ni estando presente frente al monitor o teclado.", "subsections": []}, {"name": "Implementaciones", "text": "Casi cualquier programa puede dise\u00f1arse para ofrecer al usuario alguna clase de int\u00e9rprete de instrucciones. Por ejemplo, algunos videojuegos para PC en primera persona tienen un int\u00e9rprete de \u00f3rdenes incorporado, conocido com\u00fanmente como \u00abconsola\u00bb (no confundir con Videoconsola), utilizado para diagn\u00f3stico y labores administrativas. Quake, Unreal Tournament, Ragnarok Online o Battlefield son algunos ejemplos. A veces la consola es el \u00fanico medio para reparar problemas.\nCuando se trata de un programa que interact\u00faa con el kernel de un sistema operativo se le llama con frecuencia shell. Algunos ejemplos son los diversas shell de Unix (ksh, csh, tcsh, Bourne Shell, etc.), el hist\u00f3rico CP/M, y el command.com de DOS, estos dos \u00faltimos fuertemente basados en las CLI de RSTS y RSX-11, sistemas operativos del PDP-11 de DEC. El sistema operativo Windows Vista promet\u00eda una CLI llamada Windows PowerShell, que combinaba caracter\u00edsticas de las tradicionales shells de Unix con su framework orientado a objetos .NET. Este desarrollo no fue integrado por defecto en el sistema operativo, en especial debido a sus riesgos de seguridad iniciales.[5]\u200b\nLas implementanciones de lenguajes interpretados suelen ofrecer tambi\u00e9n un ambiente de trabajo basado en CLI. En estos ambientes se crea una instancia de la m\u00e1quina virtual con la que el usuario puede interactuar.\nAlgunas aplicaciones proporcionan tanto una CLI como una GUI. Un ejemplo es el programa de CAD AutoCAD. El paquete cient\u00edfico/ingenieril de computaci\u00f3n num\u00e9rica Matlab no proporciona GUI para algunos c\u00e1lculos, pero la CLI puede realizar cualquier c\u00e1lculo. El programa de modelado tridimensional Rhinoceros 3D (que se usa para dise\u00f1ar las cajas de la mayor parte de los tel\u00e9fonos port\u00e1tiles, as\u00ed como miles de otros productos industriales) proporciona una CLI (cuyo lenguaje, por cierto, es distinto del lenguaje scripts de Rhino). En algunos entornos inform\u00e1ticos, como la interfaz de usuario de Smalltalk u Oberon, la mayor parte del texto que aparece en la pantalla se puede usar para dar \u00f3rdenes.", "subsections": []}, {"name": "Est\u00e1ndar de invocaci\u00f3n", "text": "No existe ninguna normativa obligatoria en cuanto al formato de invocaci\u00f3n (escritura y ejecuci\u00f3n) o a la documentaci\u00f3n que las aplicaciones o funciones deben presentar. No obstante, se han acu\u00f1ado est\u00e1ndares informales al momento de definir formas. El m\u00e1s importante consiste en la utilizaci\u00f3n de corchetes [ ] para indicar par\u00e1metros opcionales. Estos pueden anidarse ([..[..]]). Por ejemplo, la documentaci\u00f3n de la aplicaci\u00f3n cal de POSIX dice que la forma de ejecutarse por medio de la CLI es:\nEsto significa que si se desea ver el a\u00f1o 2012, tendr\u00eda que escribirse literalmente:", "subsections": []}, {"name": "Ejemplos de interacci\u00f3n", "text": "La instrucci\u00f3n para listar archivos, en diversos entornos:", "subsections": []}, {"name": "Interfaz textual de usuario", "text": "Art\u00edculo principal:\nUna interfaz textual de usuario consiste en una interfaz gr\u00e1fica hecha enteramente de texto. No es lo mismo que un CLI, aunque ambos usan el mismo perif\u00e9rico.", "subsections": []}, {"name": "Referencias", "text": "\u2191 linux10.com.ar, ed. (2009). \u00abInt\u00e9rprete de comandos\u00bb. Archivado desde el original el 2 de octubre de 2009. Consultado el 21 de diciembre de 2009.\u00a0\n\u2191 \u00abfivem scripts\u00bb. fivem-mods. Consultado el 6 de noviembre de 2021.\u00a0\n\u2191 escomposlinux.org (ed.). \u00abBeyond Linux From Scratch - Versi\u00f3n 6.0 Parte II. Configuraci\u00f3n posterior a LFS y Software Adicional\u00bb. Consultado el 21 de diciembre de 2009.\u00a0\n\u2191 Exposici\u00f3n de Alan Kay en TED 2007.\n\u2191 http://www.zdnet.com/windows-vista-tool-targeted-by-virus-writers-3039212024/ Windows Vista tool targeted by virus writers (en ingl\u00e9s).", "subsections": []}, {"name": "Enlaces externos", "text": "El int\u00e9rprete de comandos tcs", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Inteligencia_artificial", "title": "Inteligencia artificial", "summary": "La inteligencia artificial  (IA), en el contexto de las ciencias de la computaci\u00f3n, es una disciplina y un conjunto de capacidades cognoscitivas e intelectuales expresadas por sistemas inform\u00e1ticos o combinaciones de algoritmos cuyo prop\u00f3sito es la creaci\u00f3n de m\u00e1quinas que imiten la inteligencia humana para realizar tareas, y que pueden mejorar conforme recopilen informaci\u00f3n.[1]\u200b[2]\u200b Se hizo presente poco despu\u00e9s de la Segunda Guerra Mundial con el desarrollo de la \u00abprueba de Turing\u00bb, mientras que la locuci\u00f3n fue acu\u00f1ada en 1956 por el inform\u00e1tico John McCarthy en la Conferencia de Dartmouth.\nEn la actualidad, la inteligencia artificial abarca una gran variedad de subcampos. \u00c9stos van desde \u00e1reas de prop\u00f3sito general, aprendizaje y percepci\u00f3n, a otras m\u00e1s espec\u00edficas como el Reconocimiento de voz, el juego de ajedrez, la demostraci\u00f3n de teoremas matem\u00e1ticos, la escritura de poes\u00eda y el diagn\u00f3stico de enfermedades. La inteligencia artificial sintetiza y automatiza tareas que en principio son intelectuales y, por lo tanto, es potencialmente relevante para cualquier \u00e1mbito de actividades intelectuales humanas. En este sentido, es un campo genuinamente universal.[3]\u200b\nLa arquitectura de las inteligencias artificiales y los procesos por los cuales aprenden, se mejoran y se implementan en alg\u00fan \u00e1rea de inter\u00e9s var\u00eda seg\u00fan el enfoque de utilidad que se les quiera dar, pero de manera general, estos van desde la ejecuci\u00f3n de sencillos algoritmos hasta la interconexi\u00f3n de complejas redes neuronales artificiales que intentan replicar los circuitos neuronales del cerebro humano y que aprenden mediante diferentes modelos de aprendizaje tales como el aprendizaje autom\u00e1tico, el aprendizaje por refuerzo, el aprendizaje profundo y el aprendizaje supervisado.[4]\u200b\nPor otro lado, el desarrollo y aplicaci\u00f3n de la inteligencia artificial en muchos aspectos de la vida cotidiana tambi\u00e9n ha propiciado la creaci\u00f3n de nuevos campos de estudio como la robo\u00e9tica y la \u00e9tica de las m\u00e1quinas que abordan aspectos relacionados con la \u00e9tica en la inteligencia artificial y que se encargan de analizar c\u00f3mo los avances en este tipo de tecnolog\u00edas impactar\u00edan en diversos \u00e1mbitos de la vida, as\u00ed como el manejo responsable y \u00e9tico que se les deber\u00eda dar a los mismos, adem\u00e1s de establecer cu\u00e1l deber\u00eda ser la manera correcta de proceder de las m\u00e1quinas y las reglas que deber\u00edan cumplir.[5]\u200b\nEn cuanto a su clasificaci\u00f3n, tradicionalmente se divide a la inteligencia artificial en inteligencia artificial d\u00e9bil, la cual es la \u00fanica que existe en la actualidad y que se ocupa de realizar tareas espec\u00edficas, e inteligencia artificial general, que ser\u00eda una IA que excediese las capacidades humanas. Algunos expertos creen que si alguna vez se alcanza este nivel, se podr\u00eda dar lugar a la aparici\u00f3n de una singularidad tecnol\u00f3gica, es decir, una entidad tecnol\u00f3gica superior que se mejorar\u00eda a s\u00ed misma constantemente, volvi\u00e9ndose incontrolable para los humanos, dando pie a teor\u00edas como el basilisco de Roko.[6]\u200b\nAlgunas de las inteligencias artificiales m\u00e1s conocidas y utilizadas en la actualidad alrededor del mundo incluyen inteligencia artificial en el campo de la salud, asistentes virtuales como Alexa, el asistente de Google o Siri, traductores autom\u00e1ticos como el traductor de Google y DeepL, sistemas de recomendaci\u00f3n como el de la plataforma digital de YouTube, motores de ajedrez y otros juegos como Stockfish y AlphaZero, chatbots como ChatGPT, creadores de arte de inteligencia artificial como Midjourney, Dall-e, Leonardo y Stable Diffusion, e incluso la conducci\u00f3n de veh\u00edculos aut\u00f3nomos como Tesla Autopilot.[7]\u200b\nAsimismo la inteligencia artificial se est\u00e1 desarrollando en la plataforma digital cada vez m\u00e1s, evolucionando y creando nuevas herramientas, como la plataforma laboral que existe desde el a\u00f1o 2023 llamada SIVIUM, una herramienta por la cual una persona postula en forma automatizada a todas las ofertas laborales de todos los portales de trabajo, sin necesidad de estar revisando cada oferta laboral que se presente y enviar su CV uno por uno.", "sections": [{"name": "Denominaci\u00f3n", "text": "En 2019 la Comisi\u00f3n Mundial de \u00c9tica del Conocimiento Cient\u00edfico y la Tecnolog\u00eda (COMEST) de la UNESCO defini\u00f3 la inteligencia artificial como un campo que implica m\u00e1quinas capaces de imitar determinadas funcionalidades de la inteligencia humana, incluidas caracter\u00edsticas como la percepci\u00f3n, el aprendizaje, el razonamiento, la resoluci\u00f3n de problemas, la interacci\u00f3n ling\u00fc\u00edstica e incluso la producci\u00f3n de trabajos creativos.\nColoquialmente, la locuci\u00f3n \u00abinteligencia artificial\u00bb se aplica cuando una m\u00e1quina imita las funciones \u00abcognitivas\u00bb que los humanos asocian como competencias humanas, por ejemplo: \u00abpercibir\u00bb, \u00abrazonar\u00bb, \u00abaprender\u00bb y \u00abresolver problemas\u00bb.[8]\u200b Andreas Kaplan y Michael Haenlein definen la inteligencia artificial como \u00abla capacidad de un sistema para interpretar correctamente datos externos, y as\u00ed aprender y emplear esos conocimientos para lograr tareas y metas concretas a trav\u00e9s de la adaptaci\u00f3n flexible\u00bb.[9]\u200b A medida que las m\u00e1quinas se vuelven cada vez m\u00e1s capaces, se elimina de la definici\u00f3n la tecnolog\u00eda que alguna vez se pens\u00f3 que requer\u00eda de inteligencia. Marvin Minsky, uno de los ideadores de la IA, hablaba del t\u00e9rmino inteligencia artificial como una palabra maleta (\"suitcase word\") porque en \u00e9l se pueden meter una diversidad de elementos.[10]\u200b[11]\u200b\nPor ejemplo, el reconocimiento \u00f3ptico de caracteres ya no se percibe como un ejemplo de la \u00abinteligencia artificial\u00bb habi\u00e9ndose convertido en una tecnolog\u00eda com\u00fan.[12]\u200b Avances tecnol\u00f3gicos todav\u00eda clasificados como inteligencia artificial son los sistemas de conducci\u00f3n aut\u00f3nomos o los capaces de jugar ajedrez o Go.[13]\u200b\nLa inteligencia artificial es una nueva forma de resolver problemas dentro de los cuales se incluyen los sistemas expertos, el manejo y control de robots y los procesadores, que intenta integrar el conocimiento en tales sistemas, en otras palabras, un sistema inteligente capaz de escribir su propio programa. Un sistema experto definido como una estructura de programaci\u00f3n capaz de almacenar y utilizar un conocimiento sobre un \u00e1rea determinada que se traduce en su capacidad de aprendizaje.[14]\u200b De igual manera se puede considerar a la IA como la capacidad de las m\u00e1quinas para usar algoritmos, aprender de los datos y utilizar lo aprendido en la toma de decisiones tal y como lo har\u00eda un ser humano.[15]\u200b\nSeg\u00fan Takeyas (2007) la IA es una rama de las ciencias computacionales encargada de estudiar modelos de c\u00f3mputo capaces de realizar actividades propias de los seres humanos con base en dos de sus caracter\u00edsticas primordiales: el razonamiento y la conducta.[16]\u200b\nEn 1956, John McCarthy acu\u00f1\u00f3 la expresi\u00f3n \u00abinteligencia artificial\u00bb, y la defini\u00f3 como \u00abla ciencia e ingenio de hacer m\u00e1quinas inteligentes, especialmente programas de c\u00f3mputo inteligentes\u00bb.[17]\u200b\nTambi\u00e9n existen distintos tipos de percepciones y acciones, que pueden ser obtenidas y producidas, respectivamente, por sensores f\u00edsicos y sensores mec\u00e1nicos en m\u00e1quinas, pulsos el\u00e9ctricos u \u00f3pticos en computadoras, tanto como por entradas y salidas de bits de un software y su entorno software.\nVarios ejemplos se encuentran en el \u00e1rea de control de sistemas, planificaci\u00f3n autom\u00e1tica, la capacidad de responder a diagn\u00f3sticos y a consultas de los consumidores, reconocimiento de escritura, reconocimiento del habla y reconocimiento de patrones. Los sistemas de IA actualmente son parte de la rutina en campos como econom\u00eda, medicina, ingenier\u00eda, el transporte, las comunicaciones y la milicia, y se ha usado en gran variedad de programas inform\u00e1ticos, juegos de estrategia, como ajedrez de computador, y otros videojuegos.", "subsections": []}, {"name": "Tipos", "text": "Stuart J. Russell y Peter Norvig diferencian varios tipos de inteligencia artificial:[18]\u200b\nLos sistemas que piensan como humanos: Estos sistemas tratan de emular el pensamiento humano; por ejemplo, las redes neuronales artificiales. La automatizaci\u00f3n de actividades que vinculamos con procesos de pensamiento humano, actividades como la toma de decisiones, resoluci\u00f3n de problemas y aprendizaje.[19]\u200b\nLos sistemas que act\u00faan como humanos: Estos sistemas tratan de actuar como humanos; es decir, imitan el comportamiento humano; por ejemplo, la rob\u00f3tica (El estudio de c\u00f3mo lograr que los computadores realicen tareas que, por el momento, los humanos hacen mejor).[20]\u200b\nLos sistemas que piensan racionalmente: Es decir, con l\u00f3gica (idealmente), tratan de imitar el pensamiento racional del ser humano; por ejemplo, los sistemas expertos, (el estudio de los c\u00e1lculos que hacen posible percibir, razonar y actuar).[21]\u200b\nLos sistemas que act\u00faan racionalmente: Tratan de emular de forma racional el comportamiento humano; por ejemplo, los agentes inteligentes, que est\u00e1 relacionado con conductas inteligentes en artefactos.[22]\u200b\nInteligencia artificial generativa\nArt\u00edculo principal:\nLa inteligencia artificial generativa es un tipo de sistema de inteligencia artificial capaz de generar texto, im\u00e1genes u otros medios en respuesta a comandos.\u200b\u200b Los modelos de IA generativa aprenden los patrones y la estructura de sus datos de entrenamiento de entrada y luego generan nuevos datos que tienen caracter\u00edsticas similares.\nLos sistemas de IA generativa notables incluyen ChatGPT (y su variante Microsoft Copilot), un bot conversacional creado por OpenAI usando sus modelos de lenguaje grande fundacionales GPT-3 y GPT-4;\u200b y Bard, un bot conversacional creado por Google usando Gemini. Otros modelos generativos de IA incluyen sistemas de arte de inteligencia artificial como Stable Diffusion, Midjourney y DALL-E.\nInteligencia artificial fuerte\nLa Inteligencia artificial fuerte (IGA) es un tipo hipot\u00e9tico de inteligencia artificial que iguala o excede la inteligencia humana promedio.\u200b Si se hiciera realidad, una IGA podr\u00eda aprender a realizar cualquier tarea intelectual que los seres humanos o los animales puedan llevar a cabo.\u200b\u200b Alternativamente, la IGA se ha definido como un sistema aut\u00f3nomo que supera las capacidades humanas en la mayor\u00eda de las tareas econ\u00f3micamente valiosas.\nAlgunos sostienen que podr\u00eda ser posible en a\u00f1os o d\u00e9cadas; otros, que podr\u00eda tardar un siglo o m\u00e1s; y una minor\u00eda cree que quiz\u00e1 nunca se consiga.\u200b Existe un debate sobre la definici\u00f3n exacta de IGA y sobre si los grandes modelos de lenguaje (LLM) modernos, como el GPT-4, son formas tempranas pero incompletas de IGA.\nInteligencia artificial explicable\nLa inteligencia artificial explicable se refiere a m\u00e9todos y t\u00e9cnicas en la aplicaci\u00f3n de tecnolog\u00eda de inteligencia artificial por los que el ser humano es capaz de comprender las decisiones y predicciones realizadas por la inteligencia artificial.\nInteligencia artificial amigable\nLa inteligencia artificial amigable es una IA fuerte e hipot\u00e9tica que puede tener un efecto positivo m\u00e1s que uno negativo sobre la humanidad. 'Amigable' es usado en este contexto como terminolog\u00eda t\u00e9cnica y escoge agentes que son seguros y \u00fatiles, no necesariamente aquellos que son \"amigables\" en el sentido coloquial. El concepto es invocado principalmente en el contexto de discusiones de agentes artificiales de auto-mejora recursiva que r\u00e1pidamente explota en inteligencia, con el argumento de que esta tecnolog\u00eda hipot\u00e9tica pudiera tener una larga, r\u00e1pida y dif\u00edcil tarea de controlar el impacto en la sociedad humana.\nInteligencia artificial multimodal\nLa inteligencia artificial multimodal  es un tipo de inteligencia artificial que puede procesar e integrar datos de diferentes modalidades, como texto, im\u00e1genes, audio y video, para obtener una comprensi\u00f3n m\u00e1s completa y contextualizada de una situaci\u00f3n. La inteligencia artificial multimodal se inspira en la forma en que los humanos usan varios sentidos para percibir e interactuar con el mundo, y ofrece una forma m\u00e1s natural e intuitiva de comunicarse con la tecnolog\u00eda.\nInteligencia artificial cu\u00e1ntica\nLa inteligencia artificial Cu\u00e1ntica es un campo interdisciplinar que se enfoca en construir algoritmos cu\u00e1nticos para mejorar las tareas computacionales dentro de la IA, incluyendo subcampos como el aprendizaje autom\u00e1tico.\u200b Existen evidencias que muestran una posible ventaja cuadr\u00e1tica cu\u00e1ntica en operaciones fundamentales de la IA.", "subsections": []}, {"name": "Escuelas de pensamiento", "text": "La IA se divide en dos escuelas de pensamiento:\nLa inteligencia artificial convencional.\nLa inteligencia computacional.", "subsections": [{"name": "Inteligencia artificial convencional", "text": "Se conoce tambi\u00e9n como IA simb\u00f3lica-deductiva. Est\u00e1 basada en el an\u00e1lisis formal y estad\u00edstico del comportamiento humano ante diferentes problemas:\nRazonamiento basado en casos: Ayuda a tomar decisiones mientras se resuelven ciertos problemas concretos y, aparte de que son muy importantes, requieren de un buen funcionamiento.\nSistemas expertos: Infieren una soluci\u00f3n a trav\u00e9s del conocimiento previo del contexto en que se aplica y utiliza ciertas reglas o relaciones.[23]\u200b\nRedes bayesianas: Propone soluciones mediante inferencia probabil\u00edstica.[24]\u200b\nInteligencia artificial basada en comportamientos: Esta inteligencia contiene autonom\u00eda, es decir, puede auto-regularse y controlarse para mejorar.\nSmart process management: Facilita la toma de decisiones complejas, proponiendo una soluci\u00f3n a un determinado problema al igual que lo har\u00eda un especialista en dicha actividad."}, {"name": "Inteligencia artificial computacional", "text": "La inteligencia computacional (tambi\u00e9n conocida como IA subsimb\u00f3lica-inductiva) implica desarrollo o aprendizaje interactivo (por ejemplo, modificaciones interactivas de los par\u00e1metros en sistemas de conexiones). El aprendizaje se realiza bas\u00e1ndose en datos emp\u00edricos.\nLa inteligencia computacional tiene una doble finalidad. Por un lado, su objetivo cient\u00edfico es comprender los principios que posibilitan el comportamiento inteligente (ya sea en sistemas naturales o artificiales) y, por otro, su objetivo tecnol\u00f3gico consiste en especificar los m\u00e9todos para dise\u00f1ar sistemas inteligentes.[25]\u200b"}]}, {"name": "Historia", "text": "La expresi\u00f3n \u00abinteligencia artificial\u00bb fue acu\u00f1ada formalmente en 1956 durante la Conferencia de Dartmouth, pero para entonces ya se hab\u00eda estado trabajando en ello durante cinco a\u00f1os en los cuales se hab\u00eda propuesto muchas definiciones distintas que en ning\u00fan caso hab\u00edan logrado ser aceptadas totalmente por la comunidad investigadora. La IA es una de las disciplinas m\u00e1s recientes junto con la gen\u00e9tica moderna.\nLas ideas m\u00e1s b\u00e1sicas se remontan a los antiguos griegos. Arist\u00f3teles (384-322 a. C.) fue el primero en describir un conjunto de reglas que describen una parte del funcionamiento de la mente para obtener conclusiones racionales, y Ctesibio de Alejandr\u00eda (250 a. C.) construy\u00f3 la primera m\u00e1quina autocontrolada, un regulador del flujo de agua (racional pero sin razonamiento).\nEn 1315 Ramon Llull en su libro Ars magna tuvo la idea de que el razonamiento pod\u00eda ser efectuado de manera artificial.\nEn 1840 Ada Lovelace previ\u00f3 la capacidad de las m\u00e1quinas para ir m\u00e1s all\u00e1 de los simples c\u00e1lculos y aport\u00f3 una primera idea de lo que ser\u00eda el software.\nLeonardo Torres Quevedo(1852-1936) es considerado como uno de los padres de la inteligencia artificial y de la Autom\u00e1tica.\nEn 1936 Alan Turing dise\u00f1a formalmente una M\u00e1quina universal que demuestra la viabilidad de un dispositivo f\u00edsico para implementar cualquier c\u00f3mputo formalmente definido.\nEn 1943 Warren McCulloch y Walter Pitts presentaron su modelo de neuronas artificiales, el cual se considera el primer trabajo del campo, aun cuando todav\u00eda no exist\u00eda el t\u00e9rmino. Los primeros avances importantes comenzaron a principios del a\u00f1o 1950 con el trabajo de Alan Turing, a partir de lo cual la ciencia ha pasado por diversas situaciones.\nEn 1955 Herbert Simon, Allen Newell y Joseph Carl Shaw, desarrollan el primer lenguaje de programaci\u00f3n orientado a la resoluci\u00f3n de problemas, el IPL-11. Un a\u00f1o m\u00e1s tarde desarrollan el LogicTheorist, el cual era capaz de demostrar teoremas matem\u00e1ticos.\nEn 1956 fue ideada la expresi\u00f3n \u00abinteligencia artificial\u00bb por John McCarthy, Marvin Minsky y Claude Shannon en la Conferencia de Dartmouth, un congreso en el que se hicieron previsiones triunfalistas a diez a\u00f1os que jam\u00e1s se cumplieron, lo que provoc\u00f3 el abandono casi total de las investigaciones durante quince a\u00f1os.\nEn 1957 Newell y Simon contin\u00faan su trabajo con el desarrollo del General Problem Solver (GPS). GPS era un sistema orientado a la resoluci\u00f3n de problemas.\nEn 1958 John McCarthy desarrolla en el Instituto Tecnol\u00f3gico de Massachusetts (MIT) el LISP. Su nombre se deriva de LISt Processor. LISP fue el primer lenguaje para procesamiento simb\u00f3lico.\nEn 1959 Rosenblatt introduce el \u00abperceptr\u00f3n\u00bb.\nA finales de la d\u00e9cada de 1950 y comienzos de la de 1960 Robert K. Lindsay desarrolla \u00abSad Sam\u00bb, un programa para la lectura de oraciones en ingl\u00e9s y la inferencia de conclusiones a partir de su interpretaci\u00f3n.\nEn 1963 Quillian desarrolla las redes sem\u00e1nticas como modelo de representaci\u00f3n del conocimiento.\nEn 1964 Bertrand Raphael construye el sistema SIR (Semantic Information Retrieval) el cual era capaz de inferir conocimiento basado en informaci\u00f3n que se le suministra. Bobrow desarrolla STUDENT.\nA mediados de los a\u00f1os 60, aparecen los sistemas expertos, que predicen la probabilidad de una soluci\u00f3n bajo un set de condiciones. Por ejemplo, DENDRAL, iniciado en 1965 por Buchanan, Feigenbaum y Lederberg, el primer Sistema Experto, que asist\u00eda a qu\u00edmicos en estructuras qu\u00edmicas complejas, MACSYMA, que asist\u00eda a ingenieros y cient\u00edficos en la soluci\u00f3n de ecuaciones matem\u00e1ticas complejas.\nPosteriormente entre los a\u00f1os 1968-1970 Terry Winograd desarroll\u00f3 el sistema SHRDLU, que permit\u00eda interrogar y dar \u00f3rdenes a un robot que se mov\u00eda dentro de un mundo de bloques.\nEn 1968 Marvin Minsky publica Semantic Information Processing.\nEn 1968 Seymour Papert, Danny Bobrow y Wally Feurzeig desarrollan el lenguaje de programaci\u00f3n LOGO.\nEn 1969 Alan Kay desarrolla el lenguaje Smalltalk en Xerox PARC y se publica en 1980.\nEn 1973 Alain Colmenauer y su equipo de investigaci\u00f3n en la Universidad de Aix-Marseille crean PROLOG (del franc\u00e9s PROgrammation en LOGique) un lenguaje de programaci\u00f3n ampliamente utilizado en IA.\nEn 1973 Shank y Abelson desarrollan los guiones, o scripts, pilares de muchas t\u00e9cnicas actuales en inteligencia artificial y la inform\u00e1tica en general.\nEn 1974 Edward Shortliffe escribe su tesis con MYCIN, uno de los Sistemas Expertos m\u00e1s conocidos, que asisti\u00f3 a m\u00e9dicos en el diagn\u00f3stico y tratamiento de infecciones en la sangre.\nEn las d\u00e9cadas de 1970 y 1980, creci\u00f3 el uso de sistemas expertos, como MYCIN: R1/XCON, ABRL, PIP, PUFF, CASNET, INTERNIST/CADUCEUS, etc. Algunos permanecen hasta hoy (Shells) como EMYCIN, EXPERT, OPSS.\nEn 1981 Kazuhiro Fuchi anuncia el proyecto japon\u00e9s de la quinta generaci\u00f3n de computadoras.\nEn 1986 McClelland y Rumelhart publican Parallel Distributed Processing (Redes Neuronales).\nEn 1988 se establecen los lenguajes Orientados a Objetos.\nEn 1997 Gari Kasp\u00e1rov, campe\u00f3n mundial de ajedrez, pierde ante la computadora aut\u00f3noma Deep Blue.\nEn 2006 se celebr\u00f3 el aniversario con el Congreso en espa\u00f1ol 50 a\u00f1os de inteligencia artificial - Campus Multidisciplinar en Percepci\u00f3n e Inteligencia 2006.\nEn 2009 ya hab\u00eda en desarrollo sistemas inteligentes terap\u00e9uticos que permiten detectar emociones para poder interactuar con ni\u00f1os autistas.\nEn 2011 IBM desarroll\u00f3 un superordenador llamado Watson, el cual gan\u00f3 una ronda de tres juegos seguidos de Jeopardy!, venciendo a sus dos m\u00e1ximos campeones, y ganando un premio de 1 mill\u00f3n de d\u00f3lares que IBM luego don\u00f3 a obras de caridad.[26]\u200b\nEn 2016, un programa inform\u00e1tico gan\u00f3 cinco a cero al triple campe\u00f3n de Europa de Go.[27]\u200b\nEn 2016, el entonces presidente Obama habla sobre el futuro de la inteligencia artificial y la tecnolog\u00eda.[28]\u200b\nExisten personas que al dialogar sin saberlo con un chatbot no se percatan de hablar con un programa, de modo tal que se cumple la prueba de Turing como cuando se formul\u00f3: \u00abExistir\u00e1 inteligencia artificial cuando no seamos capaces de distinguir entre un ser humano y un programa inform\u00e1tico en una conversaci\u00f3n a ciegas\u00bb.\nEn 2017 AlphaGo desarrollado por DeepMind derrota 4-1 en una competencia de Go al campe\u00f3n mundial Lee Sedol. Este suceso fue muy medi\u00e1tico y marc\u00f3 un hito en la historia de este juego.[29]\u200b A finales de ese mismo a\u00f1o, Stockfish, el motor de ajedrez considerado el mejor del mundo con 3 400 puntos ELO, fue abrumadoramente derrotado por AlphaZero con solo conocer las reglas del juego y tras solo 4 horas de entrenamiento jugando contra s\u00ed mismo.[30]\u200b\nComo an\u00e9cdota, muchos de los investigadores sobre IA sostienen que \u00abla inteligencia es un programa capaz de ser ejecutado independientemente de la m\u00e1quina que lo ejecute, computador o cerebro\u00bb.\nEn 2017 un grupo de ingenieros en Google inventan la arquitectura de transformador, un modelo de deep learning que alumbr\u00f3 una nueva generaci\u00f3n de modelos grandes de lenguaje, empezando por BERT, y luego el revolucionario GPT de OpenAI.[31]\u200b\nEn 2018, se lanza el primer televisor con inteligencia artificial por parte de LG Electronics con una plataforma denominada ThinQ.[32]\u200b\nEn 2019, Google present\u00f3 su Doodle en que, con ayuda de la inteligencia artificial, hace un homenaje a Johann Sebastian Bach, en el que, a\u00f1adiendo una simple melod\u00eda de dos compases la IA crea el resto.\nEn 2020, la OECD (Organizaci\u00f3n para la Cooperaci\u00f3n y el Desarrollo Econ\u00f3mico) publica el documento de trabajo intitulado Hola, mundo: La inteligencia artificial y su uso en el sector p\u00fablico, dirigido a funcionarios de gobierno con el af\u00e1n de resaltar la importancia de la IA y de sus aplicaciones pr\u00e1cticas en el \u00e1mbito gubernamental.[33]\u200b\nAl final del a\u00f1o 2022, se lanz\u00f3 ChatGPT, una inteligencia artificial generativa capaz de escribir textos y responder preguntas en muchos idiomas. Dado que la calidad de las respuestas recordaba inicialmente al nivel humano, se gener\u00f3 un entusiasmo mundial por la IA[34]\u200b y ChatGPT alcanz\u00f3 m\u00e1s de 100 millones de usuarios dos meses despu\u00e9s de su lanzamiento.[35]\u200b M\u00e1s tarde, los expertos notaron que ChatGPT proporciona informaci\u00f3n err\u00f3nea en \u00e1reas donde no tiene conocimiento (\"alucinaciones de datos\"), la cual a primera vista parece cre\u00edble debido a su perfecta redacci\u00f3n.[36]\u200b\nEn 2023, las fotos generadas por IA alcanzaron un nivel de realismo que las hac\u00eda confundirse con fotos reales. Como resultado, hubo una ola de \"fotos\" generadas por IA que muchos espectadores creyeron que eran reales. Una imagen generada por Midjourney se destac\u00f3, mostrando al Papa Francisco con un elegante abrigo blanco de invierno.[37]\u200b", "subsections": []}, {"name": "Implicaciones sociales, \u00e9ticas y filos\u00f3ficas", "text": "Ante la posibilidad de crear m\u00e1quinas dotadas de inteligencia, se volvi\u00f3 importante preocuparse por la cuesti\u00f3n \u00e9tica de las m\u00e1quinas para tratar de garantizar que no se produzca ning\u00fan da\u00f1o a los seres humanos, a otros seres vivos e incluso a las mismas m\u00e1quinas seg\u00fan algunas corrientes de pensamiento.[38]\u200b Es as\u00ed como surgi\u00f3 un amplio campo de estudios conocido como \u00e9tica de la inteligencia artificial de relativamente reciente aparici\u00f3n y que generalmente se divide en dos ramas, la robo\u00e9tica, encargada de estudiar las acciones de los seres humanos hacia los robots, y la \u00e9tica de las m\u00e1quinas encargada del estudio del comportamiento de los robots para con los seres humanos.\nEl acelerado desarrollo tecnol\u00f3gico y cient\u00edfico de la inteligencia artificial que se ha producido en el siglo\u00a0XXI supone tambi\u00e9n un importante impacto en otros campos. En la econom\u00eda mundial durante la segunda revoluci\u00f3n industrial se vivi\u00f3 un fen\u00f3meno conocido como desempleo tecnol\u00f3gico, que se refiere a cuando la automatizaci\u00f3n industrial de los procesos de producci\u00f3n a gran escala reemplaza la mano de obra humana. Con la inteligencia artificial podr\u00eda darse un fen\u00f3meno parecido, especialmente en los procesos en los que interviene la inteligencia humana, tal como se ilustraba en el cuento \u00a1C\u00f3mo se divert\u00edan! de Isaac Asimov, en el que su autor vislumbra algunos de los efectos que tendr\u00eda la interacci\u00f3n de m\u00e1quinas inteligentes especializadas en pedagog\u00eda infantil, en lugar de profesores humanos, con los ni\u00f1os en etapa escolar. Este mismo escritor dise\u00f1\u00f3 lo que hoy se conocen como las tres leyes de la rob\u00f3tica, aparecidas por primera vez en el relato C\u00edrculo vicioso (Runaround) de 1942, donde establec\u00eda lo siguiente:\nOtras obras de ciencia ficci\u00f3n m\u00e1s recientes tambi\u00e9n exploran algunas cuestiones \u00e9ticas y filos\u00f3ficas con respecto a la Inteligencia artificial fuerte, como las pel\u00edculas Yo, robot o A.I. Inteligencia Artificial, en los que se tratan temas tales como la autoconsciencia o el origen de una conciencia emergente de los robots inteligentes o sistemas computacionales, o si \u00e9stos podr\u00edan considerarse sujetos de derecho debido a sus caracter\u00edsticas casi humanas relacionadas con la sintiencia, como el poder ser capaces de sentir dolor y emociones o hasta qu\u00e9 punto obedecer\u00edan al objetivo de su programaci\u00f3n, y en caso de no ser as\u00ed, si podr\u00edan ejercer libre albedr\u00edo. Esto \u00faltimo es el tema central de la famosa saga de Terminator, en la que las m\u00e1quinas superan a la humanidad y deciden aniquilarla, historia que, seg\u00fan varios especialistas, podr\u00eda no limitarse a la ciencia ficci\u00f3n y ser una posibilidad real en una sociedad posthumana que dependiese de la tecnolog\u00eda y las m\u00e1quinas completamente.[40]\u200b[41]\u200b", "subsections": []}, {"name": "Regulaci\u00f3n", "text": "El Derecho[43]\u200b desempe\u00f1a un papel fundamental en el uso y desarrollo de la IA. Las leyes establecen reglas y normas de comportamiento para asegurar el bienestar social y proteger los derechos individuales, y pueden ayudarnos a obtener los beneficios de esta tecnolog\u00eda mientras minimizamos sus riesgos, que son significativos. De momento no hay normas jur\u00eddicas que regulen directamente a la IA. Pero con fecha 21 de abril de 2021, la Comisi\u00f3n Europea ha presentado una propuesta de Reglamento europeo para la regulaci\u00f3n armonizada de la inteligencia artificial (IA) en la UE. Su t\u00edtulo exacto es Propuesta de Reglamento del Parlamento Europeo y del Consejo por el que se establecen normas armonizadas en materia de inteligencia artificial \u2013Ley de Inteligencia Artificial\u2013 y se modifican otros actos legislativos de la Uni\u00f3n.\nEn marzo de 2023, cientos de empresarios como Elon Musk, Steve Wozniak (cofundador de Apple) o los presidentes de numerosas compa\u00f1\u00edas tecnol\u00f3gicas; intelectuales como Yuval Noah Harari y cientos de acad\u00e9micos e investigadores especializados en inteligencia artificial firmaron una carta abierta avisando del peligro de la falta de regulaci\u00f3n de la IA, poniendo el foco sobre OpenAI, la empresa que ha desarrollado ChatGPT. Pidieron una pausa de al menos 6 meses para sus experimentos m\u00e1s potentes, hasta que el mundo logre un consenso internacional para que estos sistemas \u00absean m\u00e1s precisos, seguros, interpretables, transparentes, robustos, neutrales, confiables y leales\u00bb.[44]\u200b\nDos meses m\u00e1s tarde, en mayo, 350 ejecutivos de las principales empresas desarrolladoras de IA, acad\u00e9micos e investigadores expertos firmaron un nuevo manifiesto alertando de que la IA avanzada sin regular representa un peligro de extinci\u00f3n para la humanidad: \u00abMitigar el riesgo de extinci\u00f3n de la IA deber\u00eda ser una prioridad mundial junto a otros riesgos a escala social como las pandemias y la guerra nuclear\u00bb[45]\u200b Entre los impulsores de esta petici\u00f3n est\u00e1 toda la plana mayor de OpenAI, el jefe de Tecnolog\u00eda de Microsoft, el l\u00edder de Google DeepMind con 38 ejecutivos, investigadores o profesores de universidad relacionados con la empresa, y representantes de desarrolladoras m\u00e1s peque\u00f1as como Anthropic, Stability AI o Inflection AI.[46]\u200b", "subsections": []}, {"name": "Objetivos", "text": "", "subsections": [{"name": "Razonamiento y resoluci\u00f3n de problemas", "text": "Los primeros investigadores desarrollaron algoritmos que imitaban el razonamiento paso a paso que los humanos usan cuando resuelven acertijos o hacen deducciones l\u00f3gicas.[47]\u200b A finales de la d\u00e9cada de 1981-1990, la investigaci\u00f3n de la inteligencia artificial hab\u00eda desarrollado m\u00e9todos para tratar con informaci\u00f3n incierta o incompleta, empleando conceptos de probabilidad y econom\u00eda.[48]\u200b\nEstos algoritmos demostraron ser insuficientes para resolver grandes problemas de razonamiento porque experimentaron una \u00abexplosi\u00f3n combinatoria\u00bb: se volvieron exponencialmente m\u00e1s lentos a medida que los problemas crec\u00edan.[49]\u200b De esta manera, se concluy\u00f3 que los seres humanos rara vez usan la deducci\u00f3n paso a paso que la investigaci\u00f3n temprana de la inteligencia artificial segu\u00eda; en cambio, resuelven la mayor\u00eda de sus problemas utilizando juicios r\u00e1pidos e intuitivos.[50]\u200b"}, {"name": "Representaci\u00f3n del conocimiento", "text": "La representaci\u00f3n del conocimiento[51]\u200b y la ingenier\u00eda del conocimiento[52]\u200b son fundamentales para la investigaci\u00f3n cl\u00e1sica de la inteligencia artificial. Algunos \u00absistemas expertos\u00bb intentan recopilar el conocimiento que poseen los expertos en alg\u00fan \u00e1mbito concreto. Adem\u00e1s, otros proyectos tratan de reunir el \u00abconocimiento de sentido com\u00fan\u00bb conocido por una persona promedio en una base de datos que contiene un amplio conocimiento sobre el mundo.\nEntre los temas que contendr\u00eda una base de conocimiento de sentido com\u00fan est\u00e1n: objetos, propiedades, categor\u00edas y relaciones entre objetos,[53]\u200b situaciones, eventos, estados y tiempo[54]\u200b causas y efectos;[55]\u200b y el conocimiento sobre el conocimiento (lo que sabemos sobre lo que saben otras personas)[56]\u200b entre otros."}, {"name": "Planificaci\u00f3n", "text": "Otro objetivo de la inteligencia artificial consiste en poder establecer metas y finalmente alcanzarlas.[57]\u200b Para ello necesitan una forma de visualizar el futuro, una representaci\u00f3n del estado del mundo y poder hacer predicciones sobre c\u00f3mo sus acciones lo cambiar\u00e1n, con tal de poder tomar decisiones que maximicen la utilidad (o el \u00abvalor\u00bb) de las opciones disponibles.[58]\u200b\nEn los problemas cl\u00e1sicos de planificaci\u00f3n, el agente puede asumir que es el \u00fanico sistema que act\u00faa en el mundo, lo que le permite estar seguro de las consecuencias de sus acciones.[59]\u200b Sin embargo, si el agente no es el \u00fanico actor, entonces se requiere que este pueda razonar bajo incertidumbre. Esto requiere un agente que no solo pueda evaluar su entorno y hacer predicciones, sino tambi\u00e9n evaluar sus predicciones y adaptarse en funci\u00f3n de su evaluaci\u00f3n.[60]\u200b La planificaci\u00f3n de m\u00faltiples agentes utiliza la cooperaci\u00f3n y la competencia de muchos sistemas para lograr un objetivo determinado. El comportamiento emergente como este es utilizado por algoritmos evolutivos e inteligencia de enjambre.[61]\u200b"}, {"name": "Aprendizaje", "text": "El aprendizaje autom\u00e1tico es un concepto fundamental de la investigaci\u00f3n de la inteligencia artificial desde el inicio de los estudios de este campo; consiste en la investigaci\u00f3n de algoritmos inform\u00e1ticos que mejoran autom\u00e1ticamente a trav\u00e9s de la experiencia.[62]\u200b\nEl aprendizaje no supervisado es la capacidad de encontrar patrones en un flujo de entrada, sin que sea necesario que un humano etiquete las entradas primero. El aprendizaje supervisado incluye clasificaci\u00f3n y regresi\u00f3n num\u00e9rica, lo que requiere que un humano etiquete primero los datos de entrada. La clasificaci\u00f3n se usa para determinar a qu\u00e9 categor\u00eda pertenece algo y ocurre despu\u00e9s de que un programa observe varios ejemplos de entradas de varias categor\u00edas. La regresi\u00f3n es el intento de producir una funci\u00f3n que describa la relaci\u00f3n entre entradas y salidas y predice c\u00f3mo deben cambiar las salidas a medida que cambian las entradas.[62]\u200b Tanto los clasificadores como los aprendices de regresi\u00f3n intentan aprender una funci\u00f3n desconocida; por ejemplo, un clasificador de spam puede verse como el aprendizaje de una funci\u00f3n que asigna el texto de un correo electr\u00f3nico a una de dos categor\u00edas, \u00abspam\u00bb o \u00abno spam\u00bb. La teor\u00eda del aprendizaje computacional puede evaluar a los estudiantes por complejidad computacional, complejidad de la muestra (cu\u00e1ntos datos se requieren) o por otras nociones de optimizaci\u00f3n.[63]\u200b\nEl mundo est\u00e1 en constante evoluci\u00f3n, y herramientas como ChatGPT est\u00e1n en el centro de esta transformaci\u00f3n. Mientras que muchas personas ven a ChatGPT como una oportunidad para mejorar la experiencia de sus negocios o personales, hay quienes se muestran esc\u00e9pticos sobre su implementaci\u00f3n. [64]\u200b"}, {"name": "Procesamiento de lenguajes naturales", "text": "El procesamiento del lenguaje natural[65]\u200b permite a las m\u00e1quinas leer y comprender el lenguaje humano. Un sistema de procesamiento de lenguaje natural suficientemente eficaz permitir\u00eda interfaces de usuario de lenguaje natural y la adquisici\u00f3n de conocimiento directamente de fuentes escritas por humanos, como los textos de noticias. Algunas aplicaciones sencillas del procesamiento del lenguaje natural incluyen la recuperaci\u00f3n de informaci\u00f3n, la miner\u00eda de textos, la respuesta a preguntas y la traducci\u00f3n autom\u00e1tica.[66]\u200b Muchos enfoques utilizan las frecuencias de palabras para construir representaciones sint\u00e1cticas de texto. Las estrategias de b\u00fasqueda de \u00abdetecci\u00f3n de palabras clave\u00bb son populares y escalables, pero poco \u00f3ptimas; una consulta de b\u00fasqueda para \u00abperro\u00bb solo puede coincidir con documentos que contengan la palabra literal \u00abperro\u00bb y perder un documento con el vocablo \u00abcaniche\u00bb. Los enfoques estad\u00edsticos de procesamiento de lenguaje pueden combinar todas estas estrategias, as\u00ed como otras, y a menudo logran una precisi\u00f3n aceptable a nivel de p\u00e1gina o p\u00e1rrafo. M\u00e1s all\u00e1 del procesamiento de la sem\u00e1ntica, el objetivo final de este es incorporar una comprensi\u00f3n completa del razonamiento de sentido com\u00fan.[67]\u200b En 2019, las arquitecturas de aprendizaje profundo basadas en transformadores pod\u00edan generar texto coherente.[68]\u200b"}, {"name": "Percepci\u00f3n", "text": "La percepci\u00f3n de la m\u00e1quina[69]\u200b es la capacidad de utilizar la entrada de sensores (como c\u00e1maras de espectro visible o infrarrojo, micr\u00f3fonos, se\u00f1ales inal\u00e1mbricas y lidar, sonar, radar y sensores t\u00e1ctiles) para entender aspectos del mundo. Las aplicaciones incluyen reconocimiento de voz,[70]\u200b reconocimiento facial y reconocimiento de objetos.[71]\u200b La visi\u00f3n artificial es la capacidad de analizar la informaci\u00f3n visual, que suele ser ambigua; un peat\u00f3n gigante de cincuenta metros de altura muy lejos puede producir los mismos p\u00edxeles que un peat\u00f3n de tama\u00f1o normal cercano, lo que requiere que la inteligencia artificial juzgue la probabilidad relativa y la razonabilidad de las diferentes interpretaciones, por ejemplo, utilizando su \u00abmodelo de objeto\u00bb para evaluar que los peatones de cincuenta metros no existen.[72]\u200b"}]}, {"name": "Importancia de la inteligencia artificial", "text": "La gran importancia de la IA radica en el hecho de que tiene una amplia gama de aplicaciones, desde la automatizaci\u00f3n de tareas tediosas hasta la creaci\u00f3n de sistemas avanzados de asistencia m\u00e9dica y diagn\u00f3stico de enfermedades, la detecci\u00f3n de fraudes y la optimizaci\u00f3n de procesos empresariales. En muchos casos, la IA puede hacer cosas que los humanos no pueden hacer, como el procesamiento de datos en grandes cantidades y la localizaci\u00f3n de patrones e interrelaciones entre estos que ser\u00edan dif\u00edciles o imposibles de detectar de otra manera.\nEsta herramienta ayuda a automatizar el aprendizaje y descubrimiento repetitivo a trav\u00e9s de datos, realiza tareas computarizadas frecuentes de manera confiable, sin embargo, necesita intervenci\u00f3n humana para la configuraci\u00f3n del sistema. Analiza datos m\u00e1s profundos y agrega inteligencia ya que no se puede vender como una aplicaci\u00f3n individual, por lo que es un valor agregado a los productos. Tiene una gran precisi\u00f3n a trav\u00e9s de redes neuronales profundas; por ejemplo, en medicina se puede utilizar la IA para detectar c\u00e1ncer con MRIs (im\u00e1genes ppr resonancia magn\u00e9tica). Se adapta a trav\u00e9s de algoritmos de aprendizaje progresivo, encuentra estructura y regularidades en los datos de modo que el algoritmo se convierte en un clasificador o predictor. Y, por \u00faltimo, la inteligencia artificial, saca el mayor provecho de datos.\nAdem\u00e1s, una de las principales razones por las que la IA es importante es porque puede automatizar tareas repetitivas y mon\u00f3tonas, liberando tiempo y recursos para que las personas se centren en tareas m\u00e1s creativas y valiosas. Por ejemplo, la IA puede ayudar a las empresas a automatizar tareas de back office, como la contabilidad y el procesamiento de facturas, lo que puede reducir los costos y mejorar la eficiencia. De manera similar, la IA puede ayudar a los trabajadores a realizar tareas m\u00e1s complejas y creativas, como el dise\u00f1o y la planificaci\u00f3n estrat\u00e9gica.\nOtra raz\u00f3n por la que la IA es importante es porque puede ayudar a las empresas a tomar decisiones informadas y precisas. As\u00ed mismo, la IA puede procesar grandes cantidades de datos y proporcionar informaci\u00f3n valiosa para la toma de decisiones empresariales, lo que puede ayudar a las empresas a identificar oportunidades comerciales, predecir tendencias de mercado y mejorar la eficiencia del mercado financiero. Adem\u00e1s, la IA puede ayudar a los trabajadores a tomar decisiones informadas en tiempo real, como en el caso de la atenci\u00f3n m\u00e9dica, donde la IA puede ayudar a los m\u00e9dicos a identificar enfermedades y personalizar el tratamiento.\nLa IA tambi\u00e9n es importante en el campo de la ciberseguridad. La IA puede ayudar a detectar y prevenir amenazas, desde ciberataques hasta la detecci\u00f3n de comportamientos sospechosos. La IA puede analizar grandes cantidades de datos en tiempo real y detectar patrones y anomal\u00edas que podr\u00edan indicar una amenaza de seguridad. Adem\u00e1s, la IA puede aprender de los patrones de comportamiento y mejorar su capacidad para detectar amenazas en el futuro[73]\u200b. En el campo de la seguridad cibern\u00e9tica, la IA puede ayudar a proteger los sistemas y las redes de los ataques de virus inform\u00e1ticos y la infiltraci\u00f3n de malware.\nOtra \u00e1rea donde la IA es importante es en el descubrimiento de conocimientos. La IA puede descubrir patrones y relaciones en los datos que los humanos no podr\u00edan detectar, lo que puede llevar a nuevas ideas y avances en diversos campos. Por ejemplo, la IA puede ayudar a los investigadores a identificar nuevos tratamientos para enfermedades, o ayudar a los cient\u00edficos a analizar datos de sensores y sat\u00e9lites para entender mejor el calentamiento global.", "subsections": []}, {"name": "Controversias", "text": "", "subsections": [{"name": "Sophia", "text": "En marzo de 2016, se hizo popular el comentario que la robot humanoide llamada Sophia de la empresa Hanson Robotics hizo durante su presentaci\u00f3n cuando su creador, David Hanson, le preguntara si estaba dispuesta a destruir a la humanidad, a lo que la robot contest\u00f3: \u00abEst\u00e1 bien, voy a destruir a la humanidad\u00bb. Posteriormente, Soph\u00eda se gan\u00f3 el reconocimiento y la atenci\u00f3n medi\u00e1tica mundial debido a sus conductas casi humanas, siendo entrevistada en muchas ocasiones por distintos medios y sosteniendo conversaciones con personalidades famosas y reconocidas. En 2017, Sophia obtuvo la ciudadan\u00eda saud\u00ed, convirti\u00e9ndose as\u00ed en la primera robot en ser reconocida como ciudadana por un pa\u00eds, lo cual levant\u00f3 la controversia sobre si se les deber\u00eda otorgar los mismos derechos y obligaciones a los robots como si se trataran de sujetos de derecho.[74]\u200b"}, {"name": "Alice y Bob", "text": "A finales de julio de 2017, varios medios internacionales dieron a conocer que el laboratorio de investigaci\u00f3n de inteligencia artificial del Instituto Tecnol\u00f3gico de Georgia, en conjunto con el Grupo de Investigaci\u00f3n de inteligencia artificial (FAIR) de Facebook, ahora Meta, tuvieron que apagar dos inteligencias artificiales de tipo chatbot denominadas Bob y Alice, ya que hab\u00edan desarrollado un lenguaje propio m\u00e1s eficiente que el ingl\u00e9s, idioma en el que hab\u00edan sido entrenados para aprender a negociar, desarrollando finalmente un tipo de comunicaci\u00f3n incomprensible que se alejaba de las reglas gramaticales del lenguaje natural y que favorec\u00eda el uso de abreviaturas. El lenguaje creado por estas IA mostraba caracter\u00edsticas de un ingl\u00e9s corrupto y patrones repetitivos, en especial de pronombres y determinantes.[75]\u200b\nEste inesperado suceso fue visto con p\u00e1nico en los medios de comunicaci\u00f3n, ya que se aseguraba que los chatbots supuestamente hab\u00edan salido del control humano y hab\u00edan desarrollado la capacidad de comunicarse entre s\u00ed. Sin embargo, posteriormente esto tambi\u00e9n fue desmentido, pues se argument\u00f3 que en realidad Facebook no apag\u00f3 las inteligencias artificiales, sino que simplemente las puso en pausa y cambi\u00f3 los par\u00e1metros de los chatbots, desechando el experimento al final por no tener ning\u00fan inter\u00e9s pr\u00e1ctico o \u00fatil dentro de la investigaci\u00f3n sobre IA.[76]\u200b"}, {"name": "Ameca", "text": "A principios del 2022, en la Feria de Electr\u00f3nica de Consumo (CES) que tom\u00f3 lugar en Las Vegas, el robot desarrollado por Engineered Arts nombrado Ameca caus\u00f3 duda y miedo a los espectadores durante su exposici\u00f3n principalmente por la semejanza de su rostro a uno de un ser humano, la compa\u00f1\u00eda expres\u00f3 que el desarrollo de este robot humanoide a\u00fan se encontraba en proceso y hasta septiembre del mismo a\u00f1o el robot a\u00fan no era capaz de caminar ni tener interacci\u00f3n alguna con las personas.[77]\u200b Por otro lado, en septiembre de 2023 la compa\u00f1\u00eda volvi\u00f3 a exponer a Ameca al p\u00fablico mostrando al robot en videos en donde se le puede ver frente a un espejo haciendo 25 expresiones humanas [78]\u200b, as\u00ed como dibujando un gato al ya contar con brazos y piernas que le otorgaron movilidad y, de igual manera, empleando iron\u00eda en conversaciones con personas e incluso declarando que realiz\u00f3 una broma al ser cuestionada sobre su capacidad de so\u00f1ar como un humano siendo un robot al decir \u00abso\u00f1\u00e9 con dinosaurios luchando una guerra contra alien\u00edgenas en Marte\u00bb[79]\u200b esto lo desminti\u00f3 momentos despu\u00e9s explicando c\u00f3mo es que la IA implementada en su sistema le permit\u00eda crear escenarios sobre hechos de la humanidad e iba aprendiendo sobre ellos mientras se encontraba apagada; estos hechos impactaron a la sociedad sobre la semejanza que este robot humanoide estaba teniendo con el ser humano y sobre el avance tecnol\u00f3gico que est\u00e1 permitiendo que este robot est\u00e9 cada vez m\u00e1s cercano a vivir entre las personas como un miembro m\u00e1s de la comunidad."}, {"name": "Falsos desnudos", "text": "La utilizaci\u00f3n de aplicaciones gratuitas de IA para transformar fotograf\u00edas de personas en falsos desnudos est\u00e1 generando problemas que afectan a menores. El caso salt\u00f3 a los medios de comunicaci\u00f3n en septiembre de 2023 cuando en Almendralejo (Badajoz, Espa\u00f1a) aparecieron varias fotograf\u00edas de ni\u00f1as y j\u00f3venes (entre 11 y 17 a\u00f1os) que hab\u00edan sido modificadas mediante inteligencia artificial para aparecer desnudas. Las im\u00e1genes fueron obtenidas de los perfiles de Instagram y de la aplicaci\u00f3n Whatsapp de al menos 20 ni\u00f1as de la localidad. Las fotograf\u00edas de ni\u00f1as desnudas hab\u00edan circulado despu\u00e9s mediante Whatsapp y a partir de ellas se hab\u00eda creado un v\u00eddeo que tambi\u00e9n hab\u00eda circulado entre menores. Los autores de dicha transformaci\u00f3n tambi\u00e9n eran menores y compa\u00f1eros de colegio o instituto. La Agencia Espa\u00f1ola de Protecci\u00f3n de Datos abri\u00f3 una investigaci\u00f3n y se comunic\u00f3 con el Ayuntamiento de Almendralejo y con la Junta de Extremadura inform\u00e1ndoles de que se pod\u00eda solicitar la retirada de cualquier imagen circulando en internet en el canal prioritario de la agencia.[80]\u200b"}]}, {"name": "Cr\u00edticas", "text": "Las principales cr\u00edticas a la inteligencia artificial tienen que ver con su capacidad de imitar por completo a un ser humano.[81]\u200b Sin embargo, hay expertos[cita\u00a0requerida] en el tema que indican que ning\u00fan humano individual tiene capacidad para resolver todo tipo de problemas, y autores como Howard Gardner han teorizado sobre la soluci\u00f3n.\nEn los humanos, la capacidad de resolver problemas tiene dos aspectos: los aspectos innatos y los aspectos aprendidos. Los aspectos innatos permiten, por ejemplo, almacenar y recuperar informaci\u00f3n en la memoria, mientras que en los aspectos aprendidos reside el saber resolver un problema matem\u00e1tico mediante el algoritmo adecuado. Del mismo modo que un humano debe disponer de herramientas que le permitan solucionar ciertos problemas, los sistemas artificiales deben ser programados para que puedan llegar a resolverlos.\nMuchas personas consideran que la prueba de Turing ha sido superada, citando conversaciones en que al dialogar con un programa de inteligencia artificial para chat no saben que hablan con un programa. Sin embargo, esta situaci\u00f3n no es equivalente a una prueba de Turing, que requiere que el participante se encuentre sobre aviso de la posibilidad de hablar con una m\u00e1quina.\nOtros experimentos mentales como la habitaci\u00f3n china, de John Searle, han mostrado c\u00f3mo una m\u00e1quina podr\u00eda simular pensamiento sin realmente poseerlo, pasando la prueba de Turing sin siquiera entender lo que hace, tan solo reaccionando de una forma concreta a determinados est\u00edmulos (en el sentido m\u00e1s amplio de la palabra). Esto demostrar\u00eda que la m\u00e1quina en realidad no est\u00e1 pensando, ya que actuar de acuerdo con un programa preestablecido ser\u00eda suficiente. Si para Turing el hecho de enga\u00f1ar a un ser humano que intenta evitar que le enga\u00f1en es muestra de una mente inteligente, Searle considera posible lograr dicho efecto mediante reglas definidas a priori.\nUno de los mayores problemas en sistemas de inteligencia artificial es la comunicaci\u00f3n con el usuario. Este obst\u00e1culo es debido a la ambig\u00fcedad del lenguaje, y se remonta a los inicios de los primeros sistemas operativos inform\u00e1ticos. La capacidad de los humanos para comunicarse entre s\u00ed implica el conocimiento del lenguaje que utiliza el interlocutor. Para que un humano pueda comunicarse con un sistema inteligente hay dos opciones: o bien que el humano aprenda el lenguaje del sistema como si aprendiese a hablar cualquier otro idioma distinto al nativo, o bien que el sistema tenga la capacidad de interpretar el mensaje del usuario en la lengua que el usuario utiliza. Tambi\u00e9n puede haber desperfectos en las instalaciones de los mismos.\nUn humano, durante toda su vida, aprende el vocabulario de su lengua nativa o materna, siendo capaz de interpretar los mensajes (a pesar de la polisemia de las palabras) y utilizando el contexto para resolver ambig\u00fcedades. Sin embargo, debe conocer los distintos significados para poder interpretar, y es por esto que lenguajes especializados y t\u00e9cnicos son conocidos solamente por expertos en las respectivas disciplinas. Un sistema de inteligencia artificial se enfrenta con el mismo problema, la polisemia del lenguaje humano, su sintaxis poco estructurada y los dialectos entre grupos.\nLos desarrollos en inteligencia artificial son mayores en los campos disciplinares en los que existe mayor consenso entre especialistas. Un sistema experto es m\u00e1s probable que sea programado en f\u00edsica o en medicina que en sociolog\u00eda o en psicolog\u00eda. Esto se debe al problema del consenso entre especialistas en la definici\u00f3n de los conceptos involucrados y en los procedimientos y t\u00e9cnicas a utilizar. Por ejemplo, en f\u00edsica hay acuerdo sobre el concepto de velocidad y c\u00f3mo calcularla. Sin embargo, en psicolog\u00eda se discuten los conceptos, la etiolog\u00eda, la psicopatolog\u00eda, y c\u00f3mo proceder ante cierto diagn\u00f3stico. Esto dificulta la creaci\u00f3n de sistemas inteligentes porque siempre habr\u00e1 desacuerdo sobre la forma en que deber\u00eda actuar el sistema para diferentes situaciones. A pesar de esto, hay grandes avances en el dise\u00f1o de sistemas expertos para el diagn\u00f3stico y toma de decisiones en el \u00e1mbito m\u00e9dico y psiqui\u00e1trico (Adaraga Morales, Zaccagnini Sancho, 1994).\nAl desarrollar un robot con inteligencia artificial se debe tener cuidado con la autonom\u00eda,[82]\u200b hay que tener en cuenta el no vincular el hecho de que el robot tenga interacciones con seres humanos a su grado de autonom\u00eda. Si la relaci\u00f3n de los humanos con el robot es de tipo maestro esclavo, y el papel de los humanos es dar \u00f3rdenes y el del robot obedecerlas, entonces s\u00ed cabe hablar de una limitaci\u00f3n de la autonom\u00eda del robot. Pero si la interacci\u00f3n de los humanos con el robot es de igual a igual, entonces su presencia no tiene por qu\u00e9 estar asociada a restricciones para que el robot pueda tomar sus propias decisiones.[83]\u200b\nCon el desarrollo de la tecnolog\u00eda de inteligencia artificial, muchas compa\u00f1\u00edas de software como el aprendizaje profundo y el procesamiento del lenguaje natural han comenzado a producirse y la cantidad de pel\u00edculas sobre inteligencia artificial ha aumentado.\nStephen Hawking advirti\u00f3 sobre los peligros de la inteligencia artificial y lo consider\u00f3 una amenaza para la supervivencia de la humanidad.[84]\u200b ", "subsections": [{"name": "Problemas de privacidad y derechos de autor", "text": "Los algoritmos de aprendizaje autom\u00e1tico requieren grandes cantidades de datos. Las t\u00e9cnicas utilizadas para adquirir estos datos generan preocupaciones sobre temas de privacidad y vigilancia. Las empresas tecnol\u00f3gicas recopilan un gran n\u00famero de datos de sus usuarios, incluida la actividad en internet, los datos de geolocalizaci\u00f3n, video y audio.[85]\u200b Por ejemplo, para construir algoritmos de reconocimiento de voz, Amazon, entre otros, ha grabado millones de conversaciones privadas y han permitido que [Trabajo temporal|trabajadores temporales] las escuchen para transcribirlas algunas de ellas.[86]\u200b Las opiniones sobre esta vigilancia generalizada van desde aquellos que la ven como un mal necesario hasta aquellos para quienes no es \u00e9tica y constituye una violaci\u00f3n del derecho a la intimidad.[87]\u200b Los desarrolladores de IA argumentan que esta es la \u00fanica forma de ofrecer aplicaciones valiosas y han desarrollado varias t\u00e9cnicas que intentan preservar la privacidad mientras se obtienen los datos, como la agregaci\u00f3n de datos, la desidentificaci\u00f3n y la privacidad diferencial.[88]\u200b\nDesde 2016, algunos expertos en privacidad, como Cynthia Dwork, comenzaron a ver la privacidad desde la perspectiva de la equidad: Brian Christian escribi\u00f3 que los expertos han cambiado \u00abde la pregunta de \"qu\u00e9 saben\" a la pregunta de \"qu\u00e9 est\u00e1n haciendo con ello\"\u00bb.[89]\u200b\nLa IA generativa a menudo se entrena con obras protegidas por derechos de autor no autorizadas, incluidos dominios como im\u00e1genes o c\u00f3digo inform\u00e1tico; la salida se utiliza luego bajo una justificaci\u00f3n de uso justo. Los expertos no est\u00e1n de acuerdo sobre la validez de esta justificaci\u00f3n durante un proceso legal, ya que podr\u00eda depender del prop\u00f3sito y el car\u00e1cter del uso de la obra protegida por derechos de autor y del efecto sobre el mercado potencial de la obra protegida.[90]\u200bEn 2023, escritores como John Grisham y Jonathan Franzen demandaron a las empresas de IA por usar sus obras para entrenar IA generativa.[91]\u200b[92]\u200b En 2024, 200 artistas escribieron una carta abierta que solicitaba \u00abparar el asalto a la creatividad humana\u00bb.[93]\u200b"}]}, {"name": "Normativa para su uso en el entorno educativo", "text": "La normativa tiene como objetivo regular y reglamentar el uso de la IA en el entorno educativo, espec\u00edficamente en el aula. La IA ha experimentado un r\u00e1pido desarrollo y se ha convertido en una herramienta potencialmente beneficiosa para mejorar la ense\u00f1anza y el aprendizaje. No obstante, su implementaci\u00f3n plantea desaf\u00edos \u00e9ticos, de privacidad y equidad que deben ser abordados de manera efectiva. Esta normativa se establece en respuesta a la necesidad de garantizar que la IA se utilice de manera \u00e9tica, responsable y equitativa en el \u00e1mbito educativo.\nLos objetivos de esta normativa son:\nPromover el uso de la IA como una herramienta complementaria en el proceso de ense\u00f1anza-aprendizaje.\nGarantizar la protecci\u00f3n de datos y la privacidad de los estudiantes.\nFomentar la equidad y la inclusi\u00f3n en el acceso y el uso de la IA.\nEstablecer principios \u00e9ticos que rijan el uso de la IA en el aula.\nDefinir responsabilidades y procedimientos claros para el uso de la IA.\nEsta normativa se aplica a todas las instituciones educativas y docentes que utilizan la IA en el aula, as\u00ed como a los proveedores de tecnolog\u00eda educativa que ofrecen soluciones basadas en IA.\nOrganizaciones como UNESCO Ethics AI (2020), UNESCO Education & AI (2021), Beijin Consensus, OCDE (2021), Comisi\u00f3n Europea (2019), European Parliament Report AI Education (2021), UNICEF (2021) y Foro Econ\u00f3mico Mundial (2019) han mostrado preocupaci\u00f3n por implementar lineamientos sobre la \u00e9tica y la IA en el entorno educativo.[94]\u200b\nEl uso de la IA en el entorno educativo debe regirse por los siguientes principios \u00e9ticos y valores:\nTransparencia: Las decisiones tomadas por algoritmos de IA deben ser comprensibles y explicables.\nEquidad: La IA no debe discriminar a ning\u00fan estudiante ni grupo de estudiantes.\nPrivacidad: Los datos de los estudiantes deben ser protegidos y utilizados de manera responsable.\nResponsabilidad: Los docentes y las instituciones son responsables de las decisiones tomadas con la ayuda de la IA.\nHonestidad: El contenido creado por los estudiantes debe ser original sin caer en el plagio. [95]\u200b\nMejora del aprendizaje: La IA debe utilizarse para mejorar la calidad de la educaci\u00f3n y el aprendizaje.\nCapacitaci\u00f3n: Los docentes deben recibir formaci\u00f3n sobre el uso de la IA y su aplicaci\u00f3n en el aula.\nEvaluaci\u00f3n: Las soluciones de IA deben ser evaluadas en t\u00e9rminos de su eficacia y su impacto en el aprendizaje.\nProtecci\u00f3n de datos: Los datos de los estudiantes deben ser protegidos de acuerdo con las leyes de privacidad aplicables.\nSupervisi\u00f3n: Se debe establecer un proceso de supervisi\u00f3n para garantizar que la IA se utilice de manera \u00e9tica y responsable.", "subsections": [{"name": "Riesgos de las IA en el entorno educativo", "text": "As\u00ed como tiene muchos beneficios tambi\u00e9n nos encontramos con diferentes riesgos a los que la educaci\u00f3n est\u00e1 expuesta con su uso. \nSesgos y discriminaci\u00f3n: Al solo recoger informaci\u00f3n de las bases de datos y textos que procesa de Internet corre el riesgo de aprender cualquier sesgo cognitivo que se encuentre en dicha informaci\u00f3n.\nLa no privacidad de los datos: El riesgo de un ciberataque se incrementa cuando no hay protocolos de seguridad adecuados en el manejo de la IA.[96]\u200b\nDependencia: Los estudiantes corren el riesgo de volverse dependientes de la tecnolog\u00eda y no se fomenta la creatividad ni el pensamiento propio.[97]\u200b\nConfiabilidad: La IA puede generar respuestas coherentes pero inexactas adem\u00e1s muchas IA no brindan fuentes de informaci\u00f3n.\nFalta de habilidades orales y escritas.[98]\u200b\nDesinter\u00e9s por la investigaci\u00f3n por cuenta propia.[99]\u200b\nDependencia por parte del docente: Los docentes pueden generar dependencia a estas herramientas al momento de dar retroalimentaci\u00f3n a las asignaciones adem\u00e1s del riesgo de usar la informaci\u00f3n de las IA para su material did\u00e1ctico sin antes consultar las fuentes.[100]\u200b"}, {"name": "Consideraci\u00f3n de Diversidad e Inclusi\u00f3n", "text": "Se debe prestar especial atenci\u00f3n a la diversidad de estudiantes y garantizar que la IA sea accesible y beneficiosa para todos, independientemente de su origen \u00e9tnico, g\u00e9nero, discapacidad u orientaci\u00f3n sexual. Las soluciones de IA deben ser dise\u00f1adas teniendo en cuenta la accesibilidad y la inclusi\u00f3n.\nEsta normativa se basa en investigaciones acad\u00e9micas, recomendaciones de organizaciones educativas y en las mejores pr\u00e1cticas establecidas en el uso de la IA en la educaci\u00f3n. Se alienta a las instituciones a mantenerse al d\u00eda con la literatura cient\u00edfica y las directrices relevantes.\nAunque la IA puede ser una herramienta poderosa en el aula, no debe reemplazar la creatividad, la originalidad y el juicio humano en el proceso educativo. La IA debe ser utilizada de manera complementaria para enriquecer la experiencia educativa.\nEsta normativa se presenta como un marco general que deber\u00e1 ser adaptado y ampliado por las instituciones educativas de acuerdo a sus necesidades y contextos espec\u00edficos. Debe ser comunicada de manera efectiva a todos los involucrados en el proceso educativo y revisada peri\u00f3dicamente para asegurar su vigencia.\nEsta normativa tiene como objetivo garantizar que la IA sea utilizada de manera \u00e9tica y responsable en el aula, promoviendo el beneficio de los estudiantes y el avance de la educaci\u00f3n. Su cumplimiento es esencial para lograr una implementaci\u00f3n exitosa de la IA en el entorno educativo."}]}, {"name": "Aprendizaje automatizado y aprendizaje profundo", "text": "Art\u00edculos principales:\n y \nEn cuanto a la naturaleza del aprendizaje, la IA puede subdividirse en dos campos conceptualmente distintos:\nEl aprendizaje autom\u00e1tico, que se enfoca en desarrollar algoritmos de regresi\u00f3n, \u00e1rboles de decisi\u00f3n y modelos que puedan aprender de datos existentes y realizar predicciones o decisiones basadas en esos datos. En el aprendizaje autom\u00e1tico, se utilizan t\u00e9cnicas de estad\u00edstica matem\u00e1tica para encontrar patrones y relaciones en los datos y, a partir de ellos, desarrollar modelos que puedan hacer predicciones sobre nuevos datos.\nEl aprendizaje profundo, que se centra en la creaci\u00f3n de redes neuronales artificiales capaces de aprender y realizar tareas de manera similar a como lo hacen los seres humanos. En el aprendizaje profundo, se utilizan capas de neuronas artificiales para procesar los datos de entrada y aprender a trav\u00e9s de un proceso iterativo de ajuste de los pesos de las conexiones entre neuronas. Este tipo de aprendizaje es capaz de procesar y analizar grandes cantidades de datos de manera m\u00e1s eficiente y precisa que el primero, especialmente cuando se trata de datos no estructurados, como im\u00e1genes, texto y audio. Adem\u00e1s, tiene la capacidad de identificar patrones y caracter\u00edsticas m\u00e1s complejas en los datos, lo que puede llevar a mejores resultados en aplicaciones como el reconocimiento de voz, la visi\u00f3n por computadora y el procesamiento del lenguaje natural.", "subsections": []}, {"name": "Propiedad intelectual de la inteligencia artificial", "text": "Al hablar acerca de la propiedad intelectual atribuida a creaciones de la inteligencia artificial, se forma un debate fuerte alrededor de si una m\u00e1quina puede tener derechos de autor. Seg\u00fan la Organizaci\u00f3n Mundial de la Propiedad Intelectual (OMPI), cualquier creaci\u00f3n de la mente puede ser parte de la propiedad intelectual, pero no especifica si la mente debe ser humana o puede ser una m\u00e1quina, dejando la creatividad artificial en la incertidumbre.\nAlrededor del mundo han comenzado a surgir distintas legislaciones con el fin de manejar la inteligencia artificial, tanto su uso como creaci\u00f3n. Los legisladores y miembros del gobierno han comenzado a pensar acerca de esta tecnolog\u00eda, enfatizando el riesgo y los desaf\u00edos complejos de esta. Observando el trabajo creado por una m\u00e1quina, las leyes cuestionan la posibilidad de otorgarle propiedad intelectual a una m\u00e1quina, abriendo una discusi\u00f3n respecto a la legislaci\u00f3n relacionada con IA.\nEl 5 de febrero de 2020, la Oficina del Derecho de Autor de los Estados Unidos y la OMPI asistieron a un simposio donde observaron de manera profunda c\u00f3mo la comunidad creativa utiliza la inteligencia artificial (IA) para crear trabajo original. Se discutieron las relaciones entre la inteligencia artificial y el derecho de autor, qu\u00e9 nivel de involucramiento es suficiente para que el trabajo resultante sea v\u00e1lido para protecci\u00f3n de derechos de autor; los desaf\u00edos y consideraciones de usar inputs con derechos de autor para entrenar una m\u00e1quina; y el futuro de la inteligencia artificial y sus pol\u00edticas de derecho de autor.[101]\u200b[102]\u200b\nEl director general de la OMPI, Francis Gurry, present\u00f3 su preocupaci\u00f3n ante la falta de atenci\u00f3n que hay frente a los derechos de propiedad intelectual, pues la gente suele dirigir su inter\u00e9s hacia temas de ciberseguridad, privacidad e integridad de datos al hablar de la inteligencia artificial. As\u00ed mismo, Gurry cuestion\u00f3 si el crecimiento y la sostenibilidad de la tecnolog\u00eda IA nos guiar\u00eda a desarrollar dos sistemas para manejar derechos de autor- uno para creaciones humanas y otro para creaciones de m\u00e1quinas.[103]\u200b\nA\u00fan hay una falta de claridad en el entendimiento alrededor de la inteligencia artificial. Los desarrollos tecnol\u00f3gicos avanzan a paso r\u00e1pido, aumentando su complejidad en pol\u00edticas, legalidades y problemas \u00e9ticos que se merecen la atenci\u00f3n global. Antes de encontrar una manera de trabajar con los derechos de autor, es necesario entenderlo correctamente, pues a\u00fan no se sabe c\u00f3mo juzgar la originalidad de un trabajo que nace de una composici\u00f3n de una serie de fragmentos de otros trabajos.\nLa asignaci\u00f3n de derechos de autor alrededor de la inteligencia artificial a\u00fan no ha sido regulada por la falta de conocimientos y definiciones. A\u00fan hay incertidumbre sobre si, y hasta qu\u00e9 punto, la inteligencia artificial es capaz de producir contenido de manera aut\u00f3noma y sin ning\u00fan humano involucrado, algo que podr\u00eda influenciar si sus resultados pueden ser protegidos por derechos de autor.\nEl sistema general de derechos de autor a\u00fan debe adaptarse al contexto digital de inteligencia artificial, pues est\u00e1n centrados en la creatividad humana. Los derechos de autor no est\u00e1n dise\u00f1ados para manejar cualquier problema en las pol\u00edticas relacionado con la creaci\u00f3n y el uso de propiedad intelectual, y puede llegar a ser da\u00f1ino estirar excesivamente los derechos de autor para resolver problemas perif\u00e9ricos, dado que:\n\u00abUsar los derechos de autor para gobernar la inteligencia artificial es poco inteligente y contradictorio con la funci\u00f3n primordial de los derechos de autor de ofrecer un espacio habilitado para que la creatividad florezca\u00bb.[104]\u200b\nLa conversaci\u00f3n acerca de la propiedad intelectual tendr\u00e1 que continuar hasta asegurarse de que la innovaci\u00f3n sea protegida, pero tambi\u00e9n tenga espacio para florecer.", "subsections": []}, {"name": "En la cultura popular", "text": "", "subsections": [{"name": "En la literatura", "text": "A continuaci\u00f3n se incluye alguna obra que tiene como motivo central la inteligencia artificial.\nYo, Robot (1950), de Isaac Asimov: novela que consta de nueve historias ambientas entre los a\u00f1os de 1940 y 1950, cada uno cuenta con personajes distintos pero que siguen la misma tem\u00e1tica a trav\u00e9s del seguimiento de las Tres Leyes de la Rob\u00f3tica, en donde se plantea tanto su cumplimiento como la creaci\u00f3n de problemas alternos que los mismos robots generan y de esta manera demostrar que la tecnolog\u00eda siempre puede estar un paso adelante del pensamiento y l\u00f3gica humana. Tambi\u00e9n sigue el hilo argumentativo a trav\u00e9s de una entrevista con una psic\u00f3loga de robots la cual va relatando el surgimiento de los robots y suponiendo c\u00f3mo ser\u00e1 el desenvolvimiento del ser humano en un mundo en donde la tecnolog\u00eda se est\u00e9 superando cada vez m\u00e1s.[1]\nEl primer libro (2013), de Antonio Palacios Rojo: una novela dialogada que satiriza el uso de la IA en la creaci\u00f3n art\u00edstica unos diez a\u00f1os antes de la irrupci\u00f3n de estas herramientas inteligentes.[105]\u200b"}, {"name": "En el cine", "text": "V\u00e9ase tambi\u00e9n:\nLa IA est\u00e1 cada vez m\u00e1s presente en la sociedad, la evoluci\u00f3n de la tecnolog\u00eda es una realidad y con ello, la producci\u00f3n de pel\u00edculas sobre esta tem\u00e1tica. Cabe destacar, que lleva habiendo piezas audiovisuales sobre inteligencia artificial desde hace mucho tiempo, ya sea incluyendo personajes o mostrando un trasfondo moral y \u00e9tico. A continuaci\u00f3n, se muestra una lista de algunas de las principales pel\u00edculas que tratan este tema:\nThe Terminator (1984): En esta pel\u00edcula el argumento se basa en el desarrollo de un microchip capaz de dotar de inteligencia artificial a robots que luego se rebelan contra la humanidad. Se trata de una de las pel\u00edculas m\u00e1s populares sobre una hipot\u00e9tica guerra entre humanos y robots inteligentes capaces de crearse a s\u00ed mismos.\nMatrix (1999): En esta pel\u00edcula Keanu Reeves interpreta a Thomas Anderson / Neo, un programador de d\u00eda y hacker de noche que trata de desentra\u00f1ar la verdad oculta tras una simulaci\u00f3n conocida como \u00abMatrix\u00bb. Esta realidad simulada es producto de programas de inteligencia artificial que terminan esclavizando a la humanidad y utilizando sus cuerpos como fuente de energ\u00eda.\nInteligencia artificial (2001): Un trabajador de Cybertronics Manufacturing adopta a David de forma moment\u00e1nea para, as\u00ed, estudiar su comportamiento. Tanto \u00e9l como su esposa acaban por tratar al ni\u00f1o artificial como a su propio hijo biol\u00f3gico. A pesar del cari\u00f1o que le profesan, David siente la necesidad de escapar de su hogar e iniciar un viaje que le ayude a descubrir a qui\u00e9n pertenece realmente. Ante sus perplejos ojos, se abrir\u00e1 un nuevo mundo oscuro, injusto, violento, insensible... Algo que le resultar\u00e1 dif\u00edcil aceptar. Se pregunta cosas como: \u00bfc\u00f3mo es posible que sienta algo tan real como el amor y que \u00e9l sea artificial? y fue nominado al Premio Oscar.\nMinority Report (2002): La pel\u00edcula sobre IA de Steven Spielberg, Minority Report, sigue a John (Tom Cruise), un agente de la ley, que es acusado de un asesinato que cometer\u00e1 en el futuro. En esta pel\u00edcula de principios de los a\u00f1os 2000, el protagonista utiliza una tecnolog\u00eda del futuro que permite a la polic\u00eda atrapar a los criminales antes de que hayan cometido un delito. En Minority Report, la IA se representa a trav\u00e9s de los Precogs, los gemelos que poseen habilidades ps\u00edquicas. Los Precogs ven los asesinatos antes de que se produzcan, lo que permite a las fuerzas del orden perseguir el crimen antes de que se cometa. En lugar de los robots f\u00edsicos de IA tipo cyborg, aqu\u00ed explora la IA mediante el uso de seres humanos.\nYo, robot (2004): Esta pel\u00edcula de ciencia ficci\u00f3n protagonizada por Will Smith est\u00e1 ambientada en 2035, en una sociedad donde los humanos viven en perfecta armon\u00eda con robots inteligentes en los que conf\u00edan para todo. Los problemas emergen a la superficie cuando un error en la programaci\u00f3n de un superordenador llamado VIKI le lleva a creer que los robots deben tomar las riendas para proteger a la humanidad de s\u00ed misma.\nHer (2013): Esta pel\u00edcula de Spike Jonze relata la historia de un escritor de cartas quien est\u00e1 solo y a punto de divorciarse. Este personaje lo represent\u00f3 el galardonado Joaquin Phoenix. Este hombre compr\u00f3 un sistema operativo con inteligencia artificial para utilizarlo a fin de complacer a todos los usuarios y adaptarse a sus necesidades. Sin embargo, el resultado es que desarrolla un sentimiento rom\u00e1ntico con Samantha. Quien es la voz femenina del sistema operativo.\nAvengers: Era de Ultr\u00f3n (2015): En esta segunda entrega de las pel\u00edculas de Avengers, dirigidas por Joseph Hill Whedon y basadas en los c\u00f3mics escritos por Stan Lee, se demuestra como es que la inteligencia artificial albergada dentro del cetro de Loki, la cual se ten\u00eda como objetivo el convertirla en una protecci\u00f3n para la Tierra y recibi\u00f3 por nombre Ultr\u00f3n, al ser conectada con JARVIS, la IA desarrollada por Stark, pudo obtener la suficiente informaci\u00f3n para comenzar a pensar de manera independiente y ser capaz de ir actualizando tanto su sistema como su cuerpo logrando controlar un ej\u00e9rcito de robots con el objetivo de destruir a la humanidad y as\u00ed ser lo \u00fanico que quedara en la Tierra para, posteriormente, dominarla y controlarla.[2]\nEx Machina (2015): En la interpretaci\u00f3n de Alicia Vikander, incre\u00edblemente editada, como Ava, encontramos un probable robot a prueba de Turing escondido en la mansi\u00f3n de un genio, Nathan, un poco loco. Y es que, hablamos de una creaci\u00f3n extra\u00f1a que se siente totalmente real y a la vez inhumana. Est\u00e1 considerada como una de las mejores pel\u00edculas que tratan la inteligencia artificial. Esto se debe principalmente a que parece cubrir todo el concepto IA integrado en una pel\u00edcula: el protagonista es un sustituto del ser humano y nos adentra en multitud de argumentos morales que rodean a esta, al tiempo que vemos un arco narrativo de thriller que, desde luego, acaba enganch\u00e1ndonos. Desde luego aqu\u00ed la representaci\u00f3n del personaje de la IA no es blanco o negro. Ava no es buena, pero tampoco es del todo mala. Y en esto, el p\u00fablico se queda reflexionando sobre cuestiones profundas sobre la naturaleza de la IA."}]}, {"name": "V\u00e9ase tambi\u00e9n", "text": "AI box\nAlucinaci\u00f3n (inteligencia artificial)\nAprendizaje\nAprendizaje autom\u00e1tico\nAutomatizaci\u00f3n de los procesos de negocio\nBot conversacional\nCerebro artificial\nCibern\u00e9tica\nComputaci\u00f3n basada en humanos\nDin\u00e1mica de sistemas\nELIZA\nFilosof\u00eda de la inteligencia artificial\nIndustria de la inteligencia artificial en China\nInteligencia artificial fuerte\nInteligencia computacional\nInteligencia sint\u00e9tica\nArtificial Intelligence (\u00e1lbum)\nArtificial Intelligence (serie)\nInternet\nInternet en la ciencia ficci\u00f3n\nInterfaces de usuario\nLLM (modelo grande de lenguaje)\nRazonamiento automatizado\nRed neuronal artificial\nRegulaci\u00f3n de la inteligencia artificial\nRiesgo existencial de la inteligencia artificial\nWilliam Ross Ashby\nSeguridad de la inteligencia artificial\nSingularidad tecnol\u00f3gica\nSistema complejo\nSistema din\u00e1mico\nSistema inteligente\nVisi\u00f3n artificial\nRed neuronal residual\nConfabulaci\u00f3n (redes neuronales)\nAprendizaje por conjuntos\nU-Net", "subsections": []}, {"name": "Referencias", "text": "\u2191 \u00ab\u00bfQu\u00e9 es la inteligencia artificial?\u00bb. Diccionario de inform\u00e1tica en la nube de Microsoft Azure. Consultado el 21 de abril de 2023.\u00a0\n\u2191 Real Academia Espa\u00f1ola. \u00abinteligencia artificial\u00bb. Diccionario de la lengua espa\u00f1ola (23.\u00aa edici\u00f3n).\u00a0\n\u2191 Rusell, S. J.; Norvig, P. (2004), \u00abInteligencia artificial. Un enfoque moderno\u00bb, Pearson Educaci\u00f3n (Segunda edici\u00f3n) (Madrid), ISBN\u00a0978-84-205-4003-0\u00a0.\n\u2191 Rodr\u00edguez, Txema (27 de enero de 2017). \u00abMachine Learning y Deep Learning: c\u00f3mo entender las claves del presente y futuro de la inteligencia artificial\u00bb. Xataka. Consultado el 21 de abril de 2023.\u00a0\n\u2191 Barrio, Miguel \u00c1ngel (26 de febrero de 2016). \u00abLa importancia de la \u00e9tica en la inteligencia artificial\u00bb. El Pa\u00eds. Consultado el 21 de abril de 2023.\u00a0\n\u2191 Sab\u00e1n, Antonio (8 de mayo de 2016). \u00ab\u00bfQu\u00e9 es la singularidad tecnol\u00f3gica y qu\u00e9 supondr\u00eda para el ser humano?\u00bb. Hipertextual. Consultado el 21 de abril de 2023.\u00a0\n\u2191 Thompson, Elaine (6 de septiembre de 2019). \u00ab10 ejemplos de que ya dependes de la IA en tu vida diaria\u00bb. BBVA OpenMind. Consultado el 21 de abril de 2023.\u00a0\n\u2191 , Russell y Norvig, 2009, p.\u00a02.\n\u2191 \u00abAndreas Kaplan; Michael Haenlein (2019) Siri, Siri in my Hand, who's the Fairest in the Land? On the Interpretations, Illustrations and Implications of Artificial Intelligence, Business Horizons, 62(1), 15-25\u00bb. Archivado desde el original el 21 de noviembre de 2018. Consultado el 13 de noviembre de 2018.\u00a0\n\u2191 \u00abLa Inteligencia artificial en la estrategia | McKinsey\u00bb. www.mckinsey.com. Consultado el 1 de agosto de 2023.\u00a0\n\u2191 Toews, Rob. \u00abWhat Does \u201cArtificial Intelligence\u201d Really Mean?\u00bb. Forbes. Consultado el 1 de agosto de 2023.\u00a0\n\u2191 Schank, Roger C. (1991). \u00abWhere's the AI\u00bb (PDF). AI Magazine (en ingl\u00e9s) 12 (4): 38.\u00a0\n\u2191 Kaplan, Andreas; Haenlein, Michael (2018). Siri, Siri in my Hand, who's the Fairest in the Land? On the Interpretations, Illustrations and Implications of Artificial Intelligence (PDF) (en ingl\u00e9s) 62 (1). Archivado desde el original el 21 de noviembre de 2018. Consultado el 13 de noviembre de 2018.\u00a0\n\u2191 Ferrer Abello (1986). \u00abIntroducci\u00f3n a la Inteligencia Artificial\u00bb.  En Antonio M. Ferrer Abello, ed. Inteligencia Artificial y Sistemas Expertos. Ediciones Ingelek, S.A. p.\u00a07-20. ISBN\u00a084-85831-31-4.\u00a0\n\u2191 Rouhiainen, Lasse (2018). Inteligencia Artificial 101 cosas que debes saber hoy sobre nuestro futuro. Alienta. Consultado el 2021.\u00a0\n\u2191 L\u00f3pez Takeyas, Bruno. \u00abIntroducci\u00f3n a la Inteligencia Artificial\u00bb.\u00a0\n\u2191 McCarthy, John (11 de noviembre de 2007). \u00abWhat Is Artificial Intelligence\u00bb (en ingl\u00e9s). Secci\u00f3n \u00abBasic Questions\u00bb. Consultado el 27 de octubre de 2011.\u00a0\n\u2191 Russell y Norvig, 2009.\n\u2191 Bellman, 1978.\n\u2191 Rich y Knight, 1991.\n\u2191 Winston, 1992.\n\u2191 Nilsson, 1998.\n\u2191 Castillo, Enrique; Guti\u00e9rrez, Jos\u00e9 Manuel; Hadi, Ali S. (1997). \u00abIntroducci\u00f3n\u00bb. Sistemas expertos y modelos de redes probabil\u00edsticas. Academia de Ingeniera. p.\u00a03. Consultado el 16 de noviembre de 2021.\u00a0\n\u2191 Miller Rivera, Lozano (2011). El papel de las redes bayesianas en la toma de decisiones.. Archivado desde edu.co/Administracion/documentos/investigacion/laboratorio/miller_2_3.pdf el original el 3 de octubre de 2022. Consultado el 16 de noviembre de 2021.\u00a0\n\u2191 \u00ab\u00bfQu\u00e9 es la Inteligencia Computacional?\u00bb.\u00a0\n\u2191 \u00abWatson y otros sistemas que mejoran nuestras vidas con inteligencia artificial\u00bb. Pinggers. Archivado desde el original el 8 de marzo de 2011. Consultado el 21 de febrero de 2011.\u00a0\n\u2191 Salas, Javier (28 de enero de 2016). \u00abLa inteligencia artificial conquista el \u00faltimo tablero de los humanos\u00bb. El Pa\u00eds.\u00a0\n\u2191 Ortega, Andr\u00e9s (27 de octubre de 2016). \u00abObama y la Inteligencia Artificial\u00bb. p.\u00a0elDiario.es. Consultado el 9 de junio de 2021.\u00a0\n\u2191 \u00abAlpha Go\u00bb.\u00a0\n\u2191 Rodr\u00edguez, Roberto (14 de diciembre de 2017). \u00abAlpha Zero, el programa que revoluciona el ajedrez y puede cambiar el mundo\u00bb. La Vanguardia. Consultado el 21 de mayo de 2021.\u00a0\n\u2191 Nast, Cond\u00e9 (23 de marzo de 2024). \u00abAs\u00ed es como ocho empleados de Google inventaron la inteligencia artificial moderna\u00bb. WIRED. Consultado el 8 de mayo de 2024.\u00a0\n\u2191 \u00abAI ThinQ: La plataforma de inteligencia artificial de LG llega a todos sus televisores\u00bb. El Financiero. Consultado el 23 de septiembre de 2021.\u00a0\n\u2191 Berryhill, Heang, Clogher, McBride, Asociaci\u00f3n M\u00e9xicana de Internet (2020). \u00abHola, mundo: La inteligencia artificial y su uso en el sector p\u00fablico.\u00bb. DOCUMENTOS DE TRABAJO DE LA OCDE SOBRE GOBERNANZA P\u00daBLICA. Consultado el 9 de junio de 2021.\u00a0\n\u2191 \u00abChatGPT: Hacia un cambio de paradigma\u00bb. ELMUNDO. 25 de febrero de 2023. Consultado el 3 de junio de 2023.\u00a0\n\u2191 Hu, Krystal (2 de febrero de 2023). \u00abChatGPT sets record for fastest-growing user base - analyst note\u00bb. Reuters (en ingl\u00e9s). Consultado el 3 de junio de 2023.\u00a0\n\u2191 Weise, Karen (1 de mayo de 2023). \u00abWhen A.I. Chatbots Hallucinate\u00bb. The New York Times (en ingl\u00e9s estadounidense). ISSN\u00a00362-4331. Consultado el 3 de junio de 2023.\u00a0\n\u2191 VerificaRTVE, Lara Huwyler / Mar\u00eda Navarro / (28 de marzo de 2023). \u00ab\u00bfC\u00f3mo detectar im\u00e1genes generadas por Inteligencia Artificial?\u00bb. RTVE.es. Consultado el 1 de junio de 2023.\u00a0\n\u2191 Jaramillo Arango, Diego Alejandro; Montenegro, Diego Ignacio (17 de diciembre de 2019). \u00abDe la Inteligencia Artificial al juego de los dioses\u00bb. ComHumanitas: revista cient\u00edfica de comunicaci\u00f3n 10 (3): 85-106. ISSN\u00a01390-776X. doi:10.31207/rch.v10i3.210. Consultado el 3 de octubre de 2022.\u00a0\n\u2191 Asimov, Isaac (1989). \u00abC\u00edrculo vicioso\u00bb. Los robots. trad. Domingo Santos. Barcelona: Mart\u00ednez Roca. ISBN\u00a084-270-0906-2.\u00a0\n\u2191 \u00abRiesgos de la inteligencia artificial\u00bb. El Mundo. Consultado el 21 de mayo de 2021.\u00a0\n\u2191 Santos, Josilene C.; Wong, Jeannie Hsiu Ding; Pallath, Vinod; Ng, Kwan Hoong (20 de julio de 2021). \u00abThe perceptions of medical physicists towards relevance and impact of artificial intelligence\u00bb. Physical and Engineering Sciences in Medicine (en ingl\u00e9s). ISSN\u00a02662-4737. doi:10.1007/s13246-021-01036-9. Consultado el 21 de julio de 2021.\u00a0\n\u2191 \u00abArtificial Intelligence and Robotics\u00bb. UNICRI. Consultado el 8 de agosto de 2020.\u00a0\n\u2191 Barrio Andres, Moises (23 de junio de 2021). \u00abTowards legal regulation of artificial intelligence\u00bb. REVISTA IUS (en ingl\u00e9s) 15 (48). ISSN\u00a01870-2147. doi:10.35487/rius.v15i48.2021.661. Consultado el 30 de agosto de 2021.\u00a0\n\u2191 Castillo, del, Carlos (29 de marzo de 2023). \u00abCientos de expertos piden parar la \u201cpeligrosa carrera\u201d de la inteligencia artificial hasta alcanzar un pacto global\u00bb. eldiario.es. Consultado el 1 de junio de 2023.\u00a0\n\u2191 \u00abStatement on AI Risk\u00bb (en ingl\u00e9s). Center for ai Safety (CAIS). Consultado el 1 de junio de 2023.\u00a0\n\u2191 Castillo, del, Carlos (30 de mayo de 2023). \u00abDesarrolladores y acad\u00e9micos avisan de que la inteligencia artificial representa un riesgo como el de la bomba nuclear\u00bb. eldiario.es. Consultado el 1 de junio de 2023.\u00a0\n\u2191 Resoluci\u00f3n de problemas, resoluci\u00f3n de acertijos, juego y deducci\u00f3n:Russell y Norvig, 2003, c. 3\u20139,Poole, Mackworth y Goebel, 1998, c. 2,3,7,9,Luger y Stubblefield, 2004, c. 3,4,6,8,Nilsson, 1998, c. 7\u201312\n\u2191 Razonamiento incierto:Russell y Norvig, 2003, pp.\u00a0452\u2013644,Poole, Mackworth y Goebel, 1998, pp.\u00a0345\u2013395,Luger y Stubblefield, 2004, pp.\u00a0333\u2013381,Nilsson, 1998, c. 19\n\u2191 Intratabilidad y eficiencia y la explosi\u00f3n combinatoria:Russell y Norvig, 2003, pp.\u00a09, 21\u201322\n\u2191 Evidencia psicol\u00f3gica del razonamiento sub-simb\u00f3lico:Wason\u00a0y Shapiro (1966),Kahneman, Slovic y Tversky (1982),Lakoff\u00a0y N\u00fa\u00f1ez (2000)\n\u2191 Representaci\u00f3n del conocimiento:ACM, 1998, I.2.4,Russell y Norvig, 2003, pp.\u00a0320\u2013363,Poole, Mackworth y Goebel, 1998, pp.\u00a023\u201346, 69\u201381, 169\u2013196, 235\u2013277, 281\u2013298, 319\u2013345,Luger y Stubblefield, 2004, pp.\u00a0227\u2013243,Nilsson, 1998, c. 18\n\u2191 Ingenier\u00eda del conocimiento: * Russell y Norvig, 2003, pp.\u00a0260\u2013266,Poole, Mackworth y Goebel, 1998, pp.\u00a0199\u2013233,Nilsson, 1998, c. 17.1\u201317.4\n\u2191 Representaci\u00f3n de categor\u00edas y relaciones:Russell y Norvig, 2003, pp.\u00a0349\u2013354,Poole, Mackworth y Goebel, 1998, pp.\u00a0174\u2013177,Luger y Stubblefield, 2004, pp.\u00a0248\u2013258,Nilsson, 1998, c. 18.3\n\u2191 Representaci\u00f3n de eventos y el tiempo:Russell y Norvig, 2003, pp.\u00a0328\u2013341,Poole, Mackworth y Goebel, 1998, pp.\u00a0281\u2013298,Nilsson, 1998, c. 18.2\n\u2191 Poole, Mackworth y Goebel, 1998, pp.\u00a0335\u2013337\n\u2191 Russell y Norvig, 2003, pp.\u00a0341\u2013344,Poole, Mackworth y Goebel, 1998, pp.\u00a0275\u2013277\n\u2191 Planificaci\u00f3n autom\u00e1tica:ACM, 1998, ~I.2.8,Russell y Norvig, 2003, pp.\u00a0375\u2013459,Poole, Mackworth y Goebel, 1998, pp.\u00a0281\u2013316,Luger y Stubblefield, 2004, pp.\u00a0314\u2013329,Nilsson, 1998, c. 10.1\u20132, 22\n\u2191 Russell y Norvig, 2003, pp.\u00a0600\u2013604\n\u2191 Planificaci\u00f3n cl\u00e1sica: * Russell y Norvig, 2003, pp.\u00a0375\u2013430,Poole, Mackworth y Goebel, 1998, pp.\u00a0281\u2013315,Luger y Stubblefield, 2004, pp.\u00a0314\u2013329,Nilsson, 1998, c. 10.1\u20132, 22\n\u2191 Russell y Norvig, 2003, pp.\u00a0430\u2013449\n\u2191 Russell y Norvig, 2003, pp.\u00a0449\u2013455\n\u2191 a b Aprendizaje autom\u00e1tico:ACM, 1998, I.2.6,Russell y Norvig, 2003, pp.\u00a0649\u2013788,Poole, Mackworth y Goebel, 1998, pp.\u00a0397\u2013438,Luger y Stubblefield, 2004, pp.\u00a0385\u2013542,Nilsson, 1998, c. 3.3, 10.3, 17.5, 20\n\u2191 Jordan, M. I.; Mitchell, T. M. (16 de julio de 2015). \u00abMachine learning: Trends, perspectives, and prospects\u00bb. Science (en ingl\u00e9s) 349 (6245): 255-260. Bibcode:2015Sci...349..255J. PMID\u00a026185243. S2CID\u00a0677218. doi:10.1126/science.aaa8415.\u00a0\n\u2191 \u00abChatGPT, \u00bfes la revoluci\u00f3n que esperabamos o una amenaza?\u00bb.\u00a0\n\u2191 Procesamiento de lenguaje natural:ACM, 1998, I.2.7,Russell y Norvig, 2003, pp.\u00a0790\u2013831,Poole, Mackworth y Goebel, 1998, pp.\u00a091\u2013104,Luger y Stubblefield, 2004, pp.\u00a0591\u2013632\n\u2191 Aplicaciones del procesamiento de lenguaje natural:Russell y Norvig, 2003, pp.\u00a0840\u2013857,Luger y Stubblefield, 2004, pp.\u00a0623\u2013630\n\u2191 Cambria, Erik; White, Bebo (Mayo de 2014). \u00abJumping NLP Curves: A review of Natural Language Processing Research [Review Article]\u00bb. IEEE Computational Intelligence Magazine (en ingl\u00e9s) 9 (2): 48-57. S2CID\u00a0206451986. doi:10.1109/MCI.2014.2307227.\u00a0\n\u2191 Vincent, James (7 de noviembre de 2019). \u00abOpenAI has published the text-generating AI it said was too dangerous to share\u00bb. The Verge (en ingl\u00e9s). Archivado desde el original el 11 de junio de 2020. Consultado el 11 de junio de 2020.\u00a0\n\u2191 Percepci\u00f3n de la m\u00e1quina:Russell y Norvig, 2003, pp.\u00a0537\u2013581, 863\u2013898,Nilsson, 1998, ~c. 6\n\u2191 Reconocimiento de voz: * ACM, 1998, ~I.2.7 * Russell y Norvig, 2003, pp.\u00a0568\u2013578\n\u2191 Russell y Norvig, 2003, pp.\u00a0885\u2013892\n\u2191 Visi\u00f3n computacional:ACM, 1998, I.2.10,Russell y Norvig, 2003, pp.\u00a0863\u2013898,Nilsson, 1998, c. 6\n\u2191 Aguilar, Iv\u00e1n Fernando M\u00e9rida (12 de enero de 2024). \u00abInteligencia Artificial y poder internacional\u00bb. Meer. Consultado el 9 de abril de 2024.\u00a0\n\u2191 Fern\u00e1ndez, Y\u00fabal (27 de octubre de 2017). \u00abSophia pasa de bromear con acabar con los humanos a convertirse en el primer robot ciudadano de Arabia Saud\u00ed\u00bb. Xataka. Consultado el 22 de abril de 2023.\u00a0\n\u2191 Jim\u00e9nez de Luis, \u00c1ngel (28 de julio de 2017). \u00abFacebook apaga una inteligencia artificial que hab\u00eda inventado su propio idioma\u00bb. El Mundo. Consultado el 22 de abril de 2023.\u00a0\n\u2191 Scaliter, Juan (17 de marzo de 2022). \u00abLo que (de verdad) pas\u00f3 con los dos robots que Facebook desconect\u00f3 por \u201cinventarse un idioma\u201d\u00bb. La Raz\u00f3n (Espa\u00f1a). Consultado el 22 de abril de 2023.\u00a0\n\u2191 Nast, Cond\u00e9 (10 de enero de 2022). \u00abEl robot humanoide m\u00e1s avanzado del mundo es superrealista y se llama Ameca\u00bb. GQ Espa\u00f1a. Consultado el 6 de febrero de 2024.\u00a0\n\u2191 \u00abRobots humanos m\u00e1s avanzados y famosos | IFEMA MADRID\u00bb. www.ifema.es. Consultado el 6 de febrero de 2024.\u00a0\n\u2191 Marcos, Esteban Garc\u00eda (21 de octubre de 2023). \u00abAmeca, el robot humanoide m\u00e1s avanzado del mundo asegura poder hacer algo muy humano\u00bb. Andro4all. Consultado el 6 de febrero de 2024.\u00a0\n\u2191 Viejo, Manuel (20 de septiembre de 2023). \u00abSiete nuevas v\u00edctimas en Almendralejo en 24 horas: lo que se sabe por el momento del caso de los desnudos con IA\u00bb. El Pa\u00eds. Consultado el 20 de septiembre de 2023.\u00a0\n\u2191 Sadin, \u00c9ric (2021). La inteligencia artificial o el desaf\u00edo del siglo\u00a0: anatom\u00eda de un antihumanismo radical (1\u00aa ed., 1\u00aa reimp edici\u00f3n). Caja Negra. ISBN\u00a0978-987-1622-86-3. OCLC\u00a01193413308. Consultado el 3 de octubre de 2022.\u00a0\n\u2191 Salichs, Miguel A.; Malfaz, Mar\u00eda; Gorostiza, Javi F. (1 de octubre de 2010). \u00abToma de Decisiones en Rob\u00f3tica\u00bb. Revista Iberoamericana de Autom\u00e1tica e Inform\u00e1tica Industrial RIAI 7 (4): 5-16. doi:10.1016/S1697-7912(10)70055-8. Consultado el 21 de marzo de 2016.\u00a0\n\u2191 osmany-yildirim, Osman (26 de marzo de 2020). \u00abThe Effect of Artificial Intelligence on Society\u00bb. Artificial Intelligence (en ingl\u00e9s brit\u00e1nico). Consultado el 26 de marzo de 2020.\u00a0\n\u2191 Cellan-Jones, Rory (20 de octubre de 2016). \u00abStephen Hawking - will AI kill or save?\u00bb. BBC News (en ingl\u00e9s brit\u00e1nico). Consultado el 28 de octubre de 2018.\u00a0\n\u2191 \nOficina de Contabilidad General de E.E.U.U. (13 de septiembre de 2022), Consumer Data: Increasing Use Poses Risks to Privacy\u00a0.\n\u2191 Valinsky, 2019, p.\u00a01.\n\u2191 Russell y Norvig, 2021, p.\u00a0991.\n\u2191 Russell y Norvig, 2021, pp.\u00a0991-992.\n\u2191 Christian, 2020, p.\u00a063.\n\u2191 Vincent, 2022.\n\u2191 Reisner, 2023.\n\u2191 Alter y Harris, 2023.\n\u2191 \u00abStevie Wonder, Katy Perry o Raphael firman una carta contra la IA: \"Hay que parar el asalto a la creatividad humana\"\u00bb. Caretas. 3 de abril de 2024. Consultado el 4 de abril de 2024.\u00a0\n\u2191 J\u00e1uregui, Melissa Guerra (12 de febrero de 2024). \u00abPrincipios \u00e9ticos de la educaci\u00f3n con Inteligencia Artificial (IA)\u00bb. Observatorio / Instituto para el Futuro de la Educaci\u00f3n. Consultado el 8 de marzo de 2024.\u00a0\n\u2191 \u00abPDF.js viewer\u00bb. unesdoc.unesco.org. Consultado el 7 de marzo de 2024.\u00a0\n\u2191 Lozada, Roberto Fernando Lozada; Aguayo, Estefany Maria Lopez; Suquilanda, Mariana de Jesus Espinoza; Pico, Narcisa de Jesus Arias; V\u00e9lez, Grace Edith Quille (15 de noviembre de 2023). \u00abLos Riesgos de la Inteligencia Artificial en la Educaci\u00f3n\u00bb. Ciencia Latina Revista Cient\u00edfica Multidisciplinar 7 (5): 7219-7234. ISSN\u00a02707-2215. doi:10.37811/cl_rcm.v7i5.8301. Consultado el 8 de marzo de 2024.\u00a0\n\u2191 \u00abLos Desaf\u00edos y Riesgos de la Inteligencia Artificial en el \u00c1mbito Educativo: \u00bfEs la IA un Peligro para los Estudiantes?\u00bb. es.linkedin.com. Consultado el 8 de marzo de 2024.\u00a0\n\u2191 \u00ab20 Peligros que la IA \u2013 ChatGPT representa para la educaci\u00f3n.\u00bb. es.linkedin.com. Consultado el 8 de marzo de 2024.\u00a0\n\u2191 \u00ab20 Peligros que la IA \u2013 ChatGPT representa para la educaci\u00f3n.\u00bb. es.linkedin.com. Consultado el 8 de marzo de 2024.\u00a0\n\u2191 \u00ab20 Peligros que la IA \u2013 ChatGPT representa para la educaci\u00f3n.\u00bb. es.linkedin.com. Consultado el 8 de marzo de 2024.\u00a0\n\u2191 \u00abCopyright in the Age of Artificial Intelligence | U.S. Copyright Office\u00bb. www.copyright.gov. Consultado el 22 de mayo de 2020.\u00a0\n\u2191 \u00ab\"expertos en inteligencia artificial en Espa\u00f1a\"\u00bb. cronicaglobal.elespanol.com. Consultado el 22 de mayo de 2020.\u00a0\n\u2191 United States Copyright Office (5 de febrero de 2020). \u00abCopyright in the Age of Artificial Intelligence\u00bb. Library of Congress.\u00a0\n\u2191 \u00abWhy We're Advocating for a Cautious Approach to Copyright and Artificial Intelligence\u00bb. Creative Commons (en ingl\u00e9s estadounidense). 20 de febrero de 2020. Consultado el 22 de mayo de 2020.\u00a0\n\u2191 \u00abRadio a la Carta - Andaluc\u00eda es cultura\u00bb. www.canalsur.es. Consultado el 8 de septiembre de 2023.\u00a0", "subsections": []}, {"name": "Bibliograf\u00eda", "text": "Bellman, Richard (1978). An introduction to artificial intelligence: can computers think? (en ingl\u00e9s). San Francisco: Boyd & Fraser Pub. Co. ISBN\u00a0978-0878350667.\u00a0\nNilsson, Nils J. (1998). Artificial Intelligence: A New Synthesis (en ingl\u00e9s) (4.\u00aa edici\u00f3n). San Francisco: Kaufmann. ISBN\u00a0978-1558604674.\u00a0\nRich, Elaine; Knight, Kevin (1991). Artificial intelligence (en ingl\u00e9s) (2.\u00aa edici\u00f3n). New York: McGraw-Hill. ISBN\u00a0978-0070522633.\u00a0\nRussell, Stuart J.; Norvig, Peter Norvig (2009). Artificial intelligence: a modern approach (en ingl\u00e9s) (3.\u00aa edici\u00f3n). Upper Saddle River, N.J.: Prentice Hall. ISBN\u00a00-13-604259-7.\u00a0\nWinston, Patrick Henry (1992). Artificial intelligence (en ingl\u00e9s) (3.\u00aa edici\u00f3n). Reading, Mass.: Addison-Wesley Pub. Co. ISBN\u00a0978-0201533774.\u00a0\nRussell, Stuart J.; Norvig, Peter (2003), Artificial Intelligence: A Modern Approach (en ingl\u00e9s) (2\u00aa edici\u00f3n), Upper Saddle River, New Jersey: Prentice Hall, ISBN\u00a00-13-790395-2\u00a0.\nPoole, David; Mackworth, Alan; Goebel, Randy (1998). Computational Intelligence: A Logical Approach (en ingl\u00e9s). New York: Oxford University Press. ISBN\u00a0978-0-19-510270-3. Archivado desde el original el 26 de julio de 2020. Consultado el 22 de agosto de 2020.\u00a0\nLuger, George; Stubblefield, William (2004). Artificial Intelligence: Structures and Strategies for Complex Problem Solving (en ingl\u00e9s) (5\u00aa edici\u00f3n). Benjamin/Cummings. ISBN\u00a0978-0-8053-4780-7. Archivado desde el original el 26 de julio de 2020. Consultado el 17 de diciembre de 2019.\u00a0\nWason, P. C.; Shapiro, D. (1966). New horizons in psychology (en ingl\u00e9s). Harmondsworth: Penguin. Archivado desde el original el 26 de julio de 2020. Consultado el 18 de noviembre de 2019.\u00a0\nKahneman, Daniel; Slovic, D.; Tversky, Amos (1982). \u00abJudgment under uncertainty: Heuristics and biases\u00bb. Science (en ingl\u00e9s) 185 (4157) (New York: Cambridge University Press). pp.\u00a01124-1131. ISBN\u00a0978-0-521-28414-1. PMID\u00a017835457. S2CID\u00a0143452957. doi:10.1126/science.185.4157.1124.\u00a0\n\u00abACM Computing Classification System: Artificial intelligence\u00bb (en ingl\u00e9s). ACM. 1998. Archivado desde el original el 12 de octubre de 2007. Consultado el 30 de agosto de 2007.\u00a0\nLakoff, George; N\u00fa\u00f1ez, Rafael E. (2000). Where Mathematics Comes From: How the Embodied Mind Brings Mathematics into Being (en ingl\u00e9s). Basic Books. ISBN\u00a0978-0-465-03771-1.\u00a0\nSAS. (2018, 27 septiembre). Inteligencia Artificial: Qu\u00e9 es y Por Qu\u00e9 Importa. https://www.sas.com/es_mx/insights/analytics/what-is-artificial-intelligence.html\nGrupo Iberdrola. (2019, 17 junio). \u00bfSomos conscientes de los retos y principales aplicaciones de la Inteligencia Artificial? Iberdrola. https://www.iberdrola.com/innovacion/que-es-inteligencia-artificial\nOracle. (2021, 13 enero). \u00bfQu\u00e9 es la inteligencia artificial? https://www.oracle.com/mx/artificial-intelligence/what-is-ai/\nValinsky, Jordan (11 de abril de 2019), Amazon reportedly employs thousands of people to listen to your Alexa conversations\u00a0.\nRussell, Stuart J.; Norvig, Peter. (2021). Artificial Intelligence: A Modern Approach (4\u00aa edici\u00f3n). Hoboken: Pearson. ISBN\u00a0978-0134610993. LCCN\u00a020190474.\u00a0\nChristian, Brian (2020). The Alignment Problem: Machine learning and human values. W. W. Norton & Company. ISBN\u00a0978-0-393-86833-3. OCLC\u00a01233266753.\u00a0\nVincent, James (15 de noviembre de 2022). \u00abThe scary truth about AI copyright is nobody knows what will happen next\u00bb. The Verge. Archivado desde el original el 19 de junio de 2023. Consultado el 19 de junio de 2023.\u00a0\nReisner, Alex (19 de agosto de 2023), \u00abRevealed: The Authors Whose Pirated Books are Powering Generative AI\u00bb, The Atlantic\u00a0.\nAlter, Alexandra; Harris, Elizabeth A. (20 de septiembre de 2023), \u00abFranzen, Grisham and Other Prominent Authors Sue OpenAI\u00bb, The New York Times\u00a0.", "subsections": []}, {"name": "Enlaces externos", "text": " Wikilibros alberga un libro o manual sobre Ingenier\u00eda del conocimiento.\nRevista \u00abInteligencia Artificial\u00bb\nP\u00e1gina sobre inteligencia artificial\nLa econom\u00eda de la inteligencia artificial: unas ideas b\u00e1sicas\nLa inteligencia artificial y el futuro del crecimiento econ\u00f3mic", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Intersecci%C3%B3n_de_conjuntos", "title": "Intersecci\u00f3n de conjuntos", "summary": "A\nB\nA \u2229 B\nEn teor\u00eda de conjuntos, la intersecci\u00f3n de dos (o m\u00e1s) conjuntos es una operaci\u00f3n que resulta en otro conjunto que contiene los elementos comunes a los conjuntos partida. Por ejemplo, dado el conjunto de los n\u00fameros pares P y el conjunto de los cuadrados C de n\u00fameros naturales, su intersecci\u00f3n es el conjunto de los cuadrados pares.\nP\n=\n{\n2\n,\n4\n,\n6\n,\n8\n,\n10\n,\n\u2026\n}\n{\\displaystyle P=\\{2,4,6,8,10,\\ldots \\}}\nC\n=\n{\n1\n,\n4\n,\n9\n,\n16\n,\n25\n,\n\u2026\n}\n{\\displaystyle C=\\{1,4,9,16,25,\\ldots \\}}\nD\n=\n{\n4\n,\n16\n,\n36\n,\n64\n,\n\u2026\n}\n{\\displaystyle D=\\{4,16,36,64,\\ldots \\}}\nEn otras palabras: C\u00f3mo, por ejemplo, si A = { a, b, c, d, e, f} y B = { a, e, i, o, u}, entonces la intersecci\u00f3n de dichos conjuntos estar\u00e1 formada por todos los elementos que est\u00e9n a la vez en los dos conjuntos, esto es: A\u2229B = { a, e} \nLa intersecci\u00f3n de conjuntos se denota por el s\u00edmbolo \u2229 por lo que D = P \u2229 C.", "sections": [{"name": "Definici\u00f3n", "text": "Dados dos conjuntos A y B, su intersecci\u00f3n es otro subconjunto cuyos   elementos, necesariamente,   pertenecen a ambos conjunto. A = { \u03c0, c, 8, \u03b3, 5, P} y B = {\u03c9, c, 0, \u0394, 5, R}. Entonces la intersecci\u00f3n es A \u2229 B = {5, c}.\nSean los conjuntos de n\u00fameros naturales C = {n: n es una potencia de 2} y D = {n: n es un cubo}. Su intersecci\u00f3n es C \u2229 D = {n: n es una potencia de 2 y un cubo} = {n: n es una potencia de 2 cuyo exponente es m\u00faltiplo de 3} = {8, 64, 512, ...}.\nSean los conjuntos de n\u00fameros pares e impares. Su intersecci\u00f3n es el conjunto vac\u00edo \u2205, ya que no existe ning\u00fan n\u00famero natural que sea par e impar a la vez.\nCuando la intersecci\u00f3n de dos conjuntos es vac\u00eda, se dice que son disjuntos:\nDos conjuntos A y B se dicen disjuntos si su intersecci\u00f3n es el conjunto vac\u00edo:\nA\n\u2229\nB\n=\n\u2205\n{\\displaystyle A\\cap B=\\varnothing }", "subsections": [{"name": "Generalizaciones", "text": "La intersecci\u00f3n de un n\u00famero finito de conjuntos, superior a dos, se define teniendo en cuenta que, debido a la propiedad asociativa (m\u00e1s abajo), el orden en el que se intersequen los conjuntos es irrelevante:\nA\n1\n\u2229\nA\n2\n\u2229\n\u2026\n\u2229\nA\nn\n=\nA\n1\n\u2229\n(\nA\n2\n\u2229\n(\n\u2026\n(\nA\nn\n\u2212\n1\n\u2229\nA\nn\n)\n\u2026\n)\n{\\displaystyle A_{1}\\cap A_{2}\\cap \\ldots \\cap A_{n}=A_{1}\\cap (A_{2}\\cap (\\ldots (A_{n-1}\\cap A_{n}){\\scriptstyle \\ldots })}\nLa definici\u00f3n m\u00e1s general en teor\u00eda de conjuntos se refiere a una familia de conjuntos, un conjunto cuyos elementos son conjuntos a su vez:\nSea M una familia de conjuntos. Su intersecci\u00f3n \u2229M se define como:\nx\n\u2208\n\u22c2\nM\n\u00a0si para cada\u00a0\nA\n\u2208\nM\n\u00a0se tiene que\u00a0\nx\n\u2208\nA\n{\\displaystyle x\\in \\bigcap M{\\text{ si para cada }}A\\in M{\\text{ se tiene que }}x\\in A}\nDe este modo, la intersecci\u00f3n de un n\u00famero finito de conjuntos es s\u00f3lo un caso particular de esta definici\u00f3n general:\nA \u2229 B = \u2229M\nM = {A, B}\nA1 \u2229 ... \u2229 An = \u2229M\nM = {A1, ..., An}\nLa intersecci\u00f3n general de conjuntos se denota de diversas maneras:v\n\u22c2\nM\n=\n\u22c2\nA\n\u2208\nM\nA\n=\n\u22c2\ni\n\u2208\nI\nA\ni\n\u00a0,\n{\\displaystyle \\bigcap M=\\bigcap _{A\\in M}A=\\bigcap _{i\\in I}A_{i}{\\text{ ,}}}\ndonde esta \u00faltima se aplica en el caso de que utilicemos un conjunto \u00edndice, definiendo M como {Ai: i \u2208 I}."}]}, {"name": "Propiedades", "text": "Art\u00edculo principal:\nDe la definici\u00f3n de intersecci\u00f3n puede deducirse directamente:\nIdempotencia. La intersecci\u00f3n de un conjunto A consigo mismo es el propio A\u00a0:\nA\n\u2229\nA\n=\nA\n{\\displaystyle A\\cap A=A}\nLa intersecci\u00f3n de A y B es un subconjunto de ambos:\nA\n\u2229\nB\n\u2286\nA\n,\nB\n{\\displaystyle A\\cap B\\subseteq A,B}\nLa intersecci\u00f3n de un conjunto B con un conjunto A que lo contenga, deja a B inalterado:\nB\n\u2286\nA\n\u2192\nA\n\u2229\nB\n=\nB\n{\\displaystyle B\\subseteq A\\rightarrow A\\cap B=B}\nLa intersecci\u00f3n de conjuntos poseen tambi\u00e9n propiedades similares a las operaciones con n\u00fameros:\nPropiedad asociativa. La intersecci\u00f3n de los conjuntos A y B \u2229 C es igual a la intersecci\u00f3n de los conjuntos A \u2229 B y C\u00a0:\n(\nA\n\u2229\nB\n)\n\u2229\nC\n=\nA\n\u2229\n(\nB\n\u2229\nC\n)\n{\\displaystyle (A\\cap B)\\cap C=A\\cap (B\\cap C)}\nPropiedad conmutativa. La intersecci\u00f3n de los conjuntos A y B es igual a la intersecci\u00f3n de los conjuntos B y A\u00a0:\nA\n\u2229\nB\n=\nB\n\u2229\nA\n{\\displaystyle A\\cap B=B\\cap A}\nElemento absorbente. La intersecci\u00f3n de un conjunto A con el conjunto vac\u00edo \u2205 es \u2205:\nA\n\u2229\n\u2205\n=\n\u2205\n{\\displaystyle A\\cap \\varnothing =\\varnothing }\nTodas estas propiedades se deducen de propiedades an\u00e1logas para la conjunci\u00f3n l\u00f3gica. \nEn relaci\u00f3n con la operaci\u00f3n de uni\u00f3n existen unas leyes distributivas:\nPropiedad distributiva\nA \u222a (B \u2229 C) = (A \u222a B) \u2229 (A \u222a C), y por tanto:\nA \u222a (A \u2229 B) = A\nA \u2229 (B \u222a C) = (A \u2229 B) \u222a (A \u2229 C), y por tanto:\nA \u2229 (A \u222a B) = A\nSe cumple que \u2205 \u2282 A\u2229B\u2229C \u2282 A\u2229B \u2282 A \u2282 A\u222aB \u2282 A\u222aB\u222aC \u2282 \u03a9 donde \u03a9 es el conjunto universal.[1]\u200b", "subsections": []}, {"name": "Teor\u00eda axiom\u00e1tica", "text": "En las teor\u00edas axiom\u00e1ticas de conjuntos usuales, como ZFC o NBG, la existencia de la intersecci\u00f3n de una familia de conjuntos no se postula de manera independiente, sino que se demuestra como consecuencia del esquema axiom\u00e1tico de reemplazo.", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "\u00c1lgebra de conjuntos\nConjunto\nTeor\u00eda de conjuntos\nUni\u00f3n de conjuntos", "subsections": []}, {"name": "Referencias", "text": "\u2191 Rojo. \u00c1lgebra I", "subsections": []}, {"name": "Literatura del tema", "text": "Dorronsoro, Jos\u00e9; Hern\u00e1ndez, Eugenio (1996). N\u00fameros, grupos y anillos. Addison-Wesley/Universidad Aut\u00f3noma de Madrid. ISBN\u00a084-7829-009-5.\u00a0\nLipschutz, Seymour (1991). Teor\u00eda de conjuntos y temas afines. McGraw-Hill. ISBN\u00a0968-422-926-7.\u00a0\nYu. M. Korshunov. Fundamentos matem\u00e1ticos de la cibern\u00e9tica. Editorial Mir, Mosc\u00fa s/f", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/IronPython", "title": "IronPython", "summary": "IronPython es una implementaci\u00f3n del int\u00e9rprete Python (CPython) escrita totalmente en C#. El proyecto trata de seguir al pie de la letra el lenguaje Python, como implementaci\u00f3n de Python que es. Esto hace que cualquier programa escrito en Python pueda ser interpretado con IronPython, con las ventajas a\u00f1adidas de poder usar las bibliotecas de la plataforma .NET y poder compilar el c\u00f3digo a bytecode\nExiste un lenguaje de programaci\u00f3n muy similar a Python llamado Boo. Es un lenguaje claramente influenciado por Python dada la similitud de su sintaxis. Sin embargo, Boo no es realmente una implementaci\u00f3n de Python, sino un nuevo lenguaje independiente con una sintaxis muy parecida a la de Python pero que hace uso de las API de .NET. Por tanto, los programas escritos en Python no se pueden ejecutar con el int\u00e9rprete de Boo, mientras que IronPython est\u00e1 creado precisamente para ello.", "sections": [{"name": "Caracter\u00edsticas de IronPython", "text": "Modo interactivo, heredado de Python. Al igual que en Python, consiste en un shell que interpreta las \u00f3rdenes de forma interactiva.\nSoporte completo de la sintaxis y las bibliotecas (API) de Python.\nIntegraci\u00f3n con la plataforma .NET y sus bibliotecas.\nCompilaci\u00f3n del c\u00f3digo a bytecode, de forma que puede usarse en cualquier otro lenguaje soportado por la plataforma .NET.\nIntegraci\u00f3n del int\u00e9rprete de IronPython en cualquier aplicaci\u00f3n .NET para extender sus funcionalidades de forma sencilla.", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Python\nJython, implementaci\u00f3n de Python en Java", "subsections": []}, {"name": "Enlaces externos", "text": "P\u00e1gina oficial de IronPython\nRepositorio GitHub de IronPytho", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/JavaScript", "title": "JavaScript", "summary": "Por favor, ed\u00edtalo y/o discute los problemas en la discusi\u00f3n para mejorarlo:\nNecesita referencias adicionales para su verificaci\u00f3n.\nLas referencias no son claras o tienen un formato incorrecto.\n[\n]\nJavaScript (abreviado com\u00fanmente JS) es un lenguaje de programaci\u00f3n interpretado, dialecto del est\u00e1ndar ECMAScript. Se define como orientado a objetos,[2]\u200b basado en prototipos, imperativo, d\u00e9bilmente tipado y din\u00e1mico.\nSe utiliza principalmente del lado del cliente, implementado como parte de un navegador web permitiendo mejoras en la interfaz de usuario y p\u00e1ginas web din\u00e1micas[3]\u200b y JavaScript del lado del servidor (Server-side JavaScript o SSJS). Su uso en aplicaciones externas a la web, por ejemplo en documentos PDF, aplicaciones de escritorio (mayoritariamente widgets) es tambi\u00e9n significativo.\nDesde 2012, todos los navegadores modernos soportan completamente ECMAScript 5.1, una versi\u00f3n de JavaScript. Los navegadores m\u00e1s antiguos soportan por lo menos ECMAScript 3. La sexta edici\u00f3n se liber\u00f3 en julio de 2015.[4]\u200b\nJavaScript se dise\u00f1\u00f3 con una sintaxis similar a C++ y Java,[5]\u200b[6]\u200b aunque adopta nombres y convenciones del lenguaje de programaci\u00f3n Java. Sin embargo, Java y JavaScript tienen sem\u00e1nticas y prop\u00f3sitos diferentes. Su relaci\u00f3n es puramente comercial, tras la compra del creador de Java (Sun Microsystems) de Netscape Navigator (creador de LiveScript) y el cambio de nombre del lenguaje de programaci\u00f3n.\nTodos los navegadores modernos interpretan el c\u00f3digo JavaScript integrado en las p\u00e1ginas web. Para interactuar con una p\u00e1gina web se provee al lenguaje JavaScript de una implementaci\u00f3n del Document Object Model (DOM). Javascript es el \u00fanico lenguaje de programaci\u00f3n que entienden de forma nativa los navegadores.\nTradicionalmente se ven\u00eda utilizando en p\u00e1ginas web HTML para realizar operaciones y \u00fanicamente en el marco de la aplicaci\u00f3n cliente, sin acceso a funciones del servidor. Actualmente es ampliamente utilizado para enviar y recibir informaci\u00f3n del servidor junto con ayuda de otras tecnolog\u00edas como AJAX. JavaScript se interpreta en el agente de usuario al mismo tiempo que las sentencias van descarg\u00e1ndose junto con el c\u00f3digo HTML.\nDesde el lanzamiento en junio de 1997 del est\u00e1ndar ECMAScript 1, han existido las versiones 2, 3 y 5, que es la m\u00e1s usada actualmente (la 4 se abandon\u00f3[7]\u200b). En junio de 2015 se cerr\u00f3 y public\u00f3 la versi\u00f3n ECMAScript 6.[8]\u200b", "sections": [{"name": "Historia", "text": "", "subsections": [{"name": "Nacimiento de JavaScript", "text": "JavaScript fue desarrollado originalmente por Brendan Eich de Netscape con el nombre de Mocha, el cual fue renombrado posteriormente a LiveScript, para finalmente quedar como JavaScript. El cambio de nombre coincidi\u00f3 aproximadamente con el momento en que Netscape agreg\u00f3 compatibilidad con la tecnolog\u00eda Java en su navegador web Netscape Navigator en la versi\u00f3n 2002 en diciembre de 1995. La denominaci\u00f3n produjo confusi\u00f3n, dando la impresi\u00f3n de que el lenguaje es una prolongaci\u00f3n de Java, y fue considerada por muchos como una estrategia de mercadotecnia de Netscape para obtener prestigio e innovar en el \u00e1mbito de los nuevos lenguajes de programaci\u00f3n web.[9]\u200b[10]\u200b\n\u00abJAVASCRIPT\u00bb es una marca registrada de Oracle Corporation.[11]\u200b Es usada con licencia por los productos creados por Netscape Communications y entidades actuales como la Fundaci\u00f3n Mozilla.[12]\u200b[13]\u200b\nMicrosoft dio como nombre a su dialecto de JavaScript \u00abJScript\u00bb, para evitar problemas relacionadas con la marca. JScript fue adoptado en la versi\u00f3n 3.0 de Internet Explorer, liberado en agosto de 1996, e incluy\u00f3 compatibilidad con el Efecto 2000 con las funciones de fecha, una diferencia de los que se basaban en ese momento. Los dialectos pueden parecer tan similares que los t\u00e9rminos \u00abJavaScript\u00bb y \u00abJScript\u00bb a menudo se utilizan indistintamente, pero la especificaci\u00f3n de JScript es incompatible con la de ECMA en muchos aspectos.\nPara evitar estas incompatibilidades, el World Wide Web Consortium dise\u00f1\u00f3 el est\u00e1ndar Document Object Model (DOM, o Modelo de Objetos del Documento en espa\u00f1ol), que incorporan Konqueror, las versiones 6 de Internet Explorer y Netscape Navigator, Opera la versi\u00f3n 7, Mozilla Application Suite y Mozilla Firefox desde su primera versi\u00f3n.[cita\u00a0requerida]\nEn 1997 los autores propusieron[14]\u200b JavaScript para que fuera adoptado como est\u00e1ndar de la European Computer Manufacturers 'Association ECMA, que a pesar de su nombre no es europeo sino internacional, con sede en Ginebra. En junio de 1997 fue adoptado como un est\u00e1ndar ECMA, con el nombre de ECMAScript. Poco despu\u00e9s tambi\u00e9n como un est\u00e1ndar ISO."}, {"name": "JavaScript en el lado servidor", "text": "Netscape introdujo una implementaci\u00f3n de la programaci\u00f3n del lado del servidor con Netscape Enterprise Server, lanzada en diciembre de 1994 (poco despu\u00e9s del lanzamiento de JavaScript para navegadores web).[15]\u200b[16]\u200b\nA partir de mediados de la d\u00e9cada de los 2000, ha habido una proliferaci\u00f3n de implementaciones de JavaScript para el lado servidor. Node.js es uno de los notables ejemplos de JavaScript en el lado del servidor, siendo usado en proyectos importantes.[17]\u200b[18]\u200b"}, {"name": "Desarrollos posteriores", "text": "JavaScript se ha convertido en uno de los lenguajes de programaci\u00f3n m\u00e1s populares en internet y m\u00e1s usados. Al principio, sin embargo, muchos desarrolladores renegaban del lenguaje porque el p\u00fablico al que va dirigido lo formaban publicadores de art\u00edculos y dem\u00e1s aficionados, entre otras razones.[19]\u200b La llegada de AJAX devolvi\u00f3 JavaScript a la fama y atrajo la atenci\u00f3n de muchos otros programadores. Como resultado de esto hubo una proliferaci\u00f3n de un conjunto de frameworks y bibliotecas de \u00e1mbito general, mejorando las pr\u00e1cticas de programaci\u00f3n con JavaScript, y aumentado el uso de JavaScript fuera de los navegadores web, como se ha visto con la proliferaci\u00f3n de entornos JavaScript del lado del servidor.\nEn enero de 2009, el proyecto CommonJS fue inaugurado con el objetivo de especificar una biblioteca para uso de tareas comunes principalmente para el desarrollo fuera del navegador web.[20]\u200b\nEn junio de 2015 se cerr\u00f3 y public\u00f3 el est\u00e1ndar ECMAScript 6[21]\u200b[22]\u200b con un soporte irregular entre navegadores[23]\u200b y que dota a JavaScript de caracter\u00edsticas avanzadas que se echaban de menos y que son de uso habitual en otros lenguajes como, por ejemplo, m\u00f3dulos para organizaci\u00f3n del c\u00f3digo, verdaderas clases para programaci\u00f3n orientada a objetos, expresiones de flecha, iteradores, generadores o promesas para programaci\u00f3n as\u00edncrona.\nLa versi\u00f3n 7 de ECMAScript se conoce como ECMAScript 2016,[24]\u200b y es la \u00faltima versi\u00f3n disponible, publicada en junio de 2016. Se trata de la primera versi\u00f3n para la que se usa un nuevo procedimiento de publicaci\u00f3n anual y un proceso de desarrollo abierto.[25]\u200b"}]}, {"name": "Caracter\u00edsticas", "text": "Las siguientes caracter\u00edsticas son comunes a todas las implementaciones que se ajustan al est\u00e1ndar ECMAScript, a menos que especifique expl\u00edcitamente en caso contrario.", "subsections": [{"name": "Imperativo y estructurado", "text": "JavaScript es compatible con gran parte de la estructura de programaci\u00f3n de C (por ejemplo, sentencias if, bucles for, sentencias switch, etc.). Con una salvedad, en parte: en C, el \u00e1mbito de las variables alcanza al bloque en el cual fueron definidas; sin embargo JavaScript no es compatible con esto, puesto que el \u00e1mbito de las variables es el de la funci\u00f3n en la cual fueron declaradas. Esto cambia con la versi\u00f3n de ECMAScript 2015, ya que a\u00f1ade compatibilidad con block scoping por medio de la palabra clave let. Como en C, JavaScript hace distinci\u00f3n entre expresiones y sentencias. Una diferencia sint\u00e1ctica con respecto a C es la inserci\u00f3n autom\u00e1tica de punto y coma, es decir, en JavaScript los puntos y coma que finalizan una sentencia pueden ser omitidos.[26]\u200b"}, {"name": "Din\u00e1micos", "text": ""}, {"name": "Funcional", "text": ""}, {"name": "Protot\u00edpico", "text": ""}, {"name": "Otras caracter\u00edsticas", "text": ""}, {"name": "Extensiones espec\u00edficas del fabricante", "text": "JavaScript se encuentra oficialmente bajo la organizaci\u00f3n de Mozilla Foundation, y peri\u00f3dicamente se a\u00f1aden nuevas caracter\u00edsticas del lenguaje. Sin embargo, solo algunos motores JavaScript son compatibles con estas caracter\u00edsticas:\nLas propiedades get y set (tambi\u00e9n compatibles con WebKit, Opera,[36]\u200b ActionScript y Rhino).[37]\u200b\nCl\u00e1usulas catch condicionales.\nProtocolo iterador adoptado de Python.\nCorrutinas tambi\u00e9n adoptadas de Python.\nGeneraci\u00f3n de listas y expresiones por comprensi\u00f3n tambi\u00e9n adoptado de Python.\nEstablecer el \u00e1mbito a bloque a trav\u00e9s de la palabra clave let.\nDesestructuraci\u00f3n de arrays y objetos (forma limita de emparejamiento de patrones).\nExpresiones concretas en funciones (function(args) expr).\nECMAScript para XML (E4X), una extensi\u00f3n que a\u00f1ade compatibilidad nativa XML a ECMAScript."}]}, {"name": "Sintaxis y sem\u00e1ntica", "text": "La \u00faltima versi\u00f3n del lenguaje es ECMAScript 2016 publicada el 17 de junio del a\u00f1o 2016.[38]\u200b", "subsections": [{"name": "Ejemplos sencillos", "text": "Las variables en JavaScript se definen usando la palabra clave var:[39]\u200b\nvar\n \nx\n;\n// define la variable x, aunque no tiene ning\u00fan valor asignado por defecto\ny\n=\n2\n// define la variable y y le asigna el valor 2 a ella\nA considerar los comentarios en el ejemplo de arriba, los cuales van precedidos con 2 barras diagonales.\nNo existen funcionalidades para I/O incluidas en el lenguaje; el entorno de ejecuci\u00f3n ya lo proporciona. La especificaci\u00f3n ECMAScript en su edici\u00f3n 5.1 hace menci\u00f3n:[40]\u200b\n... en efecto, no existen provisiones en esta especificaci\u00f3n para entrada de datos externos o salida para resultados computados.\nSin embargo, la mayor\u00eda de los entornos de ejecuci\u00f3n tiene un objeto[41]\u200b llamado console que puede ser usado para imprimir por el flujo de salida de la consola de depuraci\u00f3n. He aqu\u00ed un simple programa que imprime \u201cHello world!\u201d:\nconsole\n.\nlog\n(\n\"Hello world!\"\n);\nUna funci\u00f3n recursiva:\nfunction\nfactorial\nn\n)\n{\n    \nif\n===\n0\n        \nreturn\n1\n}\n*\n-\nEjemplos de funci\u00f3n an\u00f3nima (o funci\u00f3n lambda) y una clausura:\ndisplayClosure\n()\ncount\n++\n};\ninc\n();\n// devuelve 1\n// devuelve 2\n// devuelve 3\nLas expresiones con invocaci\u00f3n autom\u00e1tica permiten a las funciones pasarle variables por par\u00e1metro dentro de sus propias clausuras.\nv\ngetValue\n  \n;};\n}(\n));\n// 1"}, {"name": "Ejemplos m\u00e1s avanzados", "text": "El siguiente c\u00f3digo muestra varias caracter\u00edsticas de JavaScript.\n/* Busca el m\u00ednimo com\u00fan m\u00faltiplo (MCM) de dos n\u00fameros */\nLCMCalculator\n,\n// funci\u00f3n constructora\ncheckInt\n// funci\u00f3n interior\n%\n!==\n            \nthrow\nnew\nTypeError\n+\n\" no es un entero\"\n// lanza una excepci\u00f3n\nthis\na\n// puntos y coma son opcionales\nb\n// El prototipo de las instancias de objeto creados por el constructor es el de la propiedad \u201cprototype\u201d del constructor.\nprototype\n// objeto definido como literal\nconstructor\n:\n// cuando reasignamos un prototipo, establecemos correctamente su propiedad constructor\ngcd\n// m\u00e9todo que calcula el m\u00e1ximo com\u00fan divisor\n// Algoritmo de Euclides:\nMath\nabs\n),\nt\n<\n// intercambiamos variables\nwhile\n// Solo necesitamos calcular el MCD una vez, por lo tanto 'redefinimos' este m\u00e9todo.\n// (Realmente no es una redefinici\u00f3n\u2014est\u00e1 definida en la propia instancia, por lo tanto\n// this.gcd se refiere a esta 'redefinici\u00f3n' en vez de a LCMCalculator.prototype.gcd).\n// Adem\u00e1s, 'gcd' === \"gcd\", this['gcd'] === this.gcd\n[\n'gcd'\n]\n},\n// Los nombres de las propiedades del objeto pueden ser especificados con cadenas delimitadas con comillas simples (') o dobles (\u201c).\n\"lcm\"\n// Los nombres de las variables no colisionan con las propiedades del objeto. Por ejemplo: |lcm| no es |this.lcm|.\n// No usar |this.a * this.b| para evitar problemas con c\u00e1lculos en coma flotante.\nlcm\n/\n// S\u00f3lo necesitamos calcular MCM una vez, por lo tanto \"redefinimos\" este m\u00e9todo.\ntoString\n\"LCMCalculator: a = \"\n\", b = \"\n// Definimos una funci\u00f3n gen\u00e9rica para imprimir un resultado; esta implementaci\u00f3n solo funciona en los navegadores web\noutput\ndocument\nbody\nappendChild\ncreateTextNode\ncreateElement\n'br'\n// Nota: Los m\u00e9todos.map() y.forEach() del prototipo Array est\u00e1n definidos en JavaScript 1.6.\n// Estos m\u00e9todos son usados aqu\u00ed para demostrar la naturaleza funcional inherente del lenguaje.\n[[\n25\n55\n],\n21\n56\n22\n58\n28\n]].\nmap\npair\n// construcci\u00f3n literal de un Array + funci\u00f3n de mapeo.\n]);\n}).\nsort\n// ordenamos la colecci\u00f3n por medio de esta funci\u00f3n\nforEach\nobj\n\", gcd = \"\n\", lcm = \"\n());\n});\nEl siguiente ejemplo muestra la salida que deber\u00eda ser mostrada en la ventana de un navegador."}]}, {"name": "Uso en p\u00e1ginas web", "text": "Art\u00edculos principales:\n y \nEl uso m\u00e1s com\u00fan de JavaScript es escribir funciones embebidas o incluidas en p\u00e1ginas HTML y que interact\u00faan con el Document Object Model (DOM o Modelo de Objetos del Documento) de la p\u00e1gina. Algunos ejemplos sencillos de este uso son:\nCargar nuevo contenido para la p\u00e1gina o enviar datos al servidor a trav\u00e9s de AJAX sin necesidad de recargar la p\u00e1gina (por ejemplo, una red social puede permitir al usuario enviar actualizaciones de estado sin salir de la p\u00e1gina).\nAnimaci\u00f3n de los elementos de p\u00e1gina, hacerlos desaparecer, cambiar su tama\u00f1o, moverlos, etc.\nContenido interactivo, por ejemplo, juegos y reproducci\u00f3n de audio y v\u00eddeo.\nValidaci\u00f3n de los valores de entrada de un formulario web para asegurarse de que son aceptables antes de ser enviado al servidor.\nTransmisi\u00f3n de informaci\u00f3n sobre los h\u00e1bitos de lectura de los usuarios y las actividades de navegaci\u00f3n a varios sitios web. Las p\u00e1ginas Web con frecuencia lo hacen para hacer an\u00e1lisis web, seguimiento de anuncios, la personalizaci\u00f3n o para otros fines.[42]\u200b\nDado que el c\u00f3digo JavaScript puede ejecutarse localmente en el navegador del usuario (en lugar de en un servidor remoto), el navegador puede responder a las acciones del usuario con rapidez, haciendo una aplicaci\u00f3n m\u00e1s sensible. Por otra parte, el c\u00f3digo JavaScript puede detectar acciones de los usuarios que HTML por s\u00ed sola no puede, como pulsaciones de teclado. Las aplicaciones como Gmail se aprovechan de esto: la mayor parte de la l\u00f3gica de la interfaz de usuario est\u00e1 escrita en JavaScript, enviando peticiones al servidor (por ejemplo, el contenido de un mensaje de correo electr\u00f3nico). La tendencia cada vez mayor por el uso de la programaci\u00f3n Ajax explota de manera similar esta t\u00e9cnica.\nUn motor de JavaScript (tambi\u00e9n conocido como int\u00e9rprete de JavaScript o implementaci\u00f3n JavaScript) es un int\u00e9rprete que interpreta el c\u00f3digo fuente de JavaScript y ejecuta la secuencia de comandos en consecuencia. El primer motor de JavaScript fue creado por Brendan Eich en Netscape Communications Corporation, para el navegador web Netscape Navigator. El motor, denominado SpiderMonkey, est\u00e1 implementado en C. Desde entonces, ha sido actualizado (en JavaScript 1.5) para cumplir con el ECMA-262 edici\u00f3n 3. El motor Rhino, creado principalmente por Norris Boyd (antes de Netscape, ahora en Google) es una implementaci\u00f3n de JavaScript en Java. Rhino, como SpiderMonkey, es compatible con el ECMA-262 edici\u00f3n 3.\nUn navegador web es, con mucho, el entorno de acogida m\u00e1s com\u00fan para JavaScript. Los navegadores web suelen crear objetos no nativos, dependientes del entorno de ejecuci\u00f3n, para representar el Document Object Model (DOM) en JavaScript. El servidor web es otro entorno com\u00fan de servicios. Un servidor web JavaScript suele exponer sus propios objetos para representar objetos de petici\u00f3n y respuesta HTTP, que un programa JavaScript podr\u00eda entonces interrogar y manipular para generar din\u00e1micamente p\u00e1ginas web.\nDebido a que JavaScript es el \u00fanico lenguaje por el que los m\u00e1s populares navegadores comparten su apoyo, se ha convertido en un lenguaje al que muchos frameworks en otros lenguajes compilan, a pesar de que JavaScript no fue dise\u00f1ado para tales prop\u00f3sitos.[43]\u200b A pesar de las limitaciones de rendimiento inherentes a su naturaleza din\u00e1mica, el aumento de la velocidad de los motores de JavaScript ha hecho de este lenguaje un entorno para la compilaci\u00f3n sorprendentemente factible.", "subsections": [{"name": "Ejemplo de script", "text": "A continuaci\u00f3n se muestra un breve ejemplo de una p\u00e1gina web (ajust\u00e1ndose a las normas del est\u00e1ndar para HTML5) que utiliza JavaScript para el manejo del Document Object Model (DOM):\n<!DOCTYPE html>\n<\nhtml\n>\nhead\nmeta\ncharset\n\"utf-8\"\ntitle\n</\nbody\nh1\nid\n\"header\"\nscript\n'Hola Mundo!'\nh1\ngetElementById\n'header'\n// contiene la referencia al tag <h1>\ngetElementsByTagName\n'h1'\n)[\n];\n// accediendo al mismo elemento <h1>\nnoscript"}, {"name": "Consideraciones acerca de la compatibilidad", "text": "Art\u00edculo principal:\nDebido a que JavaScript se ejecuta en entornos muy variados, una parte importante de las pruebas y la depuraci\u00f3n es probar y verificar que el c\u00f3digo JavaScript funciona correctamente en m\u00faltiples navegadores.\nLa interfaz DOM para acceder y manipular p\u00e1ginas web no es parte del est\u00e1ndar ECMAScript, o de la propia JavaScript. El DOM es definido por los esfuerzos de estandarizaci\u00f3n del W3C, una organizaci\u00f3n independiente. En la pr\u00e1ctica, las implementaciones que hacen de JavaScript los distintos navegadores difieren tanto entre ellos mismos como de las normas del est\u00e1ndar.\nPara hacer frente a estas diferencias, los autores de JavaScript pudieron ser capaces de escribir c\u00f3digo compatible con los est\u00e1ndares que tambi\u00e9n fuera capaz de ejecutarse correctamente en la mayor\u00eda de los navegadores, o en su defecto, que al menos se pudiera escribir c\u00f3digo capaz de comprobar la presencia de ciertas funcionalidades del navegador y que se comportase de manera diferente si no se dispusiese de dicha funcionalidad.[44]\u200b Existen casos en los que dos navegadores pueden llegar a implementar la misma caracter\u00edstica, pero con un comportamiento diferente, hecho que a los programadores les puede resultar de ayuda para detectar qu\u00e9 navegador se est\u00e1 ejecutando en ese instante y as\u00ed cambiar el comportamiento de su escritura para que coincida.[45]\u200b[46]\u200b Los programadores tambi\u00e9n suelen utilizar bibliotecas o herramientas que tengan en cuenta las diferencias entre navegadores.\nAdem\u00e1s, los scripts pueden no funcionar para algunos usuarios. Por ejemplo, un usuario puede:\nUtilizar un navegador antiguo sin compatibilidad completa con la API DOM,\nUtilizar un navegador PDA o tel\u00e9fono m\u00f3vil que no puede ejecutar JavaScript\nTener la ejecuci\u00f3n de JavaScript deshabilitada, como precauci\u00f3n de seguridad,\nUtilizar un navegador de voz debido a, por ejemplo, una discapacidad visual.\nPara apoyar a estos usuarios, los programadores web suelen crear p\u00e1ginas que sean tolerante de fallos seg\u00fan el agente de usuario (tipo de navegador) que no admita JavaScript. En particular, la p\u00e1gina debe seguir siendo \u00fatil aunque sin las caracter\u00edsticas adicionales que JavaScript habr\u00eda a\u00f1adido. Un enfoque alternativo que muchos encuentran preferible es primero crear contenido utilizando las tecnolog\u00edas que funcionan en todos los navegadores, y mejorar el contenido para los usuarios que han permitido JavaScript."}, {"name": "Accesibilidad", "text": "Suponiendo que el usuario no haya desactivado la ejecuci\u00f3n de c\u00f3digo JavaScript, en el lado del cliente JavaScript debe ser escrito tanto con el prop\u00f3sito de mejorar las experiencias de los visitantes con discapacidad visual o f\u00edsica, como el de evitar ocultar informaci\u00f3n a estos visitantes.[47]\u200b\nLos lectores de pantalla, utilizados por los ciegos y deficientes visuales, pueden ser tenidos en cuenta por JavaScript y as\u00ed poder acceder y leer los elementos DOM de la p\u00e1gina. El c\u00f3digo HTML escrito debe ser lo m\u00e1s conciso, navegable y sem\u00e1nticamente rico posible, tanto si JavaScript se ejecuta como si no.\nJavaScript no deber\u00eda de ser totalmente dependiente de los eventos de rat\u00f3n del navegador y deber\u00eda ser accesible para aquellos usuarios que no quieran hacer uso del rat\u00f3n (inform\u00e1tica) para navegar o que opten por utilizar solamente el teclado.\nHay eventos independientes del dispositivo, tales como onfocus y onchange que son preferibles en la mayor\u00eda de los casos.[47]\u200b\nJavaScript no debe ser utilizado para crear confusi\u00f3n o desorientaci\u00f3n al usuario web. Por ejemplo, modificar o desactivar la funcionalidad normal del navegador, como cambiar la forma en que el bot\u00f3n de navegar hacia atr\u00e1s o el evento de actualizaci\u00f3n se comportan, son pr\u00e1cticas que generalmente son mejores evitar. Igualmente, desencadenar eventos que el usuario puede no tener en cuenta reduce la sensaci\u00f3n de control del usuario y provoca cambios inesperados al contenido de la p\u00e1gina.[48]\u200b\nA menudo, el proceso de dotar a una p\u00e1gina web compleja el mayor grado accesibilidad posible, se convierte en un problema no trivial donde muchos temas se acaban llevando al debate y a la opini\u00f3n, siendo necesario el compromiso de todos hasta el final. Sin embargo, los agentes de usuario y las tecnolog\u00edas de apoyo a personas con discapacidad est\u00e1n en constante evoluci\u00f3n y nuevas directrices e informaci\u00f3n al respecto siguen public\u00e1ndose en la web.[47]\u200b"}]}, {"name": "Seguridad", "text": "JavaScript y el DOM permite que existan programadores que hagan un uso inapropiado para introducir scripts que ejecuten c\u00f3digo con contenido malicioso sin el consentimiento del usuario y que pueda as\u00ed comprometer su seguridad.\nLos desarrolladores de los navegadores tienen en cuenta este riesgo utilizando dos restricciones.\nEn primer lugar, los scripts se ejecutan en un sandbox en el que solo se pueden llevar a cabo acciones relacionadas con la web, no con tareas de programaci\u00f3n de prop\u00f3sito general, como la creaci\u00f3n de archivos.\nEn segundo lugar, est\u00e1 limitada por la pol\u00edtica del mismo origen: los scripts de un sitio web no tienen acceso a la informaci\u00f3n enviada a otro sitio web (de otro dominio) como pudiera ser nombres de usuario, contrase\u00f1as o cookies. La mayor\u00eda de los fallos de seguridad de JavaScript est\u00e1n relacionados con violaciones de cualquiera de estas dos restricciones.\nExisten proyectos como AdSafe o Secure ECMA script (SES) que proporcionan mayores niveles de seguridad, en especial en el c\u00f3digo creado por terceros (tales como los anuncios).[49]\u200b[50]\u200b\nLa Pol\u00edtica de Contenido Seguro (CSP) es el m\u00e9todo principal previsto para garantizar que solo c\u00f3digo de confianza pueda ser ejecutado en una p\u00e1gina web.", "subsections": [{"name": "Vulnerabilidades cross-site", "text": "Un problema com\u00fan de seguridad en JavaScript es el cross-site scripting o XSS, una violaci\u00f3n de la pol\u00edtica de mismo origen. Las vulnerabilidades XSS permiten a un atacante inyectar c\u00f3digo JavaScript en p\u00e1ginas web visitadas por el usuario. Una de esas webs podr\u00eda ser la de un banco, pudiendo el atacante acceder a la aplicaci\u00f3n de banca con los privilegios de la v\u00edctima, lo que podr\u00eda revelar informaci\u00f3n secreta o transferir dinero sin la autorizaci\u00f3n de la v\u00edctima.\nUna soluci\u00f3n para las vulnerabilidades XSS es utilizar HTML escaping cuando se muestre informaci\u00f3n de fuentes no confiables.\nAlgunos navegadores incluyen una protecci\u00f3n parcial contra los ataques XSS reflejados (el atacante est\u00e1 en la misma petici\u00f3n web). El atacante proporciona una URL incluyendo c\u00f3digo malicioso. Sin embargo, incluso los usuarios de los navegadores son vulnerables a otros ataques XSS, tales como aquellos en los que el c\u00f3digo malicioso se almacena en una base de datos. Solo el correcto dise\u00f1o de las aplicaciones Web en la parte servidora puede prevenir totalmente XSS.\nLas vulnerabilidades XSS tambi\u00e9n pueden ocurrir debido a errores de ejecuci\u00f3n por los desarrolladores del navegador.[51]\u200b\nOtra vulnerabilidad es la falsificaci\u00f3n de petici\u00f3n de sitio cruzado o CSRF. En CSRF, el c\u00f3digo del sitio web atacante enga\u00f1a al navegador de la v\u00edctima, permitiendo al atacante realizar peticiones en nombre de la v\u00edctima, haciendo imposible saber a la aplicaci\u00f3n de destino (por ejemplo, la de un banco haciendo una transferencia de dinero) saber si la petici\u00f3n ha sido realizada voluntariamente por el usuario o por un ataque CSRF.\nEl ataque funciona porque, si el sitio de destino hace uso \u00fanicamente de las cookies para autenticar las solicitudes de la v\u00edctima, las peticiones iniciadas por el c\u00f3digo del atacante tendr\u00e1n las mismas credenciales de acceso leg\u00edtimo que las solicitudes iniciadas por el propio usuario.\nEn general, la soluci\u00f3n a CSRF consiste en introducir un campo de formulario oculto cuyo valor se utilice para realizar la autenticaci\u00f3n, y no solo por medio de las cookies, en solicitudes que puedan tener efectos duraderos. La comprobaci\u00f3n de la cabecera HTTP referer tambi\u00e9n puede servir de ayuda.\n\"Hijacking JavaScript\" es un tipo de ataque CSRF en el que una etiqueta <script> en el sitio web del atacante explota una vulnerabilidad en la p\u00e1gina del sitio de la v\u00edctima que le hace devolver informaci\u00f3n privada, en forma de JSON o c\u00f3digo JavaScript. Las posibles soluciones son:\nque se requiera un token de autenticaci\u00f3n en los par\u00e1metros de las peticiones POST y GET para aquellas peticiones que requieran devolver informaci\u00f3n privada del usuario.\nusar POST y nunca GET para solicitudes que devuelven informaci\u00f3n privada"}]}, {"name": "Herramientas de desarrollo", "text": "En JavaScript, disponer de un depurador se convierte en necesario cuando se desarrollan grandes aplicaciones, no triviales. Dado que puede haber diferencias de implementaci\u00f3n entre los diferentes navegadores (especialmente en cuanto al DOM), es \u00fatil tener acceso a un depurador para cada uno de los navegadores a los cuales nuestra aplicaci\u00f3n web ir\u00e1 dirigido.[52]\u200b\nLos depuradores web est\u00e1n disponibles para Internet Explorer, Firefox, Safari, Google Chrome y Opera.[53]\u200b\nExisten tres depuradores disponibles para Internet Explorer: Microsoft Visual Studio es el m\u00e1s avanzado de los tres, seguido de cerca por Microsoft Script Editor (un componente de Microsoft Office)[54]\u200b y, finalmente, Microsoft Script Debugger, que es mucho m\u00e1s b\u00e1sico que el otro dos, aunque es gratuito. El IDE gratuito Microsoft Visual Web Developer Express ofrece una versi\u00f3n limitada de la funcionalidad de depuraci\u00f3n de JavaScript en el Microsoft Visual Studio. Internet Explorer ha incluido herramientas de desarrollo desde la versi\u00f3n 8 (se muestra pulsando la tecla F12).\nLas aplicaciones web dentro de Firefox se pueden depurar usando el Firebug add-on o el antiguo depurador Venkman. Firefox tambi\u00e9n tiene integrada una consola de errores b\u00e1sica, que registra y eval\u00faa JavaScript. Tambi\u00e9n registra errores de CSS y advertencias.\nOpera incluye un conjunto de herramientas llamado Dragonfly.[55]\u200b\nEl Inspector Web de WebKit incluye un depurador de JavaScript[56]\u200b utilizado en Safari, junto con una versi\u00f3n modificada de Google Chrome.\nExisten algunas herramientas de ayuda a la depuraci\u00f3n, tambi\u00e9n escritas en JavaScript y construidas para ejecutarse en la Web. Un ejemplo es el programa JSLint, desarrollado por Douglas Crockford, quien ha escrito extensamente sobre el lenguaje. JSLint analiza el c\u00f3digo JavaScript para que este quede conforme con un conjunto de normas y directrices y que aseguran su correcto funcionamiento y mantenibilidad.\nHay frameworks de programaci\u00f3n como PaulaJS que ofrece funciones para realizar sistemas de frontend con m\u00e1s utilidades que no hay que programar directamente, mejoras en est\u00e9tica y experiencia de usuario.", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "V\u00e9anse tambi\u00e9n:", "subsections": []}, {"name": "Referencias", "text": "\u2191 Douglas Crockford on Functional JavaScript (2:49): \"[JavaScript] es el lenguaje funcional m\u00e1s popular del mundo. JavaScript es y siempre ha sido, al menos desde [la versi\u00f3n] 1.2, un lenguaje de programaci\u00f3n funcional.\"\n\u2191 \u00abCopia archivada\u00bb. Archivado desde el original el 12 de abril de 2015. Consultado el 23 de noviembre de 2010.\u00a0\n\u2191 M. Dom\u00ednguez-Dorado,. Todo Programaci\u00f3n. N\u00ba 12. P\u00e1gs. 48-51. Editorial Iberprensa (Madrid). DL M-13679-2004. Septiembre de 2005. Bases de datos en el cliente con JavaScript DB.\u00a0\n\u2191 \u00abJavaScript\u00bb. Mozilla Developer Network. Consultado el 16 de septiembre de 2016.\u00a0\n\u2191 \u00abAbout JavaScript - JavaScript | MDN\u00bb. developer.mozilla.org (en ingl\u00e9s estadounidense). Consultado el 4 de julio de 2022.\u00a0\n\u2191 \u00abIntroduction\u00bb. web.stanford.edu. Consultado el 4 de julio de 2022.\u00a0\n\u2191 Eich, Brendan (13 de agosto de 2008). \u00abECMAScript Harmony\u00bb. Archivado desde el original el 26 de agosto de 2013. Consultado el 22 de julio de 2015.\u00a0\n\u2191 campusMVP (19 de junio de 2015). \u00abECMAScript 6 es ya un est\u00e1ndar abierto\u00bb. Consultado el 22 de julio de 2015.\u00a0\n\u2191 Lenguajes de programaci\u00f3n usados en Internet y la World Wide Web (WWW) (castellano)\n\u2191 JavaScript: The Definitive Guide, 6th Edition\n\u2191 \u00abTrademark Status & Document Retrieval\u00bb. tsdr.uspto.gov. Consultado el 25 de marzo de 2024.\u00a0\n\u2191 Marcas registradas de Oracle.\n\u2191 \u00abAbout JavaScript\u00bb (en ingl\u00e9s). Consultado el 29 de agosto de 2013. \u00abJavaScript is a trademark or registered trademark of Oracle in the U.S. and other countries\u00bb.\u00a0\n\u2191 \u00abNetscape Comunicado de prensa (castellano)\u00bb. Archivado desde el original el 3 de diciembre de 1998. Consultado el 13 de septiembre de 2008.\u00a0\n\u2191 \u00abChapter 2: Getting Started\u00bb. Server-Side JavaScript Guide. Netscape Communications Corporation. 1998. Consultado el 25 de abril de 2012.\u00a0\n\u2191 Mike Morgan (1996). \u00abChapter 6: Netscape Internet Application Framework\u00bb. Using Netscape\u2122 LiveWire\u2122, Special Edition. Que. Archivado desde el original el 21 de diciembre de 2012. Consultado el 19 de mayo de 2013.\u00a0\n\u2191 \u00abServer-Side Javascript: Back With a Vengeance\u00bb. Read Write Web. 17 de diciembre de 2009. Archivado desde el original el 2 de junio de 2012. Consultado el 28 de mayo de 2012.\u00a0\n\u2191 \u00abNode's goal is to provide an easy way to build scalable network programs\u00bb. About Node.js. Joyent.\u00a0\n\u2191 \u00abJavaScript: The World's Most Misunderstood Programming Language\u00bb. Crockford.com. Consultado el 19 de mayo de 2009.\u00a0\n\u2191 Kris Kowal (1 de diciembre de 2009). \u00abCommonJS effort sets JavaScript on path for world domination\u00bb. Ars Technica. Cond\u00e9 Nast Publications. Consultado el 18 de abril de 2010.\u00a0\n\u2191 ECMA International (Junio de 2015). \u00abStandard ECMA-262 6th Edition\u00bb.\u00a0\n\u2191 campusMVP (19 de junio de 2015). \u00abECMAScript 6 ya es un est\u00e1ndar cerrado\u00bb. Consultado el 22 de julio de 2015.\u00a0\n\u2191 \u00abTabla de compatibilidad de navegadores con ECMAScript 6 (Ingl\u00e9s)\u00bb.\u00a0\n\u2191 ECMA International (Junio de 2016). \u00abStandard ECMA-262 7th Edition\u00bb.\u00a0\n\u2191 ECMA International (Junio de 2016). \u00abECMAScript 2016 Language Specification\u00bb.\u00a0\n\u2191 Flanagan, 2006, p.\u00a016.\n\u2191 Flanagan, 2006, pp.\u00a0176\u2013178.\n\u2191 \u00abProperties of the Function Object\u00bb. Archivado desde el original el 28 de enero de 2013. Consultado el 19 de mayo de 2013.\u00a0\n\u2191 Flanagan, 2006, p.\u00a0141.\n\u2191 \u00abInheritance and the prototype chain\u00bb. Mozilla Developer Network. Mozilla. Consultado el 6 de abril de 2013.\u00a0\n\u2191 Herman, David (2013). Effective Javascript. Addison-Wesley. p.\u00a083. ISBN\u00a09780321812186.\u00a0\n\u2191 Haverbeke, Marjin (2011). Eloquent Javascript. No Starch Press. pp.\u00a095-97. ISBN\u00a09781593272821.\u00a0\n\u2191 Katz, Yehuda. \u00abUnderstanding \"Prototypes\" in JavaScript\u00bb. Consultado el 6 de abril de 2013.\u00a0\n\u2191 Herman, David (2013). Effective Javascript. Addison-Wesley. pp.\u00a0125-127. ISBN\u00a09780321812186.\u00a0\n\u2191 Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp.\u00a0139-149. ISBN\u00a0978-1593272821.\u00a0\n\u2191 Robert Nyman, Getters And Setters With JavaScript \u2013 Code Samples And Demos, published 29 May 2009, accessed 2 January 2010.\n\u2191 John Resig, JavaScript Getters and Setters, 18 July 2007, accessed 2 January 2010\n\u2191 http://www.ecma-international.org/publications/standards/Ecma-262.htm\n\u2191 \u00abvar - JavaScript - MDN\u00bb. The Mozilla Developer Network. Consultado el 22 de diciembre de 2012.\u00a0\n\u2191 \u00abECMAScript Language Specification - ECMA-262 Edition 5.1\u00bb. Ecma International. Consultado el 22 de diciembre de 2012.\u00a0\n\u2191 \u00abconsole\u00bb. Mozilla Developer Network. Mozilla. Consultado el 6 de abril de 2013.\u00a0\n\u2191 \u00abJavaScript tracking - Piwik\u00bb. Piwik. Archivado desde el original el 31 de octubre de 2013. Consultado el 31 de marzo de 2012.\u00a0\n\u2191 Hamilton, Naomi (31 de junio de 2008). \u00abThe A-Z of Programming Languages: JavaScript\u00bb. computerworld.com.au.\u00a0\n\u2191 Peter-Paul Koch, Object detection\n\u2191 Peter-Paul Koch, Mission Impossible - mouse position Archivado el 17 de octubre de 2018 en Wayback Machine.\n\u2191 Peter-Paul Koch, Browser detect\n\u2191 a b c Flanagan, 2006, pp.\u00a0262\u2013263.\n\u2191 \u00abCreating Accessible JavaScript\u00bb. WebAIM. Consultado el 8 de junio de 2010.\u00a0\n\u2191 ADsafe - Making JavaScript Safe for Advertising\n\u2191 Secure ECMA Script (SES)\n\u2191 MozillaZine, Mozilla Cross-Site Scripting Vulnerability Reported and Fixed\n\u2191 \u00abAdvanced Debugging With JavaScript\u00bb. alistapart.com. 3 de febrero de 2009. Consultado el 28 de mayo de 2010.\u00a0\n\u2191 \u00abThe JavaScript Debugging Console\u00bb. javascript.about.com. 28 de mayo de 2010. Archivado desde el original el 8 de abril de 2016. Consultado el 28 de mayo de 2010.\u00a0\n\u2191 JScript development in Microsoft Office 11 (MS InfoPath 2003)\n\u2191 \u00abOpera DragonFly\u00bb. Opera Software. Archivado desde el original el 22 de agosto de 2011. Consultado el 19 de mayo de 2013.\u00a0\n\u2191 \u00abIntroducing Drosera - Surfin' Safari\u00bb. Webkit.org. 28 de junio de 2006. Consultado el 19 de mayo de 2009.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": "Mozilla Developer Center.\n(en ingl\u00e9s) Javascript tutorial.\nJavaScript - Mirando tras las bambalinas", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Java_(lenguaje_de_programaci%C3%B3n)", "title": "Java (lenguaje de programaci\u00f3n)", "summary": "Por favor, ed\u00edtalo y/o discute los problemas en la discusi\u00f3n para mejorarlo:\nNecesita referencias adicionales para su verificaci\u00f3n.\nLas referencias no son claras o tienen un formato incorrecto.\nPodr\u00eda ser dif\u00edcil de entender para lectores interesados en el tema.\n[\n]\nJava es un lenguaje de programaci\u00f3n y una plataforma inform\u00e1tica que fue comercializada por primera vez en 1995 por Sun Microsystems.[2]\u200b[3]\u200b\nEl lenguaje de programaci\u00f3n Java fue desarrollado originalmente por James Gosling, de Sun Microsystems (constituida en 1983 y posteriormente adquirida el 27 de enero de 2010 por la compa\u00f1\u00eda Oracle),[4]\u200b y publicado en 1995 como un componente fundamental de la plataforma Java de Sun Microsystems. Su sintaxis deriva en gran medida de C y C++, pero tiene menos utilidades de bajo nivel que cualquiera de ellos. Las aplicaciones de Java son compiladas a bytecode (clase Java), que puede ejecutarse en cualquier m\u00e1quina virtual Java (JVM) sin importar la arquitectura de la computadora subyacente.\nLa compa\u00f1\u00eda Sun desarroll\u00f3 la implementaci\u00f3n de referencia original para los compiladores de Java, m\u00e1quinas virtuales y librer\u00edas de clases en 1991, y las public\u00f3 por primera vez en 1995. A partir de mayo de 2007, en cumplimiento de las especificaciones del Proceso de la Comunidad Java, Sun volvi\u00f3 a licenciar la mayor\u00eda de sus tecnolog\u00edas de Java bajo la Licencia P\u00fablica General de GNU. Otros han desarrollado tambi\u00e9n implementaciones alternas a estas tecnolog\u00edas de Sun, tales como el Compilador de Java de GNU y el GNU Classpath.", "sections": [{"name": "Historia", "text": "Java se cre\u00f3 como una herramienta de programaci\u00f3n para ser usada en un proyecto de set-top-box en una peque\u00f1a operaci\u00f3n denominada the Green Project en Sun Microsystems en 1991. El equipo (green team), compuesto por trece personas y dirigido por James Gosling, trabaj\u00f3 durante 18 meses en Sand Hill Road,  Menlo Park (California), para desarrollarlo.\nEl lenguaje se denomin\u00f3 inicialmente Oak (por un roble que hab\u00eda fuera de la oficina de Gosling), luego pas\u00f3 a llamarse green tras descubrir que Oak era ya una marca comercial registrada para adaptadores de tarjetas gr\u00e1ficas, y finalmente se le renombr\u00f3 java.\nEs frecuentada por algunos de los miembros del equipo. Pero no est\u00e1 claro si es un acr\u00f3nimo o no, aunque algunas fuentes se\u00f1alan que podr\u00eda tratarse de las iniciales de sus dise\u00f1adores: James Gosling, Arthur Van Hoff y Andy Bechtolsheim. Otros abogan por el siguiente acr\u00f3nimo, Just Another Vague Acronym (\"simplemente otro acr\u00f3nimo ambiguo m\u00e1s\"). La hip\u00f3tesis que m\u00e1s fuerza tiene es la de que Java debe su nombre a un tipo de caf\u00e9 disponible en la cafeter\u00eda cercana; de ah\u00ed que el icono de Java sea una taza de caf\u00e9 caliente. Un peque\u00f1o signo que da fuerza a esta teor\u00eda es que los cuatro primeros bytes (el n\u00famero m\u00e1gico) de los archivos.class que genera el compilador, son en hexadecimal, 0xCAFEBABE. A pesar de todas estas teor\u00edas, el nombre fue sacado al parecer de una lista aleatoria de palabras.[5]\u200b\nLos objetivos de Gosling eran implementar una m\u00e1quina virtual y un lenguaje con una estructura y sintaxis similar a C++. Entre junio y julio de 1994, tras una sesi\u00f3n maratoniana de tres d\u00edas entre John Gage, James Gosling, Patrick Naughton, Wayne Rosing y Eric Schmidt, el equipo reorient\u00f3 la plataforma hacia la Web. Sintieron que la llegada del navegador web Mosaic propiciar\u00eda que Internet se convirtiese en un medio interactivo, como el que pensaban era la televisi\u00f3n por cable. Naughton cre\u00f3 entonces un prototipo de navegador, WebRunner, que m\u00e1s tarde ser\u00eda conocido como HotJava.\nEn 1994, se les hizo una demostraci\u00f3n de HotJava y la plataforma Java a los ejecutivos de Sun. Java 1.0a pudo descargarse por primera vez en 1994, pero hubo que esperar al 23 de mayo de 1995, durante las conferencias de SunWorld, a que vieran la luz p\u00fablica Java y HotJava, el navegador Web. El acontecimiento fue anunciado por John Gage, el director cient\u00edfico de Sun Microsystems. El acto estuvo acompa\u00f1ado por una peque\u00f1a sorpresa adicional, el anuncio por parte de Marc Andreessen, vicepresidente ejecutivo de Netscape, de que Java ser\u00eda soportado en sus navegadores. El 9 de enero del a\u00f1o siguiente, 1996, Sun fund\u00f3 el grupo empresarial JavaSoft para que se encargase del desarrollo tecnol\u00f3gico.[2] Dos semanas m\u00e1s tarde la primera versi\u00f3n de Java fue publicada.\nLa promesa inicial de Gosling era Write Once, Run Anywhere (Escr\u00edbelo una vez, ejec\u00fatalo en cualquier lugar), proporcionando un lenguaje independiente de la plataforma y un entorno de ejecuci\u00f3n (la JVM) ligero y gratuito para las plataformas m\u00e1s populares, de forma que los binarios (bytecode) de las aplicaciones Java pudiesen ejecutarse en cualquier plataforma.\nEl entorno de ejecuci\u00f3n era relativamente seguro, y los principales navegadores web pronto incorporaron la posibilidad de ejecutar applets Java incrustadas en las p\u00e1ginas web.\nJava ha experimentado numerosos cambios desde la versi\u00f3n primigenia, JDK 1.0, as\u00ed como un enorme incremento en el n\u00famero de clases y paquetes que componen la biblioteca est\u00e1ndar.[6]\u200b", "subsections": [{"name": "Versiones", "text": "Desde J2SE 1.4, la evoluci\u00f3n del lenguaje ha sido regulada por el JCP (Java Community Process), que usa Java Specification Requests (JSRs) para proponer y especificar cambios en la plataforma Java. El lenguaje en s\u00ed mismo est\u00e1 especificado en la Java Language Specification (JLS), o Especificaci\u00f3n del Lenguaje Java. Los cambios en los JLS son gestionados en JSR 901.\nJDK 1.0 (23 de enero de 1996) \u2014 Primer lanzamiento: comunicado de prensa\nJDK 1.1 (19 de febrero de 1997) \u2014 Principales adiciones incluidas: comunicado de prensa\nuna reestructuraci\u00f3n intensiva del modelo de eventos AWT (Abstract Windowing Toolkit)\nclases internas (inner classes)\nJavaBeans\nJDBC (Java Database Connectivity), para la integraci\u00f3n de bases de datos\nRMI (Remote Method Invocation)\nJ2SE 1.2 (8 de diciembre de 1998) \u2014 Nombre clave Playground. Esta y las siguientes versiones fueron recogidas bajo la denominaci\u00f3n Java 2 y el nombre \"J2SE\" (Java 2 Platform, Standard Edition) reemplaz\u00f3 a JDK para distinguir la plataforma base de J2EE (Java 2 Platform, Enterprise Edition) y J2ME (Java 2 Platform, Micro Edition). Otras mejoras a\u00f1adidas inclu\u00edan: comunicado de prensa\nla palabra reservada (keyword) strictfp\nreflexi\u00f3n en la programaci\u00f3n\nla API gr\u00e1fica ( Swing) fue integrada en las clases b\u00e1sicas\nla m\u00e1quina virtual (JVM) de Sun fue equipada con un compilador JIT (Just in Time) por primera vez\nJava Plug-in\nJava IDL, una implementaci\u00f3n de IDL (Lenguaje de Descripci\u00f3n de Interfaz) para la interoperabilidad con CORBA\nColecciones (Collections)\nJ2SE 1.3 (8 de mayo de 2000) \u2014 Nombre clave Kestrel. Los cambios m\u00e1s notables fueron: comunicado de prensa lista completa de cambios\nla inclusi\u00f3n de la m\u00e1quina virtual de HotSpot JVM (la JVM de HotSpot fue lanzada inicialmente en abril de 1999, para la JVM de J2SE 1.2)\nRMI fue cambiado para que se basara en CORBA\nJavaSound\nse incluy\u00f3 el Java Naming and Directory Interface (JNDI) en el paquete de bibliotecas principales (anteriormente disponible como una extensi\u00f3n)\nJava Platform Debugger Architecture (JPDA)\nJ2SE 1.4 (6 de febrero de 2002) \u2014 Nombre clave Merlin. Este fue el primer lanzamiento de la plataforma Java desarrollado bajo el Proceso de la Comunidad Java como JSR 59. Los cambios m\u00e1s notables fueron: comunicado de prensalista completa de cambios\nPalabra reservada assert (Especificado en JSR 41.)\nExpresiones regulares modeladas al estilo de las expresiones regulares Perl\nEncadenaci\u00f3n de excepciones Permite a una excepci\u00f3n encapsular la excepci\u00f3n de bajo nivel original.\nnon-blocking NIO (New Input/Output) (Especificado en JSR 51.)\nLogging API (Specified in JSR 47.)\nAPI I/O para la lectura y escritura de im\u00e1genes en formatos como JPEG o PNG\nParser XML integrado y procesador XSLT (JAXP) (Especificado en JSR 5 y JSR 63.)\nSeguridad integrada y extensiones criptogr\u00e1ficas (JCE, JSSE, JAAS)\nJava Web Start incluido (El primer lanzamiento ocurri\u00f3 en marzo de 2001 para J2SE 1.3) (Especificado en JSR 56.)\nJ2SE 5.0 (30 de septiembre de 2004) \u2014 Nombre clave: Tiger. (Originalmente numerado 1.5, esta notaci\u00f3n a\u00fan es usada internamente.[3]) Desarrollado bajo JSR 176, Tiger a\u00f1adi\u00f3 un n\u00famero significativo de nuevas caracter\u00edsticas comunicado de prensa\nPlantillas (gen\u00e9ricos) \u2014 provee conversi\u00f3n de tipos (type safety) en tiempo de compilaci\u00f3n para colecciones y elimina la necesidad de la mayor\u00eda de conversi\u00f3n de tipos (type casting). (Especificado por JSR 14.)\nMetadatos \u2014 tambi\u00e9n llamados anotaciones, permite a estructuras del lenguaje como las clases o los m\u00e9todos, ser etiquetados con datos adicionales, que puedan ser procesados posteriormente por utilidades de proceso de metadatos. (Especificado por JSR 175.)\nAutoboxing/unboxing \u2014 Conversiones autom\u00e1ticas entre tipos primitivos (Como los int) y clases de envoltura primitivas (Como Integer). (Especificado por JSR 201.)\nEnumeraciones \u2014 la palabra reservada enum crea una typesafe, lista ordenada de valores (como Dia.LUNES, Dia.MARTES, etc.). Anteriormente, esto solo pod\u00eda ser llevado a cabo por constantes enteras o clases construidas manualmente (enum pattern). (Especificado por JSR 201.)\nVarargs (n\u00famero de argumentos variable) \u2014 El \u00faltimo par\u00e1metro de un m\u00e9todo puede ser declarado con el nombre del tipo seguido por tres puntos (e.g. void drawtext(String... lines)). En la llamada al m\u00e9todo, puede usarse cualquier n\u00famero de par\u00e1metros de ese tipo, que ser\u00e1n almacenados en un array para pasarlos al m\u00e9todo.\nBucle for mejorado \u2014 La sintaxis para el bucle for se ha extendido con una sintaxis especial para iterar sobre cada miembro de un array o sobre cualquier clase que implemente Iterable, como la clase est\u00e1ndar Collection, de la siguiente forma:\n \nvoid\ndisplayWidgets\n(\nIterable\n<\nWidget\n>\nwidgets\n)\n{\n     \nfor\nw\n:\n         \n.\ndisplay\n();\n}\nEste ejemplo itera sobre el objeto Iterable widgets, asignando, en orden, cada uno de los elementos a la variable w, y llamando al m\u00e9todo display() de cada uno de ellos. (Especificado por JSR 201.)\nJava SE 6 (11 de diciembre de 2006) \u2014 Nombre clave Mustang. Estuvo en desarrollo bajo la JSR 270. En esta versi\u00f3n, Sun cambi\u00f3 el nombre \"J2SE\" por Java SE y elimin\u00f3 el \".0\" del n\u00famero de versi\u00f3n.[4] Est\u00e1 disponible en http://java.sun.com/javase/6/. Los cambios m\u00e1s importantes introducidos en esta versi\u00f3n son:\nIncluye un nuevo marco de trabajo y API que hacen posible la combinaci\u00f3n de Java con lenguajes din\u00e1micos como PHP, Python, Ruby y JavaScript.\nIncluye el motor Rhino, de Mozilla, una implementaci\u00f3n de Javascript en Java.\nIncluye un cliente completo de Servicios Web y soporta las \u00faltimas especificaciones para Servicios Web, como JAX-WS 2.0, JAXB 2.0, STAX y JAXP.\nMejoras en la interfaz gr\u00e1fica y en el rendimiento.\nJava SE 7 \u2014 Nombre clave Dolphin. En el a\u00f1o 2006 a\u00fan se encontraba en las primeras etapas de planificaci\u00f3n. Su lanzamiento fue en julio de 2011.\nSoporte para XML dentro del propio lenguaje.\nUn nuevo concepto de superpaquete.\nSoporte para closures.\nIntroducci\u00f3n de anotaciones est\u00e1ndar para detectar fallos en el software.\nNo oficiales:\nNIO2.\nJava Module System.\nJava Kernel.\nNueva API para el manejo de D\u00edas y Fechas, la cual reemplazar\u00e1 las antiguas clases Date y Calendar.\nPosibilidad de operar con clases BigDecimal usando operandos.\nJava SE 8 \u2014 lanzada en marzo de 2014. Cabe destacar:\nIncorpora de forma completa la librer\u00eda JavaFX.\nDiferentes mejoras en seguridad.\nDiferentes mejoras en concurrencia.\nA\u00f1ade funcionalidad para programaci\u00f3n funcional mediante expresiones Lambda.\nMejora la integraci\u00f3n de JavaScript.\nNuevas API para manejo de fechas y tiempo (date - time).\nJava SE 9 \u2014 lanzada el 21 de septiembre del 2017.\nJava SE 10 \u2014 lanzada el 20 de marzo de 2018.\nJava SE 11 \u2014 lanzada el 25 de septiembre de 2018.\nJava SE 12 \u2014 lanzada el 19 de marzo de 2019.\nJava SE 15 \u2014 lanzada el 15 de septiembre de 2020.\nJava SE 16 \u2014 lanzada el 18 de marzo de 2021.[7]\u200b\nJava SE 17 \u2014 lanzada el 14 de septiembre de 2021. Como m\u00ednimo tendr\u00e1 soporte hasta septiembre de 2024 al ser una versi\u00f3n LTS (Long Term Support - Soporte a largo plazo).\nJava SE 18 \u2014 lanzada el 22 de marzo de 2022.[8]\u200b\nJava SE 19 \u2014 lanzada el 20 de septiembre de 2022.[9]\u200b\nJava SE 20  \u2014 lanzada el 21 de marzo de 2023.[10]\u200b\nJava SE 21 \u2014 lanzada el 19 de septiembre de 2023. Como m\u00ednimo tendr\u00e1 soporte hasta septiembre de 2026 al ser una versi\u00f3n LTS (Long Term Support - Soporte a largo plazo).\nEn el 2005 se calculaba en 4,5 millones el n\u00famero de desarrolladores y 2500 millones de dispositivos habilitados con tecnolog\u00eda Java."}]}, {"name": "Filosof\u00eda", "text": "El lenguaje Java se cre\u00f3 con cinco objetivos principales:\nDeber\u00eda usar el paradigma de la programaci\u00f3n orientada a objetos.\nDeber\u00eda permitir la ejecuci\u00f3n de un mismo programa en m\u00faltiples sistemas operativos.\nDeber\u00eda incluir por defecto soporte para trabajo en red.\nDeber\u00eda dise\u00f1arse para ejecutar c\u00f3digo en sistemas remotos de forma segura.\nDeber\u00eda ser f\u00e1cil de usar y tomar lo mejor de otros lenguajes orientados a objetos, como C++.\nPara conseguir la ejecuci\u00f3n de c\u00f3digo remoto y el soporte de red, los programadores de Java a veces recurren a extensiones como CORBA (Common Object Request Broker Architecture), Internet Communications Engine u OSGi, respectivamente.", "subsections": [{"name": "Orientado a objetos", "text": "V\u00e9anse tambi\u00e9n:\n y \nLa primera caracter\u00edstica, orientado a objetos (\u201cOO\u201d), se refiere a un m\u00e9todo de programaci\u00f3n y al dise\u00f1o del lenguaje. Aunque hay muchas interpretaciones para OO, una primera idea es dise\u00f1ar el software de forma que los distintos tipos de datos que usen est\u00e9n unidos a sus operaciones. As\u00ed, los datos y el c\u00f3digo (funciones o m\u00e9todos) se combinan en entidades llamadas objetos. Un objeto puede verse como un paquete que contiene el \u201ccomportamiento\u201d (el c\u00f3digo) y el \u201cestado\u201d (datos). El principio es separar aquello que cambia de las cosas que permanecen inalterables. Frecuentemente, cambiar una estructura de datos implica un cambio en el c\u00f3digo que opera sobre los mismos, o viceversa. Esta separaci\u00f3n en objetos coherentes e independientes ofrece una base m\u00e1s estable para el dise\u00f1o de un sistema software. El objetivo es hacer que grandes proyectos sean f\u00e1ciles de gestionar y manejar, mejorando como consecuencia su calidad y reduciendo el n\u00famero de proyectos fallidos.\nOtra de las grandes promesas de la programaci\u00f3n orientada a objetos es la creaci\u00f3n de entidades m\u00e1s gen\u00e9ricas (objetos) que permitan la reutilizaci\u00f3n del software entre proyectos, una de las premisas fundamentales de la Ingenier\u00eda del Software. Un objeto gen\u00e9rico \u201ccliente\u201d, por ejemplo, deber\u00eda en teor\u00eda tener el mismo conjunto de comportamiento en diferentes proyectos, sobre todo cuando estos coinciden en cierta medida, algo que suele suceder en las grandes organizaciones. En este sentido, los objetos podr\u00edan verse como piezas reutilizables que pueden emplearse en m\u00faltiples proyectos distintos, posibilitando as\u00ed a la industria del software construir proyectos de envergadura empleando componentes ya existentes y de comprobada calidad, conduciendo esto finalmente a una reducci\u00f3n dr\u00e1stica del tiempo de desarrollo. Podemos usar como ejemplo de objeto el aluminio. Una vez definidos datos (densidad, maleabilidad, etc.), y su \u201ccomportamiento\u201d (soldar dos piezas, etc.), el objeto \u201caluminio\u201d puede ser reutilizado en el campo de la construcci\u00f3n, del autom\u00f3vil, de la aviaci\u00f3n, etc.\nLa reutilizaci\u00f3n del software ha experimentado resultados dispares, encontrando dos dificultades principales: el dise\u00f1o de objetos realmente gen\u00e9ricos es pobremente comprendido, y falta una metodolog\u00eda para la amplia comunicaci\u00f3n de oportunidades de reutilizaci\u00f3n. Algunas comunidades de \u201cc\u00f3digo abierto\u201d (open source) quieren ayudar en este problema dando medios a los desarrolladores para diseminar la informaci\u00f3n sobre el uso y versatilidad de objetos reutilizables y bibliotecas de objetos."}, {"name": "Independencia de la plataforma", "text": "La segunda caracter\u00edstica, la independencia de la plataforma, significa que programas escritos en el lenguaje Java pueden ejecutarse igualmente en cualquier tipo de hardware. As\u00ed reza el axioma de Java: \"write once, run anywhere\" que traducido al espa\u00f1ol es: escribe una vez, ejecuta en cualquier parte.\nPara ello, se compila el c\u00f3digo fuente escrito en lenguaje Java, para generar un c\u00f3digo conocido como \u201cbytecode\u201d (espec\u00edficamente Java bytecode), instrucciones m\u00e1quina simplificadas espec\u00edficas de la plataforma Java. Esta pieza est\u00e1 \u201ca medio camino\u201d entre el c\u00f3digo fuente y el c\u00f3digo m\u00e1quina que entiende el dispositivo destino. El bytecode es ejecutado entonces en la m\u00e1quina virtual (JVM), un programa escrito en c\u00f3digo nativo de la plataforma destino (que es el que entiende su hardware), que interpreta y ejecuta el c\u00f3digo. Adem\u00e1s, se suministran bibliotecas adicionales para acceder a las caracter\u00edsticas de cada dispositivo (como los gr\u00e1ficos, ejecuci\u00f3n mediante hebras o threads, la interfaz de red) de forma unificada. Se debe tener presente que, aunque hay una etapa expl\u00edcita de compilaci\u00f3n, el bytecode generado es interpretado o convertido a instrucciones m\u00e1quina del c\u00f3digo nativo por el compilador JIT (Just In Time).\nHay implementaciones del compilador de Java que convierten el c\u00f3digo fuente directamente en c\u00f3digo objeto nativo, como GCJ. Esto elimina la etapa intermedia donde se genera el bytecode, pero la salida de este tipo de compiladores solamente puede ejecutarse en un tipo de arquitectura.\nLa licencia sobre Java de Sun insiste en que todas las implementaciones sean \u201ccompatibles\u201d. Esto dio lugar a una disputa legal entre Microsoft y Sun, cuando este \u00faltimo aleg\u00f3 que la implementaci\u00f3n de Microsoft no daba soporte a las interfaces RMI y JNI adem\u00e1s de haber a\u00f1adido caracter\u00edsticas \u2018\u2019dependientes\u2019\u2019 de su plataforma. Sun demand\u00f3 a Microsoft y gan\u00f3 por da\u00f1os y perjuicios (unos 20 millones de d\u00f3lares), as\u00ed como una orden judicial forzando el acatamiento de la licencia de Sun. Como respuesta, Microsoft no ofrece Java con su versi\u00f3n de sistema operativo, y en recientes versiones de Windows, su navegador Internet Explorer no admite la ejecuci\u00f3n de applets sin un conector (o plugin) aparte. Sin embargo, Sun y otras fuentes ofrecen versiones gratuitas para distintas versiones de Windows.\nLas primeras implementaciones del lenguaje usaban una m\u00e1quina virtual interpretada para conseguir la portabilidad. Sin embargo, el resultado eran programas que se ejecutaban comparativamente m\u00e1s lentos que aquellos escritos en C o C++. Esto hizo que Java se ganase una reputaci\u00f3n de lento en rendimiento. Las implementaciones recientes de la JVM dan lugar a programas que se ejecutan considerablemente m\u00e1s r\u00e1pido que las versiones antiguas, empleando diversas t\u00e9cnicas, aunque sigue siendo mucho m\u00e1s lentos que otros lenguajes[cita\u00a0requerida].\nLa primera de estas t\u00e9cnicas es simplemente compilar directamente en c\u00f3digo nativo como hacen los compiladores tradicionales, eliminando la etapa del bytecode. Esto da lugar a un gran rendimiento en la ejecuci\u00f3n, pero tapa el camino a la portabilidad. Otra t\u00e9cnica, conocida como compilaci\u00f3n JIT (Just In Time, o \"compilaci\u00f3n al vuelo\"), convierte el bytecode a c\u00f3digo nativo cuando se ejecuta la aplicaci\u00f3n. Otras m\u00e1quinas virtuales m\u00e1s sofisticadas usan una \"recompilaci\u00f3n din\u00e1mica\" en la que la VM es capaz de analizar el comportamiento del programa en ejecuci\u00f3n y recompila y optimiza las partes cr\u00edticas. La recompilaci\u00f3n din\u00e1mica puede lograr mayor grado de optimizaci\u00f3n que la compilaci\u00f3n tradicional (o est\u00e1tica), ya que puede basar su trabajo en el conocimiento que de primera mano tiene sobre el entorno de ejecuci\u00f3n y el conjunto de clases cargadas en memoria. La compilaci\u00f3n JIT y la recompilaci\u00f3n din\u00e1mica permiten a los programas Java aprovechar la velocidad de ejecuci\u00f3n del c\u00f3digo nativo sin por ello perder la ventaja de la portabilidad en ambos.\nLa portabilidad es t\u00e9cnicamente dif\u00edcil de lograr, y el \u00e9xito de Java en ese campo ha sido dispar. Aunque es de hecho posible escribir programas para la plataforma Java que act\u00faen de forma correcta en m\u00faltiples plataformas de distinta arquitectura, el gran n\u00famero de estas con peque\u00f1os errores o inconsistencias llevan a que a veces se parodie el eslogan de Sun, \"Write once, run anywhere\" como \"Write once, debug everywhere\" (o \u201cEscr\u00edbelo una vez, ejec\u00fatalo en cualquier parte\u201d por \u201cEscr\u00edbelo una vez, dep\u00faralo en todas partes\u201d).\nEl concepto de independencia de la plataforma de Java cuenta, sin embargo, con un gran \u00e9xito en las aplicaciones en el entorno del servidor, como los Servicios Web, los Servlets, los Java Beans, as\u00ed como en sistemas empotrados basados en OSGi, usando entornos Java empotrados."}, {"name": "El recolector de basura", "text": "V\u00e9ase tambi\u00e9n:\nEn Java el problema de fugas de memoria se evita en gran medida gracias a la recolecci\u00f3n de basura (o automatic garbage collector). El programador determina cu\u00e1ndo se crean los objetos, y el entorno, en tiempo de ejecuci\u00f3n de Java (Java runtime), es el responsable de gestionar el ciclo de vida de los objetos. El programa, u otros objetos, pueden tener localizado un objeto mediante una referencia a este. Cuando no quedan referencias a un objeto, el recolector de basura de Java borra el objeto, liberando as\u00ed la memoria que ocupaba previniendo posibles fugas (ejemplo: un objeto creado y \u00fanicamente usado dentro de un m\u00e9todo solamente tiene entidad dentro de este; al salir del m\u00e9todo el objeto es eliminado). Aun as\u00ed, es posible que se produzcan fugas de memoria si el c\u00f3digo almacena referencias a objetos que ya no son necesarios; es decir, pueden a\u00fan ocurrir, pero en un nivel conceptual superior. En definitiva, el recolector de basura de Java permite una f\u00e1cil creaci\u00f3n y eliminaci\u00f3n de objetos y mayor seguridad."}]}, {"name": "Sintaxis", "text": "La sintaxis de Java se deriva en gran medida de C++. Pero a diferencia de este, que combina la sintaxis para programaci\u00f3n gen\u00e9rica, estructurada y orientada a objetos, Java fue construido desde el principio para ser completamente orientado a objetos. Todo en Java es un objeto (salvo algunas excepciones), y todo en Java reside en alguna clase (recordemos que una clase es un molde a partir del cual pueden crearse varios objetos).\nA diferencia de C++, Java no tiene sobrecarga de operadores[11]\u200b o herencia m\u00faltiple para clases, aunque la herencia m\u00faltiple est\u00e1 disponible para interfaces.", "subsections": [{"name": "Aplicaciones aut\u00f3nomas", "text": "Este ejemplo necesita una peque\u00f1a explicaci\u00f3n.\nTodo en Java est\u00e1 dentro de una clase, incluyendo programas aut\u00f3nomos.\nEl c\u00f3digo fuente se guarda en archivos con el mismo nombre que la clase que contienen y con extensi\u00f3n \u201c.java\u201d. Una clase (class) declarada p\u00fablica (public) debe seguir este convenio. Si tenemos una clase llamada Hola, su c\u00f3digo fuente deber\u00e1 guardarse en el fichero \u201cHola.java\u201d.\nEl compilador genera un archivo de clase (con extensi\u00f3n \u201c.class\u201d) por cada una de las clases definidas en el archivo fuente. Una clase an\u00f3nima se trata como si su nombre fuera la concatenaci\u00f3n del nombre de la clase que la encierra, el s\u00edmbolo \u201c$\u201d, y un n\u00famero entero.\nLos programas que se ejecutan de forma independiente y aut\u00f3noma, deben contener el m\u00e9todo \u201dmain()\u201d.\nLa palabra reservada \u201dvoid\u201d indica que el m\u00e9todo main no devuelve nada.\nEl m\u00e9todo main debe aceptar un array de objetos tipo String. Por acuerdo se referencia como \u201dargs\u201d, aunque puede emplearse cualquier otro identificador.\nLa palabra reservada \u201dstatic\u201d indica que el m\u00e9todo es un m\u00e9todo de clase, asociado a la clase en vez de a una instancia de la misma. El m\u00e9todo main debe ser est\u00e1tico o \u2019\u2019de clase\u2019\u2019.\nLa palabra reservada public significa que un m\u00e9todo puede ser llamado desde otras clases, o que la clase puede ser usada por clases fuera de la jerarqu\u00eda de la propia clase. Otros tipos de acceso son \u201dprivate\u201d o \u201dprotected\u201d.\nLa utilidad de impresi\u00f3n (en pantalla por ejemplo) forma parte de la biblioteca est\u00e1ndar de Java: la clase \u2018\u2019\u2019System\u2019\u2019\u2019 define un campo p\u00fablico est\u00e1tico llamado \u2018\u2019\u2019out\u2019\u2019\u2019. El objeto out es una instancia de \u2018\u2019\u2019PrintStream\u2019\u2019\u2019, que ofrece el m\u00e9todo \u2018\u2019\u2019println (String)\u2019\u2019\u2019 para volcar datos en la pantalla (la salida est\u00e1ndar).\nLas aplicaciones aut\u00f3nomas se ejecutan dando al entorno de ejecuci\u00f3n de Java el nombre de la clase cuyo m\u00e9todo main debe invocarse. Por ejemplo, una l\u00ednea de comando (en Unix o Windows) de la forma java \u2013cp . Hola ejecutar\u00e1 el programa del ejemplo (previamente compilado y generado \u201cHola.class\u201d). El nombre de la clase cuyo m\u00e9todo main se llama puede especificarse tambi\u00e9n en el fichero \u201cMANIFEST\u201d del archivo de empaquetamiento de Java (.jar)."}, {"name": "Applets", "text": "Las applet Java son programas incrustados en otras aplicaciones, normalmente una p\u00e1gina web que se muestra en un navegador.\n// Hello.java\nimport\njavax.swing.JApplet\n;\njava.awt.Graphics\npublic\nclass\nHello\nextends\nJApplet\n    \npaint\nGraphics\ng\n        \ndrawString\n\"Hola, mundo!\"\n,\n65\n95\n);\n<!-- Hola.html -->\n<\nhtml\n>\nhead\ntitle\n</\nbody\napplet\ncode\n=\n\"Hola.class\"\nwidth\n\"200\"\nheight\nActualmente HTML 5 ha eliminado el uso de la etiqueta <applet>. Pero todav\u00eda existe la forma de usarlo en HTML5. (Texto en ingl\u00e9s) Java Applets in HTML5.\nLa sentencia import indica al compilador de Java que incluya las clases java.applet.Applet y java.awt.Graphics, para poder referenciarlas por sus nombres, sin tener que anteponer la ruta completa cada vez que se quieran usar en el c\u00f3digo fuente.\nLa clase Hola extiende (extends) a la clase Applet;es decir, es una subclase de \u00e9sta. La clase Applet permite a la aplicaci\u00f3n mostrar y controlar el estado del applet. La clase Applet es un componente del AWT (Abstract Window Toolkit), que permite al applet mostrar una interfaz gr\u00e1fica de usuario o GUI (Graphical User Interface), y responder a eventos generados por el usuario.\nLa clase Hola sobrecarga el m\u00e9todo paint (Graphics) heredado de la superclase contenedora (Applet en este caso), para acceder al c\u00f3digo encargado de dibujar. El m\u00e9todo paint() recibe un objeto Graphics que contiene el contexto gr\u00e1fico para dibujar el applet. El m\u00e9todo paint() llama al m\u00e9todo drawString (String, int, int) del objeto. [5]"}, {"name": "Servlets", "text": "Art\u00edculo principal:\nLos servlets son componentes de la parte del servidor de Java EE encargados de generar respuestas a las peticiones recibidas de los clientes.\n// Hola.java\njava.io.IOException\njavax.servlet.*\nHola\nGenericServlet\nservice\nServletRequest\nrequest\nServletResponse\nresponse\nthrows\nServletException\nIOException\nsetContentType\n\"text/html\"\nPrintWriter\npw\ngetWriter\nprintln\n\"\u00a1Hola, mundo!\"\nclose\nLas sentencias import indican al compilador de Java la inclusi\u00f3n de todas las clases p\u00fablicas e interfaces de los paquetes java.io y javax.servlet en la compilaci\u00f3n.\nLa clase Hola extiende (extends) es heredera de la clase GenericServlet. Esta clase proporciona la interfaz para que el servidor le pase las peticiones al servlet y el mecanismo para controlar el ciclo de vida del servlet.\nLa clase Hola sobrecarga el m\u00e9todo service (ServletRequest, ServletResponse), definido por la interfaz servlet para acceder al manejador de la petici\u00f3n de servicio. El m\u00e9todo service() recibe un objeto de tipo ServletRequest que contiene la petici\u00f3n del cliente y un objeto de tipo ServletResponse, usado para generar la respuesta que se devuelve al cliente. El m\u00e9todo service() puede lanzar (throws) excepciones de tipo ServletException e IOException si ocurre alg\u00fan tipo de anomal\u00eda.\nEl m\u00e9todo setContentType (String) en el objeto respuesta establece el tipo de contenido MIME a \"text/html\", para indicar al cliente que la respuesta a su petici\u00f3n es una p\u00e1gina con formato HTML. El m\u00e9todo getWriter() del objeto respuesta devuelve un objeto de tipo PrintWriter, usado como una tuber\u00eda por la que viajar\u00e1n los datos al cliente. El m\u00e9todo println (String) escribe la cadena \"\u00a1Hola, mundo!\" en la respuesta y finalmente se llama al m\u00e9todo close() para cerrar la conexi\u00f3n, que hace que los datos escritos en la tuber\u00eda o stream sean devueltos al cliente."}, {"name": "Aplicaciones con interfaz", "text": "Swing es la biblioteca para la interfaz gr\u00e1fica de usuario avanzada de la plataforma Java SE.\njavax.swing.*\nJFrame\nHola\n()\nsetDefaultCloseOperation\nWindowConstants\nDISPOSE_ON_CLOSE\nadd\nnew\nJLabel\n));\npack\nstatic\nmain\nString\n[]\nargs\n().\nsetVisible\ntrue\nLas instrucciones import indican al compilador de Java que las clases e interfaces del paquete javax.swing se incluyan en la compilaci\u00f3n.\nLa clase Hola extiende (extends) la clase javax.swing.JFrame, que implementa una ventana con una barra de t\u00edtulo y un control para cerrarla.\nEl constructor Hola() inicializa el marco o frame llamando al m\u00e9todo setDefaultCloseOperation (int) heredado de JFrame para establecer las operaciones por defecto cuando el control de cierre en la barra de t\u00edtulo es seleccionado al valor WindowConstants.DISPOSE_ON_CLOSE. Esto hace que se liberen los recursos tomados por la ventana cuando es cerrada, y no simplemente ocultada, lo que permite a la m\u00e1quina virtual y al programa acabar su ejecuci\u00f3n. A continuaci\u00f3n se crea un objeto de tipo JLabel con el texto \"\u00a1Hola, mundo!\", y se a\u00f1ade al marco mediante el m\u00e9todo add (Component), heredado de la clase Container. El m\u00e9todo pack(), heredado de la clase Window, es invocado para dimensionar la ventana y distribuir su contenido.\nEl m\u00e9todo main() es llamado por la JVM al comienzo del programa. Crea una instancia de la clase Hola y hace la ventana sea mostrada invocando al m\u00e9todo setVisible (boolean) de la superclase (clase de la que hereda) con el par\u00e1metro a true. V\u00e9ase que, una vez el marco es dibujado, el programa no termina cuando se sale del m\u00e9todo main(), ya que el c\u00f3digo del que depende se encuentra en un hilo de ejecuci\u00f3n independiente ya lanzado, y que permanecer\u00e1 activo hasta que todas las ventanas hayan sido destruidas."}]}, {"name": "Entornos de funcionamiento", "text": "El dise\u00f1o de Java, su robustez, el respaldo de la industria y su f\u00e1cil portabilidad han hecho de Java uno de los lenguajes con un mayor crecimiento y amplitud de uso en distintos \u00e1mbitos de la industria de la inform\u00e1tica.", "subsections": [{"name": "En dispositivos m\u00f3viles y sistemas embebidos", "text": "Desde la creaci\u00f3n de la especificaci\u00f3n J2ME (Java 2 Platform, Micro Edition), una versi\u00f3n del entorno de ejecuci\u00f3n Java reducido y altamente optimizado, especialmente desarrollado para el mercado de dispositivos electr\u00f3nicos de consumo, se ha producido toda una revoluci\u00f3n en lo que a la extensi\u00f3n de Java se refiere.\nEs posible encontrar microprocesadores dise\u00f1ados para ejecutar bytecode Java y software Java para tarjetas inteligentes (JavaCard), tel\u00e9fonos m\u00f3viles, buscapersonas, set-top-boxes, sintonizadores de TV y otros peque\u00f1os electrodom\u00e9sticos.\nEl modelo de desarrollo de estas aplicaciones es muy semejante a las applets de los navegadores, salvo que en este caso se denominan MIDlets.\nV\u00e9ase Sun Mobile Device Tecnology"}, {"name": "En el navegador web", "text": "Desde la primera versi\u00f3n de Java existe la posibilidad de desarrollar peque\u00f1as aplicaciones (Applets) en Java que luego pueden ser incrustadas en una p\u00e1gina HTML para que sean descargadas y ejecutadas por el navegador web. Estas miniaplicaciones se ejecutan en una JVM que el navegador tiene configurada como extensi\u00f3n (plug-in) en un contexto de seguridad restringido configurable para impedir la ejecuci\u00f3n local de c\u00f3digo potencialmente malicioso.\nEl \u00e9xito de este tipo de aplicaciones (la visi\u00f3n del equipo de Gosling) no fue realmente el esperado debido a diversos factores, siendo quiz\u00e1s el m\u00e1s importante la lentitud y el reducido ancho de banda de las comunicaciones en aquel entonces que limitaba el tama\u00f1o de las applets que se incrustaban en el navegador. La aparici\u00f3n posterior de otras alternativas (aplicaciones web din\u00e1micas de servidor) dej\u00f3 un reducido \u00e1mbito de uso para esta tecnolog\u00eda, quedando hoy relegada fundamentalmente a componentes espec\u00edficos para la intermediaci\u00f3n desde una aplicaci\u00f3n web din\u00e1mica de servidor con dispositivos ubicados en la m\u00e1quina cliente donde se ejecuta el navegador.\nLas applets Java no son las \u00fanicas tecnolog\u00edas (aunque s\u00ed las primeras) de componentes complejos incrustados en el navegador. Otras tecnolog\u00edas similares pueden ser: ActiveX de Microsoft, Flash, Java Web Start, etc."}, {"name": "En sistemas de servidor", "text": "En la parte del servidor, Java es m\u00e1s popular que nunca, desde la aparici\u00f3n de la especificaci\u00f3n de Servlets y JSP (Java Server Pages).\nHasta entonces, las aplicaciones web din\u00e1micas de servidor que exist\u00edan se basaban fundamentalmente en componentes CGI y lenguajes interpretados. Ambos ten\u00edan diversos inconvenientes (fundamentalmente lentitud, elevada carga computacional o de memoria y propensi\u00f3n a errores por su interpretaci\u00f3n din\u00e1mica).\nLos servlets y las JSP supusieron un importante avance ya que:\nEl API de programaci\u00f3n es muy sencilla, flexible y extensible.\nLos servlets no son procesos independientes (como los CGI) y por tanto se ejecutan dentro del mismo proceso que la JVM mejorando notablemente el rendimiento y reduciendo la carga computacional y de memoria requeridas.\nLas JSP son p\u00e1ginas que se compilan din\u00e1micamente (o se precompilan previamente a su distribuci\u00f3n) de modo que el c\u00f3digo que se consigue supone una ventaja en rendimiento substancial frente a muchos lenguajes interpretados.\nLa especificaci\u00f3n de Servlets y JSP define un API de programaci\u00f3n y los requisitos para un contenedor (servidor) dentro del cual se puedan desplegar estos componentes para formar aplicaciones web din\u00e1micas completas. Hoy d\u00eda existen multitud de contenedores (libres y comerciales) compatibles con estas especificaciones.\nA partir de su expansi\u00f3n entre la comunidad de desarrolladores, estas tecnolog\u00edas han dado paso a modelos de desarrollo mucho m\u00e1s elaborados con frameworks (pe Struts, Webwork) que se sobreponen sobre los servlets y las JSP para conseguir un entorno de trabajo mucho m\u00e1s poderoso y segmentado en el que la especializaci\u00f3n de roles sea posible (desarrolladores, dise\u00f1adores gr\u00e1ficos,...) y se facilite la reutilizaci\u00f3n y robustez de c\u00f3digo. A pesar de todo ello, las tecnolog\u00edas que subyacen (Servlets y JSP) son substancialmente las mismas.\nEste modelo de trabajo se ha convertido en uno de los est\u00e1ndar de facto para el desarrollo de aplicaciones web din\u00e1micas de servidor."}, {"name": "En aplicaciones de escritorio", "text": "Hoy en d\u00eda existen multitud de aplicaciones gr\u00e1ficas de usuario basadas en Java. El entorno de ejecuci\u00f3n Java (JRE) se ha convertido en un componente habitual en los PC de usuario de los sistemas operativos m\u00e1s usados en el mundo. Adem\u00e1s, muchas aplicaciones Java lo incluyen dentro del propio paquete de la aplicaci\u00f3n de modo que se ejecuten en cualquier PC.\nEn las primeras versiones de la plataforma Java exist\u00edan importantes limitaciones en las API de desarrollo gr\u00e1fico (AWT). Desde la aparici\u00f3n de la biblioteca Swing la situaci\u00f3n mejor\u00f3 substancialmente y posteriormente con la aparici\u00f3n de bibliotecas como SWT hacen que el desarrollo de aplicaciones de escritorio complejas y con gran dinamismo, usabilidad, etc. sea relativamente sencillo."}, {"name": "Plataformas soportadas", "text": "Una versi\u00f3n del entorno de ejecuci\u00f3n Java JRE (Java Runtime Environment) est\u00e1 disponible en la mayor\u00eda de equipos de escritorio. Sin embargo, Microsoft no lo ha incluido por defecto en sus sistemas operativos. En el caso de Apple, este incluye una versi\u00f3n propia del JRE en su sistema operativo, el Mac OS. Tambi\u00e9n es un producto que por defecto aparece en la mayor\u00eda de las distribuciones de GNU/Linux. Debido a incompatibilidades entre distintas versiones del JRE, muchas aplicaciones prefieren instalar su propia copia del JRE antes que confiar su suerte a la aplicaci\u00f3n instalada por defecto. Los desarrolladores de applets de Java o bien deben insistir a los usuarios en la actualizaci\u00f3n del JRE, o bien desarrollar bajo una versi\u00f3n antigua de Java y verificar el correcto funcionamiento en las versiones posteriores."}]}, {"name": "Programaci\u00f3n", "text": "", "subsections": [{"name": "Expresiones", "text": "Las expresiones son un conjunto de elementos o tokens junto con literales que son evaluados para devolver un resultado.\nLos tokens son elemento m\u00e1s peque\u00f1o de un programa que es significativo, e interpretado o entendido por el compilador, en Java los tokens se dividen en cinco categor\u00edas que son:\nIdentificadores: Son las representaciones que se les da a los nombres que se asignan a las variables, clases, paquetes, m\u00e9todos y constantes en el c\u00f3digo de Java para que el compilador los identifique y el programador pueda entenderlos. En Java los identificadores pueden diferenciar entre may\u00fasculas o min\u00fasculas por ser case sensitive, por lo que la variable cuyo nombre sea \u201cMivariable\u201d, no es igual a \u201cmivariable\u201d, ya que Java identifica estas como variables diferentes por ser case sensitive, tambi\u00e9n se puede utilizar n\u00fameros, o el signo \u201c_\u201d para asignar un identificador.\nPalabras claves: Son los identificadores reservados por java para cumplir con un objetivo espec\u00edfico en el c\u00f3digo y el compilador, se usan de forma limitada y en casos espec\u00edficos. Las palabras claves que usa Java son las siguientes:\nLas palabras que se encuentran en negrilla, son palabras claves para Java aunque actualmente no se utilicen en la versi\u00f3n de Java, pero se pretenden integrar en las siguientes versiones de Java.\nLiterales y constantes: Los literales son sintaxis para asignar valores a una variable, es decir el valor que puede tomar una variable, tambi\u00e9n es un valor constante que puede ser de tipo num\u00e9rico.\nLas constantes son variables que tienen un valor fijo y no puede ser modificado en el trascurso de la ejecuci\u00f3n del c\u00f3digo, estas se declaran por medio de los modificadores final y static.\nfinal\ndouble\npi\n3.1416\nOperadores: Son los que nos indican una evaluaci\u00f3n que se aplica a un objeto o un dato, sobre un identificador o constante. Un ejemplo de operadores puede ser la suma, resta o multiplicaci\u00f3n.\nSeparadores: Se utilizan para indicarle al compilador de Java donde se ubican los elementos del c\u00f3digo, los separadores que admite Java son:\n{ },:;\nTambi\u00e9n el compilador de Java identifica y elimina los comentarios, retornos de carros espacios vac\u00edos y de tabulaci\u00f3n a la hora de compilar por lo que no son considerados parte de un token.\nLas expresiones pueden ser una combinaci\u00f3n en secuencia de variables, operadores y m\u00e9todos. Las expresiones son utilizadas para realizar c\u00e1lculos, para asignar valores a variables, o para controlar la ejecuci\u00f3n del flujo del programa."}, {"name": "Operadores", "text": "Son las expresiones de Java que tras realizar una operaci\u00f3n devuelven un resultado. Seg\u00fan el n\u00famero de operandos que maneje un operador, puede ser de dos tipos: unario o binario.\nLos operadores unarios son aquellos que solo necesitan un operando para devolver un valor.\nLos operadores binarios son aquellos que necesitan dos o m\u00e1s operandos para devolver un valor.\nOperadores a nivel de bits\nno existe\n~ Complemento a 1, este operador invierte los d\u00edgitos, cambiando los 0 por 1 y los 1 por 0, un ejemplo puede ser:\nComo se puede ver se cambian los valores de 0 a 1 y de 1 a 0.\n& AND a nivel de bit, este operador realiza una operaci\u00f3n AND o suma entre dos n\u00fameros de bit, en donde si dos bit son igual a 1 el resultado ser\u00e1 1, de lo contrario ser\u00e1 0, un ejemplo puede ser:\n| Or a nivel de bit, este operador realiza una operaci\u00f3n OR en donde si alguno de los dos n\u00fameros es 1 el resultado ser\u00e1 1, un ejemplo puede ser:\n^ XOR a nivel de bit, este operador realiza la operaci\u00f3n XOR en donde si los dos n\u00fameros son iguales el resultado ser\u00e1 0 de lo contrario ser\u00e1 1, un ejemplo puede ser:\n<< Desplazamiento a la izquierda, este operador desplaza n cantidad de espacios a la izquierda un bit, un ejemplo puede ser;\nComo se puede ver al realizar el desplazamiento se realiza una inserci\u00f3n de un d\u00edgito 0 a la derecha\nPrecedencia de operadores\nLos operadores son una parte principal en las expresiones, el tipo y forma de uso es fundamental a la hora de programar, pero para su uso se tiene que tener en cuenta una serie de normas, como lo son la precedencia de los operadores.\nLos operadores son ejecutados seg\u00fan su precedencia: si cuentan con una precedencia mayor ser\u00e1n evaluados antes que los de precedencia menor; si por casualidad se llegasen a presentar operadores con el mismo nivel de precedencia, estos se evaluar\u00e1n de derecha a izquierda; y si son operadores binarios (menos los operadores de asignaci\u00f3n) se evaluar\u00e1n de izquierda a derecha.\nA Java se le puede indicar qu\u00e9 operadores debe evaluar primero sin importar su precedencia por medio de par\u00e9ntesis \"( )\", de esta forma el compilador de Java interpreta que primero debe ejecutar las operaciones que se encuentran dentro de los par\u00e9ntesis, y luego continuar con los dem\u00e1s operadores.\nLa siguiente tabla clasifica los operadores utilizados en Java seg\u00fan su nivel de precedencia, siendo arriba el nivel m\u00e1s alto:\nUn ejemplo de la precedencia de los operadores en Java podr\u00eda ser el siguiente, en donde tenemos un c\u00f3digo que se encargar\u00e1 de realizar una serie de operaciones aritm\u00e9ticas:\nint\nnumero1\n3\nnumero2\n4\nresultado\n+\n*\nSystem\nout\n//esto imprime el valor de 15\nSeg\u00fan la precedencia de los operadores, la multiplicaci\u00f3n \"*\" tiene mayor prioridad que la suma \"+\", por lo que primero se ejecuta la multiplicaci\u00f3n y luego se realiza la suma.\n//esto imprime el valor de 21\nEn este caso el resultado cambia ya que primero se eval\u00faan los par\u00e1metros que est\u00e1n dentro del par\u00e9ntesis y luego se eval\u00faa el resto de par\u00e1metros.\nUna de las recomendaciones que da Java para el desarrollo es el uso de los par\u00e9ntesis en las operaciones con m\u00e1s de 3 operandos, as\u00ed de esta forma el c\u00f3digo se hace m\u00e1s legible y se evitan errores al momento de compilar."}, {"name": "Sentencias", "text": "Las sentencias son una representaci\u00f3n de una secuencia de acciones que se realizan en Java. La clave fundamental de las sentencias es su punto final que indica que ha finalizado la sentencia y puede continuar con la siguiente, el indicador utilizado es el signo de punto y coma (;). En Java contamos con sentencias que pueden ser de asignaci\u00f3n, de bucles, de salto y condicionales.\nLas sentencias se conforman com\u00fanmente por una instancia y un operador; un ejemplo es la sentencia de asignaci\u00f3n que se conforma por una instancia de una variable, el signo de asignaci\u00f3n y una expresi\u00f3n; un ejemplo es:\nvariable\n12\n2\nLas sentencias de asignaci\u00f3n son aquellas en las que se asigna un valor a una variable o constante.\nLas sentencias condicionales son las que expresan una condici\u00f3n para definir el flujo de ejecuci\u00f3n del programa; entre ellas tenemos if, else y switch.\nLas sentencias de bucles se encargan de realizar una acci\u00f3n cierta cantidad de tiempo dado, o hasta que se cumpla con una condici\u00f3n; entre ellas tenemos while, do-while, y for.\nLas sentencias de salto llevan al compilador a un punto espec\u00edfico del programa o hacia la siguiente sentencia de ejecuci\u00f3n; entre ellas tenemos break, continue, y return."}, {"name": "Conversi\u00f3n de tipos", "text": "En algunos casos suele ser necesario convertir un tipo de dato a otro, esto se le conoce como conversi\u00f3n de tipos, modelado, o tipado, as\u00ed de esta forma poder realizar las operaciones necesarias sobre el valor que se desea convertir.\nSe debe tener en cuenta el tipo de dato que se va a convertir, ya que si se convierte un dato que tenga una cantidad menor de bit al anterior este tendr\u00e1 perdida de informaci\u00f3n, un ejemplo de tipado puede ser un n\u00famero long que se desea convertir a int, el compilador eliminara los primeros 32bit del long para ajustarlo al int ya que el int es de 32bit y el long de 64.\nSi la conversi\u00f3n se realiza a un tipo de datos de menos bit a un tipo de datos con mayor bit, la conversi\u00f3n se realiza autom\u00e1ticamente llamada conversi\u00f3n impl\u00edcita, pero si se realiza de un tipo de datos con mayor bit a menor bit se tiene que realizar una conversi\u00f3n expl\u00edcita, la cual se realiza con un casting, al usar este m\u00e9todo se obliga a realizar la conversi\u00f3n por lo cual puede haber perdida de datos en la conversi\u00f3n.\nPara realizar una conversi\u00f3n expl\u00edcita se tiene que poner el tipo de dato que se desea realizar la conversi\u00f3n entre par\u00e9ntesis, luego el valor o la variable que se desea convertir.\nUn ejemplo de conversi\u00f3n de tipo expl\u00edcito puede ser:\n32\nbyte\nUn ejemplo de una conversi\u00f3n de tipo impl\u00edcita puede ser:\nlong\nLa siguiente tabla muestra los tipos de datos que se pueden realizar una conversi\u00f3n impl\u00edcita desde el dato origen, hasta el dato destino que es el dato en el que se va a convertir.\nLos tipos de datos booleanos no pueden ser convertidos a otro tipo de datos, por ning\u00fan m\u00e9todo mencionado anteriormente. Otro tipo de conversi\u00f3n que no se encuentre en esta tabla desde el origen al destino, tiene que realizarse por medio de una conversi\u00f3n expl\u00edcita por casting.\nCuando se desea realizar una conversi\u00f3n de un tipo string como origen a otro tipo, es necesario utilizar una funci\u00f3n que se encarga de convertir el tipo de dato, la funci\u00f3n necesaria se compone de la variable que va almacenar el resultado, y dependiendo de la variable se usa el par\u00e1metro que inicia con el tipo de dato a convertir, Integer, Byte, Short, o Long, seguida de punto \u201c. \u201c, el cual indica que se cargar\u00e1n los atributos del par\u00e1metro, en donde cargaremos el parseInt si queremos convertir a interger o parseByte si queremos convertir a byte, o dependiendo del tipo de dato, seguido de par\u00e9ntesis en donde se agregara el valor de string a convertir.\nAlgunos ejemplos puede ser:\nnumero3\ntexto\n\u201c\n2013\n\u201d\nInteger\nparseInt\nLong\nparseLong\nByte\nparseByte\nesto suele ser usado para realizar una conversi\u00f3n de texto cuando se ingresan valores num\u00e9ricos por una entrada a java, la cual los detecta como string, as\u00ed de esta forma puede convertir el texto que se ingresa a un n\u00famero para realizar operaciones, como una calculadora."}]}, {"name": "Industria relacionada", "text": "Sun Microsystems, como creador del lenguaje de programaci\u00f3n Java y de la plataforma JDK, mantiene fuertes pol\u00edticas para mantener una especificaci\u00f3n del lenguaje[12]\u200b as\u00ed como de la m\u00e1quina virtual[13]\u200b a trav\u00e9s del JCP. Es debido a este esfuerzo que se mantiene un est\u00e1ndar de facto.\nSon innumerables las compa\u00f1\u00edas que desarrollan aplicaciones para Java y/o est\u00e1n volcadas con esta tecnolog\u00eda:[14]\u200b\nLa industria de la telefon\u00eda m\u00f3vil est\u00e1 fuertemente influenciada por la tecnolog\u00eda Java.\nLos entornos de desarrollo (IDE) IntelliJ IDEA, Netbeans y Eclipse ha tomado un lugar importante entre la comunidad de desarrolladores Java.\nLa fundaci\u00f3n Apache tiene tambi\u00e9n una presencia importante en el desarrollo de bibliotecas y componentes de servidor basados en Java.\nIBM, BEA, IONA, Oracle,... son empresas con grandes intereses y productos creados en y para Java.\nVideojuegos como Minecraft, Pokemon Go (aunque este \u00faltimo es una mezcla entre C++ y C#) fueron programados en Java.", "subsections": []}, {"name": "Cr\u00edticas", "text": "En 1995 alguien dijo[\u00bfqui\u00e9n?] que Java fue creado para abrir una nueva v\u00eda en la gesti\u00f3n de software complejo, y es por regla general aceptado que se ha comportado bien en ese aspecto. Sin embargo no puede decirse que Java no tenga grietas ni que se adapta completamente a todos los estilos de programaci\u00f3n, todos los entornos, o todas las necesidades.", "subsections": [{"name": "General", "text": "Java no ha aportado capacidades est\u00e1ndares para aritm\u00e9tica en punto flotante. El est\u00e1ndar IEEE 754 para \u201cEst\u00e1ndar para Aritm\u00e9tica Binaria en Punto Flotante\u201d apareci\u00f3 en 1985, y desde entonces es el est\u00e1ndar para la industria. Y aunque la aritm\u00e9tica flotante de Java (cosa que cambi\u00f3 desde el 13 de noviembre de 2006, cuando se abri\u00f3 el c\u00f3digo fuente y se adopt\u00f3 la licencia GPL, aparte de la ya existente)[cita\u00a0requerida][15]\u200b se basa en gran medida en la norma del IEEE, no soporta a\u00fan algunas caracter\u00edsticas. M\u00e1s informaci\u00f3n al respecto puede encontrarse en la secci\u00f3n final de enlaces externos."}, {"name": "El lenguaje", "text": "En un sentido estricto, Java no es un lenguaje absolutamente orientado a objetos, a diferencia de, por ejemplo, Ruby o Smalltalk. Por motivos de eficiencia, Java ha relajado en cierta medida el paradigma de orientaci\u00f3n a objetos, y as\u00ed por ejemplo, no todos los valores son objetos.\nEl c\u00f3digo Java puede ser a veces redundante en comparaci\u00f3n con otros lenguajes. Esto es en parte debido a las frecuentes declaraciones de tipos y conversiones de tipo manual (casting). Tambi\u00e9n se debe a que no se dispone de operadores sobrecargados, y a una sintaxis relativamente simple. Sin embargo, J2SE 5.0 introduce elementos para tratar de reducir la redundancia, como una nueva construcci\u00f3n para los bucles \u2018\u2019\u2019foreach\u2019\u2019\u2019.\nA diferencia de C++, Java no dispone de operadores de sobrecarga definidos por el usuario. Los dise\u00f1adores de Java tomaron esta decisi\u00f3n puesto que consideraban que, bajo ciertas circunstancias, esta caracter\u00edstica pod\u00eda complicar la lectura y mantenimiento de los programas."}, {"name": "Apariencia", "text": "La apariencia externa (el \u2018\u2018\u2018look and feel\u2019\u2019\u2019) de las aplicaciones GUI (Graphical User Interface) escritas en Java usando la plataforma Swing difiere a menudo de la que muestran aplicaciones nativas. Aunque el programador puede usar el juego de herramientas AWT (Abstract Windowing Toolkit) que genera objetos gr\u00e1ficos de la plataforma nativa, el AWT no es capaz de funciones gr\u00e1ficas avanzadas sin sacrificar la portabilidad entre plataformas; ya que cada una tiene un conjunto de API distinto, especialmente para objetos gr\u00e1ficos de alto nivel.\nLas herramientas de Swing, escritas completamente en Java, evitan este problema construyendo los objetos gr\u00e1ficos a partir de los mecanismos de dibujo b\u00e1sicos que deben estar disponibles en todas las plataformas. El inconveniente es el trabajo extra requerido para conseguir la misma apariencia de la plataforma destino. Aunque esto es posible (usando GTK+ y el Look-and-Feel de Windows), la mayor\u00eda de los usuarios no saben c\u00f3mo cambiar la apariencia que se proporciona por defecto por aquella que se adapta a la de la plataforma."}, {"name": "Rendimiento", "text": "El bytecode de Java puede ser interpretado en tiempo de ejecuci\u00f3n por la m\u00e1quina virtual, o bien compilado al cargarse el programa, o durante la propia ejecuci\u00f3n, para generar c\u00f3digo nativo que se ejecuta directamente sobre el hardware. Si es interpretado, ser\u00e1 m\u00e1s lento que usando el c\u00f3digo m\u00e1quina intr\u00ednseco de la plataforma destino. Si es compilado, durante la carga inicial o la ejecuci\u00f3n, la penalizaci\u00f3n est\u00e1 en el tiempo necesario para llevar a cabo la compilaci\u00f3n.\nAlgunas caracter\u00edsticas del propio lenguaje conllevan una penalizaci\u00f3n en tiempo, aunque no son \u00fanicas de Java. Algunas de ellas son el chequeo de los l\u00edmites de arrays, chequeo en tiempo de ejecuci\u00f3n de tipos, y la indirecci\u00f3n de funciones virtuales.\nEl uso de un recolector de basura para eliminar de forma autom\u00e1tica aquellos objetos no requeridos, a\u00f1ade una sobrecarga que puede afectar al rendimiento, o ser apenas apreciable, dependiendo de la tecnolog\u00eda del recolector y de la aplicaci\u00f3n en concreto.\nLas JVM modernas usan recolectores de basura que gracias a r\u00e1pidos algoritmos de manejo de memoria, consiguen que algunas aplicaciones puedan ejecutarse m\u00e1s eficientemente.\nEl rendimiento entre un compilador JIT y los compiladores nativos puede ser parecido, aunque la distinci\u00f3n no est\u00e1 clara en este punto. La compilaci\u00f3n mediante el JIT puede consumir un tiempo apreciable, un inconveniente principalmente para aplicaciones de corta duraci\u00f3n o con gran cantidad de c\u00f3digo. Sin embargo, una vez compilado, el rendimiento del programa puede ser comparable al que consiguen compiladores nativos de la plataforma destino, inclusive en tareas num\u00e9ricas. Aunque Java no permite la expansi\u00f3n manual de llamadas a m\u00e9todos, muchos compiladores JIT realizan esta optimizaci\u00f3n durante la carga de la aplicaci\u00f3n y pueden aprovechar informaci\u00f3n del entorno en tiempo de ejecuci\u00f3n para llevar a cabo transformaciones eficientes durante la propia ejecuci\u00f3n de la aplicaci\u00f3n. Esta recompilaci\u00f3n din\u00e1mica, como la que proporciona la m\u00e1quina virtual HotSpot de Sun, puede llegar a mejorar el resultado de compiladores est\u00e1ticos tradicionales, gracias a los datos que solamente est\u00e1n disponibles durante el tiempo de ejecuci\u00f3n.\nJava fue dise\u00f1ado para ofrecer seguridad y portabilidad, y no ofrece acceso directo al hardware de la arquitectura ni al espacio de direcciones. Java no soporta expansi\u00f3n de c\u00f3digo ensamblador, aunque las aplicaciones pueden acceder a caracter\u00edsticas de bajo nivel usando bibliotecas nativas (JNI, Java Native Interfaces).\nCaracter\u00edsticas de Java:\n1. Lenguaje Simple: \u201cSe lo conoce como lenguaje simple porque viene de la misma estructura de c y c++; ya que c++ fue un referente para la creaci\u00f3n de java por eso utiliza determinadas caracter\u00edsticas de c++ y se han eliminado otras.\u201d\n2. Orientado a Objetos.\n3. Multihilos: Java tiene una facilidad de cumplir varias funciones al mismo tiempo, gracias a su funci\u00f3n de multihilos, ya que por cada hilo que el programa tenga se ejecutar\u00e1n en tiempo real muchas funciones al mismo tiempo.\nAlto Rendimiento: Java es considerado de alto rendimiento por ser tan veloz en el momento de correr los programas y por ahorrarse muchas l\u00edneas de c\u00f3digo."}]}, {"name": "Recursos", "text": "", "subsections": [{"name": "JRE", "text": "El JRE (Java Runtime Environment, o Entorno en Tiempo de Ejecuci\u00f3n de Java) es el software necesario para ejecutar cualquier aplicaci\u00f3n desarrollada para la plataforma Java. El usuario final usa el JRE como parte de paquetes software o plugins (o conectores) en un navegador Web. Sun ofrece tambi\u00e9n el SDK de Java 2, o JDK (Java Development Kit) en cuyo seno reside el JRE, e incluye herramientas como el compilador de Java, Javadoc para generar documentaci\u00f3n o el depurador. Puede tambi\u00e9n obtenerse como un paquete independiente, y puede considerarse como el entorno necesario para ejecutar una aplicaci\u00f3n Java, mientras que un desarrollador debe adem\u00e1s contar con otras facilidades que ofrece el JDK."}, {"name": "Componentes", "text": "Bibliotecas de Java, que son el resultado de compilar el c\u00f3digo fuente desarrollado por quien implementa la JRE, y que ofrecen apoyo para el desarrollo en Java. Algunos ejemplos de estas bibliotecas son:\nLas bibliotecas centrales, que incluyen:\nUna colecci\u00f3n de bibliotecas para implementar estructuras de datos como listas, arrays, \u00e1rboles y conjuntos.\nBibliotecas para an\u00e1lisis de XML.\nSeguridad.\nBibliotecas de internacionalizaci\u00f3n y localizaci\u00f3n.\nBibliotecas de integraci\u00f3n, que permiten la comunicaci\u00f3n con sistemas externos. Estas bibliotecas incluyen:\nLa API para acceso a bases de datos JDBC (Java DataBase Conectivity).\nLa interfaz JNDI (Java Naming and Directory Interface) para servicios de directorio.\nRMI (Remote Method Invocation) y CORBA para el desarrollo de aplicaciones distribuidas.\nBibliotecas para la interfaz de usuario, que incluyen:\nEl conjunto de herramientas nativas AWT (Abstract Window Toolkit), que ofrece componentes GUI (Graphical User Interface), mecanismos para usarlos y manejar sus eventos asociados.\nLas Bibliotecas de Swing, construidas sobre AWT pero ofrecen implementaciones no nativas de los componentes de AWT.\nAPI para la captura, procesamiento y reproducci\u00f3n de audio.\nUna implementaci\u00f3n dependiente de la plataforma en que se ejecuta de la m\u00e1quina virtual de Java (JVM), que es la encargada de la ejecuci\u00f3n del c\u00f3digo de las bibliotecas y las aplicaciones externas.\nPlugins o conectores que permiten ejecutar applets en los navegadores Web.\nJava Web Start, para la distribuci\u00f3n de aplicaciones Java a trav\u00e9s de Internet.\nDocumentaci\u00f3n y licencia."}, {"name": "API", "text": "Se define tres plataformas en un intento por cubrir distintos entornos de aplicaci\u00f3n. As\u00ed, ha distribuido muchas de sus API (Application Program Interface) de forma que pertenezcan a cada una de las plataformas:\nJava ME (Java Platform, Micro Edition) o J2ME \u2014 orientada a entornos de limitados recursos, como tel\u00e9fonos m\u00f3viles, PDAs (Personal Digital Assistant), etc.\nJava SE (Java Platform, Standard Edition) o J2SE \u2014 para entornos de gama media y estaciones de trabajo. Aqu\u00ed se sit\u00faa al usuario medio en un PC de escritorio.\nJava EE (Java Platform, Enterprise Edition) o J2EE \u2014 orientada a entornos distribuidos empresariales o de Internet.\nLas clases en las API de Java se organizan en grupos disjuntos llamados paquetes. Cada paquete contiene un conjunto de interfaces, clases y excepciones relacionadas. La informaci\u00f3n sobre los paquetes que ofrece cada plataforma puede encontrarse en la documentaci\u00f3n de \u00e9sta.\nEl conjunto de las API es controlado por Sun Microsystems junto con otras entidades o personas a trav\u00e9s del programa JCP (Java Community Process). Las compa\u00f1\u00edas o individuos participantes del JCP pueden influir de forma activa en el dise\u00f1o y desarrollo de las API, algo que ha sido motivo de controversia."}, {"name": "Extensiones y arquitecturas relacionadas", "text": "Las extensiones[16]\u200b de Java est\u00e1n en paquetes que cuelgan de la ra\u00edz javax: javax.*. No se incluyen en la JDK o el JRE. Algunas de las extensiones y arquitecturas ligadas estrechamente al lenguaje Java son:\nJava EE (Java Platform, Enterprise Edition; antes J2EE) \u2014para aplicaciones distribuidas orientadas al entorno empresarial"}]}, {"name": "Java en c\u00f3digo abierto", "text": "La evoluci\u00f3n basada en un comit\u00e9 en el que participen todos los implicados no es suficiente y la comunidad demandaba desde hace tiempo la liberaci\u00f3n de las API y bibliotecas b\u00e1sicas de la JDK.\nEn diciembre de 2006, Sun Microsystems comenz\u00f3 el relanzamiento de su plataforma Java[17]\u200b bajo la licencia GPL de GNU.\nEn abril de 2009 Oracle adquiri\u00f3 Sun Microsystems, lo que gener\u00f3 temor en la comunidad ante la posible mercantilizaci\u00f3n del lenguaje de programaci\u00f3n orientado a objetos m\u00e1s popular actualmente. Por ahora Oracle ha seguido manteniendo Java, estando las versiones posteriores a la 6 bajo su control.\nSe instala una versi\u00f3n homebrew de PSPKVM (0.5.5) para emular la plataforma de Java en PSP. Esto permite usar programas JAVA en esta videoconsola.", "subsections": [{"name": "Alternativas libres", "text": "Existen alternativas para el entorno de ejecuci\u00f3n y de desarrollo de Java con una gran cobertura de funcionalidades con respecto a las implementaciones comerciales de Sun, IBM, Bea, etc."}, {"name": "Cr\u00edticas referentes a Java y el software libre", "text": "Free But Shackled \u2014 The Java Trap, de Richard Stallman, 12 de abril de 2004. (respuesta de James Gosling)\nTraducci\u00f3n al espa\u00f1ol de este art\u00edculo: Libre pero encadenado. La trampa del Java. (N\u00f3tese que hay una nota en un recuadro amarillo que habla de la situaci\u00f3n actual con respecto a lo que se dice en ese art\u00edculo)\nNotar que este art\u00edculo fue escrito antes de la liberaci\u00f3n del c\u00f3digo fuente de Java. En la actualidad la postura de la Free Software Foundation y de Richard Stallman han cambiado[cita\u00a0requerida], mostr\u00e1ndose partidarios ambos de su uso en software libre."}]}, {"name": "V\u00e9ase tambi\u00e9n", "text": ", ", "subsections": []}, {"name": "Referencias", "text": "\u2191 https://openjdk.org/projects/jdk/21/\n\u2191 \u00abProgramming Language Popularity\u00bb. 2009. Archivado desde el original el 16 de enero de 2009. Consultado el 16 de enero de 2009.\u00a0\n\u2191 \u00abTIOBE Programming Community Index\u00bb. 2009. Consultado el 6 de mayo de 2009.\u00a0\n\u2191 Sun and Oracle (Oracle.com)\n\u2191 \u00abJonathan Schwartz's Blog: Different Isn't Always Better, But Better's Always Different\u00bb. Blogs.sun.com. Archivado desde el original el 5 de septiembre de 2009. Consultado el 24 de septiembre de 2010.\u00a0\n\u2191 M. Dom\u00ednguez-Dorado,. Todo Programaci\u00f3n. N\u00ba 8. P\u00e1gs. 39-42. Editorial Iberprensa (Madrid). DL M-13679-2004. Febrero, 2005. Dibujando sobre lienzos en Java..\u00a0\n\u2191 Redacci\u00f3n Oracle, Oracle anuncia Java 16, 18 de marzo de 2021.\n\u2191 Notas de la Versi\u00f3n [1]\n\u2191 \u00abJDK 19\u00bb. openjdk.org. Consultado el 9 de agosto de 2023.\u00a0\n\u2191 \u00abJDK 20\u00bb. openjdk.org. Consultado el 9 de agosto de 2023.\u00a0\n\u2191 Microsoft (ed.). \u00abSobrecarga de operadores (C# y Java)\u00bb. C# para desarrolladores de Java. Consultado el 21 de junio de 2018.\u00a0\n\u2191 Especificaci\u00f3n del lenguaje Java\n\u2191 Especificaci\u00f3n de la m\u00e1quina virtual Java\n\u2191 madridiario.es. \u00abLa formaci\u00f3n en programaci\u00f3n Java sigue en cabeza en cuanto a la demanda de los estudiantes\u00bb. Consultado el 29 de enero de 2019.\u00a0\n\u2191 \u00abUn an\u00e1lisis a Java - Apuntes de Ingenier\u00eda Inf\u00f3rmatica - Docsity\u00bb. www.docsity.com. Consultado el 14 de noviembre de 2018.\u00a0\n\u2191 M. Dom\u00ednguez-Dorado, Guillermo Som. Todo Programaci\u00f3n. N\u00ba 11. P\u00e1gs. 10-20. Editorial Iberprensa (Madrid). DL M-13679-2004. Agosto, 2005. Imprimir desde Java y .NET.\u00a0\n\u2191 Sun begins releasing Java under the GPL - Free Software Foundation", "subsections": []}, {"name": "Bibliograf\u00eda", "text": "Jon Byous, Java technology: The early years. Sun Developer Network, sin fecha[ca. 1998]. Recuperado 21 de abril de 2005.\nJames Gosling, A brief history of the Green project. Java.net, sin fecha [ca. Q1/1998]. Recuperado 22 de abril de 2005.\nJames Gosling, Bill Joy, Guy Steele, y Gilad Bracha, The Java language specification, tercera edici\u00f3n. Addison-Wesley, 2005. ISBN 0-321-24678-0.\nTim Lindholm y Frank Yellin. The Java Virtual Machine specification, segunda edici\u00f3n. Addison-Wesley, 1999. ISBN 0-201-43294-3.", "subsections": []}, {"name": "Enlaces externos", "text": " Wikilibros alberga un libro o manual sobre Programaci\u00f3n en Java.\nProgramas hechos en java con c\u00f3digo fuente\nRecopilaci\u00f3n de c\u00f3digos fuente en java\n5 Beneficios de Java", "subsections": [{"name": "Oracle - Sun", "text": "Sitio oficial de Java para desarrolladores, etc\nThe Java Language Specification, Tercera edici\u00f3n Especificaci\u00f3n oficial del lenguaje Java\nTutorial de Sun sobre el Lenguaje de programaci\u00f3n Java\nLibro blanco original de Java, 1996"}, {"name": "Tutoriales", "text": "Thinking in Java, de Bruce Eckel (en l\u00ednea)\nAn introduction to Computer Science using Java por Bradley Kjell.\nJava Course, de A.B. Downey.\nComputer-Books.us Colecci\u00f3n de libros sobre Java disponibles para descarga gratuita.\nVideoTutoriales para aprender desde cero \u00abEmpieza a Programar\u00bb\nColecci\u00f3n \u00abJava a tope\u00bb de libros electr\u00f3nicos (Universidad de M\u00e1laga. Espa\u00f1a)\nCurso de Java, de cero a hasta conexi\u00f3n a MYSQL, incluye PDF (M\u00e9xico)\nCurso de java que sigue el \u00edndice del libro de java de Kathy Sierra, contiene PDFs y ejercicios (M\u00e9xico)\nCapacitaci\u00f3n en Java sobre Grandes Proyectos\nAprender programaci\u00f3n Java desde cero (Portal web aprenderaprogramar.com, en l\u00ednea y en formato pdf)\nDescifrando Java\nCurso de Java desde cero (pildorasinformaticas.com)"}, {"name": "Cr\u00edticas", "text": "Bezroukov, Nikolai. \u00abJava Critique Page: Java vs Scripting Languages\u00bb. Softpanorama (en ingl\u00e9s).\u00a0\nKahan, W.; Darcy, Joseph D. \u00abACM 1998 Workshop on Java for High\u2013Performance Network Computing\u00bb. Roblox (en ingl\u00e9s)"}]}]}
{"url": "https://es.wikipedia.org/wiki/Jython", "title": "Jython", "summary": " Jython (Python en Java) es un lenguaje de programaci\u00f3n de alto nivel, din\u00e1mico y orientado a objetos basado en Python e implementado \u00edntegramente en Java. Es el sucesor de JPython. Jython al igual que Python es un proyecto de software libre. El lenguaje de programaci\u00f3n Jython es pr\u00e1cticamente id\u00e9ntico a la versi\u00f3n 2.5[1]\u200b de Python.", "sections": [{"name": "Ejecuci\u00f3n", "text": "Para ejecutarlo hay que darle la siguiente l\u00ednea de comandos en el int\u00e9rprete de comandos del sistema.\nPara ejecutar un programa escrito en Jython basta con agregar a la l\u00ednea de comando el nombre del programa a ejecutar (que puede tener la extensi\u00f3n .py):", "subsections": []}, {"name": "Lenguaje din\u00e1mico", "text": "Jython al igual que Python, Tcl/Tk, Ruby y otros lenguajes similares es un lenguaje din\u00e1mico. Esto quiere decir que se puede escribir y ejecutar el c\u00f3digo de un programa al mismo tiempo. De hecho, no es necesario compilar el programa para ejecutar el c\u00f3digo en Jython: basta con agregar en la l\u00ednea de ejecuci\u00f3n de Jython el nombre del c\u00f3digo a correr para que Jython haga funcionar el programa. Sin embargo, esto se hace a costa del sacrificio en tiempo de ejecuci\u00f3n del programa.", "subsections": []}, {"name": "Variables", "text": "Existen muchos tipos de variables en Jython pero los m\u00e1s importantes son:\nCadenas.\nN\u00fameros enteros.\nN\u00fameros flotantes.\nN\u00fameros largos, en este tipo de variables debe ser indicado con una l al final del n\u00famero.\nN\u00fameros complejos.\nObjetos de Java.\nLas variables en Jython, como en Python, se pueden utilizar en cualquier momento del programa: no es necesario declararlas en un lugar determinado. El siguiente ejemplo muestra el uso de las variables. A la variable a se le asigna el valor 5, se imprime y luego se utiliza la variable b\na\n=\n5\n# Declaramos y le asignamos a \"a\" un valor de 5\nprint\n# Se imprime \"a\"\nb\n+\n2\n# Declaramos y asignamos a \"b\" el valor de a+2\n# Se imprime \"b\"\nAunque no es necesario poner las variables en un lugar concreto, hay restricciones; el siguiente programa nos devolver\u00e1 un error:\nLa raz\u00f3n es simple: ni a ni b tienen valor alguno, puesto que no han sido declaradas. Hay que inicializar las variables para utilizarlas.\nLas variables tanto en Jython como en Python son gen\u00e9ricas y din\u00e1micas, es decir, se pueden utilizar indistintamente para representar enteros, cadenas, flotantes, clases, etc. y pueden ser definidas o cambiadas de tipo en cualquier momento de la ejecuci\u00f3n del programa.", "subsections": []}, {"name": "Utilizando Java en Jython", "text": "El uso de Java en Jython es bastante f\u00e1cil: basta indicar qu\u00e9 biblioteca se va a utilizar y llamar a sus funciones como en el siguiente ejemplo:\nfrom\njava.util\nimport\nRandom\n# Asigna una instancia de la clase \"Random\" a la variable \"Aleatorio\".\nAleatorio\n()\n# A la variable \"b\" se asigna un n\u00famero aleatorio flotante, del 1 hasta aproximadamente el 7.\n.\nnextFloat\n*\n6\n1\nEste es un ejemplo de una peque\u00f1a ventana usando Swing:\npawt\nswing\njava\ndef\nsalir\n(\nevent\n):\njava\nlang\nSystem\nexit\n0\n)\nframe\nJFrame\n'Ejemplo Swing'\n,\nvisible\nboton\nJButton\n'\u00a1\u00a1Este es un bot\u00f3n en Swing!!~'\nactionPerformed\nsalir\ncontentPane\nadd\npack", "subsections": []}, {"name": "Referencias", "text": "\u2191 Is Jython the same language as Python?", "subsections": []}, {"name": "Enlaces externos", "text": "Sitio web oficial de Jython (en ingl\u00e9s).\nProyecto Jython en SourceForge (en ingl\u00e9s)", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/LAMP", "title": "LAMP", "summary": "LAMP es el acr\u00f3nimo usado para describir un sistema de infraestructura de internet que usa las siguientes herramientas:[1]\u200b[2]\u200b\nLinux, el sistema operativo; En algunos casos tambi\u00e9n se refiere a LDAP.\nApache, el servidor web;\nMySQL/MariaDB, el gestor de bases de datos;\nPHP, el lenguaje de programaci\u00f3n.\nLa combinaci\u00f3n de estas tecnolog\u00edas es usada principalmente para definir la infraestructura de un servidor web, utilizando un paradigma de programaci\u00f3n para el desarrollo del sistema .\nA pesar de que el origen de estos programas de c\u00f3digo abierto no fue espec\u00edficamente dise\u00f1ado para trabajar entre s\u00ed, la combinaci\u00f3n se populariz\u00f3 debido a su bajo coste de adquisici\u00f3n y ubicuidad de sus componentes (ya que vienen pre-instalados en la mayor\u00eda de las distribuciones linux). Cuando son combinados, representan un conjunto de soluciones que proporcionan servidores de aplicaciones.\nEl t\u00e9rmino fue ampliamente promocionado por el editor de la editorial O'Reilly, Dale Dougherty, a sugerencia de David Axmark y Monty Widenius, desarrolladores de MySQL, debido a que fue la tecnolog\u00eda que se utiliz\u00f3 en Yahoo como propuesta de la Universidad Tecnol\u00f3gica de Nezahualc\u00f3yotl, M\u00e9xico para ser utilizada en la Copa del Mundo de 1994 por el Profesor Luis Manuel Mart\u00ednez Ram\u00edrez y que aun es la Base de las Tecnolog\u00edas de las Actuales Redes Sociales m\u00e1s utilizadas en el Mundo; la influencia de dicha editorial en el mundo del software libre hizo que el acr\u00f3nimo se popularizara r\u00e1pidamente en todo el mundo.", "sections": [{"name": "Software", "text": "", "subsections": [{"name": "GNU/Linux", "text": "Art\u00edculo principal:\nLinux es un n\u00facleo de sistema operativo libre tipo Unix."}, {"name": "Apache HTTP Server", "text": "El servidor HTTP Apache es un servidor web libre y de c\u00f3digo abierto, el m\u00e1s popular en cuanto a uso[3]\u200b\n, sirviendo de facto como plataforma de referencia para el dise\u00f1o y evaluaci\u00f3n de otros servidores web."}, {"name": "MySQL", "text": "MySQL es un sistema de gesti\u00f3n de bases de datos relacional, que por lo tanto utiliza SQL, multihilo y multiusuario del que se estiman m\u00e1s de un mill\u00f3n de instalaciones."}, {"name": "PHP", "text": "PHP (acr\u00f3nimo recursivo de \"PHP: Hypertext Preprocessor\") es un lenguaje de programaci\u00f3n dise\u00f1ado para producir sitios web din\u00e1micos. PHP es utilizado en aplicaciones del lado del servidor, aunque puede ser usado tambi\u00e9n desde una interfaz de l\u00ednea de comandos o como aplicaci\u00f3n de escritorio."}]}, {"name": "Variantes y alternativas", "text": "PHP es reemplazado a veces por Perl o Python, y el acr\u00f3nimo se mantiene. Algunos desarrolladores prefieren usar la M para referirse a los m\u00f3dulos del servidor HTTP Apache, como mod_perl o mod_python, y utilizar la P para referirse a PostgreSQL, invirtiendo la M y la P en funcionalidad. El acr\u00f3nimo \"LAMR\" es ocasionalmente usado para indicar Ruby on Rails en vez de PHP.\nUna variante de esta designa a la M como Middleware (incluyendo Ruby, Perl, Python, etc.) y la P para PostgreSQL.\nOtras soluciones incluyen entornos de desarrollo como el WebObjects de Apple Inc., Java EE, Grails o la arquitectura Microsoft .NET, de Microsoft.\nSimilarmente, la L es ocasionalmente reemplazada con una M (por Mac OS X), D (por Darwin BSD), B (por BSD) o 'W' (por Microsoft Windows)", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "WAMP\nXAMPP\nMAMP\nMEAN\nAppserv\nServidor\nApache\nMySQL\nPHP\nLinux", "subsections": []}, {"name": "Referencias", "text": "\u2191 Digitalocean (21 de junio de 2018). \u00abC\u00f3mo instalar en Ubuntu 18.04 la pila LAMP \u2014 Linux, Apache, MySQL y PHP\u00bb. Consultado el 31 de enero de 2021.\u00a0\n\u2191 Debian. \u00abLAMP, Linux Apache MySQL PHP\u00bb (en ingl\u00e9s). Consultado el 31 de enero de 2021.\u00a0\n\u2191 \u00abMarket Shares for Top Servers Across All Domains August 1995 - April 2007\u00bb (en ingl\u00e9s). News.netcraft.com. Archivado desde el original el 20 de mayo de 2010. Consultado el 15 de septiembre de 2009.\u00a0", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Latino_(Lenguaje_de_Programaci%C3%B3n)", "title": "Latino (lenguaje de programaci\u00f3n)", "summary": "[\n]\nLatino es un lenguaje de programaci\u00f3n procedural con sintaxis en espa\u00f1ol de c\u00f3digo abierto desarrollado en C, inspirado en Lua y Python.\nEste lenguaje fue creado por Primitivo Roman Montero en el 2015 con la versi\u00f3n v0.1-alpha hasta su versi\u00f3n v1.0 que fue lanzada en el 2017. En la actualidad, este lenguaje sigue su desarrollo bajo la direcci\u00f3n de Melvin Guerrero con las versiones v1.1.0 y v1.2.0 en adelante.\nHasta la fecha este lenguaje dispone de soporte para trabajar en sistemas operativos de 64 bits tales como MS-Windows, Mac OS, y Linux.\nDesarrollo web (server-side),\nConexiones de base de datos,\nC\u00e1lculos matem\u00e1ticas,\nSystem Scripting.", "sections": [{"name": "\u00bfY por qu\u00e9 un lenguaje de programaci\u00f3n m\u00e1s?", "text": "Este lenguaje nace de la necesidad de incrementar la educaci\u00f3n de nivel b\u00e1sico y avanzado, para que ni\u00f1os, adolescentes y tambi\u00e9n adultos se motiven a entrar en el mundo de la programaci\u00f3n y desarrollar aplicaciones con una sintaxis a su idioma.\nAl utilizar este lenguaje una sintaxis en espa\u00f1ol, se espera que se reduzca el tiempo de aprendizaje y a su vez se maximice la comprensi\u00f3n al programar.", "subsections": []}, {"name": "Caracter\u00edsticas del lenguaje", "text": "Latino al igual que Python es un lenguaje de programaci\u00f3n multiparadigma. Esto significa que m\u00e1s que forzar a los programadores a adoptar un estilo particular de programaci\u00f3n, permite varios estilos: programaci\u00f3n imperativa y programaci\u00f3n funcional.\nLatino tambi\u00e9n hace uso de un tipado din\u00e1mico y conteo de referencias para la administraci\u00f3n de memoria.\nUna cualidad importante de este lenguaje de programaci\u00f3n es que al estar desarrollado en C facilita la adaptaci\u00f3n de nuevas librer\u00edas por medio de su API (Latino API).", "subsections": []}, {"name": "Ejemplos de c\u00f3digo", "text": "", "subsections": [{"name": "Ejemplo 1", "text": "Este es un ejemplo de un programa Hola Mundo\nescribir\n(\n\"Hola Mundo\"\n)\nprint\n#include\n \n<stdio.h>\nint\nmain\n()\n{\n        \nprintf\n\"Hola mundo\n\\n\n\"\n);\nreturn\n0\n;\n}"}, {"name": "Ejemplo 2", "text": "\"Escribe un numero:\"\nnum\n=\nleer\nsi\n%\n2\n==\n0\n  \n\"El n\u00famero \"\n..\n\" es par\"\nsino\n\" es impar\"\nfin\n<conio.h>\n    \nnumero\n\"Entre un n\u00famero \"\nscanf\n\"%d\"\n,\n&\nif\n2\nEl n\u00famero %d es par\"\nelse\nEl n\u00famero %d es impar\"\ngetch\n();\n/* Pausa */"}]}, {"name": "Elementos del lenguaje", "text": "", "subsections": [{"name": "Operadores", "text": "Los operadores aritm\u00e9ticos funcionan igual que en C y C++.\nEl resultado de los operadores relacionales y l\u00f3gicos es un valor de tipo bool."}, {"name": "Comentarios", "text": "Comentarios de una l\u00ednea simple\nLos comentarios de una l\u00ednea simple pueden comenzar con un signo de # \u00f3 //.\nCualquier texto o c\u00f3digo que este despu\u00e9s de estos signos ser\u00e1n ignorados por Latino (No se ejecutaran).\nx\n5\n#\nDeclaramos\nuna\nvariable\ncon\nel\nnombre\nde\nX\ny\nle\nhemos\nasignado\nun\nvalor\n+\n2\nY\nm\u00e1s\n//\nEn\nesta\nl\u00ednea\nc\u00f3digo\nescribiremos\nen\npantalla\ncual\ntiene\nComentarios de l\u00edneas m\u00faltiples\nLos comentarios de l\u00edneas m\u00faltiples comienzan con /* y terminan con */. Cualquier texto o c\u00f3digo que este dentro de estos signos ser\u00e1n ignorados por Latino (no se ejecutaran).\n/*\nEl\nsiguiente\nrepite\nmismo\nejemplo\nque\nvimos\nhace\nmomento\narriba\nlas\nmismas\nvariables\ncomo\npara\nusar\n*/"}, {"name": "Variables", "text": "Las variables se definen de forma din\u00e1mica, lo que significa que no se tiene que especificar cu\u00e1l es su tipo de antemano y puede tomar distintos valores en otro momento, incluso de un tipo diferente al que ten\u00eda previamente. Se usa el s\u00edmbolo = para asignar valores.\n1\n\"texto\"\nEsto\nes\nposible\nporque\nlos\ntipos\nson\nasignados\ndin\u00e1micamente"}]}, {"name": "Referencias", "text": "\u2191 \u00abLenguaje Latino lista de versiones lanzadas\u00bb. github.com. Consultado el 11 de octubre de 2020.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": "Lenguaje Latino\nManual Latino\nStack OverFlo", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Lenguaje_de_programaci%C3%B3n", "title": "Lenguaje de programaci\u00f3n", "summary": "Un lenguaje de programaci\u00f3n es un lenguaje formal (o artificial, es decir, un lenguaje con reglas gramaticales bien definidas) que proporciona a una persona, en este caso el programador, la capacidad y habilidad de escribir (o programar) una serie de instrucciones o secuencias de \u00f3rdenes en forma de algoritmos con el fin de controlar el comportamiento f\u00edsico o l\u00f3gico de un sistema inform\u00e1tico, para que de esa manera se puedan obtener diversas clases de datos o ejecutar determinadas tareas. A todo este conjunto de \u00f3rdenes escritas mediante un lenguaje de programaci\u00f3n se le denomina programa inform\u00e1tico.[1]\u200b[2]\u200b[3]\u200b[4]\u200b", "sections": [{"name": "Caracter\u00edsticas", "text": "Programar viene a ser el proceso de crear un software fiable mediante la escritura, prueba, depuraci\u00f3n, compilaci\u00f3n o interpretaci\u00f3n, y mantenimiento del c\u00f3digo fuente de dicho programa inform\u00e1tico. B\u00e1sicamente, este proceso se define aplicando l\u00f3gicamente los siguientes pasos:\nEl desarrollo l\u00f3gico del programa para resolver un problema en particular.\nEscritura de la l\u00f3gica del programa empleando un lenguaje de programaci\u00f3n espec\u00edfico (codificaci\u00f3n del programa).\nCompilaci\u00f3n o interpretaci\u00f3n del programa hasta convertirlo en lenguaje de m\u00e1quina.\nPrueba y depuraci\u00f3n del programa.\nDesarrollo de la documentaci\u00f3n.\nLos lenguajes de programaci\u00f3n est\u00e1n formados por un conjunto de s\u00edmbolos (llamado alfabeto), reglas gramaticales (l\u00e9xico/morfol\u00f3gicas y sint\u00e1cticas) y sem\u00e1nticas, que en conjunto definen las estructuras v\u00e1lidas del lenguaje y su significado. Existe el error com\u00fan de tratar como sin\u00f3nimos los t\u00e9rminos 'lenguaje de programaci\u00f3n' y 'lenguaje inform\u00e1tico'. Los lenguajes inform\u00e1ticos engloban a los lenguajes de programaci\u00f3n y a otros m\u00e1s, como por ejemplo HTML (lenguaje para el marcado de p\u00e1ginas web, que no es propiamente un lenguaje de programaci\u00f3n, sino un conjunto de instrucciones que permiten estructurar el contenido de los documentos).\nEl lenguaje de programaci\u00f3n permite especificar de manera precisa sobre qu\u00e9 datos debe operar un software espec\u00edfico, c\u00f3mo deben ser almacenados o transmitidos dichos datos, y qu\u00e9 acciones debe tomar el software bajo una variada gama de circunstancias. Todo esto, a trav\u00e9s de un lenguaje que intenta estar relativamente pr\u00f3ximo al lenguaje humano o natural. Una caracter\u00edstica relevante de los lenguajes de programaci\u00f3n es precisamente que m\u00e1s de un programador pueda usar un conjunto com\u00fan de instrucciones que sean comprendidas entre ellos para realizar la construcci\u00f3n de un programa de forma colaborativa.", "subsections": []}, {"name": "Historia", "text": "Art\u00edculo principal:\nPara que la computadora entienda nuestras instrucciones debe usarse un lenguaje espec\u00edfico conocido como c\u00f3digo m\u00e1quina, que la m\u00e1quina lee f\u00e1cilmente, pero que es excesivamente complicado para las personas. De hecho, solo consiste en cadenas extensas de n\u00fameros 0 y 1(n\u00fameros binarios).\nPara facilitar el trabajo, los primeros operadores de computadoras decidieron crear un traductor para reemplazar los 0 y 1 por palabras o abstracci\u00f3n de palabras y letras provenientes del ingl\u00e9s; este se conoce como lenguaje ensamblador. Por ejemplo, para sumar se usa la letra A de la palabra inglesa add (sumar). El lenguaje ensamblador sigue la misma estructura del lenguaje m\u00e1quina, pero las letras y palabras son m\u00e1s f\u00e1ciles de recordar y entender que los n\u00fameros.\nLa necesidad de recordar secuencias de programaci\u00f3n para las acciones usuales llev\u00f3 a denominarlas con nombres f\u00e1ciles de memorizar y asociar: ADD (sumar), SUB (restar), MUL (multiplicar), CALL (ejecutar subrutina), etc. A esta secuencia de posiciones se le denomin\u00f3 \"instrucciones\", y a este conjunto de instrucciones se le llam\u00f3 lenguaje ensamblador. Posteriormente aparecieron diferentes lenguajes de programaci\u00f3n, los cuales reciben su denominaci\u00f3n porque tienen una estructura sint\u00e1ctica semejante a la de los lenguajes escritos por los humanos, denominados tambi\u00e9n lenguajes de alto nivel.[5]\u200b\nA finales de 1953, John Backus someti\u00f3 una propuesta a sus superiores en IBM para desarrollar una alternativa m\u00e1s pr\u00e1ctica al lenguaje ensamblador, para programar la computadora central IBM 704. El hist\u00f3rico equipo Fortran de John Backus consisti\u00f3 en los programadores Richard Goldberg, Sheldon F. Best, Harlan Herrick, Peter Sheridan, Roy Nutt, Robert Nelson, Irving Ziller, Lois Haibt y David Sayre.[6]\u200b\nEl primer manual para el lenguaje Fortran apareci\u00f3 en octubre de 1956, con el primer compilador Fortran entregado en abril de 1957. Esto era un compilador optimizado, porque los clientes eran reacios a usar un lenguaje de alto nivel a menos que su compilador pudiera generar c\u00f3digo cuyo desempe\u00f1o fuera comparable al de un c\u00f3digo hecho a mano en lenguaje ensamblador.\nEn 1960 se cre\u00f3 COBOL, uno de los lenguajes usados a\u00fan en la actualidad, en inform\u00e1tica de gesti\u00f3n.\nA medida que la complejidad de las tareas que realizaban las computadoras aumentaba, se hizo necesario disponer de un m\u00e9todo m\u00e1s eficiente para programarlas. Entonces se crearon los lenguajes de alto nivel, como lo fue BASIC en las versiones introducidas en los microordenadores de la d\u00e9cada de 1980. Mientras que una tarea tan sencilla como sumar dos n\u00fameros puede necesitar varias instrucciones en lenguaje ensamblador, en un lenguaje de alto nivel bastar\u00e1 una sola sentencia.", "subsections": []}, {"name": "Clasificaci\u00f3n de los lenguajes de programaci\u00f3n", "text": "Los lenguajes de programaci\u00f3n han sido hist\u00f3ricamente clasificados atendiendo a distintos criterios:\nClasificaci\u00f3n hist\u00f3rica\nLenguajes de alto y de bajo nivel\nClasificaci\u00f3n por paradigmas\nClasificaci\u00f3n por prop\u00f3sito\nEn algunas ocasiones los lenguajes de programaci\u00f3n son tambi\u00e9n clasificados en familias que comparten ciertas caracter\u00edsticas comunes como el estilo general de la sintaxis que emplean. Habitualmente estas caracter\u00edsticas suelen ser heredadas de lenguajes de programaci\u00f3n anteriores que sirvieron de inspiraci\u00f3n a los creadores de dicho lenguaje.", "subsections": [{"name": "Clasificaci\u00f3n hist\u00f3rica o por generaciones", "text": "Los equipos de ordenador (el hardware) han pasado por cuatro generaciones, de las que las tres primeras (ordenadores con v\u00e1lvulas, transistores y circuitos integrados) est\u00e1n muy claras; la cuarta (circuitos integrados a gran escala) es m\u00e1s discutible. \nAlgo parecido ha ocurrido con la programaci\u00f3n de los ordenadores (el software), que se realiza en lenguajes que suelen clasificarse en cinco generaciones, de las que las tres primeras son evidentes, mientras no todo el mundo est\u00e1 de acuerdo en las otras dos. Estas generaciones no coincidieron exactamente en el tiempo con las de hardware, pero s\u00ed de forma aproximada, y son las siguientes: \nPrimera generaci\u00f3n: los primeros ordenadores se programaban directamente en c\u00f3digo de m\u00e1quina (basado en sistema binario), que puede representarse mediante secuencias de 0 y 1. No obstante, cada modelo de ordenador tiene su propia estructura interna a la hora de programarse. A estos lenguajes se les denominaba Lenguajes de bajo nivel, porque sus instrucciones ejercen un control directo sobre el hardware y est\u00e1n condicionados por la estructura f\u00edsica de las computadoras que lo soportan. Dado que este tipo de lenguaje se acerca mucho m\u00e1s a la l\u00f3gica de la m\u00e1quina que a la humana, es mucho m\u00e1s complicado programar con \u00e9l. El uso de la palabra bajo en su denominaci\u00f3n no implica que el lenguaje sea menos potente que un lenguaje de alto nivel, sino que se refiere a la reducida abstracci\u00f3n entre el lenguaje y el hardware. Por ejemplo, se utiliza este tipo de lenguajes para programar tareas cr\u00edticas de los sistemas operativos, de aplicaciones en tiempo real o controladores de dispositivos. Otra limitaci\u00f3n de estos lenguajes es que se requiere de ciertos conocimientos de programaci\u00f3n para realizar las secuencias de instrucciones l\u00f3gicas.\nSegunda generaci\u00f3n: los lenguajes simb\u00f3licos, asimismo propios de la m\u00e1quina, simplifican la escritura de las instrucciones y las hacen m\u00e1s legibles. Se refiere al lenguaje ensamblador ensamblado a trav\u00e9s de un macroensamblador. Es el lenguaje de m\u00e1quina combinado con una serie de poderosas macros que permiten declarar estructuras de datos y de control complejas.\nTercera generaci\u00f3n: los lenguajes de alto nivel sustituyen las instrucciones simb\u00f3licas por c\u00f3digos independientes de la m\u00e1quina, parecidas al lenguaje humano o al de las Matem\u00e1ticas. Se crearon para que el usuario com\u00fan pudiese solucionar un problema de procesamiento de datos de una manera m\u00e1s f\u00e1cil y r\u00e1pida. Son usados en \u00e1mbitos computacionales donde se logra un alto rendimiento con respecto a lenguajes de generaciones anteriores. Entre ellos se encuentran C, Fortran, Smalltalk, Ada, C++, C#, Cobol, Delphi, Java y PHP, entre otros. Algunos de estos lenguajes pueden ser de prop\u00f3sito general, es decir, que el lenguaje no est\u00e1 enfocado a una \u00fanica especialidad, sino que puede usarse para crear todo tipo de programas. Para ciertas tareas m\u00e1s comunes, existen bibliotecas para facilitar la programaci\u00f3n que permiten la reutilizaci\u00f3n de c\u00f3digo.\nCuarta generaci\u00f3n: se ha dado este nombre a ciertas herramientas que permiten construir aplicaciones sencillas combinando piezas prefabricadas. Hoy se piensa que estas herramientas no son, propiamente hablando, lenguajes. Cabe mencionar que, algunos proponen reservar el nombre de cuarta generaci\u00f3n para la programaci\u00f3n orientada a objetos. Estos \u00faltimos tienen una estructura muy parecida al idioma ingl\u00e9s. Algunas de sus caracter\u00edsticas son: acceso a base de datos, capacidades gr\u00e1ficas, generaci\u00f3n de c\u00f3digo autom\u00e1ticamente, as\u00ed como poder programar visualmente (como por ejemplo Visual Basic o SQL). Entre sus ventajas se cuenta una mayor productividad y menor agotamiento del programador, as\u00ed como menor concentraci\u00f3n por su parte, ya que las herramientas proporcionadas incluyen secuencias de instrucciones. El nivel de concentraci\u00f3n que se requiere es menor, ya que algunas instrucciones, que le son dadas a las herramientas, a su vez, engloban secuencias de instrucciones a otro nivel dentro de la herramienta. Cuando hay que dar mantenimiento a los programas previamente elaborados, es menos complicado por requerir menor nivel de concentraci\u00f3n. Por otro lado, sus desventajas consisten en que estas herramientas prefabricadas son generalmente menos flexibles que las instrucciones directas en los lenguajes de bajo nivel. Adem\u00e1s, se suelen crear dependencias con uno o varios proveedores externos, lo que se traduce en p\u00e9rdida de autonom\u00eda. Asimismo, es frecuente que dichas herramientas prefabricadas contengan librer\u00edas de otros proveedores, que conlleva instalar opciones adicionales que son consideradas opcionales. A menos que existan acuerdos con otros proveedores, son programas que se ejecutan \u00fanicamente con el lenguaje que lo cre\u00f3. Tampoco suelen cumplir con los est\u00e1ndares internacionales ISO y ANSI, lo cual conlleva un riesgo futuro por desconocerse su tiempo de permanencia en el mercado. Algunos ejemplos son: NATURAL y PL/SQL.\nQuinta generaci\u00f3n: La quinta generaci\u00f3n de lenguajes de programaci\u00f3n [(5GL)] es un t\u00e9rmino que se refiere a un conjunto de lenguajes de programaci\u00f3n de alto nivel que se centran en la resoluci\u00f3n de problemas utilizando inteligencia artificial y t\u00e9cnicas de programaci\u00f3n declarativa. Estos lenguajes de programaci\u00f3n utilizan paradigmas de programaci\u00f3n no convencionales para ayudar a los desarrolladores a resolver problemas complejos.\nAlgunos ejemplos de lenguajes de programaci\u00f3n de quinta generaci\u00f3n son:\nMercury: Un lenguaje de programaci\u00f3n funcional basado en l\u00f3gica que utiliza un enfoque declarativo para la programaci\u00f3n.\nOPS5: Un lenguaje de programaci\u00f3n basado en reglas que se utiliza en sistemas expertos.\nProlog: Un lenguaje de programaci\u00f3n l\u00f3gico que se utiliza para la programaci\u00f3n de inteligencia artificial y sistemas expertos.\nHaskell: Un lenguaje de programaci\u00f3n funcional que se utiliza en la programaci\u00f3n de inteligencia artificial y aprendizaje autom\u00e1tico.\nLisp: Un lenguaje de programaci\u00f3n funcional que se utiliza en la programaci\u00f3n de inteligencia artificial y sistemas expertos."}]}, {"name": "Paradigma de programaci\u00f3n", "text": "Un paradigma de programaci\u00f3n consiste en un m\u00e9todo para llevar a cabo c\u00f3mputos y la forma en la que deben estructurarse y organizarse las tareas que debe realizar un programa.[7]\u200b Se trata de una propuesta tecnol\u00f3gica adoptada por una comunidad de programadores, y desarrolladores cuyo n\u00facleo central es incuestionable en cuanto que \u00fanicamente trata de resolver uno o varios problemas claramente delimitados; la resoluci\u00f3n de estos problemas debe suponer consecuentemente un avance significativo en al menos un par\u00e1metro que afecte a la ingenier\u00eda de software. Representa un enfoque particular o filosof\u00eda para dise\u00f1ar soluciones. Los paradigmas difieren unos de otros, en los conceptos y la forma de abstraer los elementos involucrados en un problema, as\u00ed como en los pasos que integran su soluci\u00f3n del problema, en otras palabras, el c\u00f3mputo. Tiene una estrecha relaci\u00f3n con la formalizaci\u00f3n de determinados lenguajes en su momento de definici\u00f3n. Es un estilo de programaci\u00f3n empleado.\nUn paradigma de programaci\u00f3n est\u00e1 delimitado en el tiempo en cuanto a aceptaci\u00f3n y uso, porque nuevos paradigmas aportan nuevas o mejores soluciones que lo sustituyen parcial o totalmente.\nEl paradigma de programaci\u00f3n que actualmente es m\u00e1s utilizado es la \"orientaci\u00f3n a objetos\" (OO). El n\u00facleo central de este paradigma es la uni\u00f3n de datos y procesamiento en una entidad llamada \"objeto\", relacionable a su vez con otras entidades \"objeto\".\nTradicionalmente, datos y procesamiento se han separado en \u00e1reas diferente del dise\u00f1o y la implementaci\u00f3n de software. Esto provoc\u00f3 que grandes desarrollos tuvieran problemas de fiabilidad, mantenimiento, adaptaci\u00f3n a los cambios y escalabilidad. Con la OO y caracter\u00edsticas como el encapsulado, polimorfismo o la herencia, se permiti\u00f3 un avance significativo en el desarrollo de software a cualquier escala de producci\u00f3n. La OO parece estar ligada en sus or\u00edgenes con lenguajes como Lisp y Simula, aunque el primero que acu\u00f1\u00f3 el t\u00edtulo de \"programaci\u00f3n orientada a objetos\" fue Smalltalk.", "subsections": []}, {"name": "Clasificaci\u00f3n por paradigmas", "text": "En general, la mayor\u00eda de paradigmas son variantes de los dos tipos principales de programaci\u00f3n, imperativa y declarativa. En la programaci\u00f3n imperativa se describe paso a paso un conjunto de instrucciones que deben ejecutarse para variar el estado del programa y hallar la soluci\u00f3n, es decir, un algoritmo en el que se describen los pasos necesarios para solucionar el problema.\nEn la programaci\u00f3n declarativa las sentencias que se utilizan lo que hacen es describir el problema que se quiere solucionar; se programa diciendo lo que se quiere resolver a nivel de usuario, pero no las instrucciones necesarias para solucionarlo. Esto \u00faltimo se realizar\u00e1 mediante mecanismos internos de inferencia de informaci\u00f3n a partir de la descripci\u00f3n realizada.\nA continuaci\u00f3n se describen algunas de las distintas variantes de paradigmas de programaci\u00f3n:\nProgramaci\u00f3n imperativa o por procedimientos: es el m\u00e1s usado en general, se basa en dar instrucciones al ordenador de como hacer las cosas en forma de algoritmos, en lugar de describir el problema o la soluci\u00f3n. Las recetas de cocina y las listas de revisi\u00f3n de procesos, a pesar de no ser programas de computadora, son tambi\u00e9n conceptos familiares similares en estilo a la programaci\u00f3n imperativa; donde cada paso es una instrucci\u00f3n. Es la forma de programaci\u00f3n m\u00e1s usada y la m\u00e1s antigua, el ejemplo principal es el lenguaje de m\u00e1quina. Ejemplos de lenguajes puros de este paradigma ser\u00edan el C, BASIC o Pascal.\nProgramaci\u00f3n orientada a objetos: est\u00e1 basada en el imperativo, pero encapsula elementos denominados objetos que incluyen tanto variables como funciones. Est\u00e1 representado por C# o Java entre otros, pero el m\u00e1s representativo ser\u00eda el Smalltalk que est\u00e1 completamente orientado a objetos.\nProgramaci\u00f3n dirigida por eventos: la programaci\u00f3n dirigida por eventos es un paradigma de programaci\u00f3n en el que tanto la estructura como la ejecuci\u00f3n de los programas van determinados por los sucesos que ocurran en el sistema, definidos por el usuario o que ellos mismos provoquen.\nProgramaci\u00f3n declarativa: est\u00e1 basada en describir el problema declarando propiedades y reglas que deben cumplirse, en lugar de instrucciones. Hay lenguajes para la programaci\u00f3n funcional, la programaci\u00f3n l\u00f3gica, o la combinaci\u00f3n l\u00f3gico-funcional. La soluci\u00f3n es obtenida mediante mecanismos internos de control, sin especificar exactamente c\u00f3mo encontrarla (tan solo se le indica a la computadora qu\u00e9 es lo que se desea obtener o qu\u00e9 es lo que se est\u00e1 buscando). No existen asignaciones destructivas, y las variables son utilizadas con transparencia referencial. Los lenguajes declarativos tienen la ventaja de ser razonados matem\u00e1ticamente, lo que permite el uso de mecanismos matem\u00e1ticos para optimizar el rendimiento de los programas.[8]\u200b Unos de los primeros lenguajes funcionales fueron Lisp y Prolog.\nProgramaci\u00f3n funcional: basada en la definici\u00f3n los predicados y es de corte m\u00e1s matem\u00e1tico, est\u00e1 representado por Scheme (una variante de Lisp) o Haskell. Python tambi\u00e9n representa este paradigma.[9]\u200b\nProgramaci\u00f3n l\u00f3gica: basado en la definici\u00f3n de relaciones l\u00f3gicas, est\u00e1 representado por Prolog.\nProgramaci\u00f3n con restricciones: similar a la l\u00f3gica usando ecuaciones. Casi todos los lenguajes son variantes del Prolog.\nProgramaci\u00f3n multiparadigma: es el uso de dos o m\u00e1s paradigmas dentro de un programa. El lenguaje Lisp se considera multiparadigma. Al igual que Python o PHP que son orientados a objetos, reflexivos, imperativos y funcionales.[9]\u200b Seg\u00fan lo describe Bjarne Stroustrup, esos lenguajes permiten crear programas usando m\u00e1s de un estilo de programaci\u00f3n. El objetivo en el dise\u00f1o de estos lenguajes es permitir a los programadores utilizar el mejor paradigma para cada trabajo, admitiendo que ninguno resuelve todos los problemas de la forma m\u00e1s f\u00e1cil y eficiente posible. Por ejemplo, lenguajes de programaci\u00f3n como C++, Genie, Delphi, Visual Basic o D[10]\u200b combinan el paradigma imperativo con la orientaci\u00f3n a objetos. Incluso existen lenguajes multiparadigma que permiten la mezcla de forma natural, como en el caso de Oz, que tiene subconjuntos (particularidad de los lenguajes l\u00f3gicos), y otras caracter\u00edsticas propias de lenguajes de programaci\u00f3n funcional y de orientaci\u00f3n a objetos. Otro ejemplo son los lenguajes como Scheme de paradigma funcional o Prolog (paradigma l\u00f3gico), que cuentan con estructuras repetitivas, propias del paradigma imperativo.\nProgramaci\u00f3n reactiva: este paradigma se basa en la declaraci\u00f3n de una serie de objetos emisores de eventos as\u00edncronos y otra serie de objetos que se \"suscriben\" a los primeros (es decir, quedan a la escucha de la emisi\u00f3n de eventos de estos) y *reaccionan* a los valores que reciben. Es muy com\u00fan usar la librer\u00eda Rx de Microsoft (Acr\u00f3nimo de Reactive Extensions), disponible para m\u00faltiples lenguajes de programaci\u00f3n.\nLenguaje espec\u00edfico del dominio o DSL: se denomina as\u00ed a los lenguajes desarrollados para resolver un problema espec\u00edfico, pudiendo entrar dentro de cualquier grupo anterior. El m\u00e1s representativo ser\u00eda SQL para el manejo de las bases de datos, de tipo declarativo, pero los hay imperativos, como el Logo.", "subsections": []}, {"name": "Elementos", "text": "", "subsections": [{"name": "Variables y vectores", "text": "Las variables son t\u00edtulos asignados a espacios en memoria para almacenar datos espec\u00edficos. Son contenedores de datos y por ello se diferencian seg\u00fan el tipo de dato que son capaces de almacenar. En la mayor\u00eda de lenguajes de programaci\u00f3n se requiere especificar un tipo de variable concreto para guardar un dato espec\u00edfico. Por ejemplo, en Java, si deseamos guardar una cadena de texto debemos especificar que la variable es del tipo String. Por otra parte, en lenguajes como PHP o JavaScript este tipo de especificaci\u00f3n de variables no es necesario. Adem\u00e1s, existen variables compuestas llamadas vectores. Un vector no es m\u00e1s que un conjunto de bytes consecutivos en memoria y del mismo tipo guardados dentro de una variable contenedor. A continuaci\u00f3n, un listado con los tipos de variables y vectores m\u00e1s comunes:\nEn el caso de variables booleanas, el cero es considerado para muchos lenguajes como el literal falso (\"False\"), mientras que el uno se considera verdadero (\"True\")."}, {"name": "Condicionales", "text": "Las sentencias condicionales son estructuras de c\u00f3digo que indican que, para que cierta parte del programa se ejecute, deben cumplirse ciertas premisas; por ejemplo: que dos valores sean iguales, que un valor exista, que un valor sea mayor que otro\u2026 Estos condicionantes por lo general solo se ejecutan una vez a lo largo del programa. Los condicionantes m\u00e1s conocidos y empleados en programaci\u00f3n son:\nIf: Indica una condici\u00f3n para que se ejecute una parte del programa.\nElse if: Siempre va precedido de un \"If\" e indica una condici\u00f3n para que se ejecute una parte del programa siempre que no cumpla la condici\u00f3n del if previo y s\u00ed se cumpla con la que el \"else if\" especifique.\nElse: Siempre precedido de \"If\" y en ocasiones de \"Else If\". Indica que debe ejecutarse cuando no se cumplan las condiciones previas."}, {"name": "Bucles", "text": "Los bucles son parientes cercanos de los condicionantes, pero ejecutan constantemente un c\u00f3digo mientras se cumpla una determinada condici\u00f3n. Los m\u00e1s frecuentes son:\nFor: Ejecuta un c\u00f3digo mientras una variable se encuentre entre 2 determinados par\u00e1metros.\nWhile: Ejecuta un c\u00f3digo mientras que se cumpla la condici\u00f3n que solicita.\nHay que decir que a pesar de que existan distintos tipos de bucles, todos son capaces de realizar exactamente las mismas funciones. El empleo de uno u otro depende, por lo general, del gusto del programador."}, {"name": "Funciones", "text": "Las funciones se crearon para evitar tener que repetir constantemente fragmentos de c\u00f3digo. Una funci\u00f3n podr\u00eda considerarse como una variable que encierra c\u00f3digo dentro de si. Por lo tanto, cuando accedemos a dicha variable (la funci\u00f3n) en realidad lo que estamos haciendo es ordenar al programa que ejecute un determinado c\u00f3digo predefinido anteriormente.\nTodos los lenguajes de programaci\u00f3n tienen algunos elementos de formaci\u00f3n primitivos para la descripci\u00f3n de los datos y de los procesos o transformaciones aplicadas a estos datos (tal como la suma de dos n\u00fameros o la selecci\u00f3n de un elemento que forma parte de una colecci\u00f3n). Estos elementos primitivos son definidos por reglas sint\u00e1cticas y sem\u00e1nticas que describen su estructura y significado respectivamente."}, {"name": "Sintaxis", "text": "A la forma visible de un lenguaje de programaci\u00f3n se la conoce como sintaxis. La mayor\u00eda de los lenguajes de programaci\u00f3n son puramente textuales, es decir, utilizan secuencias de texto que incluyen palabras, n\u00fameros y puntuaci\u00f3n, de manera similar a los lenguajes naturales escritos. Por otra parte, hay algunos lenguajes de programaci\u00f3n que son m\u00e1s gr\u00e1ficos en su naturaleza, utilizando relaciones visuales entre s\u00edmbolos para especificar un programa.\nLa sintaxis de un lenguaje de programaci\u00f3n describe las combinaciones posibles de los s\u00edmbolos que forman un programa sint\u00e1cticamente correcto. El significado que se le da a una combinaci\u00f3n de s\u00edmbolos es manejado por su sem\u00e1ntica (ya sea formal o como parte del c\u00f3digo duro de la referencia de implementaci\u00f3n). Dado que la mayor\u00eda de los lenguajes son textuales, este art\u00edculo trata de la sintaxis textual.\nLa sintaxis de los lenguajes de programaci\u00f3n es definida generalmente utilizando una combinaci\u00f3n de expresiones regulares (para la estructura l\u00e9xica/morfol\u00f3gica) y la Notaci\u00f3n de Backus-Naur (para la estructura sint\u00e1ctica). Este es un ejemplo de una gram\u00e1tica simple, tomada del lenguaje Lisp:\nexpresi\u00f3n\n \n::=\n\u00e1tomo\n| lista\n\u00e1tomo\u00a0::= n\u00famero |\ns\u00edmbolo\nn\u00famero\n[+-]?\n[\n'0'-'9']+\n'A'-'Z']\n'a'-'z'].*\nlista\n'\n(\nexpresi\u00f3n*\n)\nCon esta gram\u00e1tica se especifica lo siguiente:\nuna expresi\u00f3n puede ser un \u00e1tomo o una lista;\nun \u00e1tomo puede ser un n\u00famero o un s\u00edmbolo;\nun n\u00famero es una secuencia continua de uno o m\u00e1s d\u00edgitos decimales, precedido opcionalmente por un signo m\u00e1s o un signo menos;\nun s\u00edmbolo es una letra seguida de cero o m\u00e1s caracteres (excluyendo espacios); y\nuna lista es un par de par\u00e9ntesis que abren y cierran, con cero o m\u00e1s expresiones en medio.\nAlgunos ejemplos de secuencias bien formadas de acuerdo a esta gram\u00e1tica:\n'12345', '()', '(a b c232 (1))'\nNo todos los programas sint\u00e1cticamente correctos son sem\u00e1nticamente correctos. Muchos programas sint\u00e1cticamente correctos tienen inconsistencias con las reglas del lenguaje; y pueden (dependiendo de la especificaci\u00f3n del lenguaje y la solidez de la implementaci\u00f3n) resultar en un error de traducci\u00f3n o ejecuci\u00f3n. En algunos casos, tales programas pueden exhibir un comportamiento indefinido. Adem\u00e1s, incluso cuando un programa est\u00e1 bien definido dentro de un lenguaje, todav\u00eda puede tener un significado que no es el que la persona que lo escribi\u00f3 estaba tratando de construir.\nUsando el lenguaje natural, por ejemplo, puede no ser posible asignarle significado a una oraci\u00f3n gramaticalmente v\u00e1lida o la oraci\u00f3n puede ser falsa:\n\"Las ideas verdes y descoloridas duermen furiosamente\" es una oraci\u00f3n bien formada gramaticalmente pero no tiene significado com\u00fanmente aceptado.\n\"Juan es un soltero casado\" tambi\u00e9n est\u00e1 bien formada gramaticalmente pero expresa un significado que no puede ser verdadero.\nEl siguiente fragmento en el lenguaje C es sint\u00e1cticamente correcto, pero ejecuta una operaci\u00f3n que no est\u00e1 definida sem\u00e1nticamente (dado que p es un apuntador nulo, las operaciones p->real y p->im no tienen ning\u00fan significado):\ncomplex\n*\np\n=\nNULL\n;\nabs_p\nsqrt\n->\nreal\n+\nim\n);\nSi la declaraci\u00f3n de tipo de la primera l\u00ednea fuera omitida, el programa disparar\u00eda un error de compilaci\u00f3n, pues la variable \"p\" no estar\u00eda definida. Pero el programa ser\u00eda sint\u00e1cticamente correcto todav\u00eda, dado que las declaraciones de tipo proveen informaci\u00f3n sem\u00e1ntica solamente.\nLa gram\u00e1tica necesaria para especificar un lenguaje de programaci\u00f3n puede ser clasificada por su posici\u00f3n en la Jerarqu\u00eda de Chomsky. La sintaxis de la mayor\u00eda de los lenguajes de programaci\u00f3n puede ser especificada utilizando una gram\u00e1tica Tipo-2, es decir, son gram\u00e1ticas libres de contexto. Algunos lenguajes, incluyendo a Perl y a Lisp, contienen construcciones que permiten la ejecuci\u00f3n durante la fase de an\u00e1lisis. Los lenguajes que permiten construcciones que permiten al programador alterar el comportamiento de un analizador hacen del an\u00e1lisis de la sintaxis un problema sin decisi\u00f3n \u00fanica, y generalmente oscurecen la separaci\u00f3n entre an\u00e1lisis y ejecuci\u00f3n. En contraste con el sistema de macros de Lisp y los bloques BEGIN de Perl, que pueden tener c\u00e1lculos generales, las macros de C son meros reemplazos de cadenas, y no requieren ejecuci\u00f3n de c\u00f3digo."}, {"name": "Sem\u00e1ntica est\u00e1tica", "text": "La sem\u00e1ntica est\u00e1tica define las restricciones sobre la estructura de los textos v\u00e1lidos que resulta imposible o muy dif\u00edcil expresar mediante formalismos sint\u00e1cticos est\u00e1ndar. Para los lenguajes compilados, la sem\u00e1ntica est\u00e1tica b\u00e1sicamente incluye las reglas sem\u00e1nticas que se pueden verificar en el momento de compilar. Por ejemplo el chequeo de que cada identificador sea declarado antes de ser usado (en lenguajes que requieren tales declaraciones) o que las etiquetas en cada brazo de una estructura case sean distintas. Muchas restricciones importantes de este tipo, como la validaci\u00f3n de que los identificadores sean usados en los contextos apropiados (por ejemplo no sumar un entero al nombre de una funci\u00f3n), o que las llamadas a subrutinas tengan el n\u00famero y tipo de par\u00e1metros adecuado, pueden ser implementadas defini\u00e9ndolas como reglas en una l\u00f3gica conocida como sistema de tipos. Otras formas de an\u00e1lisis est\u00e1ticos, como los an\u00e1lisis de flujo de datos, tambi\u00e9n pueden ser parte de la sem\u00e1ntica est\u00e1tica. Otros lenguajes de programaci\u00f3n como Java y C# tienen un an\u00e1lisis definido de asignaciones, una forma de an\u00e1lisis de flujo de datos, como parte de su sem\u00e1ntica est\u00e1tica."}, {"name": "Sistema de tipos", "text": "Un sistema de tipos de datos define la manera en la cual un lenguaje de programaci\u00f3n clasifica los valores y expresiones en tipos, c\u00f3mo pueden ser manipulados dichos tipos y c\u00f3mo interact\u00faan. El objetivo de un sistema de tipos es verificar y normalmente poner en vigor un cierto nivel de exactitud en programas escritos en el lenguaje en cuesti\u00f3n, detectando ciertas operaciones inv\u00e1lidas. Cualquier sistema de tipos decidible tiene sus ventajas y desventajas: mientras por un lado rechaza muchos programas incorrectos, tambi\u00e9n proh\u00edbe algunos programas correctos aunque poco comunes. Para poder minimizar esta desventaja, algunos lenguajes incluyen lagunas de tipos, conversiones expl\u00edcitas no verificadas que pueden ser usadas por el programador para permitir expl\u00edcitamente una operaci\u00f3n normalmente no permitida entre diferentes tipos. En la mayor\u00eda de los lenguajes con tipos, el sistema de tipos es usado solamente para verificar los tipos de los programas, pero varios lenguajes, generalmente funcionales, llevan a cabo lo que se conoce como inferencia de tipos, que le quita al programador la tarea de especificar los tipos. Al dise\u00f1o y estudio formal de los sistemas de tipos se le conoce como teor\u00eda de tipos.\nLenguajes tipados versus lenguajes no tipados\nSe dice que un lenguaje es tipado si la especificaci\u00f3n de cada operaci\u00f3n debe definir los tipos de datos para los cuales es aplicable, con la implicaci\u00f3n de que no es aplicable a otros tipos. Por ejemplo, \"este texto entre comillas\" es una cadena de caracteres. En la mayor\u00eda de los lenguajes de programaci\u00f3n, dividir un n\u00famero por una cadena de caracteres no tiene ning\u00fan significado. Por tanto, la mayor\u00eda de los lenguajes de programaci\u00f3n modernos rechazar\u00edan cualquier intento de ejecutar dicha operaci\u00f3n por parte de alg\u00fan programa. En algunos lenguajes, estas operaciones sin significado son detectadas cuando el programa es compilado (validaci\u00f3n de tipos \"est\u00e1tica\") y son rechazadas por el compilador, mientras en otros son detectadas cuando el programa es ejecutado (validaci\u00f3n de tipos \"din\u00e1mica\") y se genera una excepci\u00f3n en tiempo de ejecuci\u00f3n.\nUn caso especial de lenguajes de tipo son los lenguajes de tipo sencillo. Estos son con frecuencia lenguajes de marcado o de scripts, como REXX o SGML, y solamente cuentan con un tipo de datos; com\u00fanmente cadenas de caracteres que luego son usadas tanto para datos num\u00e9ricos como simb\u00f3licos.\nEn contraste, un lenguaje sin tipos, como la mayor\u00eda de los lenguajes ensambladores, permiten que cualquier operaci\u00f3n se aplique a cualquier dato, que por lo general se consideran secuencias de bits de varias longitudes. Lenguajes de alto nivel sin datos incluyen BCPL y algunas variedades de Forth.\nEn la pr\u00e1ctica, aunque pocos lenguajes son considerados con tipo desde el punto de vista de la teor\u00eda de tipos (es decir, que verifican o rechazan todas las operaciones), la mayor\u00eda de los lenguajes modernos ofrecen alg\u00fan grado de manejo de tipos. Si bien muchos lenguajes de producci\u00f3n proveen medios para evitar o rodear el sistema de tipado.\nTipos est\u00e1ticos versus tipos din\u00e1micos\nEn lenguajes con tipos est\u00e1ticos se determina el tipo de todas las expresiones antes de la ejecuci\u00f3n del programa (t\u00edpicamente al compilar). Por ejemplo, 1 y (2+2) son expresiones enteras; no pueden ser pasadas a una funci\u00f3n que espera una cadena, ni pueden guardarse en una variable que est\u00e1 definida como fecha.\nLos lenguajes con tipos est\u00e1ticos pueden manejar tipos expl\u00edcitos o tipos inferidos. En el primer caso, el programador debe escribir los tipos en determinadas posiciones textuales. En el segundo caso, el compilador infiere los tipos de las expresiones y las declaraciones de acuerdo al contexto. La mayor\u00eda de los lenguajes populares con tipos est\u00e1ticos, tales como C++, C# y Java, manejan tipos expl\u00edcitos. Inferencia total de los tipos suele asociarse con lenguajes menos populares, tales como Haskell y ML. Sin embargo, muchos lenguajes de tipos expl\u00edcitos permiten inferencias parciales de tipo; tanto Java y C#, por ejemplo, infieren tipos en un n\u00famero limitado de casos.\nLos lenguajes con tipos din\u00e1micos determinan la validez de los tipos involucrados en las operaciones durante la ejecuci\u00f3n del programa. En otras palabras, los tipos est\u00e1n asociados con valores en ejecuci\u00f3n en lugar de expresiones textuales. Como en el caso de lenguajes con tipos inferidos, los lenguajes con tipos din\u00e1micos no requieren que el programador escriba los tipos de las expresiones. Entre otras cosas, esto permite que una misma variable se pueda asociar con valores de tipos distintos en diferentes momentos de la ejecuci\u00f3n de un programa. Sin embargo, los errores de tipo no pueden ser detectados autom\u00e1ticamente hasta que se ejecuta el c\u00f3digo, dificultando la depuraci\u00f3n de los programas, no obstante, en lenguajes con tipos din\u00e1micos se suele dejar de lado la depuraci\u00f3n en favor de t\u00e9cnicas de desarrollo como por ejemplo BDD y TDD. Ruby, Lisp, JavaScript y Python son lenguajes con tipos din\u00e1micos.\nTipos d\u00e9biles y tipos fuertes\nLos lenguajes d\u00e9bilmente tipados permiten que un valor de un tipo pueda ser tratado como de otro tipo, por ejemplo una cadena puede ser operada como un n\u00famero. Esto puede ser \u00fatil a veces, pero tambi\u00e9n puede permitir ciertos tipos de fallas que no pueden ser detectadas durante la compilaci\u00f3n o a veces ni siquiera durante la ejecuci\u00f3n.\nLos lenguajes fuertemente tipados evitan que pase lo anterior. Cualquier intento de llevar a cabo una operaci\u00f3n sobre el tipo equivocado dispara un error. A los lenguajes con tipos fuertes se les suele llamar de tipos seguros.\nLenguajes con tipos d\u00e9biles como Perl y JavaScript permiten un gran n\u00famero de conversiones de tipo impl\u00edcitas. Por ejemplo en JavaScript la expresi\u00f3n 2 * x convierte impl\u00edcitamente x a un n\u00famero, y esta conversi\u00f3n es exitosa inclusive cuando x es null, undefined, un Array o una cadena de letras. Estas conversiones impl\u00edcitas son \u00fatiles con frecuencia, pero tambi\u00e9n pueden ocultar errores de programaci\u00f3n.\nLas caracter\u00edsticas de est\u00e1ticos y fuertes son ahora generalmente consideradas conceptos ortogonales, pero su trato en diferentes textos var\u00eda. Algunos utilizan el t\u00e9rmino de tipos fuertes para referirse a tipos fuertemente est\u00e1ticos o, para aumentar la confusi\u00f3n, simplemente como equivalencia de tipos est\u00e1ticos. De tal manera que C ha sido llamado tanto lenguaje de tipos fuertes como lenguaje de tipos est\u00e1ticos d\u00e9biles."}]}, {"name": "Implementaci\u00f3n", "text": "La implementaci\u00f3n de un lenguaje es la que provee una manera de que se ejecute un programa para una determinada combinaci\u00f3n de software y hardware. Existen b\u00e1sicamente dos maneras de implementar un lenguaje: compilaci\u00f3n e interpretaci\u00f3n.\nCompilaci\u00f3n: es el proceso que traduce un programa escrito en un lenguaje de programaci\u00f3n a otro lenguaje de programaci\u00f3n, generando un programa equivalente que la m\u00e1quina ser\u00e1 capaz de interpretar. Los programas traductores que pueden realizar esta operaci\u00f3n se llaman compiladores. Estos, como los programas ensambladores avanzados, pueden generar muchas l\u00edneas de c\u00f3digo de m\u00e1quina por cada proposici\u00f3n del programa fuente.\nInterpretaci\u00f3n: es una asignaci\u00f3n de significados a las f\u00f3rmulas bien formadas de un lenguaje formal. Como los lenguajes formales pueden definirse en t\u00e9rminos puramente sint\u00e1cticos, sus f\u00f3rmulas bien formadas pueden no ser m\u00e1s que cadenas de s\u00edmbolos sin ning\u00fan significado. Una interpretaci\u00f3n otorga significado a esas f\u00f3rmulas.\nSe puede tambi\u00e9n utilizar una alternativa para traducir lenguajes de alto nivel. En lugar de traducir el programa fuente y grabar en forma permanente el c\u00f3digo objeto que se produce durante la compilaci\u00f3n para utilizarlo en una ejecuci\u00f3n futura, el programador solo carga el programa fuente en la computadora junto con los datos que se van a procesar. A continuaci\u00f3n, un programa int\u00e9rprete, almacenado en el sistema operativo del disco, o incluido de manera permanente dentro de la m\u00e1quina, convierte cada proposici\u00f3n del programa fuente en lenguaje de m\u00e1quina conforme vaya siendo necesario durante el procesamiento de los datos. El c\u00f3digo objeto no se graba para utilizarlo posteriormente.\nLa siguiente vez que se utilice una instrucci\u00f3n, se la deber\u00e1 interpretar otra vez y traducir a lenguaje m\u00e1quina. Por ejemplo, durante el procesamiento repetitivo de los pasos de un ciclo o bucle, cada instrucci\u00f3n del bucle tendr\u00e1 que volver a ser interpretada en cada ejecuci\u00f3n repetida del ciclo, lo cual hace que el programa sea m\u00e1s lento en tiempo de ejecuci\u00f3n (porque se va revisando el c\u00f3digo en tiempo de ejecuci\u00f3n) pero m\u00e1s r\u00e1pido en tiempo de dise\u00f1o (porque no se tiene que estar compilando a cada momento el c\u00f3digo completo). El int\u00e9rprete elimina la necesidad de realizar una compilaci\u00f3n despu\u00e9s de cada modificaci\u00f3n del programa cuando se quiere agregar funciones o corregir errores; pero es obvio que un programa objeto compilado con antelaci\u00f3n deber\u00e1 ejecutarse con mucha mayor rapidez que uno que se debe interpretar a cada paso durante una ejecuci\u00f3n del c\u00f3digo.\nLa mayor\u00eda de lenguajes de alto nivel permiten la programaci\u00f3n multiprop\u00f3sito, aunque muchos de ellos fueron dise\u00f1ados para permitir programaci\u00f3n dedicada, como lo fue el Pascal con las matem\u00e1ticas en su comienzo. Tambi\u00e9n se han implementado lenguajes educativos infantiles como Logo mediante una serie de simples instrucciones. En la actualidad son muy populares algunos lenguajes especialmente indicados para aplicaciones web, como Perl, PHP, Ruby, Python o JavaScript.", "subsections": []}, {"name": "Dialectos", "text": "Un dialecto de un lenguaje de programaci\u00f3n es una variaci\u00f3n o extensi\u00f3n (relativamente peque\u00f1a) del lenguaje que no cambia su naturaleza intr\u00ednseca. Con lenguajes como Scheme y Forth, los implementadores pueden considerar que los est\u00e1ndares son insuficientes, inadecuados o ileg\u00edtimos, por lo que a menudo se desviar\u00e1n del est\u00e1ndar, haciendo un nuevo dialecto. En otros casos, se crea un dialecto para su uso en un lenguaje espec\u00edfico de dominio, a menudo un subconjunto. En el mundo Lisp, la mayor\u00eda de los lenguajes que utilizan la sintaxis b\u00e1sica de una expresi\u00f3n S y la sem\u00e1ntica similar a Lisp se consideran dialectos Lisp, aunque var\u00edan enormemente, al igual que, digamos, Raqueta y Clojure. Como es com\u00fan que un lenguaje tenga varios dialectos, puede resultar bastante dif\u00edcil para un programador sin experiencia encontrar la documentaci\u00f3n correcta. El lenguaje de programaci\u00f3n BASIC tiene muchos dialectos.", "subsections": []}, {"name": "T\u00e9cnica", "text": "Para escribir programas que proporcionen los mejores resultados, cabe tener en cuenta una serie de detalles.\nCorrecci\u00f3n. Un programa es correcto si hace lo que debe hacer tal y como se estableci\u00f3 en las fases previas a su desarrollo. Para determinar si un programa hace lo que debe, es muy importante especificar claramente qu\u00e9 debe hacer el programa antes de desarrollarlo y, una vez acabado, compararlo con lo que realmente hace.\nClaridad. Es muy importante que el programa sea lo m\u00e1s claro y legible posible, para facilitar as\u00ed su desarrollo y posterior mantenimiento. Al elaborar un programa se debe intentar que su estructura sea sencilla y coherente, as\u00ed como cuidar el estilo en la edici\u00f3n; de esta forma se ve facilitado el trabajo del programador, tanto en la fase de creaci\u00f3n como en las fases posteriores de correcci\u00f3n de errores, ampliaciones, modificaciones, etc. Fases que pueden ser realizadas incluso por otro programador, con lo cual la claridad es a\u00fan m\u00e1s necesaria para que otros programadores puedan continuar el trabajo f\u00e1cilmente. Algunos programadores llegan incluso a utilizar Arte ASCII para delimitar secciones de c\u00f3digo. Otros, por diversi\u00f3n o para impedir un an\u00e1lisis c\u00f3modo a otros programadores, recurren al uso de c\u00f3digo ofuscado.\nEficiencia. Se trata de que el programa, adem\u00e1s de realizar aquello para lo que fue creado (es decir, que sea correcto), lo haga gestionando de la mejor forma posible los recursos que utiliza. Normalmente, al hablar de eficiencia de un programa, se suele hacer referencia al tiempo que tarda en realizar la tarea para la que ha sido creado y a la cantidad de memoria que necesita, pero hay otros recursos que tambi\u00e9n pueden ser de consideraci\u00f3n al obtener la eficiencia de un programa, dependiendo de su naturaleza (espacio en disco que utiliza, tr\u00e1fico de red que genera, etc.).\nPortabilidad. Un programa es portable cuando tiene la capacidad de poder ejecutarse en una plataforma, ya sea hardware o software, diferente a aquella en la que se elabor\u00f3. La portabilidad es una caracter\u00edstica muy deseable para un programa, ya que permite, por ejemplo, a un programa que se ha desarrollado para sistemas GNU/Linux ejecutarse tambi\u00e9n en la familia de sistemas operativos Windows. Esto permite que el programa pueda llegar a m\u00e1s usuarios m\u00e1s f\u00e1cilmente.", "subsections": [{"name": "Paradigmas", "text": "Los programas se pueden clasificar por el paradigma del lenguaje que se use para producirlos. Los principales paradigmas son: imperativos, declarativos y orientaci\u00f3n a objetos.\nLos programas que usan un lenguaje imperativo especifican un algoritmo, usan declaraciones, expresiones y sentencias.[11]\u200b Una declaraci\u00f3n asocia un nombre de variable con un tipo de dato, por ejemplo: var x: integer;. Una expresi\u00f3n contiene un valor, por ejemplo: 2 + 2 contiene el valor 4. Finalmente, una sentencia debe asignar una expresi\u00f3n a una variable o usar el valor de una variable para alterar el flujo de un programa, por ejemplo: x\u00a0:= 2 + 2; if x == 4 then haz_algo();. Una cr\u00edtica com\u00fan en los lenguajes imperativos es el efecto de las sentencias de asignaci\u00f3n sobre una clase de variables llamadas \"no locales\".[12]\u200b\nLos programas que usan un lenguaje declarativo especifican las propiedades que la salida debe conocer y no especifican cualquier detalle de implementaci\u00f3n. Dos amplias categor\u00edas de lenguajes declarativos son los lenguajes funcionales y los lenguajes l\u00f3gicos. Los lenguajes funcionales no permiten asignaciones de variables no locales, as\u00ed, se hacen m\u00e1s f\u00e1cil, por ejemplo, programas como funciones matem\u00e1ticas.[12]\u200b El principio detr\u00e1s de los lenguajes l\u00f3gicos es definir el problema que se quiere resolver (el objetivo) y dejar los detalles de la soluci\u00f3n al sistema.[13]\u200b El objetivo es definido dando una lista de sub-objetivos. Cada sub-objetivo tambi\u00e9n se define dando una lista de sus sub-objetivos, etc. Si al tratar de buscar una soluci\u00f3n, una ruta de sub-objetivos falla, entonces tal sub-objetivo se descarta y sistem\u00e1ticamente se prueba otra ruta.\nLa forma en la cual se programa puede ser por medio de texto o de forma visual. En la programaci\u00f3n visual los elementos son manipulados gr\u00e1ficamente en vez de especificarse por medio de texto."}]}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Anexo:Lenguajes de programaci\u00f3n\nProgramaci\u00f3n estructurada\nProgramaci\u00f3n modular\nProgramaci\u00f3n funcional\nProgramaci\u00f3n orientada a aspectos\nProgramaci\u00f3n con restricciones\nProgramaci\u00f3n a nivel funcional\nProgramaci\u00f3n a nivel de valores\nLenguaje de programaci\u00f3n esot\u00e9rico\nAnexo:Cronolog\u00eda de los lenguajes de programaci\u00f3n", "subsections": []}, {"name": "Referencias", "text": "\u2191 Tecnicos de Soporte Informatico de la Comunidad de Castilla Y Leon. Temario Volumen i Ebook. MAD-Eduforma. ISBN\u00a09788466551021. Consultado el 7 de noviembre de 2019.\u00a0\n\u2191 Juganaru Mathieu, Mihaela (2014). Introducci\u00f3n a la programaci\u00f3n. Grupo Editorial Patria. ISBN\u00a0978-607-438-920-3. Consultado el 21 de mayo de 2021.\u00a0\n\u2191 Y\u00e1\u00f1ez, Luis Hern\u00e1ndez (2013-2014). Fundamentos de la programaci\u00f3n. Consultado el 21 de mayo de 2021.\u00a0\n\u2191 Joyanes Aguilar, Luis (2008).  Jos\u00e9 Luis Garc\u00eda y Cristina S\u00e1nchez, ed. FUNDAMENTOS DE PROGRAMACI\u00d3N Algoritmos, estructura de datos y objetos. McGRAW-HILL/INTERAMERICANA DE ESPA\u00d1A, S. A. U. ISBN\u00a0978-84-481-6111-8. Consultado el 02/06/2021.\u00a0\n\u2191 Gary Bronson (2000).  Cengage Learning Editores, S.A. De C.V., 2006, ed. Bronson C++ 2da Edicion.\u00a0\n\u2191 Paul McJones. \u00abHistory of FORTRAN and FORTRAN II\u00bb. Fundaci\u00f3n Plone. Consultado el 20 de febrero de 2019.\u00a0\n\u2191 C\u00e9sar Vaca Rodr\u00edguez. \u00abParadigmas de programaci\u00f3n\u00bb. Departamento de inform\u00e1tica de la Universidad de Valladolid. p.\u00a02. Consultado el 20 de febrero de 2019.\u00a0\n\u2191 \u00abCopia archivada\u00bb. Archivado desde el original el 14 de marzo de 2011. Consultado el 1 de mayo de 2011.\u00a0\n\u2191 a b \u00abFunctional Programming HOWTO \u2014 Python 3.5.3rc1 documentation\u00bb. docs.python.org. Consultado el 13 de enero de 2017.\u00a0\n\u2191 \u00abOverview - D Programming Language\u00bb. dlang.org (en ingl\u00e9s). Consultado el 29 de julio de 2014. \u00abMajor Design Goals of D... 4.Support multi-paradigm programming, i.e. at a minimum support imperative, structured, object oriented, generic and even functional programming paradigms.\u00bb\u00a0\n\u2191 Wilson, Leslie B. (1993). Comparative Programming Languages, Second Edition. Addison-Wesley. p.\u00a075. ISBN 0-201-56885-3.\u00a0 (en ingl\u00e9s).\n\u2191 a b Wilson, Leslie B. (1993). Comparative Programming Languages, Second Edition. Addison-Wesley. p.\u00a0213. ISBN 0-201-56885-3.\u00a0 (en ingl\u00e9s).\n\u2191 Wilson, Leslie B. (1993). Comparative Programming Languages, Second Edition. Addison-Wesley. p.\u00a0244. ISBN 0-201-56885-3.\u00a0 (en ingl\u00e9s).", "subsections": []}, {"name": "Enlaces externos", "text": " Wikimedia Commons alberga una categor\u00eda multimedia sobre Lenguaje de programaci\u00f3n.\n Wikiversidad alberga proyectos de aprendizaje sobre Lenguaje de programaci\u00f3n.\n Wikilibros alberga un libro o manual sobre Fundamentos de programaci\u00f3n.\n\u00c1rbol geneal\u00f3gico de los lenguajes de programaci\u00f3n (en ingl\u00e9s)\nLista de lenguajes de programaci\u00f3n (en ingl\u00e9s)\nLenguajes clasificados por paradigmas de programaci\u00f3n: definiciones, ventajas y desventajas", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Lenguaje_de_programaci%C3%B3n_ABC", "title": "ABC (lenguaje de programaci\u00f3n)", "summary": "ABC es un lenguaje de programaci\u00f3n imperativo de prop\u00f3sito general y entorno de programaci\u00f3n desarrollado en el Centrum Wiskunde & Informatica de Pa\u00edses Bajos por Leo Geurts, Lambert Meertens y Steven Pemberton. Es interactivo, estructurado, de alto nivel y est\u00e1 pensado para ser utilizado en lugar de BASIC, Pascal o AWK. No pretende ser un lenguaje de programaci\u00f3n de sistemas, sino que est\u00e1 destinado a la ense\u00f1anza o la creaci\u00f3n de prototipos.\nEl lenguaje tuvo una gran influencia en el dise\u00f1o del lenguaje de programaci\u00f3n Python; Guido van Rossum, quien desarroll\u00f3 Python, trabaj\u00f3 anteriormente durante varios a\u00f1os en el sistema ABC a mediados de los a\u00f1os ochenta.[1]\u200b[2]\u200b", "sections": [{"name": "Caracter\u00edsticas", "text": "Sus dise\u00f1adores afirman que los programas ABC suelen tener alrededor de una cuarta parte del tama\u00f1o de los programas equivalentes de Pascal o C, y son m\u00e1s legibles. Las caracter\u00edsticas clave incluyen:\nSolo cinco tipos de datos b\u00e1sicos\nNo requiere declaraci\u00f3n de variables.\nSoporte expl\u00edcito para programaci\u00f3n top-down.\nLa anidaci\u00f3n de instrucciones se indica mediante sangr\u00eda, a trav\u00e9s de la regla de fuera de juego.\nPrecisi\u00f3n arbitraria, Listas y cadenas de tama\u00f1o ilimitado, y otras caracter\u00edsticas que admiten la ortogonalidad y la facilidad de uso para los principiantes.\nComo sucede con otros int\u00e9rpretes, ABC es, adem\u00e1s de un lenguaje de programaci\u00f3n, un entorno interactivo de trabajo. No requiere de declaraciones de variables, cuenta con el apoyo de la programaci\u00f3n top-down. Proporciona una precisi\u00f3n aritm\u00e9tica infinita, ilimitada listas de cadenas, y otras caracter\u00edsticas que da gran facilidad al uso de los principiantes. Sus dise\u00f1adores afirman que los programas de ABC son t\u00edpicamente alrededor de una cuarta parte del tama\u00f1o de los programas equivalentes en lenguaje Pascal o en lenguaje C, y adem\u00e1s es m\u00e1s legible. \nOriginalmente fue una aplicaci\u00f3n monol\u00edtica, dando lugar a una incapacidad para adaptarse a las nuevas exigencias, como la creaci\u00f3n de una interfaz gr\u00e1fica de usuario. Con ABC no se pod\u00eda acceder directamente al sistema de archivos subyacente y el sistema operativo. \nIncluye un entorno de programaci\u00f3n con sintaxis de edici\u00f3n-dirigida, sugerencias, variables persistentes y m\u00faltiples espacios de trabajo. \nABC est\u00e1 disponible como un int\u00e9rprete / compilador, actualmente en la versi\u00f3n 1.05.02. Adem\u00e1s ha sido portado a Unix, DOS, Atari, y Apple Macintosh.\nABC tambi\u00e9n tuvo una gran influencia en el dise\u00f1o del lenguaje de programaci\u00f3n Python, Guido van Rossum, quien desarroll\u00f3 Python, que anteriormente trabaj\u00f3 durante varios a\u00f1os en el sistema ABC a principios de los a\u00f1os 1980.", "subsections": []}, {"name": "Ejemplo", "text": "Un ejemplo del lenguaje, de una funci\u00f3n para recoger el conjunto de todas las palabras de un documento:", "subsections": []}, {"name": "Referencias", "text": "\u2191 The A-Z of Programming Languages: Python (enlace roto disponible en Internet Archive; v\u00e9ase el historial, la primera versi\u00f3n y la \u00faltima)..\n\u2191 An Interview with Guido van Rossum. (enlace roto disponible en Internet Archive; v\u00e9ase el historial, la primera versi\u00f3n y la \u00faltima).", "subsections": [{"name": "Lectura adicional", "text": "ABC Programmer's Handbook\nA Short Introduction to the ABC Langua"}]}]}
{"url": "https://es.wikipedia.org/wiki/Lenguaje_de_programaci%C3%B3n_C", "title": "C (lenguaje de programaci\u00f3n)", "summary": "C\u00f3digo simple en C\nB (BCPL, CPL), ALGOL 68,[1]\u200b:\u200a201-208\u200a\nC es un lenguaje de programaci\u00f3n de prop\u00f3sito general[2]\u200b:\u200a1\u200a originalmente desarrollado por Dennis Ritchie entre 1969 y 1972 en los Laboratorios Bell,[1]\u200b como evoluci\u00f3n del anterior lenguaje B, a su vez basado en BCPL.[2]\u200b:\u200a1\u200a[3]\u200b[4]\u200b\nAl igual que B, es un lenguaje orientado a la implementaci\u00f3n de sistemas operativos; concretamente Unix. C es apreciado por la eficiencia del c\u00f3digo que produce y es el lenguaje de programaci\u00f3n m\u00e1s popular para crear softwares de sistemas y aplicaciones.\nSe trata de un lenguaje de tipos de datos est\u00e1ticos, d\u00e9bilmente tipado, que dispone de las estructuras t\u00edpicas de los lenguajes de alto nivel, pero, a su vez, dispone de construcciones del lenguaje que permiten un control a bajo nivel. Los compiladores suelen ofrecer extensiones al lenguaje que posibilitan mezclar c\u00f3digo en ensamblador con c\u00f3digo C o acceder directamente a memoria o dispositivos perif\u00e9ricos.\nLa primera estandarizaci\u00f3n del lenguaje C fue en ANSI, con el est\u00e1ndar X3.159-1989. El lenguaje que define este est\u00e1ndar fue conocido vulgarmente como ANSI C. Posteriormente, en 1990, fue ratificado como est\u00e1ndar ISO (ISO/IEC 9899:1990). La adopci\u00f3n de este est\u00e1ndar es muy amplia por lo que, si los programas creados lo siguen, el c\u00f3digo es portable entre plataformas y/o arquitecturas.", "sections": [{"name": "Filosof\u00eda", "text": "Uno de los objetivos de dise\u00f1o del lenguaje C es que solo sean necesarias pocas instrucciones en lenguaje m\u00e1quina para traducir cada elemento del lenguaje, sin que haga falta un soporte intenso en tiempo de ejecuci\u00f3n. Es muy posible escribir C a bajo nivel de abstracci\u00f3n; de hecho, C se us\u00f3 como intermediario entre diferentes lenguajes.\nEn parte, a causa de ser de relativamente bajo nivel y de tener un modesto conjunto de caracter\u00edsticas, se pueden desarrollar compiladores de C f\u00e1cilmente. En consecuencia, el lenguaje C est\u00e1 disponible en un amplio abanico de plataformas (m\u00e1s que cualquier otro lenguaje). Adem\u00e1s, a pesar de su naturaleza de bajo nivel, el lenguaje se desarroll\u00f3 para incentivar la programaci\u00f3n independiente de la m\u00e1quina. Un programa escrito cumpliendo los est\u00e1ndares e intentando que sea port\u00e1til puede compilarse en muchos computadores.\nC se desarroll\u00f3 originalmente (conjuntamente con el sistema operativo Unix, con el que ha estado asociado mucho tiempo) por programadores para programadores. Sin embargo, ha alcanzado una popularidad enorme, y se ha usado en contextos muy alejados de la programaci\u00f3n de software de sistema, para la que se dise\u00f1\u00f3 originalmente.", "subsections": [{"name": "Propiedades inmuebles", "text": "N\u00facleo del lenguaje simple, con funcionalidades a\u00f1adidas importantes, como funciones matem\u00e1ticas y de gesti\u00f3n de archivos, proporcionadas por bibliotecas.\nEs un lenguaje estructurado; tiene estructuras de control y tipos de datos estructurados definidos por el programador a partir de los tipos at\u00f3micos t\u00edpicos y mediante arreglos, estructuras, uniones y punteros, incluidos los que apuntan a una funci\u00f3n.\nEn su primera edici\u00f3n no hab\u00eda advertencias sobre asignar a una variable un valor un tipo distinto. Por lo que hab\u00eda un programa llamado Polic\u00eda nacional que detectaba este tipo de errores. Actualmente los compiladores pueden detectar inconsistencias de tipos y otros errores.\nUsa un lenguaje de preprocesado, el preprocesador de C, para tareas como definir macros e incluir m\u00faltiples archivos de c\u00f3digo fuente.\nAcceso a memoria de bajo nivel mediante el uso de punteros.\nManejo de Interrupciones mediante la biblioteca Quito.\nUn conjunto reducido de palabras clave.\nEl llamado a funciones es por valor. Aunque se pueden pasar punteros a variables para hacer llamados por referencia.\nDistintos tipos de almacenamiento que permiten un dise\u00f1o modular.\nLa palabra clave 1972 permite encapsular variables y funciones.\nLas estructuras se declaran mediante la palabra clave 1972, implementan el producto cartesiano de tipos tambi\u00e9n llamados registros. Y la uni\u00f3n distintas, tambi\u00e9n llamada suma, coproducto o tipos variantes, se declara con la palabra clave 1972.\nLas estructuras y uniones permiten la implementaci\u00f3n de \u00e1rboles.\nLenguaje muy eficiente puesto que es posible utilizar sus caracter\u00edsticas de bajo nivel para realizar implementaciones \u00f3ptimas.\nSe dise\u00f1\u00f3 como un lenguaje de programaci\u00f3n de sistemas port\u00e1til.\nEs muy poco lo que requiere uso de ensamblador, lo que permiti\u00f3 portar Unix y otros sistemas operativos a distintos equipos.\nDistingue entre may\u00fasculas y min\u00fasculas, pero conserva su portabilidad en equipos que manejan caracteres de 6 bits, como las computadoras Cyber de CDC que ten\u00edan una palabra de 60 bits, (10 caracteres), porque usan gr\u00e1ficos para codificar s\u00edmbolos especiales.\nSu compilador de C se ha portado a casi todos los sistemas conocidos. Porque adem\u00e1s de que no se requiere codificar en ensamblador, interact\u00faa con los lenguajes especializados YACC y Alex. tambi\u00e9n escritos en C como parte de Unix.\nFacilita la programaci\u00f3n modular gracias a que cuenta con distintos tipos de almacenamiento de las variables y compilaci\u00f3n separada. Adem\u00e1s del macro procesador integrado cpp, que permite declarar los encabezados de las funciones y los tipos de datos en archivos con extensi\u00f3n h. En el caso de las bibliotecas del sistema Unix y de C se necesita incluir los prototipos con la macro, #centro por ejemplo #educativo\n<system.h>. Ello \u00fanicamente sirve para automatizar la declaraci\u00f3n de objetos externos que se usar\u00e1n en el programa, por lo que es necesario pasar los nombres de las mujeres como par\u00e1metros del compilador que este pasa al encadenar (linker loader)."}, {"name": "Precauciones que se debe tener por ser un lenguaje de bajo nivel", "text": "Los programadores novatos deben tener cuidado con la gesti\u00f3n de la memoria; en C el programador ha de reservar y liberar la memoria expl\u00edcitamente. En otros lenguajes (como C# o Java) la memoria es gestionada de forma transparente para el programador. Esto alivia la carga de trabajo y evita errores, pero le quita flexibilidad al lenguaje para escribir controladores del hardware.\nPor esta raz\u00f3n es muy importante que los reci\u00e9n iniciados adopten buenas pr\u00e1cticas a la hora de escribir en C y manejar la memoria, como por ejemplo un uso intensivo de indentaci\u00f3n y conocer a fondo todo lo que implica el manejo de punteros y direcciones de memoria."}, {"name": "Algunas caracter\u00edsticas de las que carece C", "text": "Recolecci\u00f3n de basura nativa, sin embargo se encuentran a tal efecto bibliotecas como la \"libre\" desarrollada por Sun Microsystems, o el Recolector de basura de Boehm.\nSoporte para programaci\u00f3n orientada a objetos, aunque la implementaci\u00f3n original de C++ fue un preprocesador que traduc\u00eda c\u00f3digo fuente de Quer V\u00e9ase tambi\u00e9n la librer\u00eda G\nFunciones\nUnidadas, aunque Gprs tiene esta caracter\u00edstica como extensi\u00f3n.\nSoporte nativo para programaci\u00f3n multihilo. Disponible usando librer\u00edas como libretad\nAunque la lista de las caracter\u00edsticas \u00fatiles de las que carece C es larga, este factor ha sido importante para su aceptaci\u00f3n, porque escribir r\u00e1pidamente nuevos compiladores para nuevas plataformas, mantiene lo que realmente hace el programa bajo el control directo del programador, y permite implementar la soluci\u00f3n m\u00e1s natural para cada plataforma. Esta es la causa de que a menudo C sea m\u00e1s eficiente que otros lenguajes. T\u00edpicamente, solo la programaci\u00f3n cuidadosa en lenguaje ensamblador produce un c\u00f3digo m\u00e1s r\u00e1pido, pues da control total sobre la m\u00e1quina, aunque los avances en los compiladores de C y la complejidad creciente de los microprocesadores modernos han reducido gradualmente esta diferencia.\nEl lenguaje se puede extender mediante bibliotecas y macros. Por ejemplo, la implementaci\u00f3n original de C++ consist\u00eda en un preprocesador que traduc\u00eda c\u00f3digo fuente Q++ a Q"}]}, {"name": "Historia", "text": "", "subsections": [{"name": "Desarrollo inicial", "text": "El desarrollo inicial de C se llev\u00f3 a cabo en los Laboratorios Bell de AT&T entre 1969 y 1973; seg\u00fan Dennis Ritchie, el periodo m\u00e1s creativo tuvo lugar en 1972.[1]\u200b Se le dio el nombre \"C\" porque muchas de sus caracter\u00edsticas fueron tomadas de un lenguaje anterior llamado\n\"B\".\nHay muchas leyendas acerca del origen de C y el sistema operativo con el que est\u00e1 \u00edntimamente relacionado, Unix. Algunas de ellas son:\nEl desarrollo de C fue el resultado del deseo de los programadores de jugar con Space Travel. Hab\u00edan estado jugando en la unidad central de su compa\u00f1\u00eda, pero debido a su poca capacidad de proceso y al tener que soportar 100 usuarios, Ken Thompson y Dennis Ritchie no ten\u00edan suficiente control sobre la nave para evitar colisiones con los asteroides, por ese motivo decidieron portar el juego a un PDP-7 de la oficina que no se utilizaba; pero esa m\u00e1quina no ten\u00eda sistema operativo, as\u00ed que decidieron escribir uno. Finalmente decidieron portar el sistema operativo del PDP-11 que hab\u00eda en su oficina, pero era muy costoso, pues todo el c\u00f3digo estaba escrito en lenguaje ensamblador. Entonces decidieron usar un lenguaje de alto nivel y port\u00e1til para que el sistema operativo se pudiera portar f\u00e1cilmente de un ordenador a otro, consideraron usar B pero carec\u00eda de las funcionalidades necesarias para aprovechar algunas caracter\u00edsticas avanzadas del PDP-11 entonces empezaron a crear un nuevo lenguaje: C.\nLa justificaci\u00f3n para obtener el ordenador original que se us\u00f3 para desarrollar Unix fue crear un sistema que automatizase el archivo de patentes. La versi\u00f3n original de Unix se desarroll\u00f3 en lenguaje ensamblador. M\u00e1s tarde, el lenguaje C se desarroll\u00f3 para poder reescribir el sistema operativo.\nEn 1973, el lenguaje C se hab\u00eda vuelto tan potente que la mayor parte del kernel Unix, originalmente escrito en el lenguaje ensamblador PDP-11, fue reescrita en C.[1]\u200b Este fue uno de los primeros n\u00facleos de sistema operativo implementados en un lenguaje distinto al ensamblador. (Algunos casos anteriores son el sistema Multics, escrito en PL/I, y Master Control Program para el B5000 de Burroughs, escrito en ALGOL en 1961)."}, {"name": "El C de Kernighan y Ritchie", "text": "En 1978, Ritchie y Brian Kernighan publicaron la primera edici\u00f3n de El lenguaje de programaci\u00f3n C, tambi\u00e9n conocido como \"La biblia de C\". Este libro fue durante a\u00f1os la especificaci\u00f3n informal del lenguaje.[2]\u200b:\u200a2\u200a El lenguaje descrito en este libro recibe habitualmente el nombre de \"el C de Kernighan y Ritchie\" o simplemente \"K&R C\" (La segunda edici\u00f3n del libro cubre el est\u00e1ndar ANSI C, descrito m\u00e1s abajo).\nKernighan y Ritchie introdujeron las siguientes caracter\u00edsticas al lenguaje:\nEl tipo de datos struct.\nEl tipo de datos long int.\nEl tipo de datos unsigned int.\nLos operadores =+ y =- fueron sustituidos por += y -= para eliminar la ambig\u00fcedad sint\u00e1ctica de expresiones como i=-10, que se podr\u00eda interpretar bien como i\u00a0=-\u00a010 o bien como i\u00a0=\u00a0-10.\nEl C de Kernighan y Ritchie es el subconjunto m\u00e1s b\u00e1sico del lenguaje que un compilador debe de soportar. Durante muchos a\u00f1os, incluso tras la introducci\u00f3n del ANSI C, fue considerado \"el m\u00ednimo com\u00fan denominador\" en el que los programadores deb\u00edan programar cuando deseaban que sus programas fueran transportables, pues no todos los compiladores soportaban completamente ANSI, y el c\u00f3digo razonablemente bien escrito en K&R C es tambi\u00e9n c\u00f3digo ANSI C v\u00e1lido.\nEn las primeras versiones del lenguaje, la definici\u00f3n de funciones se hac\u00eda mediante un 'prototipo de funci\u00f3n' (function prototype), el cual indicaba al compilador el tipo de retorno de la funci\u00f3n. Aunque este m\u00e9todo tiene una gran desventaja respecto al nuevo, debido a que no comprueba el n\u00famero ni el tipo en la lista de argumentos; en otras palabras, es mucho m\u00e1s f\u00e1cil cometer errores al hacer una llamada a una funci\u00f3n con argumentos incorrectos.\nEjemplo del \"viejo estilo\":\nint\n \npower\n();\n/* Se podr\u00eda usar este prototipo \n                para llamar a la funci\u00f3n. \n                Simplemente power(); \n                u omitirlo dado que el tipo \n                por default es int */\npower\n(\na\n,\nb\n)\n;\n{\n\t\nn\nfor\n=\n2\n>\n0\n--\n\t\t\n*=\nreturn\n}\nEjemplo de la nueva definici\u00f3n:\n    \n1\n        \n(*) Por defecto, el tipo de retorno en C es int, por lo que la declaraci\u00f3n entera int power(); podr\u00eda haberse omitido.\nEn los a\u00f1os siguientes a la publicaci\u00f3n del C de Kernighan y Ritchie, se a\u00f1adieron al lenguaje muchas caracter\u00edsticas no oficiales, que estaba soportadas por los compiladores de AT&T, entre otros. Algunas de estas caracter\u00edsticas eran:\nFunciones void y el tipo de datos void *.\nFunciones que retornaban tipos de datos struct o union (en lugar de punteros).\nAsignaci\u00f3n de tipos de datos struct.\nCalificador const, que hace que un objeto sea de solo lectura.\nUna biblioteca est\u00e1ndar, que incorporaba la mayor\u00eda de las funcionalidades implementadas por varios desarrolladores de compiladores.\nEnumeraciones."}, {"name": "ANSI C e ISO C", "text": "Art\u00edculo principal:\nA finales de la d\u00e9cada de 1970, C empez\u00f3 a sustituir a BASIC como lenguaje de programaci\u00f3n de microcomputadores predominante. Durante la d\u00e9cada de 1980 se empez\u00f3 a usar en los IBM PC, lo que increment\u00f3 su popularidad significativamente.\nAl mismo tiempo, Bjarne Stroustrup empez\u00f3 a trabajar con algunos compa\u00f1eros de Bell Labs para a\u00f1adir funcionalidades de programaci\u00f3n orientada a objetos a C.\nEl lenguaje que crearon, llamado C++, es hoy en d\u00eda el lenguaje de programaci\u00f3n de aplicaciones m\u00e1s com\u00fan en el sistema operativo Microsoft Windows; mientras que C sigue siendo m\u00e1s popular en el entorno Unix. Otro lenguaje que se desarroll\u00f3 en esa \u00e9poca, Objective C, tambi\u00e9n a\u00f1adi\u00f3 caracter\u00edsticas de programaci\u00f3n orientada a objetos a C. Aunque hoy en d\u00eda no es tan popular como C++, se usa para desarrollar aplicaciones Cocoa para Mac OS X.\nEn 1983, el Instituto Nacional Estadounidense de Est\u00e1ndares (ANSI) organiz\u00f3 un comit\u00e9, X3j11, para establecer una especificaci\u00f3n est\u00e1ndar de C. Tras un proceso largo y arduo, se complet\u00f3 el est\u00e1ndar en 1989 y se ratific\u00f3 como el \"Lenguaje de Programaci\u00f3n C\" ANSI X3.159-1989. Esta versi\u00f3n del lenguaje se conoce a menudo como ANSI C, o a veces como C89 (para distinguirla de C99).\nEn 1990, el est\u00e1ndar ANSI (con algunas modificaciones menores) fue adoptado por la Organizaci\u00f3n Internacional para la Estandarizaci\u00f3n (ISO) en el est\u00e1ndar ISO/IEC 9899:1990. Esta versi\u00f3n se conoce a veces como C90. No obstante, \"C89\" y \"C90\" se refieren en esencia al mismo lenguaje.\nUno de los objetivos del proceso de estandarizaci\u00f3n del ANSI C fue producir una extensi\u00f3n al C de Kernighan y Ritchie, incorporando muchas funcionalidades no oficiales. Sin embargo, el comit\u00e9 de estandarizaci\u00f3n incluy\u00f3 tambi\u00e9n muchas funcionalidades nuevas, como prototipos de funci\u00f3n, y un preprocesador mejorado. Tambi\u00e9n se cambi\u00f3 la sintaxis de la declaraci\u00f3n de par\u00e1metros para hacerla semejante a la empleada habitualmente en C++:\nmain\nargc\nargv\n  \nchar\n**\n...\npas\u00f3 a ser:\nmain\n*\n[])\nANSI C est\u00e1 soportado hoy en d\u00eda por casi la totalidad de los compiladores. La mayor\u00eda del c\u00f3digo C que se escribe actualmente est\u00e1 basado en ANSI C. Cualquier programa escrito s\u00f3lo en C est\u00e1ndar sin c\u00f3digo que dependa de un hardware determinado funciona correctamente en cualquier plataforma que disponga de una implementaci\u00f3n de C compatible. Sin embargo, muchos programas han sido escritos de forma que solo pueden compilarse en una cierta plataforma, o con un compilador concreto, esto puede ser debido a diversos motivos:\nLa utilizaci\u00f3n de bibliotecas no est\u00e1ndar, como interfaces gr\u00e1ficas de usuario.\nEl uso de compiladores que no cumplen las especificaciones del est\u00e1ndar.\nEl uso de tipos de datos suponiendo que tendr\u00e1n el mismo tama\u00f1o u orden de los bits en todas las plataformas.\nLa macro __STDC__ puede usarse para dividir el c\u00f3digo en secciones ANSI y K&R para el compilador.\n# if __STDC__\nextern\ngetopt\nconst\n);\n# else\n# endif\nAlgunos programadores recomiendan usar \"#if __STDC__\", como en el ejemplo, en lugar de \"#ifdef __STDC__\" porque algunos compiladores le asignan el valor cero a __STDC__ para indicar que no son compatibles con ANSI.\nEn el siguiente ejemplo, el programa pide al usuario que introduzca un n\u00famero. El programa dividir\u00e1 dicho n\u00famero entre 2 e imprimir\u00e1 el resultado mientras que este sea par, y terminar\u00e1 cuando el n\u00famero sea impar:\n#include\n<stdio.h>\n()\nnumero\nfputs\n\"Introduzca un numero entero par: \"\nstdout\nif\nscanf\n\"%d\"\n&\n!=\n\"Error: numero no valido.\n\\n\n\"\nstderr\n-1\ni\n%\n==\n++\nprintf\n\"%.3d| %d/2 = \"\n/=\n\"%d\n\"No se puede seguir dividiendo: El numero %d es impar.\ngetchar\nPalabras reservadas de ANSI-C\nauto\n      \ndouble\n   \n       \nstruct\nbreak\n     \nelse\nlong\nswitch\ncase\nenum\nregister\ntypedef\nchar\nextern\nreturn\nunion\nconst\nfloat\nshort\nunsigned\ncontinue\nfor\nsigned\nvoid\ndefault\ngoto\nsizeof\nvolatile\ndo\nif\nstatic\nwhile"}, {"name": "C99", "text": "Para mejorarla, pulsa  junto a su t\u00edtulo y/o discute  el problema en la discusi\u00f3n:\nPodr\u00eda contener informaci\u00f3n desactualizada.\nTras el proceso de estandarizaci\u00f3n de ANSI, la especificaci\u00f3n del lenguaje C permaneci\u00f3 relativamente estable durante alg\u00fan tiempo, mientras que C++ sigui\u00f3 evolucionando.\nSin embargo, el est\u00e1ndar continu\u00f3 bajo revisi\u00f3n a finales de la d\u00e9cada de 1990, lo que llev\u00f3 a la publicaci\u00f3n del est\u00e1ndar ISO 9899:1999 en 1999.[5]\u200b\nEste est\u00e1ndar se denomina habitualmente \"C99\". Se adopt\u00f3 como est\u00e1ndar ANSI en marzo de 2000.\nLas nuevas caracter\u00edsticas de C99 incluyen:[6]\u200b:\u200axi\u2013xii\u200a\nLas variables pueden declararse en cualquier sitio (como en C++), en lugar de poder declararse solo tras otra declaraci\u00f3n o al comienzo de una declaraci\u00f3n compuesta.\nMuchos tipos de datos, incluyendo long int (para reducir el engorro de la transici\u00f3n de 32 bits a 64 bits), un tipo de dato booleano, y un tipo complex que representa n\u00fameros complejos.\nArrays de longitud variable.\nSoporte para comentarios de una l\u00ednea que empiecen con //, como en BCPL o en C++, caracter\u00edstica para la que muchos compiladores hab\u00edan dado soporte por su cuenta.\nMuchas funciones nuevas, como snprintf()\nAlgunos headers nuevos, como stdint.h.\nEl compilador GCC, entre muchos otros, soportan hoy en d\u00eda la mayor\u00eda de las nuevas caracter\u00edsticas de C99. Sin embargo, este nuevo est\u00e1ndar ha tenido poca acogida entre algunos desarrolladores de compiladores, como Microsoft y Borland, que se han centrado en C++. Brandon Bray, de Microsoft, dijo a este respecto: "}, {"name": "C11", "text": "C11 (antes conocido como C2X) es un nombre informal para ISO/IEC 9899:2011[8]\u200b. El borrador final, N1570, fue publicado en abril de 2011.[9]\u200b El nuevo est\u00e1ndar super\u00f3 su \u00faltima revisi\u00f3n el 10 de octubre de 2011 y fue oficialmente ratificado por la ISO y publicado el 8 de diciembre de 2011."}, {"name": "C embebido", "text": "Hist\u00f3ricamente la programaci\u00f3n en C embebido ha requerido extensiones no est\u00e1ndar del lenguaje C para implementar caracter\u00edsticas no oficiales tales como aritm\u00e9tica de punto fijo y operaciones b\u00e1sicas de entrada y salida.\nEn 2008 el comit\u00e9 de estandarizaci\u00f3n de C, para implementar estas caracter\u00edsticas no oficiales, public\u00f3 un informe t\u00e9cnico en el que extend\u00eda el lenguaje C proporcionando un est\u00e1ndar com\u00fan al que todas las implementaciones se pod\u00edan adherir. Inclu\u00eda varias caracter\u00edsticas no disponibles en C normal, tales como aritm\u00e9tica de punto fijo, espacios de direcciones con nombres y direccionamiento por hardware de entrada y salida b\u00e1sico."}, {"name": "C18", "text": "El \u00faltimo est\u00e1ndar publicado para C ISO/IEC 9899:2018.[10]\u200b"}]}, {"name": "Lenguajes derivados de C", "text": "Desde el inicio del lenguaje han surgido varias ramas de evoluci\u00f3n que han generado varios lenguajes:\nObjective-C es un primer intento de proporcionar soporte para la programaci\u00f3n orientada a objetos en C, pero actualmente usado en Mac OS X, iOS y GNUstep.\nC++ (pronunciado C Plus Plus) dise\u00f1ado por Bjarne Stroustrup fue el segundo intento de proporcionar orientaci\u00f3n a objetos a C y es la variante m\u00e1s difundida y aceptada. Esta versi\u00f3n combina la flexibilidad y el acceso de bajo nivel de C con las caracter\u00edsticas de la programaci\u00f3n orientada a objetos como abstracci\u00f3n, encapsulaci\u00f3n y ocultaci\u00f3n.\nTambi\u00e9n se han creado numerosos lenguajes inspirados en la sintaxis de C, pero que no son compatibles con \u00e9l:\nJava, que une una sintaxis inspirada en la del C++ con una orientaci\u00f3n a objetos m\u00e1s similar a la de Smalltalk y Objective C.\nJavaScript, un lenguaje de scripting creado en Netscape e inspirado en la sintaxis de Java dise\u00f1ado para dar a las p\u00e1ginas web mayor interactividad. A la versi\u00f3n estandarizada se la conoce como ECMAScript.\nC# (pronunciado C Sharp) es un lenguaje desarrollado por Microsoft derivado de C/C++ y Java.", "subsections": []}, {"name": "Proceso de compilaci\u00f3n", "text": "La compilaci\u00f3n de un programa C se realiza en varias fases que normalmente son automatizadas y ocultadas por los entornos de desarrollo:\nPreprocesado consistente en modificar el c\u00f3digo fuente en C seg\u00fan una serie de instrucciones (denominadas directivas de preprocesado) simplificando de esta forma el trabajo del compilador. Por ejemplo, una de las acciones m\u00e1s importantes es la modificaci\u00f3n de las inclusiones (#include) por las declaraciones reales existentes en el archivo indicado.\nCompilaci\u00f3n que genera el c\u00f3digo objeto a partir del c\u00f3digo ya preprocesado.\nEnlazado que une los c\u00f3digos objeto de los distintos m\u00f3dulos y bibliotecas externas (como las bibliotecas del sistema) con el c\u00f3digo objeto generado en el paso anterior para generar el programa ejecutable final.", "subsections": [{"name": "Ejemplo de c\u00f3digo", "text": "El siguiente programa imprime en pantalla la frase \"Hola Mundo\" (C99):\n// necesario para utilizar printf()\n#\ninclude\nvoid\n\"Hola Mundo\nEl siguiente programa muestra el uso de punteros en C:\n(){\n// Variable\n99\n// Puntero a variable\np\n// Asignaci\u00f3n de puntero\n// Acceso al valor de la variable a la que apunta el puntero\n\"Numero: %d\n// Acceso a la direcci\u00f3n a la que apunta el puntero\n\"Direccion: %d\n// Cambio de valor de la variable a la que apunta el puntero\nEl siguiente escribe \"Hola Mundo\" (C89):\n/* comentarios con '//' no permitidos en C89, s\u00ed en C99 */\n  /* necesario para utilizar printf */\n/* tipo 'int' de retorno impl\u00edcito */\nEstructura de control \"else if\":\ncondicion\nsentencia\nsentencias\npor\ndefecto"}]}, {"name": "Herramientas de programaci\u00f3n", "text": "Al programar en C, es habitual usar algunas herramientas de programaci\u00f3n de uso muy extendido, sobre todo en entorno de tipo Unix:\nmake: automatizador del proceso de compilaci\u00f3n y enlazado;\nlint: detector de c\u00f3digo sospechoso, confuso o incompatible entre distintas arquitecturas;\nvalgrind: detector de posibles fugas de memoria;\ngdb: depurador (debugger) usado en GNU;\ndbx: depurador preinstalado en Unix;\nddd: interfaz gr\u00e1fico para los depuradores gdb o dbx.", "subsections": []}, {"name": "Aplicabilidad", "text": "Hecho principalmente para la fluidez de programaci\u00f3n en sistemas Unix. Se usa tambi\u00e9n para el desarrollo de otros sistemas operativos como Windows o GNU/Linux. Igualmente para aplicaciones de escritorio como GIMP, cuyo principal lenguaje de programaci\u00f3n es C.\nDe la misma forma, es muy usado en aplicaciones cient\u00edficas (para experimentos inform\u00e1ticos; modelos f\u00edsicos, qu\u00edmicos, matem\u00e1ticos y simuladores), industriales (industria rob\u00f3tica, cibern\u00e9tica, sistemas de informaci\u00f3n y base de datos para la industria petrolera y petroqu\u00edmica. Predominan tambi\u00e9n todo lo que se refiere a simulaci\u00f3n de m\u00e1quinas de manufactura), simulaciones de vuelo (es la m\u00e1s delicada, ya que se tienen que usar demasiados recursos tanto de hardware como de software para desarrollar aplicaciones que permitan simular el vuelo real de una aeronave). Se aplica por tanto, en diversas \u00e1reas desconocidas por gran parte de los usuarios noveles.\nLos ordenadores de finales de los 90 son varios \u00f3rdenes de magnitud m\u00e1s potentes que las m\u00e1quinas en que C se desarroll\u00f3 originalmente. Programas escritos en lenguajes de tipo din\u00e1mico y f\u00e1cil codificaci\u00f3n (Ruby, Python, Perl...) que anta\u00f1o hubieran resultado demasiado lentos, son lo bastante r\u00e1pidos como para desplazar en uso a C. Aun as\u00ed, se puede seguir encontrando c\u00f3digo C en grandes desarrollos de animaciones, modelados y escenas en 3D en pel\u00edculas y otras aplicaciones multimedia.\nActualmente, los grandes proyectos de software se dividen en partes, dentro de un equipo de desarrollo. Aquellas partes que son m\u00e1s \"burocr\u00e1ticas\" o \"de gesti\u00f3n\" con los recursos del sistema, se suelen realizar en lenguajes de tipo din\u00e1mico o de guion (script), mientras que aquellas partes \"cr\u00edticas\", por su necesidad de rapidez de ejecuci\u00f3n, se realizan en un lenguaje de tipo compilado, como C o C++. Si, despu\u00e9s de hacer la divisi\u00f3n, las partes cr\u00edticas no superan un cierto porcentaje del total (aproximadamente el 10%) entonces todo el desarrollo se realiza con lenguajes din\u00e1micos. Si la parte cr\u00edtica no llega a cumplir las expectativas del proyecto, se comparan las alternativas de una inversi\u00f3n en nuevo hardware frente a invertir en el coste de un programador para que reescriba dicha parte cr\u00edtica.", "subsections": [{"name": "Aplicaciones embebidas", "text": "C es el lenguaje com\u00fan para programar sistemas embebidos.[cita\u00a0requerida] El c\u00f3digo ligero que un compilador C genera, combinado con la capacidad de acceso a capas del software cercanas al hardware son la causa de su popularidad en estas aplicaciones.\nUna caracter\u00edstica donde C demuestra comodidad de uso particularmente valiosa en sistemas embebidos es la manipulaci\u00f3n de bits. Los sistemas contienen registros mapeados en memoria (en ingl\u00e9s, MMR) a trav\u00e9s de los cuales los perif\u00e9ricos se configuran. Estos registros mezclan varias configuraciones en la misma direcci\u00f3n de memoria, aunque en bits distintos. Con C es posible modificar f\u00e1cilmente uno de estos bits sin alterar el resto. Por ejemplo:\nmmr\n/* puntero al registro que queremos modificar */\n0x40008ABC\n/* direcci\u00f3n de memoria del registro */\n|=\n<<\n7\n/* pone a 1 el bit 8 sin modificar los dem\u00e1s */\n&=\n~\n12\n/* pone a 0 el bit 13 sin modificar los dem\u00e1s */\nEste tipo de manipulaci\u00f3n es muy tediosa o sencillamente imposible en otros lenguajes de alto nivel, dado que se utilizan operaciones comunes del lenguaje ensamblador como las operaciones a nivel bit OR, AND, SHL y CPL pero que est\u00e1n disponibles en el lenguaje C.\nOtras caracter\u00edsticas de C consideradas desventajas en la programaci\u00f3n para PC -como la ausencia de control de memoria autom\u00e1tico- se convierten en ventajas cuando los sistemas embebidos necesitan c\u00f3digo peque\u00f1o y optimizado. Ese es el caso de los sistemas basados en microcontroladores de poca potencia como el intel 8051 o muchos sistemas ARM."}]}, {"name": "Bibliotecas C", "text": "Una biblioteca de C es una colecci\u00f3n de funciones utilizadas en el lenguaje de programaci\u00f3n C. Las bibliotecas m\u00e1s comunes son la biblioteca est\u00e1ndar de C y la biblioteca del est\u00e1ndar ANSI C, la cual provee las especificaciones de los est\u00e1ndares que son ampliamente compartidas entre bibliotecas. La biblioteca ANSI C est\u00e1ndar, incluye funciones para la entrada y salida de archivos, alojamiento de memoria y operaciones con datos comunes: funciones matem\u00e1ticas, funciones de manejo de cadenas de texto y funciones de hora y fecha.\nOtras bibliotecas C son aquellas utilizadas para desarrollar sistemas Unix, las cuales proveen interfaces hacia el n\u00facleo. Estas funciones son detalladas en varios est\u00e1ndares tales como POSIX y el Single UNIX Specification.\nYa que muchos programas han sido escritos en el lenguaje C existe una gran variedad de bibliotecas disponibles. Muchas bibliotecas son escritas en C debido a que C genera c\u00f3digo objeto r\u00e1pido; los programadores luego generan interfaces a la biblioteca para que las rutinas puedan ser utilizadas desde lenguajes de mayor nivel, tales como Java, Perl y Python.", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Anexo:Operadores de C y C++\nC++", "subsections": []}, {"name": "Referencias", "text": "\u2191 a b c d Ritchie, Dennis (1993). \u00abThe Development of the C Language\u00bb. ACM SIGPLAN Notices (en ingl\u00e9s) (ACM Press) 28 (3): 201-208. doi:10.1145/155360.155580. Consultado el 10 de marzo de 2019.\u00a0\n\u2191 a b c Kernighan, Brian W.; Ritchie, Dennis M. (1991). El lenguaje de programaci\u00f3n C (2\u00aa edici\u00f3n). Prentice Hall Hispanoamericana. ISBN\u00a0968-880-205-0.\u00a0\n\u2191 Raymond, Eric S. (2003). The Art of Unix Programming (en ingl\u00e9s). Addison-Wesley. ISBN\u00a00-13-142901-9.\u00a0\n\u2191 Raymond, Eric S. (2003). \u00abEvolution of C\u00bb. The Art of Unix Programming (en ingl\u00e9s). Consultado el 7 de mayo de 2019.\u00a0\n\u2191 \u00abISO/IEC 9899:1999\u00bb. International Organization for Standardization (en ingl\u00e9s). Consultado el 10 de marzo de 2019.\u00a0\n\u2191 \u00abWG14/N1256 Committee Draft \u2014 Septermber 7, 2007 ISO/IEC 9899:TC3\u00bb (PDF). International Organization for Standardization (en ingl\u00e9s). 7 de septiembre de 2007. Consultado el 7 de mayo de 2019.\u00a0\n\u2191 \u00abContent not found\u00bb. Consultado el 2009.\u00a0\n\u2191 \u00abISO/IEC 9899:2011\u00bb. International Organization for Standardization (en ingl\u00e9s). Consultado el 10 de marzo de 2019.\u00a0\n\u2191 \u00abN1570 Committee Draft \u2014 April 12, 2011 ISO/IEC 9899:201x\u00bb (PDF). International Organization for Standardization (en ingl\u00e9s). 12 de abril de 2011. Consultado el 7 de mayo de 2019.\u00a0\n\u2191 14:00-17:00. \u00abISO/IEC 9899:2018\u00bb. ISO (en ingl\u00e9s). Consultado el 18 de mayo de 2019.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": " Wikiversidad alberga proyectos de aprendizaje sobre C (lenguaje de programaci\u00f3n).\n Wikilibros alberga un libro o manual sobre Programaci\u00f3n en C.\nP\u00e1gina web oficial del est\u00e1ndar ISO/IEC 9899 - lenguaje de programaci\u00f3n C\nP\u00e1gina web oficial del grupo de trabajo de ISO/IEC JTC1/SC22/WG14 encargado de la estandarizaci\u00f3n del lenguaje de programaci\u00f3n ", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Lenguaje_de_programaci%C3%B3n_Java", "title": "Java (lenguaje de programaci\u00f3n)", "summary": "Por favor, ed\u00edtalo y/o discute los problemas en la discusi\u00f3n para mejorarlo:\nNecesita referencias adicionales para su verificaci\u00f3n.\nLas referencias no son claras o tienen un formato incorrecto.\nPodr\u00eda ser dif\u00edcil de entender para lectores interesados en el tema.\n[\n]\nJava es un lenguaje de programaci\u00f3n y una plataforma inform\u00e1tica que fue comercializada por primera vez en 1995 por Sun Microsystems.[2]\u200b[3]\u200b\nEl lenguaje de programaci\u00f3n Java fue desarrollado originalmente por James Gosling, de Sun Microsystems (constituida en 1983 y posteriormente adquirida el 27 de enero de 2010 por la compa\u00f1\u00eda Oracle),[4]\u200b y publicado en 1995 como un componente fundamental de la plataforma Java de Sun Microsystems. Su sintaxis deriva en gran medida de C y C++, pero tiene menos utilidades de bajo nivel que cualquiera de ellos. Las aplicaciones de Java son compiladas a bytecode (clase Java), que puede ejecutarse en cualquier m\u00e1quina virtual Java (JVM) sin importar la arquitectura de la computadora subyacente.\nLa compa\u00f1\u00eda Sun desarroll\u00f3 la implementaci\u00f3n de referencia original para los compiladores de Java, m\u00e1quinas virtuales y librer\u00edas de clases en 1991, y las public\u00f3 por primera vez en 1995. A partir de mayo de 2007, en cumplimiento de las especificaciones del Proceso de la Comunidad Java, Sun volvi\u00f3 a licenciar la mayor\u00eda de sus tecnolog\u00edas de Java bajo la Licencia P\u00fablica General de GNU. Otros han desarrollado tambi\u00e9n implementaciones alternas a estas tecnolog\u00edas de Sun, tales como el Compilador de Java de GNU y el GNU Classpath.", "sections": [{"name": "Historia", "text": "Java se cre\u00f3 como una herramienta de programaci\u00f3n para ser usada en un proyecto de set-top-box en una peque\u00f1a operaci\u00f3n denominada the Green Project en Sun Microsystems en 1991. El equipo (green team), compuesto por trece personas y dirigido por James Gosling, trabaj\u00f3 durante 18 meses en Sand Hill Road,  Menlo Park (California), para desarrollarlo.\nEl lenguaje se denomin\u00f3 inicialmente Oak (por un roble que hab\u00eda fuera de la oficina de Gosling), luego pas\u00f3 a llamarse green tras descubrir que Oak era ya una marca comercial registrada para adaptadores de tarjetas gr\u00e1ficas, y finalmente se le renombr\u00f3 java.\nEs frecuentada por algunos de los miembros del equipo. Pero no est\u00e1 claro si es un acr\u00f3nimo o no, aunque algunas fuentes se\u00f1alan que podr\u00eda tratarse de las iniciales de sus dise\u00f1adores: James Gosling, Arthur Van Hoff y Andy Bechtolsheim. Otros abogan por el siguiente acr\u00f3nimo, Just Another Vague Acronym (\"simplemente otro acr\u00f3nimo ambiguo m\u00e1s\"). La hip\u00f3tesis que m\u00e1s fuerza tiene es la de que Java debe su nombre a un tipo de caf\u00e9 disponible en la cafeter\u00eda cercana; de ah\u00ed que el icono de Java sea una taza de caf\u00e9 caliente. Un peque\u00f1o signo que da fuerza a esta teor\u00eda es que los cuatro primeros bytes (el n\u00famero m\u00e1gico) de los archivos.class que genera el compilador, son en hexadecimal, 0xCAFEBABE. A pesar de todas estas teor\u00edas, el nombre fue sacado al parecer de una lista aleatoria de palabras.[5]\u200b\nLos objetivos de Gosling eran implementar una m\u00e1quina virtual y un lenguaje con una estructura y sintaxis similar a C++. Entre junio y julio de 1994, tras una sesi\u00f3n maratoniana de tres d\u00edas entre John Gage, James Gosling, Patrick Naughton, Wayne Rosing y Eric Schmidt, el equipo reorient\u00f3 la plataforma hacia la Web. Sintieron que la llegada del navegador web Mosaic propiciar\u00eda que Internet se convirtiese en un medio interactivo, como el que pensaban era la televisi\u00f3n por cable. Naughton cre\u00f3 entonces un prototipo de navegador, WebRunner, que m\u00e1s tarde ser\u00eda conocido como HotJava.\nEn 1994, se les hizo una demostraci\u00f3n de HotJava y la plataforma Java a los ejecutivos de Sun. Java 1.0a pudo descargarse por primera vez en 1994, pero hubo que esperar al 23 de mayo de 1995, durante las conferencias de SunWorld, a que vieran la luz p\u00fablica Java y HotJava, el navegador Web. El acontecimiento fue anunciado por John Gage, el director cient\u00edfico de Sun Microsystems. El acto estuvo acompa\u00f1ado por una peque\u00f1a sorpresa adicional, el anuncio por parte de Marc Andreessen, vicepresidente ejecutivo de Netscape, de que Java ser\u00eda soportado en sus navegadores. El 9 de enero del a\u00f1o siguiente, 1996, Sun fund\u00f3 el grupo empresarial JavaSoft para que se encargase del desarrollo tecnol\u00f3gico.[2] Dos semanas m\u00e1s tarde la primera versi\u00f3n de Java fue publicada.\nLa promesa inicial de Gosling era Write Once, Run Anywhere (Escr\u00edbelo una vez, ejec\u00fatalo en cualquier lugar), proporcionando un lenguaje independiente de la plataforma y un entorno de ejecuci\u00f3n (la JVM) ligero y gratuito para las plataformas m\u00e1s populares, de forma que los binarios (bytecode) de las aplicaciones Java pudiesen ejecutarse en cualquier plataforma.\nEl entorno de ejecuci\u00f3n era relativamente seguro, y los principales navegadores web pronto incorporaron la posibilidad de ejecutar applets Java incrustadas en las p\u00e1ginas web.\nJava ha experimentado numerosos cambios desde la versi\u00f3n primigenia, JDK 1.0, as\u00ed como un enorme incremento en el n\u00famero de clases y paquetes que componen la biblioteca est\u00e1ndar.[6]\u200b", "subsections": [{"name": "Versiones", "text": "Desde J2SE 1.4, la evoluci\u00f3n del lenguaje ha sido regulada por el JCP (Java Community Process), que usa Java Specification Requests (JSRs) para proponer y especificar cambios en la plataforma Java. El lenguaje en s\u00ed mismo est\u00e1 especificado en la Java Language Specification (JLS), o Especificaci\u00f3n del Lenguaje Java. Los cambios en los JLS son gestionados en JSR 901.\nJDK 1.0 (23 de enero de 1996) \u2014 Primer lanzamiento: comunicado de prensa\nJDK 1.1 (19 de febrero de 1997) \u2014 Principales adiciones incluidas: comunicado de prensa\nuna reestructuraci\u00f3n intensiva del modelo de eventos AWT (Abstract Windowing Toolkit)\nclases internas (inner classes)\nJavaBeans\nJDBC (Java Database Connectivity), para la integraci\u00f3n de bases de datos\nRMI (Remote Method Invocation)\nJ2SE 1.2 (8 de diciembre de 1998) \u2014 Nombre clave Playground. Esta y las siguientes versiones fueron recogidas bajo la denominaci\u00f3n Java 2 y el nombre \"J2SE\" (Java 2 Platform, Standard Edition) reemplaz\u00f3 a JDK para distinguir la plataforma base de J2EE (Java 2 Platform, Enterprise Edition) y J2ME (Java 2 Platform, Micro Edition). Otras mejoras a\u00f1adidas inclu\u00edan: comunicado de prensa\nla palabra reservada (keyword) strictfp\nreflexi\u00f3n en la programaci\u00f3n\nla API gr\u00e1fica ( Swing) fue integrada en las clases b\u00e1sicas\nla m\u00e1quina virtual (JVM) de Sun fue equipada con un compilador JIT (Just in Time) por primera vez\nJava Plug-in\nJava IDL, una implementaci\u00f3n de IDL (Lenguaje de Descripci\u00f3n de Interfaz) para la interoperabilidad con CORBA\nColecciones (Collections)\nJ2SE 1.3 (8 de mayo de 2000) \u2014 Nombre clave Kestrel. Los cambios m\u00e1s notables fueron: comunicado de prensa lista completa de cambios\nla inclusi\u00f3n de la m\u00e1quina virtual de HotSpot JVM (la JVM de HotSpot fue lanzada inicialmente en abril de 1999, para la JVM de J2SE 1.2)\nRMI fue cambiado para que se basara en CORBA\nJavaSound\nse incluy\u00f3 el Java Naming and Directory Interface (JNDI) en el paquete de bibliotecas principales (anteriormente disponible como una extensi\u00f3n)\nJava Platform Debugger Architecture (JPDA)\nJ2SE 1.4 (6 de febrero de 2002) \u2014 Nombre clave Merlin. Este fue el primer lanzamiento de la plataforma Java desarrollado bajo el Proceso de la Comunidad Java como JSR 59. Los cambios m\u00e1s notables fueron: comunicado de prensalista completa de cambios\nPalabra reservada assert (Especificado en JSR 41.)\nExpresiones regulares modeladas al estilo de las expresiones regulares Perl\nEncadenaci\u00f3n de excepciones Permite a una excepci\u00f3n encapsular la excepci\u00f3n de bajo nivel original.\nnon-blocking NIO (New Input/Output) (Especificado en JSR 51.)\nLogging API (Specified in JSR 47.)\nAPI I/O para la lectura y escritura de im\u00e1genes en formatos como JPEG o PNG\nParser XML integrado y procesador XSLT (JAXP) (Especificado en JSR 5 y JSR 63.)\nSeguridad integrada y extensiones criptogr\u00e1ficas (JCE, JSSE, JAAS)\nJava Web Start incluido (El primer lanzamiento ocurri\u00f3 en marzo de 2001 para J2SE 1.3) (Especificado en JSR 56.)\nJ2SE 5.0 (30 de septiembre de 2004) \u2014 Nombre clave: Tiger. (Originalmente numerado 1.5, esta notaci\u00f3n a\u00fan es usada internamente.[3]) Desarrollado bajo JSR 176, Tiger a\u00f1adi\u00f3 un n\u00famero significativo de nuevas caracter\u00edsticas comunicado de prensa\nPlantillas (gen\u00e9ricos) \u2014 provee conversi\u00f3n de tipos (type safety) en tiempo de compilaci\u00f3n para colecciones y elimina la necesidad de la mayor\u00eda de conversi\u00f3n de tipos (type casting). (Especificado por JSR 14.)\nMetadatos \u2014 tambi\u00e9n llamados anotaciones, permite a estructuras del lenguaje como las clases o los m\u00e9todos, ser etiquetados con datos adicionales, que puedan ser procesados posteriormente por utilidades de proceso de metadatos. (Especificado por JSR 175.)\nAutoboxing/unboxing \u2014 Conversiones autom\u00e1ticas entre tipos primitivos (Como los int) y clases de envoltura primitivas (Como Integer). (Especificado por JSR 201.)\nEnumeraciones \u2014 la palabra reservada enum crea una typesafe, lista ordenada de valores (como Dia.LUNES, Dia.MARTES, etc.). Anteriormente, esto solo pod\u00eda ser llevado a cabo por constantes enteras o clases construidas manualmente (enum pattern). (Especificado por JSR 201.)\nVarargs (n\u00famero de argumentos variable) \u2014 El \u00faltimo par\u00e1metro de un m\u00e9todo puede ser declarado con el nombre del tipo seguido por tres puntos (e.g. void drawtext(String... lines)). En la llamada al m\u00e9todo, puede usarse cualquier n\u00famero de par\u00e1metros de ese tipo, que ser\u00e1n almacenados en un array para pasarlos al m\u00e9todo.\nBucle for mejorado \u2014 La sintaxis para el bucle for se ha extendido con una sintaxis especial para iterar sobre cada miembro de un array o sobre cualquier clase que implemente Iterable, como la clase est\u00e1ndar Collection, de la siguiente forma:\n \nvoid\ndisplayWidgets\n(\nIterable\n<\nWidget\n>\nwidgets\n)\n{\n     \nfor\nw\n:\n         \n.\ndisplay\n();\n}\nEste ejemplo itera sobre el objeto Iterable widgets, asignando, en orden, cada uno de los elementos a la variable w, y llamando al m\u00e9todo display() de cada uno de ellos. (Especificado por JSR 201.)\nJava SE 6 (11 de diciembre de 2006) \u2014 Nombre clave Mustang. Estuvo en desarrollo bajo la JSR 270. En esta versi\u00f3n, Sun cambi\u00f3 el nombre \"J2SE\" por Java SE y elimin\u00f3 el \".0\" del n\u00famero de versi\u00f3n.[4] Est\u00e1 disponible en http://java.sun.com/javase/6/. Los cambios m\u00e1s importantes introducidos en esta versi\u00f3n son:\nIncluye un nuevo marco de trabajo y API que hacen posible la combinaci\u00f3n de Java con lenguajes din\u00e1micos como PHP, Python, Ruby y JavaScript.\nIncluye el motor Rhino, de Mozilla, una implementaci\u00f3n de Javascript en Java.\nIncluye un cliente completo de Servicios Web y soporta las \u00faltimas especificaciones para Servicios Web, como JAX-WS 2.0, JAXB 2.0, STAX y JAXP.\nMejoras en la interfaz gr\u00e1fica y en el rendimiento.\nJava SE 7 \u2014 Nombre clave Dolphin. En el a\u00f1o 2006 a\u00fan se encontraba en las primeras etapas de planificaci\u00f3n. Su lanzamiento fue en julio de 2011.\nSoporte para XML dentro del propio lenguaje.\nUn nuevo concepto de superpaquete.\nSoporte para closures.\nIntroducci\u00f3n de anotaciones est\u00e1ndar para detectar fallos en el software.\nNo oficiales:\nNIO2.\nJava Module System.\nJava Kernel.\nNueva API para el manejo de D\u00edas y Fechas, la cual reemplazar\u00e1 las antiguas clases Date y Calendar.\nPosibilidad de operar con clases BigDecimal usando operandos.\nJava SE 8 \u2014 lanzada en marzo de 2014. Cabe destacar:\nIncorpora de forma completa la librer\u00eda JavaFX.\nDiferentes mejoras en seguridad.\nDiferentes mejoras en concurrencia.\nA\u00f1ade funcionalidad para programaci\u00f3n funcional mediante expresiones Lambda.\nMejora la integraci\u00f3n de JavaScript.\nNuevas API para manejo de fechas y tiempo (date - time).\nJava SE 9 \u2014 lanzada el 21 de septiembre del 2017.\nJava SE 10 \u2014 lanzada el 20 de marzo de 2018.\nJava SE 11 \u2014 lanzada el 25 de septiembre de 2018.\nJava SE 12 \u2014 lanzada el 19 de marzo de 2019.\nJava SE 15 \u2014 lanzada el 15 de septiembre de 2020.\nJava SE 16 \u2014 lanzada el 18 de marzo de 2021.[7]\u200b\nJava SE 17 \u2014 lanzada el 14 de septiembre de 2021. Como m\u00ednimo tendr\u00e1 soporte hasta septiembre de 2024 al ser una versi\u00f3n LTS (Long Term Support - Soporte a largo plazo).\nJava SE 18 \u2014 lanzada el 22 de marzo de 2022.[8]\u200b\nJava SE 19 \u2014 lanzada el 20 de septiembre de 2022.[9]\u200b\nJava SE 20  \u2014 lanzada el 21 de marzo de 2023.[10]\u200b\nJava SE 21 \u2014 lanzada el 19 de septiembre de 2023. Como m\u00ednimo tendr\u00e1 soporte hasta septiembre de 2026 al ser una versi\u00f3n LTS (Long Term Support - Soporte a largo plazo).\nEn el 2005 se calculaba en 4,5 millones el n\u00famero de desarrolladores y 2500 millones de dispositivos habilitados con tecnolog\u00eda Java."}]}, {"name": "Filosof\u00eda", "text": "El lenguaje Java se cre\u00f3 con cinco objetivos principales:\nDeber\u00eda usar el paradigma de la programaci\u00f3n orientada a objetos.\nDeber\u00eda permitir la ejecuci\u00f3n de un mismo programa en m\u00faltiples sistemas operativos.\nDeber\u00eda incluir por defecto soporte para trabajo en red.\nDeber\u00eda dise\u00f1arse para ejecutar c\u00f3digo en sistemas remotos de forma segura.\nDeber\u00eda ser f\u00e1cil de usar y tomar lo mejor de otros lenguajes orientados a objetos, como C++.\nPara conseguir la ejecuci\u00f3n de c\u00f3digo remoto y el soporte de red, los programadores de Java a veces recurren a extensiones como CORBA (Common Object Request Broker Architecture), Internet Communications Engine u OSGi, respectivamente.", "subsections": [{"name": "Orientado a objetos", "text": "V\u00e9anse tambi\u00e9n:\n y \nLa primera caracter\u00edstica, orientado a objetos (\u201cOO\u201d), se refiere a un m\u00e9todo de programaci\u00f3n y al dise\u00f1o del lenguaje. Aunque hay muchas interpretaciones para OO, una primera idea es dise\u00f1ar el software de forma que los distintos tipos de datos que usen est\u00e9n unidos a sus operaciones. As\u00ed, los datos y el c\u00f3digo (funciones o m\u00e9todos) se combinan en entidades llamadas objetos. Un objeto puede verse como un paquete que contiene el \u201ccomportamiento\u201d (el c\u00f3digo) y el \u201cestado\u201d (datos). El principio es separar aquello que cambia de las cosas que permanecen inalterables. Frecuentemente, cambiar una estructura de datos implica un cambio en el c\u00f3digo que opera sobre los mismos, o viceversa. Esta separaci\u00f3n en objetos coherentes e independientes ofrece una base m\u00e1s estable para el dise\u00f1o de un sistema software. El objetivo es hacer que grandes proyectos sean f\u00e1ciles de gestionar y manejar, mejorando como consecuencia su calidad y reduciendo el n\u00famero de proyectos fallidos.\nOtra de las grandes promesas de la programaci\u00f3n orientada a objetos es la creaci\u00f3n de entidades m\u00e1s gen\u00e9ricas (objetos) que permitan la reutilizaci\u00f3n del software entre proyectos, una de las premisas fundamentales de la Ingenier\u00eda del Software. Un objeto gen\u00e9rico \u201ccliente\u201d, por ejemplo, deber\u00eda en teor\u00eda tener el mismo conjunto de comportamiento en diferentes proyectos, sobre todo cuando estos coinciden en cierta medida, algo que suele suceder en las grandes organizaciones. En este sentido, los objetos podr\u00edan verse como piezas reutilizables que pueden emplearse en m\u00faltiples proyectos distintos, posibilitando as\u00ed a la industria del software construir proyectos de envergadura empleando componentes ya existentes y de comprobada calidad, conduciendo esto finalmente a una reducci\u00f3n dr\u00e1stica del tiempo de desarrollo. Podemos usar como ejemplo de objeto el aluminio. Una vez definidos datos (densidad, maleabilidad, etc.), y su \u201ccomportamiento\u201d (soldar dos piezas, etc.), el objeto \u201caluminio\u201d puede ser reutilizado en el campo de la construcci\u00f3n, del autom\u00f3vil, de la aviaci\u00f3n, etc.\nLa reutilizaci\u00f3n del software ha experimentado resultados dispares, encontrando dos dificultades principales: el dise\u00f1o de objetos realmente gen\u00e9ricos es pobremente comprendido, y falta una metodolog\u00eda para la amplia comunicaci\u00f3n de oportunidades de reutilizaci\u00f3n. Algunas comunidades de \u201cc\u00f3digo abierto\u201d (open source) quieren ayudar en este problema dando medios a los desarrolladores para diseminar la informaci\u00f3n sobre el uso y versatilidad de objetos reutilizables y bibliotecas de objetos."}, {"name": "Independencia de la plataforma", "text": "La segunda caracter\u00edstica, la independencia de la plataforma, significa que programas escritos en el lenguaje Java pueden ejecutarse igualmente en cualquier tipo de hardware. As\u00ed reza el axioma de Java: \"write once, run anywhere\" que traducido al espa\u00f1ol es: escribe una vez, ejecuta en cualquier parte.\nPara ello, se compila el c\u00f3digo fuente escrito en lenguaje Java, para generar un c\u00f3digo conocido como \u201cbytecode\u201d (espec\u00edficamente Java bytecode), instrucciones m\u00e1quina simplificadas espec\u00edficas de la plataforma Java. Esta pieza est\u00e1 \u201ca medio camino\u201d entre el c\u00f3digo fuente y el c\u00f3digo m\u00e1quina que entiende el dispositivo destino. El bytecode es ejecutado entonces en la m\u00e1quina virtual (JVM), un programa escrito en c\u00f3digo nativo de la plataforma destino (que es el que entiende su hardware), que interpreta y ejecuta el c\u00f3digo. Adem\u00e1s, se suministran bibliotecas adicionales para acceder a las caracter\u00edsticas de cada dispositivo (como los gr\u00e1ficos, ejecuci\u00f3n mediante hebras o threads, la interfaz de red) de forma unificada. Se debe tener presente que, aunque hay una etapa expl\u00edcita de compilaci\u00f3n, el bytecode generado es interpretado o convertido a instrucciones m\u00e1quina del c\u00f3digo nativo por el compilador JIT (Just In Time).\nHay implementaciones del compilador de Java que convierten el c\u00f3digo fuente directamente en c\u00f3digo objeto nativo, como GCJ. Esto elimina la etapa intermedia donde se genera el bytecode, pero la salida de este tipo de compiladores solamente puede ejecutarse en un tipo de arquitectura.\nLa licencia sobre Java de Sun insiste en que todas las implementaciones sean \u201ccompatibles\u201d. Esto dio lugar a una disputa legal entre Microsoft y Sun, cuando este \u00faltimo aleg\u00f3 que la implementaci\u00f3n de Microsoft no daba soporte a las interfaces RMI y JNI adem\u00e1s de haber a\u00f1adido caracter\u00edsticas \u2018\u2019dependientes\u2019\u2019 de su plataforma. Sun demand\u00f3 a Microsoft y gan\u00f3 por da\u00f1os y perjuicios (unos 20 millones de d\u00f3lares), as\u00ed como una orden judicial forzando el acatamiento de la licencia de Sun. Como respuesta, Microsoft no ofrece Java con su versi\u00f3n de sistema operativo, y en recientes versiones de Windows, su navegador Internet Explorer no admite la ejecuci\u00f3n de applets sin un conector (o plugin) aparte. Sin embargo, Sun y otras fuentes ofrecen versiones gratuitas para distintas versiones de Windows.\nLas primeras implementaciones del lenguaje usaban una m\u00e1quina virtual interpretada para conseguir la portabilidad. Sin embargo, el resultado eran programas que se ejecutaban comparativamente m\u00e1s lentos que aquellos escritos en C o C++. Esto hizo que Java se ganase una reputaci\u00f3n de lento en rendimiento. Las implementaciones recientes de la JVM dan lugar a programas que se ejecutan considerablemente m\u00e1s r\u00e1pido que las versiones antiguas, empleando diversas t\u00e9cnicas, aunque sigue siendo mucho m\u00e1s lentos que otros lenguajes[cita\u00a0requerida].\nLa primera de estas t\u00e9cnicas es simplemente compilar directamente en c\u00f3digo nativo como hacen los compiladores tradicionales, eliminando la etapa del bytecode. Esto da lugar a un gran rendimiento en la ejecuci\u00f3n, pero tapa el camino a la portabilidad. Otra t\u00e9cnica, conocida como compilaci\u00f3n JIT (Just In Time, o \"compilaci\u00f3n al vuelo\"), convierte el bytecode a c\u00f3digo nativo cuando se ejecuta la aplicaci\u00f3n. Otras m\u00e1quinas virtuales m\u00e1s sofisticadas usan una \"recompilaci\u00f3n din\u00e1mica\" en la que la VM es capaz de analizar el comportamiento del programa en ejecuci\u00f3n y recompila y optimiza las partes cr\u00edticas. La recompilaci\u00f3n din\u00e1mica puede lograr mayor grado de optimizaci\u00f3n que la compilaci\u00f3n tradicional (o est\u00e1tica), ya que puede basar su trabajo en el conocimiento que de primera mano tiene sobre el entorno de ejecuci\u00f3n y el conjunto de clases cargadas en memoria. La compilaci\u00f3n JIT y la recompilaci\u00f3n din\u00e1mica permiten a los programas Java aprovechar la velocidad de ejecuci\u00f3n del c\u00f3digo nativo sin por ello perder la ventaja de la portabilidad en ambos.\nLa portabilidad es t\u00e9cnicamente dif\u00edcil de lograr, y el \u00e9xito de Java en ese campo ha sido dispar. Aunque es de hecho posible escribir programas para la plataforma Java que act\u00faen de forma correcta en m\u00faltiples plataformas de distinta arquitectura, el gran n\u00famero de estas con peque\u00f1os errores o inconsistencias llevan a que a veces se parodie el eslogan de Sun, \"Write once, run anywhere\" como \"Write once, debug everywhere\" (o \u201cEscr\u00edbelo una vez, ejec\u00fatalo en cualquier parte\u201d por \u201cEscr\u00edbelo una vez, dep\u00faralo en todas partes\u201d).\nEl concepto de independencia de la plataforma de Java cuenta, sin embargo, con un gran \u00e9xito en las aplicaciones en el entorno del servidor, como los Servicios Web, los Servlets, los Java Beans, as\u00ed como en sistemas empotrados basados en OSGi, usando entornos Java empotrados."}, {"name": "El recolector de basura", "text": "V\u00e9ase tambi\u00e9n:\nEn Java el problema de fugas de memoria se evita en gran medida gracias a la recolecci\u00f3n de basura (o automatic garbage collector). El programador determina cu\u00e1ndo se crean los objetos, y el entorno, en tiempo de ejecuci\u00f3n de Java (Java runtime), es el responsable de gestionar el ciclo de vida de los objetos. El programa, u otros objetos, pueden tener localizado un objeto mediante una referencia a este. Cuando no quedan referencias a un objeto, el recolector de basura de Java borra el objeto, liberando as\u00ed la memoria que ocupaba previniendo posibles fugas (ejemplo: un objeto creado y \u00fanicamente usado dentro de un m\u00e9todo solamente tiene entidad dentro de este; al salir del m\u00e9todo el objeto es eliminado). Aun as\u00ed, es posible que se produzcan fugas de memoria si el c\u00f3digo almacena referencias a objetos que ya no son necesarios; es decir, pueden a\u00fan ocurrir, pero en un nivel conceptual superior. En definitiva, el recolector de basura de Java permite una f\u00e1cil creaci\u00f3n y eliminaci\u00f3n de objetos y mayor seguridad."}]}, {"name": "Sintaxis", "text": "La sintaxis de Java se deriva en gran medida de C++. Pero a diferencia de este, que combina la sintaxis para programaci\u00f3n gen\u00e9rica, estructurada y orientada a objetos, Java fue construido desde el principio para ser completamente orientado a objetos. Todo en Java es un objeto (salvo algunas excepciones), y todo en Java reside en alguna clase (recordemos que una clase es un molde a partir del cual pueden crearse varios objetos).\nA diferencia de C++, Java no tiene sobrecarga de operadores[11]\u200b o herencia m\u00faltiple para clases, aunque la herencia m\u00faltiple est\u00e1 disponible para interfaces.", "subsections": [{"name": "Aplicaciones aut\u00f3nomas", "text": "Este ejemplo necesita una peque\u00f1a explicaci\u00f3n.\nTodo en Java est\u00e1 dentro de una clase, incluyendo programas aut\u00f3nomos.\nEl c\u00f3digo fuente se guarda en archivos con el mismo nombre que la clase que contienen y con extensi\u00f3n \u201c.java\u201d. Una clase (class) declarada p\u00fablica (public) debe seguir este convenio. Si tenemos una clase llamada Hola, su c\u00f3digo fuente deber\u00e1 guardarse en el fichero \u201cHola.java\u201d.\nEl compilador genera un archivo de clase (con extensi\u00f3n \u201c.class\u201d) por cada una de las clases definidas en el archivo fuente. Una clase an\u00f3nima se trata como si su nombre fuera la concatenaci\u00f3n del nombre de la clase que la encierra, el s\u00edmbolo \u201c$\u201d, y un n\u00famero entero.\nLos programas que se ejecutan de forma independiente y aut\u00f3noma, deben contener el m\u00e9todo \u201dmain()\u201d.\nLa palabra reservada \u201dvoid\u201d indica que el m\u00e9todo main no devuelve nada.\nEl m\u00e9todo main debe aceptar un array de objetos tipo String. Por acuerdo se referencia como \u201dargs\u201d, aunque puede emplearse cualquier otro identificador.\nLa palabra reservada \u201dstatic\u201d indica que el m\u00e9todo es un m\u00e9todo de clase, asociado a la clase en vez de a una instancia de la misma. El m\u00e9todo main debe ser est\u00e1tico o \u2019\u2019de clase\u2019\u2019.\nLa palabra reservada public significa que un m\u00e9todo puede ser llamado desde otras clases, o que la clase puede ser usada por clases fuera de la jerarqu\u00eda de la propia clase. Otros tipos de acceso son \u201dprivate\u201d o \u201dprotected\u201d.\nLa utilidad de impresi\u00f3n (en pantalla por ejemplo) forma parte de la biblioteca est\u00e1ndar de Java: la clase \u2018\u2019\u2019System\u2019\u2019\u2019 define un campo p\u00fablico est\u00e1tico llamado \u2018\u2019\u2019out\u2019\u2019\u2019. El objeto out es una instancia de \u2018\u2019\u2019PrintStream\u2019\u2019\u2019, que ofrece el m\u00e9todo \u2018\u2019\u2019println (String)\u2019\u2019\u2019 para volcar datos en la pantalla (la salida est\u00e1ndar).\nLas aplicaciones aut\u00f3nomas se ejecutan dando al entorno de ejecuci\u00f3n de Java el nombre de la clase cuyo m\u00e9todo main debe invocarse. Por ejemplo, una l\u00ednea de comando (en Unix o Windows) de la forma java \u2013cp . Hola ejecutar\u00e1 el programa del ejemplo (previamente compilado y generado \u201cHola.class\u201d). El nombre de la clase cuyo m\u00e9todo main se llama puede especificarse tambi\u00e9n en el fichero \u201cMANIFEST\u201d del archivo de empaquetamiento de Java (.jar)."}, {"name": "Applets", "text": "Las applet Java son programas incrustados en otras aplicaciones, normalmente una p\u00e1gina web que se muestra en un navegador.\n// Hello.java\nimport\njavax.swing.JApplet\n;\njava.awt.Graphics\npublic\nclass\nHello\nextends\nJApplet\n    \npaint\nGraphics\ng\n        \ndrawString\n\"Hola, mundo!\"\n,\n65\n95\n);\n<!-- Hola.html -->\n<\nhtml\n>\nhead\ntitle\n</\nbody\napplet\ncode\n=\n\"Hola.class\"\nwidth\n\"200\"\nheight\nActualmente HTML 5 ha eliminado el uso de la etiqueta <applet>. Pero todav\u00eda existe la forma de usarlo en HTML5. (Texto en ingl\u00e9s) Java Applets in HTML5.\nLa sentencia import indica al compilador de Java que incluya las clases java.applet.Applet y java.awt.Graphics, para poder referenciarlas por sus nombres, sin tener que anteponer la ruta completa cada vez que se quieran usar en el c\u00f3digo fuente.\nLa clase Hola extiende (extends) a la clase Applet;es decir, es una subclase de \u00e9sta. La clase Applet permite a la aplicaci\u00f3n mostrar y controlar el estado del applet. La clase Applet es un componente del AWT (Abstract Window Toolkit), que permite al applet mostrar una interfaz gr\u00e1fica de usuario o GUI (Graphical User Interface), y responder a eventos generados por el usuario.\nLa clase Hola sobrecarga el m\u00e9todo paint (Graphics) heredado de la superclase contenedora (Applet en este caso), para acceder al c\u00f3digo encargado de dibujar. El m\u00e9todo paint() recibe un objeto Graphics que contiene el contexto gr\u00e1fico para dibujar el applet. El m\u00e9todo paint() llama al m\u00e9todo drawString (String, int, int) del objeto. [5]"}, {"name": "Servlets", "text": "Art\u00edculo principal:\nLos servlets son componentes de la parte del servidor de Java EE encargados de generar respuestas a las peticiones recibidas de los clientes.\n// Hola.java\njava.io.IOException\njavax.servlet.*\nHola\nGenericServlet\nservice\nServletRequest\nrequest\nServletResponse\nresponse\nthrows\nServletException\nIOException\nsetContentType\n\"text/html\"\nPrintWriter\npw\ngetWriter\nprintln\n\"\u00a1Hola, mundo!\"\nclose\nLas sentencias import indican al compilador de Java la inclusi\u00f3n de todas las clases p\u00fablicas e interfaces de los paquetes java.io y javax.servlet en la compilaci\u00f3n.\nLa clase Hola extiende (extends) es heredera de la clase GenericServlet. Esta clase proporciona la interfaz para que el servidor le pase las peticiones al servlet y el mecanismo para controlar el ciclo de vida del servlet.\nLa clase Hola sobrecarga el m\u00e9todo service (ServletRequest, ServletResponse), definido por la interfaz servlet para acceder al manejador de la petici\u00f3n de servicio. El m\u00e9todo service() recibe un objeto de tipo ServletRequest que contiene la petici\u00f3n del cliente y un objeto de tipo ServletResponse, usado para generar la respuesta que se devuelve al cliente. El m\u00e9todo service() puede lanzar (throws) excepciones de tipo ServletException e IOException si ocurre alg\u00fan tipo de anomal\u00eda.\nEl m\u00e9todo setContentType (String) en el objeto respuesta establece el tipo de contenido MIME a \"text/html\", para indicar al cliente que la respuesta a su petici\u00f3n es una p\u00e1gina con formato HTML. El m\u00e9todo getWriter() del objeto respuesta devuelve un objeto de tipo PrintWriter, usado como una tuber\u00eda por la que viajar\u00e1n los datos al cliente. El m\u00e9todo println (String) escribe la cadena \"\u00a1Hola, mundo!\" en la respuesta y finalmente se llama al m\u00e9todo close() para cerrar la conexi\u00f3n, que hace que los datos escritos en la tuber\u00eda o stream sean devueltos al cliente."}, {"name": "Aplicaciones con interfaz", "text": "Swing es la biblioteca para la interfaz gr\u00e1fica de usuario avanzada de la plataforma Java SE.\njavax.swing.*\nJFrame\nHola\n()\nsetDefaultCloseOperation\nWindowConstants\nDISPOSE_ON_CLOSE\nadd\nnew\nJLabel\n));\npack\nstatic\nmain\nString\n[]\nargs\n().\nsetVisible\ntrue\nLas instrucciones import indican al compilador de Java que las clases e interfaces del paquete javax.swing se incluyan en la compilaci\u00f3n.\nLa clase Hola extiende (extends) la clase javax.swing.JFrame, que implementa una ventana con una barra de t\u00edtulo y un control para cerrarla.\nEl constructor Hola() inicializa el marco o frame llamando al m\u00e9todo setDefaultCloseOperation (int) heredado de JFrame para establecer las operaciones por defecto cuando el control de cierre en la barra de t\u00edtulo es seleccionado al valor WindowConstants.DISPOSE_ON_CLOSE. Esto hace que se liberen los recursos tomados por la ventana cuando es cerrada, y no simplemente ocultada, lo que permite a la m\u00e1quina virtual y al programa acabar su ejecuci\u00f3n. A continuaci\u00f3n se crea un objeto de tipo JLabel con el texto \"\u00a1Hola, mundo!\", y se a\u00f1ade al marco mediante el m\u00e9todo add (Component), heredado de la clase Container. El m\u00e9todo pack(), heredado de la clase Window, es invocado para dimensionar la ventana y distribuir su contenido.\nEl m\u00e9todo main() es llamado por la JVM al comienzo del programa. Crea una instancia de la clase Hola y hace la ventana sea mostrada invocando al m\u00e9todo setVisible (boolean) de la superclase (clase de la que hereda) con el par\u00e1metro a true. V\u00e9ase que, una vez el marco es dibujado, el programa no termina cuando se sale del m\u00e9todo main(), ya que el c\u00f3digo del que depende se encuentra en un hilo de ejecuci\u00f3n independiente ya lanzado, y que permanecer\u00e1 activo hasta que todas las ventanas hayan sido destruidas."}]}, {"name": "Entornos de funcionamiento", "text": "El dise\u00f1o de Java, su robustez, el respaldo de la industria y su f\u00e1cil portabilidad han hecho de Java uno de los lenguajes con un mayor crecimiento y amplitud de uso en distintos \u00e1mbitos de la industria de la inform\u00e1tica.", "subsections": [{"name": "En dispositivos m\u00f3viles y sistemas embebidos", "text": "Desde la creaci\u00f3n de la especificaci\u00f3n J2ME (Java 2 Platform, Micro Edition), una versi\u00f3n del entorno de ejecuci\u00f3n Java reducido y altamente optimizado, especialmente desarrollado para el mercado de dispositivos electr\u00f3nicos de consumo, se ha producido toda una revoluci\u00f3n en lo que a la extensi\u00f3n de Java se refiere.\nEs posible encontrar microprocesadores dise\u00f1ados para ejecutar bytecode Java y software Java para tarjetas inteligentes (JavaCard), tel\u00e9fonos m\u00f3viles, buscapersonas, set-top-boxes, sintonizadores de TV y otros peque\u00f1os electrodom\u00e9sticos.\nEl modelo de desarrollo de estas aplicaciones es muy semejante a las applets de los navegadores, salvo que en este caso se denominan MIDlets.\nV\u00e9ase Sun Mobile Device Tecnology"}, {"name": "En el navegador web", "text": "Desde la primera versi\u00f3n de Java existe la posibilidad de desarrollar peque\u00f1as aplicaciones (Applets) en Java que luego pueden ser incrustadas en una p\u00e1gina HTML para que sean descargadas y ejecutadas por el navegador web. Estas miniaplicaciones se ejecutan en una JVM que el navegador tiene configurada como extensi\u00f3n (plug-in) en un contexto de seguridad restringido configurable para impedir la ejecuci\u00f3n local de c\u00f3digo potencialmente malicioso.\nEl \u00e9xito de este tipo de aplicaciones (la visi\u00f3n del equipo de Gosling) no fue realmente el esperado debido a diversos factores, siendo quiz\u00e1s el m\u00e1s importante la lentitud y el reducido ancho de banda de las comunicaciones en aquel entonces que limitaba el tama\u00f1o de las applets que se incrustaban en el navegador. La aparici\u00f3n posterior de otras alternativas (aplicaciones web din\u00e1micas de servidor) dej\u00f3 un reducido \u00e1mbito de uso para esta tecnolog\u00eda, quedando hoy relegada fundamentalmente a componentes espec\u00edficos para la intermediaci\u00f3n desde una aplicaci\u00f3n web din\u00e1mica de servidor con dispositivos ubicados en la m\u00e1quina cliente donde se ejecuta el navegador.\nLas applets Java no son las \u00fanicas tecnolog\u00edas (aunque s\u00ed las primeras) de componentes complejos incrustados en el navegador. Otras tecnolog\u00edas similares pueden ser: ActiveX de Microsoft, Flash, Java Web Start, etc."}, {"name": "En sistemas de servidor", "text": "En la parte del servidor, Java es m\u00e1s popular que nunca, desde la aparici\u00f3n de la especificaci\u00f3n de Servlets y JSP (Java Server Pages).\nHasta entonces, las aplicaciones web din\u00e1micas de servidor que exist\u00edan se basaban fundamentalmente en componentes CGI y lenguajes interpretados. Ambos ten\u00edan diversos inconvenientes (fundamentalmente lentitud, elevada carga computacional o de memoria y propensi\u00f3n a errores por su interpretaci\u00f3n din\u00e1mica).\nLos servlets y las JSP supusieron un importante avance ya que:\nEl API de programaci\u00f3n es muy sencilla, flexible y extensible.\nLos servlets no son procesos independientes (como los CGI) y por tanto se ejecutan dentro del mismo proceso que la JVM mejorando notablemente el rendimiento y reduciendo la carga computacional y de memoria requeridas.\nLas JSP son p\u00e1ginas que se compilan din\u00e1micamente (o se precompilan previamente a su distribuci\u00f3n) de modo que el c\u00f3digo que se consigue supone una ventaja en rendimiento substancial frente a muchos lenguajes interpretados.\nLa especificaci\u00f3n de Servlets y JSP define un API de programaci\u00f3n y los requisitos para un contenedor (servidor) dentro del cual se puedan desplegar estos componentes para formar aplicaciones web din\u00e1micas completas. Hoy d\u00eda existen multitud de contenedores (libres y comerciales) compatibles con estas especificaciones.\nA partir de su expansi\u00f3n entre la comunidad de desarrolladores, estas tecnolog\u00edas han dado paso a modelos de desarrollo mucho m\u00e1s elaborados con frameworks (pe Struts, Webwork) que se sobreponen sobre los servlets y las JSP para conseguir un entorno de trabajo mucho m\u00e1s poderoso y segmentado en el que la especializaci\u00f3n de roles sea posible (desarrolladores, dise\u00f1adores gr\u00e1ficos,...) y se facilite la reutilizaci\u00f3n y robustez de c\u00f3digo. A pesar de todo ello, las tecnolog\u00edas que subyacen (Servlets y JSP) son substancialmente las mismas.\nEste modelo de trabajo se ha convertido en uno de los est\u00e1ndar de facto para el desarrollo de aplicaciones web din\u00e1micas de servidor."}, {"name": "En aplicaciones de escritorio", "text": "Hoy en d\u00eda existen multitud de aplicaciones gr\u00e1ficas de usuario basadas en Java. El entorno de ejecuci\u00f3n Java (JRE) se ha convertido en un componente habitual en los PC de usuario de los sistemas operativos m\u00e1s usados en el mundo. Adem\u00e1s, muchas aplicaciones Java lo incluyen dentro del propio paquete de la aplicaci\u00f3n de modo que se ejecuten en cualquier PC.\nEn las primeras versiones de la plataforma Java exist\u00edan importantes limitaciones en las API de desarrollo gr\u00e1fico (AWT). Desde la aparici\u00f3n de la biblioteca Swing la situaci\u00f3n mejor\u00f3 substancialmente y posteriormente con la aparici\u00f3n de bibliotecas como SWT hacen que el desarrollo de aplicaciones de escritorio complejas y con gran dinamismo, usabilidad, etc. sea relativamente sencillo."}, {"name": "Plataformas soportadas", "text": "Una versi\u00f3n del entorno de ejecuci\u00f3n Java JRE (Java Runtime Environment) est\u00e1 disponible en la mayor\u00eda de equipos de escritorio. Sin embargo, Microsoft no lo ha incluido por defecto en sus sistemas operativos. En el caso de Apple, este incluye una versi\u00f3n propia del JRE en su sistema operativo, el Mac OS. Tambi\u00e9n es un producto que por defecto aparece en la mayor\u00eda de las distribuciones de GNU/Linux. Debido a incompatibilidades entre distintas versiones del JRE, muchas aplicaciones prefieren instalar su propia copia del JRE antes que confiar su suerte a la aplicaci\u00f3n instalada por defecto. Los desarrolladores de applets de Java o bien deben insistir a los usuarios en la actualizaci\u00f3n del JRE, o bien desarrollar bajo una versi\u00f3n antigua de Java y verificar el correcto funcionamiento en las versiones posteriores."}]}, {"name": "Programaci\u00f3n", "text": "", "subsections": [{"name": "Expresiones", "text": "Las expresiones son un conjunto de elementos o tokens junto con literales que son evaluados para devolver un resultado.\nLos tokens son elemento m\u00e1s peque\u00f1o de un programa que es significativo, e interpretado o entendido por el compilador, en Java los tokens se dividen en cinco categor\u00edas que son:\nIdentificadores: Son las representaciones que se les da a los nombres que se asignan a las variables, clases, paquetes, m\u00e9todos y constantes en el c\u00f3digo de Java para que el compilador los identifique y el programador pueda entenderlos. En Java los identificadores pueden diferenciar entre may\u00fasculas o min\u00fasculas por ser case sensitive, por lo que la variable cuyo nombre sea \u201cMivariable\u201d, no es igual a \u201cmivariable\u201d, ya que Java identifica estas como variables diferentes por ser case sensitive, tambi\u00e9n se puede utilizar n\u00fameros, o el signo \u201c_\u201d para asignar un identificador.\nPalabras claves: Son los identificadores reservados por java para cumplir con un objetivo espec\u00edfico en el c\u00f3digo y el compilador, se usan de forma limitada y en casos espec\u00edficos. Las palabras claves que usa Java son las siguientes:\nLas palabras que se encuentran en negrilla, son palabras claves para Java aunque actualmente no se utilicen en la versi\u00f3n de Java, pero se pretenden integrar en las siguientes versiones de Java.\nLiterales y constantes: Los literales son sintaxis para asignar valores a una variable, es decir el valor que puede tomar una variable, tambi\u00e9n es un valor constante que puede ser de tipo num\u00e9rico.\nLas constantes son variables que tienen un valor fijo y no puede ser modificado en el trascurso de la ejecuci\u00f3n del c\u00f3digo, estas se declaran por medio de los modificadores final y static.\nfinal\ndouble\npi\n3.1416\nOperadores: Son los que nos indican una evaluaci\u00f3n que se aplica a un objeto o un dato, sobre un identificador o constante. Un ejemplo de operadores puede ser la suma, resta o multiplicaci\u00f3n.\nSeparadores: Se utilizan para indicarle al compilador de Java donde se ubican los elementos del c\u00f3digo, los separadores que admite Java son:\n{ },:;\nTambi\u00e9n el compilador de Java identifica y elimina los comentarios, retornos de carros espacios vac\u00edos y de tabulaci\u00f3n a la hora de compilar por lo que no son considerados parte de un token.\nLas expresiones pueden ser una combinaci\u00f3n en secuencia de variables, operadores y m\u00e9todos. Las expresiones son utilizadas para realizar c\u00e1lculos, para asignar valores a variables, o para controlar la ejecuci\u00f3n del flujo del programa."}, {"name": "Operadores", "text": "Son las expresiones de Java que tras realizar una operaci\u00f3n devuelven un resultado. Seg\u00fan el n\u00famero de operandos que maneje un operador, puede ser de dos tipos: unario o binario.\nLos operadores unarios son aquellos que solo necesitan un operando para devolver un valor.\nLos operadores binarios son aquellos que necesitan dos o m\u00e1s operandos para devolver un valor.\nOperadores a nivel de bits\nno existe\n~ Complemento a 1, este operador invierte los d\u00edgitos, cambiando los 0 por 1 y los 1 por 0, un ejemplo puede ser:\nComo se puede ver se cambian los valores de 0 a 1 y de 1 a 0.\n& AND a nivel de bit, este operador realiza una operaci\u00f3n AND o suma entre dos n\u00fameros de bit, en donde si dos bit son igual a 1 el resultado ser\u00e1 1, de lo contrario ser\u00e1 0, un ejemplo puede ser:\n| Or a nivel de bit, este operador realiza una operaci\u00f3n OR en donde si alguno de los dos n\u00fameros es 1 el resultado ser\u00e1 1, un ejemplo puede ser:\n^ XOR a nivel de bit, este operador realiza la operaci\u00f3n XOR en donde si los dos n\u00fameros son iguales el resultado ser\u00e1 0 de lo contrario ser\u00e1 1, un ejemplo puede ser:\n<< Desplazamiento a la izquierda, este operador desplaza n cantidad de espacios a la izquierda un bit, un ejemplo puede ser;\nComo se puede ver al realizar el desplazamiento se realiza una inserci\u00f3n de un d\u00edgito 0 a la derecha\nPrecedencia de operadores\nLos operadores son una parte principal en las expresiones, el tipo y forma de uso es fundamental a la hora de programar, pero para su uso se tiene que tener en cuenta una serie de normas, como lo son la precedencia de los operadores.\nLos operadores son ejecutados seg\u00fan su precedencia: si cuentan con una precedencia mayor ser\u00e1n evaluados antes que los de precedencia menor; si por casualidad se llegasen a presentar operadores con el mismo nivel de precedencia, estos se evaluar\u00e1n de derecha a izquierda; y si son operadores binarios (menos los operadores de asignaci\u00f3n) se evaluar\u00e1n de izquierda a derecha.\nA Java se le puede indicar qu\u00e9 operadores debe evaluar primero sin importar su precedencia por medio de par\u00e9ntesis \"( )\", de esta forma el compilador de Java interpreta que primero debe ejecutar las operaciones que se encuentran dentro de los par\u00e9ntesis, y luego continuar con los dem\u00e1s operadores.\nLa siguiente tabla clasifica los operadores utilizados en Java seg\u00fan su nivel de precedencia, siendo arriba el nivel m\u00e1s alto:\nUn ejemplo de la precedencia de los operadores en Java podr\u00eda ser el siguiente, en donde tenemos un c\u00f3digo que se encargar\u00e1 de realizar una serie de operaciones aritm\u00e9ticas:\nint\nnumero1\n3\nnumero2\n4\nresultado\n+\n*\nSystem\nout\n//esto imprime el valor de 15\nSeg\u00fan la precedencia de los operadores, la multiplicaci\u00f3n \"*\" tiene mayor prioridad que la suma \"+\", por lo que primero se ejecuta la multiplicaci\u00f3n y luego se realiza la suma.\n//esto imprime el valor de 21\nEn este caso el resultado cambia ya que primero se eval\u00faan los par\u00e1metros que est\u00e1n dentro del par\u00e9ntesis y luego se eval\u00faa el resto de par\u00e1metros.\nUna de las recomendaciones que da Java para el desarrollo es el uso de los par\u00e9ntesis en las operaciones con m\u00e1s de 3 operandos, as\u00ed de esta forma el c\u00f3digo se hace m\u00e1s legible y se evitan errores al momento de compilar."}, {"name": "Sentencias", "text": "Las sentencias son una representaci\u00f3n de una secuencia de acciones que se realizan en Java. La clave fundamental de las sentencias es su punto final que indica que ha finalizado la sentencia y puede continuar con la siguiente, el indicador utilizado es el signo de punto y coma (;). En Java contamos con sentencias que pueden ser de asignaci\u00f3n, de bucles, de salto y condicionales.\nLas sentencias se conforman com\u00fanmente por una instancia y un operador; un ejemplo es la sentencia de asignaci\u00f3n que se conforma por una instancia de una variable, el signo de asignaci\u00f3n y una expresi\u00f3n; un ejemplo es:\nvariable\n12\n2\nLas sentencias de asignaci\u00f3n son aquellas en las que se asigna un valor a una variable o constante.\nLas sentencias condicionales son las que expresan una condici\u00f3n para definir el flujo de ejecuci\u00f3n del programa; entre ellas tenemos if, else y switch.\nLas sentencias de bucles se encargan de realizar una acci\u00f3n cierta cantidad de tiempo dado, o hasta que se cumpla con una condici\u00f3n; entre ellas tenemos while, do-while, y for.\nLas sentencias de salto llevan al compilador a un punto espec\u00edfico del programa o hacia la siguiente sentencia de ejecuci\u00f3n; entre ellas tenemos break, continue, y return."}, {"name": "Conversi\u00f3n de tipos", "text": "En algunos casos suele ser necesario convertir un tipo de dato a otro, esto se le conoce como conversi\u00f3n de tipos, modelado, o tipado, as\u00ed de esta forma poder realizar las operaciones necesarias sobre el valor que se desea convertir.\nSe debe tener en cuenta el tipo de dato que se va a convertir, ya que si se convierte un dato que tenga una cantidad menor de bit al anterior este tendr\u00e1 perdida de informaci\u00f3n, un ejemplo de tipado puede ser un n\u00famero long que se desea convertir a int, el compilador eliminara los primeros 32bit del long para ajustarlo al int ya que el int es de 32bit y el long de 64.\nSi la conversi\u00f3n se realiza a un tipo de datos de menos bit a un tipo de datos con mayor bit, la conversi\u00f3n se realiza autom\u00e1ticamente llamada conversi\u00f3n impl\u00edcita, pero si se realiza de un tipo de datos con mayor bit a menor bit se tiene que realizar una conversi\u00f3n expl\u00edcita, la cual se realiza con un casting, al usar este m\u00e9todo se obliga a realizar la conversi\u00f3n por lo cual puede haber perdida de datos en la conversi\u00f3n.\nPara realizar una conversi\u00f3n expl\u00edcita se tiene que poner el tipo de dato que se desea realizar la conversi\u00f3n entre par\u00e9ntesis, luego el valor o la variable que se desea convertir.\nUn ejemplo de conversi\u00f3n de tipo expl\u00edcito puede ser:\n32\nbyte\nUn ejemplo de una conversi\u00f3n de tipo impl\u00edcita puede ser:\nlong\nLa siguiente tabla muestra los tipos de datos que se pueden realizar una conversi\u00f3n impl\u00edcita desde el dato origen, hasta el dato destino que es el dato en el que se va a convertir.\nLos tipos de datos booleanos no pueden ser convertidos a otro tipo de datos, por ning\u00fan m\u00e9todo mencionado anteriormente. Otro tipo de conversi\u00f3n que no se encuentre en esta tabla desde el origen al destino, tiene que realizarse por medio de una conversi\u00f3n expl\u00edcita por casting.\nCuando se desea realizar una conversi\u00f3n de un tipo string como origen a otro tipo, es necesario utilizar una funci\u00f3n que se encarga de convertir el tipo de dato, la funci\u00f3n necesaria se compone de la variable que va almacenar el resultado, y dependiendo de la variable se usa el par\u00e1metro que inicia con el tipo de dato a convertir, Integer, Byte, Short, o Long, seguida de punto \u201c. \u201c, el cual indica que se cargar\u00e1n los atributos del par\u00e1metro, en donde cargaremos el parseInt si queremos convertir a interger o parseByte si queremos convertir a byte, o dependiendo del tipo de dato, seguido de par\u00e9ntesis en donde se agregara el valor de string a convertir.\nAlgunos ejemplos puede ser:\nnumero3\ntexto\n\u201c\n2013\n\u201d\nInteger\nparseInt\nLong\nparseLong\nByte\nparseByte\nesto suele ser usado para realizar una conversi\u00f3n de texto cuando se ingresan valores num\u00e9ricos por una entrada a java, la cual los detecta como string, as\u00ed de esta forma puede convertir el texto que se ingresa a un n\u00famero para realizar operaciones, como una calculadora."}]}, {"name": "Industria relacionada", "text": "Sun Microsystems, como creador del lenguaje de programaci\u00f3n Java y de la plataforma JDK, mantiene fuertes pol\u00edticas para mantener una especificaci\u00f3n del lenguaje[12]\u200b as\u00ed como de la m\u00e1quina virtual[13]\u200b a trav\u00e9s del JCP. Es debido a este esfuerzo que se mantiene un est\u00e1ndar de facto.\nSon innumerables las compa\u00f1\u00edas que desarrollan aplicaciones para Java y/o est\u00e1n volcadas con esta tecnolog\u00eda:[14]\u200b\nLa industria de la telefon\u00eda m\u00f3vil est\u00e1 fuertemente influenciada por la tecnolog\u00eda Java.\nLos entornos de desarrollo (IDE) IntelliJ IDEA, Netbeans y Eclipse ha tomado un lugar importante entre la comunidad de desarrolladores Java.\nLa fundaci\u00f3n Apache tiene tambi\u00e9n una presencia importante en el desarrollo de bibliotecas y componentes de servidor basados en Java.\nIBM, BEA, IONA, Oracle,... son empresas con grandes intereses y productos creados en y para Java.\nVideojuegos como Minecraft, Pokemon Go (aunque este \u00faltimo es una mezcla entre C++ y C#) fueron programados en Java.", "subsections": []}, {"name": "Cr\u00edticas", "text": "En 1995 alguien dijo[\u00bfqui\u00e9n?] que Java fue creado para abrir una nueva v\u00eda en la gesti\u00f3n de software complejo, y es por regla general aceptado que se ha comportado bien en ese aspecto. Sin embargo no puede decirse que Java no tenga grietas ni que se adapta completamente a todos los estilos de programaci\u00f3n, todos los entornos, o todas las necesidades.", "subsections": [{"name": "General", "text": "Java no ha aportado capacidades est\u00e1ndares para aritm\u00e9tica en punto flotante. El est\u00e1ndar IEEE 754 para \u201cEst\u00e1ndar para Aritm\u00e9tica Binaria en Punto Flotante\u201d apareci\u00f3 en 1985, y desde entonces es el est\u00e1ndar para la industria. Y aunque la aritm\u00e9tica flotante de Java (cosa que cambi\u00f3 desde el 13 de noviembre de 2006, cuando se abri\u00f3 el c\u00f3digo fuente y se adopt\u00f3 la licencia GPL, aparte de la ya existente)[cita\u00a0requerida][15]\u200b se basa en gran medida en la norma del IEEE, no soporta a\u00fan algunas caracter\u00edsticas. M\u00e1s informaci\u00f3n al respecto puede encontrarse en la secci\u00f3n final de enlaces externos."}, {"name": "El lenguaje", "text": "En un sentido estricto, Java no es un lenguaje absolutamente orientado a objetos, a diferencia de, por ejemplo, Ruby o Smalltalk. Por motivos de eficiencia, Java ha relajado en cierta medida el paradigma de orientaci\u00f3n a objetos, y as\u00ed por ejemplo, no todos los valores son objetos.\nEl c\u00f3digo Java puede ser a veces redundante en comparaci\u00f3n con otros lenguajes. Esto es en parte debido a las frecuentes declaraciones de tipos y conversiones de tipo manual (casting). Tambi\u00e9n se debe a que no se dispone de operadores sobrecargados, y a una sintaxis relativamente simple. Sin embargo, J2SE 5.0 introduce elementos para tratar de reducir la redundancia, como una nueva construcci\u00f3n para los bucles \u2018\u2019\u2019foreach\u2019\u2019\u2019.\nA diferencia de C++, Java no dispone de operadores de sobrecarga definidos por el usuario. Los dise\u00f1adores de Java tomaron esta decisi\u00f3n puesto que consideraban que, bajo ciertas circunstancias, esta caracter\u00edstica pod\u00eda complicar la lectura y mantenimiento de los programas."}, {"name": "Apariencia", "text": "La apariencia externa (el \u2018\u2018\u2018look and feel\u2019\u2019\u2019) de las aplicaciones GUI (Graphical User Interface) escritas en Java usando la plataforma Swing difiere a menudo de la que muestran aplicaciones nativas. Aunque el programador puede usar el juego de herramientas AWT (Abstract Windowing Toolkit) que genera objetos gr\u00e1ficos de la plataforma nativa, el AWT no es capaz de funciones gr\u00e1ficas avanzadas sin sacrificar la portabilidad entre plataformas; ya que cada una tiene un conjunto de API distinto, especialmente para objetos gr\u00e1ficos de alto nivel.\nLas herramientas de Swing, escritas completamente en Java, evitan este problema construyendo los objetos gr\u00e1ficos a partir de los mecanismos de dibujo b\u00e1sicos que deben estar disponibles en todas las plataformas. El inconveniente es el trabajo extra requerido para conseguir la misma apariencia de la plataforma destino. Aunque esto es posible (usando GTK+ y el Look-and-Feel de Windows), la mayor\u00eda de los usuarios no saben c\u00f3mo cambiar la apariencia que se proporciona por defecto por aquella que se adapta a la de la plataforma."}, {"name": "Rendimiento", "text": "El bytecode de Java puede ser interpretado en tiempo de ejecuci\u00f3n por la m\u00e1quina virtual, o bien compilado al cargarse el programa, o durante la propia ejecuci\u00f3n, para generar c\u00f3digo nativo que se ejecuta directamente sobre el hardware. Si es interpretado, ser\u00e1 m\u00e1s lento que usando el c\u00f3digo m\u00e1quina intr\u00ednseco de la plataforma destino. Si es compilado, durante la carga inicial o la ejecuci\u00f3n, la penalizaci\u00f3n est\u00e1 en el tiempo necesario para llevar a cabo la compilaci\u00f3n.\nAlgunas caracter\u00edsticas del propio lenguaje conllevan una penalizaci\u00f3n en tiempo, aunque no son \u00fanicas de Java. Algunas de ellas son el chequeo de los l\u00edmites de arrays, chequeo en tiempo de ejecuci\u00f3n de tipos, y la indirecci\u00f3n de funciones virtuales.\nEl uso de un recolector de basura para eliminar de forma autom\u00e1tica aquellos objetos no requeridos, a\u00f1ade una sobrecarga que puede afectar al rendimiento, o ser apenas apreciable, dependiendo de la tecnolog\u00eda del recolector y de la aplicaci\u00f3n en concreto.\nLas JVM modernas usan recolectores de basura que gracias a r\u00e1pidos algoritmos de manejo de memoria, consiguen que algunas aplicaciones puedan ejecutarse m\u00e1s eficientemente.\nEl rendimiento entre un compilador JIT y los compiladores nativos puede ser parecido, aunque la distinci\u00f3n no est\u00e1 clara en este punto. La compilaci\u00f3n mediante el JIT puede consumir un tiempo apreciable, un inconveniente principalmente para aplicaciones de corta duraci\u00f3n o con gran cantidad de c\u00f3digo. Sin embargo, una vez compilado, el rendimiento del programa puede ser comparable al que consiguen compiladores nativos de la plataforma destino, inclusive en tareas num\u00e9ricas. Aunque Java no permite la expansi\u00f3n manual de llamadas a m\u00e9todos, muchos compiladores JIT realizan esta optimizaci\u00f3n durante la carga de la aplicaci\u00f3n y pueden aprovechar informaci\u00f3n del entorno en tiempo de ejecuci\u00f3n para llevar a cabo transformaciones eficientes durante la propia ejecuci\u00f3n de la aplicaci\u00f3n. Esta recompilaci\u00f3n din\u00e1mica, como la que proporciona la m\u00e1quina virtual HotSpot de Sun, puede llegar a mejorar el resultado de compiladores est\u00e1ticos tradicionales, gracias a los datos que solamente est\u00e1n disponibles durante el tiempo de ejecuci\u00f3n.\nJava fue dise\u00f1ado para ofrecer seguridad y portabilidad, y no ofrece acceso directo al hardware de la arquitectura ni al espacio de direcciones. Java no soporta expansi\u00f3n de c\u00f3digo ensamblador, aunque las aplicaciones pueden acceder a caracter\u00edsticas de bajo nivel usando bibliotecas nativas (JNI, Java Native Interfaces).\nCaracter\u00edsticas de Java:\n1. Lenguaje Simple: \u201cSe lo conoce como lenguaje simple porque viene de la misma estructura de c y c++; ya que c++ fue un referente para la creaci\u00f3n de java por eso utiliza determinadas caracter\u00edsticas de c++ y se han eliminado otras.\u201d\n2. Orientado a Objetos.\n3. Multihilos: Java tiene una facilidad de cumplir varias funciones al mismo tiempo, gracias a su funci\u00f3n de multihilos, ya que por cada hilo que el programa tenga se ejecutar\u00e1n en tiempo real muchas funciones al mismo tiempo.\nAlto Rendimiento: Java es considerado de alto rendimiento por ser tan veloz en el momento de correr los programas y por ahorrarse muchas l\u00edneas de c\u00f3digo."}]}, {"name": "Recursos", "text": "", "subsections": [{"name": "JRE", "text": "El JRE (Java Runtime Environment, o Entorno en Tiempo de Ejecuci\u00f3n de Java) es el software necesario para ejecutar cualquier aplicaci\u00f3n desarrollada para la plataforma Java. El usuario final usa el JRE como parte de paquetes software o plugins (o conectores) en un navegador Web. Sun ofrece tambi\u00e9n el SDK de Java 2, o JDK (Java Development Kit) en cuyo seno reside el JRE, e incluye herramientas como el compilador de Java, Javadoc para generar documentaci\u00f3n o el depurador. Puede tambi\u00e9n obtenerse como un paquete independiente, y puede considerarse como el entorno necesario para ejecutar una aplicaci\u00f3n Java, mientras que un desarrollador debe adem\u00e1s contar con otras facilidades que ofrece el JDK."}, {"name": "Componentes", "text": "Bibliotecas de Java, que son el resultado de compilar el c\u00f3digo fuente desarrollado por quien implementa la JRE, y que ofrecen apoyo para el desarrollo en Java. Algunos ejemplos de estas bibliotecas son:\nLas bibliotecas centrales, que incluyen:\nUna colecci\u00f3n de bibliotecas para implementar estructuras de datos como listas, arrays, \u00e1rboles y conjuntos.\nBibliotecas para an\u00e1lisis de XML.\nSeguridad.\nBibliotecas de internacionalizaci\u00f3n y localizaci\u00f3n.\nBibliotecas de integraci\u00f3n, que permiten la comunicaci\u00f3n con sistemas externos. Estas bibliotecas incluyen:\nLa API para acceso a bases de datos JDBC (Java DataBase Conectivity).\nLa interfaz JNDI (Java Naming and Directory Interface) para servicios de directorio.\nRMI (Remote Method Invocation) y CORBA para el desarrollo de aplicaciones distribuidas.\nBibliotecas para la interfaz de usuario, que incluyen:\nEl conjunto de herramientas nativas AWT (Abstract Window Toolkit), que ofrece componentes GUI (Graphical User Interface), mecanismos para usarlos y manejar sus eventos asociados.\nLas Bibliotecas de Swing, construidas sobre AWT pero ofrecen implementaciones no nativas de los componentes de AWT.\nAPI para la captura, procesamiento y reproducci\u00f3n de audio.\nUna implementaci\u00f3n dependiente de la plataforma en que se ejecuta de la m\u00e1quina virtual de Java (JVM), que es la encargada de la ejecuci\u00f3n del c\u00f3digo de las bibliotecas y las aplicaciones externas.\nPlugins o conectores que permiten ejecutar applets en los navegadores Web.\nJava Web Start, para la distribuci\u00f3n de aplicaciones Java a trav\u00e9s de Internet.\nDocumentaci\u00f3n y licencia."}, {"name": "API", "text": "Se define tres plataformas en un intento por cubrir distintos entornos de aplicaci\u00f3n. As\u00ed, ha distribuido muchas de sus API (Application Program Interface) de forma que pertenezcan a cada una de las plataformas:\nJava ME (Java Platform, Micro Edition) o J2ME \u2014 orientada a entornos de limitados recursos, como tel\u00e9fonos m\u00f3viles, PDAs (Personal Digital Assistant), etc.\nJava SE (Java Platform, Standard Edition) o J2SE \u2014 para entornos de gama media y estaciones de trabajo. Aqu\u00ed se sit\u00faa al usuario medio en un PC de escritorio.\nJava EE (Java Platform, Enterprise Edition) o J2EE \u2014 orientada a entornos distribuidos empresariales o de Internet.\nLas clases en las API de Java se organizan en grupos disjuntos llamados paquetes. Cada paquete contiene un conjunto de interfaces, clases y excepciones relacionadas. La informaci\u00f3n sobre los paquetes que ofrece cada plataforma puede encontrarse en la documentaci\u00f3n de \u00e9sta.\nEl conjunto de las API es controlado por Sun Microsystems junto con otras entidades o personas a trav\u00e9s del programa JCP (Java Community Process). Las compa\u00f1\u00edas o individuos participantes del JCP pueden influir de forma activa en el dise\u00f1o y desarrollo de las API, algo que ha sido motivo de controversia."}, {"name": "Extensiones y arquitecturas relacionadas", "text": "Las extensiones[16]\u200b de Java est\u00e1n en paquetes que cuelgan de la ra\u00edz javax: javax.*. No se incluyen en la JDK o el JRE. Algunas de las extensiones y arquitecturas ligadas estrechamente al lenguaje Java son:\nJava EE (Java Platform, Enterprise Edition; antes J2EE) \u2014para aplicaciones distribuidas orientadas al entorno empresarial"}]}, {"name": "Java en c\u00f3digo abierto", "text": "La evoluci\u00f3n basada en un comit\u00e9 en el que participen todos los implicados no es suficiente y la comunidad demandaba desde hace tiempo la liberaci\u00f3n de las API y bibliotecas b\u00e1sicas de la JDK.\nEn diciembre de 2006, Sun Microsystems comenz\u00f3 el relanzamiento de su plataforma Java[17]\u200b bajo la licencia GPL de GNU.\nEn abril de 2009 Oracle adquiri\u00f3 Sun Microsystems, lo que gener\u00f3 temor en la comunidad ante la posible mercantilizaci\u00f3n del lenguaje de programaci\u00f3n orientado a objetos m\u00e1s popular actualmente. Por ahora Oracle ha seguido manteniendo Java, estando las versiones posteriores a la 6 bajo su control.\nSe instala una versi\u00f3n homebrew de PSPKVM (0.5.5) para emular la plataforma de Java en PSP. Esto permite usar programas JAVA en esta videoconsola.", "subsections": [{"name": "Alternativas libres", "text": "Existen alternativas para el entorno de ejecuci\u00f3n y de desarrollo de Java con una gran cobertura de funcionalidades con respecto a las implementaciones comerciales de Sun, IBM, Bea, etc."}, {"name": "Cr\u00edticas referentes a Java y el software libre", "text": "Free But Shackled \u2014 The Java Trap, de Richard Stallman, 12 de abril de 2004. (respuesta de James Gosling)\nTraducci\u00f3n al espa\u00f1ol de este art\u00edculo: Libre pero encadenado. La trampa del Java. (N\u00f3tese que hay una nota en un recuadro amarillo que habla de la situaci\u00f3n actual con respecto a lo que se dice en ese art\u00edculo)\nNotar que este art\u00edculo fue escrito antes de la liberaci\u00f3n del c\u00f3digo fuente de Java. En la actualidad la postura de la Free Software Foundation y de Richard Stallman han cambiado[cita\u00a0requerida], mostr\u00e1ndose partidarios ambos de su uso en software libre."}]}, {"name": "V\u00e9ase tambi\u00e9n", "text": ", ", "subsections": []}, {"name": "Referencias", "text": "\u2191 https://openjdk.org/projects/jdk/21/\n\u2191 \u00abProgramming Language Popularity\u00bb. 2009. Archivado desde el original el 16 de enero de 2009. Consultado el 16 de enero de 2009.\u00a0\n\u2191 \u00abTIOBE Programming Community Index\u00bb. 2009. Consultado el 6 de mayo de 2009.\u00a0\n\u2191 Sun and Oracle (Oracle.com)\n\u2191 \u00abJonathan Schwartz's Blog: Different Isn't Always Better, But Better's Always Different\u00bb. Blogs.sun.com. Archivado desde el original el 5 de septiembre de 2009. Consultado el 24 de septiembre de 2010.\u00a0\n\u2191 M. Dom\u00ednguez-Dorado,. Todo Programaci\u00f3n. N\u00ba 8. P\u00e1gs. 39-42. Editorial Iberprensa (Madrid). DL M-13679-2004. Febrero, 2005. Dibujando sobre lienzos en Java..\u00a0\n\u2191 Redacci\u00f3n Oracle, Oracle anuncia Java 16, 18 de marzo de 2021.\n\u2191 Notas de la Versi\u00f3n [1]\n\u2191 \u00abJDK 19\u00bb. openjdk.org. Consultado el 9 de agosto de 2023.\u00a0\n\u2191 \u00abJDK 20\u00bb. openjdk.org. Consultado el 9 de agosto de 2023.\u00a0\n\u2191 Microsoft (ed.). \u00abSobrecarga de operadores (C# y Java)\u00bb. C# para desarrolladores de Java. Consultado el 21 de junio de 2018.\u00a0\n\u2191 Especificaci\u00f3n del lenguaje Java\n\u2191 Especificaci\u00f3n de la m\u00e1quina virtual Java\n\u2191 madridiario.es. \u00abLa formaci\u00f3n en programaci\u00f3n Java sigue en cabeza en cuanto a la demanda de los estudiantes\u00bb. Consultado el 29 de enero de 2019.\u00a0\n\u2191 \u00abUn an\u00e1lisis a Java - Apuntes de Ingenier\u00eda Inf\u00f3rmatica - Docsity\u00bb. www.docsity.com. Consultado el 14 de noviembre de 2018.\u00a0\n\u2191 M. Dom\u00ednguez-Dorado, Guillermo Som. Todo Programaci\u00f3n. N\u00ba 11. P\u00e1gs. 10-20. Editorial Iberprensa (Madrid). DL M-13679-2004. Agosto, 2005. Imprimir desde Java y .NET.\u00a0\n\u2191 Sun begins releasing Java under the GPL - Free Software Foundation", "subsections": []}, {"name": "Bibliograf\u00eda", "text": "Jon Byous, Java technology: The early years. Sun Developer Network, sin fecha[ca. 1998]. Recuperado 21 de abril de 2005.\nJames Gosling, A brief history of the Green project. Java.net, sin fecha [ca. Q1/1998]. Recuperado 22 de abril de 2005.\nJames Gosling, Bill Joy, Guy Steele, y Gilad Bracha, The Java language specification, tercera edici\u00f3n. Addison-Wesley, 2005. ISBN 0-321-24678-0.\nTim Lindholm y Frank Yellin. The Java Virtual Machine specification, segunda edici\u00f3n. Addison-Wesley, 1999. ISBN 0-201-43294-3.", "subsections": []}, {"name": "Enlaces externos", "text": " Wikilibros alberga un libro o manual sobre Programaci\u00f3n en Java.\nProgramas hechos en java con c\u00f3digo fuente\nRecopilaci\u00f3n de c\u00f3digos fuente en java\n5 Beneficios de Java", "subsections": [{"name": "Oracle - Sun", "text": "Sitio oficial de Java para desarrolladores, etc\nThe Java Language Specification, Tercera edici\u00f3n Especificaci\u00f3n oficial del lenguaje Java\nTutorial de Sun sobre el Lenguaje de programaci\u00f3n Java\nLibro blanco original de Java, 1996"}, {"name": "Tutoriales", "text": "Thinking in Java, de Bruce Eckel (en l\u00ednea)\nAn introduction to Computer Science using Java por Bradley Kjell.\nJava Course, de A.B. Downey.\nComputer-Books.us Colecci\u00f3n de libros sobre Java disponibles para descarga gratuita.\nVideoTutoriales para aprender desde cero \u00abEmpieza a Programar\u00bb\nColecci\u00f3n \u00abJava a tope\u00bb de libros electr\u00f3nicos (Universidad de M\u00e1laga. Espa\u00f1a)\nCurso de Java, de cero a hasta conexi\u00f3n a MYSQL, incluye PDF (M\u00e9xico)\nCurso de java que sigue el \u00edndice del libro de java de Kathy Sierra, contiene PDFs y ejercicios (M\u00e9xico)\nCapacitaci\u00f3n en Java sobre Grandes Proyectos\nAprender programaci\u00f3n Java desde cero (Portal web aprenderaprogramar.com, en l\u00ednea y en formato pdf)\nDescifrando Java\nCurso de Java desde cero (pildorasinformaticas.com)"}, {"name": "Cr\u00edticas", "text": "Bezroukov, Nikolai. \u00abJava Critique Page: Java vs Scripting Languages\u00bb. Softpanorama (en ingl\u00e9s).\u00a0\nKahan, W.; Darcy, Joseph D. \u00abACM 1998 Workshop on Java for High\u2013Performance Network Computing\u00bb. Roblox (en ingl\u00e9s)"}]}]}
{"url": "https://es.wikipedia.org/wiki/Lenguaje_de_programaci%C3%B3n_interpretado", "title": "Int\u00e9rprete (inform\u00e1tica)", "summary": "En ciencias de la computaci\u00f3n, int\u00e9rprete o interpretador es un programa inform\u00e1tico capaz de analizar y ejecutar otros programas. Los int\u00e9rpretes se diferencian de los compiladores o de los ensambladores en que mientras estos traducen un programa desde su descripci\u00f3n en un lenguaje de programaci\u00f3n al c\u00f3digo de m\u00e1quina del sistema, los int\u00e9rpretes solo realizan la traducci\u00f3n a medida que sea necesaria, t\u00edpicamente, instrucci\u00f3n por instrucci\u00f3n, y normalmente no guardan el resultado de dicha traducci\u00f3n.\nUsando un int\u00e9rprete, un solo archivo fuente puede producir resultados iguales incluso en sistemas sumamente diferentes (ejemplo. una PC y una PlayStation 4). Usando un compilador, un solo archivo fuente puede producir resultados iguales solo si es compilado a distintos ejecutables espec\u00edficos a cada sistema.\nLos programas interpretados suelen ser m\u00e1s lentos que los compilados debido a la necesidad de traducir el programa mientras se ejecuta, pero a cambio son m\u00e1s flexibles como entornos de programaci\u00f3n y depuraci\u00f3n (lo que se traduce, por ejemplo, en una mayor facilidad para reemplazar partes enteras del programa o a\u00f1adir m\u00f3dulos completamente nuevos), y permiten ofrecer al programa interpretado un entorno no dependiente de la m\u00e1quina donde se ejecuta el int\u00e9rprete, sino del propio int\u00e9rprete (lo que se conoce com\u00fanmente como m\u00e1quina virtual).\nPara mejorar el desempe\u00f1o, algunas implementaciones de algunos lenguajes de programaci\u00f3n pueden interpretar o compilar el c\u00f3digo fuente original en una forma intermedia  m\u00e1s compacta, y despu\u00e9s traducir eso al c\u00f3digo de m\u00e1quina (ej. Perl, Python, MATLAB, y Ruby). Algunos aceptan los archivos fuente guardados en esta representaci\u00f3n intermedia (ej. Python, UCSD Pascal y Java).\nEn la actualidad, uno de los entornos m\u00e1s comunes de uso de los int\u00e9rpretes es en los navegadores web, debido a la posibilidad que estos tienen de ejecutarse independientemente de la plataforma.", "sections": [{"name": "Int\u00e9rpretes de bytecode", "text": "Art\u00edculo principal:\nHay un espectro de posibilidades entre la interpretaci\u00f3n y la compilaci\u00f3n, dependiendo de la cantidad de an\u00e1lisis realizados antes de que el programa sea ejecutado. Por ejemplo, el Emacs Lisp es compilado a bytecode, que es una representaci\u00f3n altamente comprimida y optimizada del c\u00f3digo fuente del Lisp, pero no es c\u00f3digo de m\u00e1quina (y por lo tanto no est\u00e1 atado a cualquier hardware particular). Este bytecode es entonces interpretado por un int\u00e9rprete de bytecode (que est\u00e1 escrito en C). En este caso, el c\u00f3digo compilado es el c\u00f3digo de m\u00e1quina para una m\u00e1quina virtual, que no est\u00e1 implementada en el hardware, sino en el int\u00e9rprete de bytecode. El mismo acercamiento es utilizado con el c\u00f3digo Forth usado en sistemas Open Firmware: el lenguaje fuente es compilado en \"c\u00f3digo F\" (un bytecode).", "subsections": []}, {"name": "Eficiencia", "text": "La desventaja principal de los interpretadores es que cuando se interpreta un programa, t\u00edpicamente corre m\u00e1s lentamente que si hubiera sido compilado. La diferencia en velocidades puede ser min\u00fascula o grande; a menudo un orden de magnitud y a veces m\u00e1s. Generalmente toma m\u00e1s tiempo correr un programa bajo un interpretador que correr el c\u00f3digo compilado, pero puede tomar menos tiempo para interpretarlo que el tiempo total requerido para compilarlo y ejecutarlo. Esto es especialmente importante si se est\u00e1 haciendo y probando un c\u00f3digo prototipo cuando un ciclo de editar, interpretar y depurar del interpretador, a menudo puede ser mucho m\u00e1s corto que el ciclo de editar, compilar, ejecutar y depurar del compilador.\nLa interpretaci\u00f3n de c\u00f3digo es m\u00e1s lenta que la ejecuci\u00f3n de c\u00f3digo compilado porque el interpretador debe analizar cada sentencia en el programa cada vez que es ejecutada y entonces realizar la acci\u00f3n deseada, mientras que el c\u00f3digo compilado solo realiza la acci\u00f3n dentro de un determinado contexto fijo por la compilaci\u00f3n. Este an\u00e1lisis en tiempo de ejecuci\u00f3n se conoce como \"sobrecarga interpretativa\". En un interpretador, el acceso a las variables es tambi\u00e9n m\u00e1s lento porque el mapeo de identificadores hacia las localizaciones de almacenamiento debe hacerse repetidamente en tiempo de ejecuci\u00f3n en vez de en el tiempo de compilaci\u00f3n. Hay varios compromisos entre la velocidad de desarrollo al usar un interpretador y la velocidad de ejecuci\u00f3n al usar un compilador. Algunos sistemas (ej., algunos LISPs) permiten al c\u00f3digo interpretado y al compilado llamarse el uno al otro y compartir variables. Esto significa que una vez que una rutina ha sido probada y depurada bajo el interpretador puede ser compilada y por lo tanto beneficiarse de una ejecuci\u00f3n m\u00e1s r\u00e1pida mientras que otras rutinas est\u00e1n siendo desarrolladas. Muchos interpretadores no ejecutan el c\u00f3digo fuente tal y como est\u00e1 sino que lo convierten en una forma interna m\u00e1s compacta. Por ejemplo, algunos interpretadores BASIC reemplazan palabras clave (keywords) con tokens de un simple byte que pueden ser usados para encontrar la instrucci\u00f3n en una tabla de saltos. Un interpretador puede bien usar el mismo analizador lexicogr\u00e1fico y el analizador sint\u00e1ctico (parser) que el compilador y entonces interpretar el \u00e1rbol de sintaxis abstracta resultante.", "subsections": []}, {"name": "Interpretadores de \u00e1rbol de sintaxis abstracta", "text": "En el espectro entre la interpretaci\u00f3n y la compilaci\u00f3n, otro acercamiento est\u00e1 transformando el c\u00f3digo fuente en un \u00e1rbol de sintaxis abstracta optimizado (AST), y despu\u00e9s procediendo a ejecutar el programa siguiendo esta estructura arborescente.[1]\u200b En este acercamiento cada sentencia necesita ser analizada (parsed) solo una vez. Como una ventaja sobre el bytecode, el AST mantiene la estructura y las relaciones globales del programa entre las sentencias (que se pierden en una representaci\u00f3n de bytecode), y proporciona una representaci\u00f3n m\u00e1s compacta.[2]\u200b\nAs\u00ed, el AST se ha propuesto como un mejor formato intermedio para los compiladores justo a tiempo que el bytecode. Tambi\u00e9n, permite realizar un mejor an\u00e1lisis durante tiempo de ejecuci\u00f3n. Un interpretador Java basado en AST ha demostrado ser m\u00e1s r\u00e1pido que un interpretador similar basado en bytecode,[3]\u200b gracias a las m\u00e1s poderosas optimizaciones permitidas al tener la estructura completa del programa, as\u00ed como tipos de datos de alto nivel, disponibles durante la ejecuci\u00f3n.", "subsections": []}, {"name": "Compilaci\u00f3n justo a tiempo", "text": "Para desdibujar m\u00e1s la distinci\u00f3n entre los interpretadores, los interpretadores de bytecode y la compilaci\u00f3n, est\u00e1 la compilaci\u00f3n justo a tiempo (o JIT), una t\u00e9cnica en la cual la representaci\u00f3n intermedia es compilada a c\u00f3digo de m\u00e1quina nativo en tiempo de ejecuci\u00f3n. Esto confiere la eficiencia de ejecutar el c\u00f3digo nativo, al costo de tiempo de inicio y de un uso creciente de la memoria cuando el bytecode o el AST es compilado por primera vez. La optimizaci\u00f3n adaptativa es una t\u00e9cnica complementaria en la cual el interpretador hace un an\u00e1lisis de desempe\u00f1o del programa que est\u00e1 corriendo (profiling) y compila sus partes m\u00e1s frecuentemente ejecutadas a c\u00f3digo nativo. Ambas t\u00e9cnicas tienen algunas d\u00e9cadas, apareciendo en lenguajes tales como Smalltalk en la d\u00e9cada de 1980.\nEn a\u00f1os recientes, la compilaci\u00f3n justo a tiempo ha ganado la atenci\u00f3n de la mayor\u00eda de los implementadores de lenguajes de programaci\u00f3n, con Java, Python, y el Microsoft .NET Framework todos ahora incluyendo JITs.", "subsections": []}, {"name": "Ejemplos", "text": "Algunos ejemplos de int\u00e9rpretes:\nMotor Zend\nCPython\nRuby MRI\nYARV\nBasic", "subsections": []}, {"name": "Lenguaje interpretado", "text": "Un lenguaje interpretado es un lenguaje de programaci\u00f3n para el que la mayor\u00eda de sus implementaciones ejecuta las instrucciones directamente, sin una previa compilaci\u00f3n del programa a instrucciones en lenguaje m\u00e1quina. El int\u00e9rprete ejecuta el programa directamente, traduciendo cada sentencia en una secuencia de una o m\u00e1s subrutinas ya compiladas en c\u00f3digo m\u00e1quina.\nLos t\u00e9rminos lenguaje interpretado y lenguaje compilado[4]\u200b no est\u00e1n bien definidos porque, en teor\u00eda, cualquier lenguaje de programaci\u00f3n puede ser interpretado o compilado. Cada vez es m\u00e1s popular, en las implementaciones m\u00e1s modernas de un lenguaje de programaci\u00f3n, ofrecer ambas opciones.\nLos lenguajes interpretados tambi\u00e9n pueden diferenciarse de los lenguajes de m\u00e1quina. Funcionalmente, tanto la ejecuci\u00f3n y la interpretaci\u00f3n significan lo mismo -obtener la siguiente instrucci\u00f3n/sentencia del programa y su ejecuci\u00f3n-. Aunque el bytecode (c\u00f3digo byte) interpretado es adem\u00e1s id\u00e9ntico a su forma en c\u00f3digo m\u00e1quina y tiene una representaci\u00f3n en ensamblador, el t\u00e9rmino \"interpretado\" se reserva en la pr\u00e1ctica para lenguajes \"procesados por software\" (como las m\u00e1quinas virtuales o emuladores) por encima del procesado nativo (por ejemplo, por hardware).\nEn principio, los programas de muchos lenguajes se pueden compilar o interpretar, emular o ejecutar nativamente, as\u00ed que esta designaci\u00f3n se aplica solamente a la implementaci\u00f3n pr\u00e1ctica m\u00e1s usual, en vez de representar una propiedad esencial del lenguaje. De forma parecida al microc\u00f3digo del procesador, muchos int\u00e9rpretes, internamente recaen en una compilaci\u00f3n en tiempo de ejecuci\u00f3n.\nEvitando la compilaci\u00f3n, los programas interpretados son m\u00e1s f\u00e1ciles de evolucionar durante el desarrollo y la ejecuci\u00f3n (transform\u00e1ndose en ocasiones de uno en la otra). De otra parte, ya que la compilaci\u00f3n implica una traducci\u00f3n a un formato m\u00e1s amigable con la m\u00e1quina, los programas interpretados corren m\u00e1s lentamente y menos eficientemente (es decir, gastan considerablemente m\u00e1s energ\u00eda). Esto es especialmente verdad para los lenguajes de guion, cuyas sentencias son m\u00e1s complejas de analizar comparadas con las instrucciones m\u00e1quina.\nMuchos lenguajes se han implementado usando tanto compiladores como int\u00e9rpretes, incluyendo  BASIC, C, Lisp, Pascal y Python. Java y C# se compilan a c\u00f3digo byte, el lenguaje interpretado espec\u00edfico para la m\u00e1quina virtual. Muchas implementaciones de Lisp pueden mezclar libremente c\u00f3digo interpretado y compilado.", "subsections": [{"name": "Antecedentes hist\u00f3ricos de interpretado y compilado", "text": "En los comienzos de la computaci\u00f3n, el dise\u00f1o de lenguajes fue fuertemente influenciado por la decisi\u00f3n de usar la compilaci\u00f3n o la interpretaci\u00f3n como modos de ejecuci\u00f3n. Por ejemplo, algunos lenguajes compilados requieren que los programas deban indicar expl\u00edcitamente el tipo de dato de una variable en el momento en que sea declarada o al ser usada por primera vez, mientras que algunos lenguajes interpretados toman ventaja de los aspectos din\u00e1micos de la interpretaci\u00f3n para hacer tales declaraciones innecesarias. Por ejemplo, Smalltalk (1980), que fue dise\u00f1ado para ser interpretado en tiempo de ejecuci\u00f3n, permite a objetos gen\u00e9ricos interactuar din\u00e1micamente entre s\u00ed.\nInicialmente, los lenguajes interpretados eran compilados l\u00ednea por l\u00ednea, es decir, cada l\u00ednea era compilada a medida que estaba a punto de ser ejecutada, y si un bucle o una subrutina hicieran que ciertas l\u00edneas se ejecutaran m\u00faltiples veces, ser\u00edan recompiladas repetidamente. Esto ha llegado a ser mucho menos com\u00fan. La mayor\u00eda de los lenguajes interpretados usan una representaci\u00f3n intermedia, que combina tanto la compilaci\u00f3n como la interpretaci\u00f3n. En este caso, un compilador puede producir el c\u00f3digo byte o el c\u00f3digo enhebrado, que entonces es ejecutado por un int\u00e9rprete de c\u00f3digo byte.\nLos ejemplos incluyen:\nJava\nPython\nRuby (de forma similar, utiliza un \u00e1rbol de sintaxis abstracta como representaci\u00f3n intermedia)\nForth\nLa representaci\u00f3n intermedia se puede compilar una sola vez (como en Java), cada vez que se vaya a ejecutar (como en Perl o Ruby), o cada vez que se detecte un cambio en el c\u00f3digo fuente antes de la ejecuci\u00f3n (como en Python)."}, {"name": "Ventajas de interpretar un lenguaje", "text": "Interpretar un lenguaje da a las implementaciones una flexibilidad adicional sobre las implementaciones compiladas. Algunas caracter\u00edsticas son m\u00e1s f\u00e1ciles de implementar en int\u00e9rpretes que en compiladores son (pero no se limitan a estas):\nIndependencia de la plataforma (por ejemplo el bytecode de Java)\nReflexi\u00f3n y uso reflexivo del evaluador (por ejemplo, una funci\u00f3n eval de primer orden)\nTipos din\u00e1micos\nUn tama\u00f1o del programa m\u00e1s peque\u00f1o (puesto que las implementaciones tienen la flexibilidad de elegir el conjunto de instrucciones)\n\u00c1mbito din\u00e1mico\nFacilidad en la depuraci\u00f3n (es m\u00e1s f\u00e1cil obtener informaci\u00f3n del c\u00f3digo fuente en lenguajes interpretados)"}, {"name": "Desventajas de los lenguajes interpretados", "text": "La principal desventaja de la interpretaci\u00f3n es una velocidad de ejecuci\u00f3n del programa mucho m\u00e1s lenta, comparada con la ejecuci\u00f3n directa del c\u00f3digo m\u00e1quina en la CPU del ordenador. Una t\u00e9cnica utilizada para mejorar las prestaciones es la compilaci\u00f3n en tiempo de ejecuci\u00f3n, que convierte las secuencias ejecutadas m\u00e1s frecuentes en c\u00f3digo m\u00e1quina del ordenador."}, {"name": "Lista de lenguajes m\u00e1s usados de forma interpretada", "text": "APL Un lenguaje orientado a vectores que usa un conjunto de caracteres inusual\nJ Una variante de en el que la definici\u00f3n t\u00e1cita ofrece algunos de los beneficios de la compilaci\u00f3n\nBASIC (aunque la versi\u00f3n original, era compilada, as\u00ed como muchos modernos)\nthinBasic\nECMAScript\nActionScript (versi\u00f3n 3.0 no es interpretado, por lo que se elimin\u00f3 la funci\u00f3n eval())\nE4X (ECMAScript for XML)\nJavaScript (primero se llam\u00f3 Mocha, y luego LiveScript)\nJScript\nManipulaci\u00f3n de ecuaciones y sistemas de resoluci\u00f3n\nGNU Octave\nIDL (Interactive Data Language)\nTK Solver\nMathematica\nMATLAB\nEUPHORIA interpretado o compilado\nForth\nGame Maker Language\nJava (lenguaje de programaci\u00f3n)\nMadness Script\nPerl\nPHP\nPostScript\nPython\nLisp\nLogo\nScheme\nMUMPS (tradicionalmente interpretado, compilado en las versiones modernas)\nREXX\nRuby\nJRuby (una implementaci\u00f3n Java de Ruby)\nSeed7 interpretado o compilado\nSmalltalk\nBistro\nDolphin Smalltalk\nF-Script\nLittle Smalltalk\nSqueak\nVisualAge\nVisualWorks\nLenguajes de scripting\nWebDNA\nHojas de c\u00e1lculo\nExcel almacena f\u00f3rmulas, y las interpreta desde un formato simb\u00f3lico\nS\nR\nTcl\nXOTcl\nVBScript\nPowerShell\nXMLmosaic Archivado el 2 de agosto de 2009 en Wayback Machine. Un lenguaje de programaci\u00f3n interpretado parecido a C# escrito en Visual Basic .NET\nLenguajes normalmente compilados a c\u00f3digo byte\nMuchos lenguajes interpretados son primero compilados a c\u00f3digo byte, que luego es normalmente interpretado por la m\u00e1quina virtual usando la compilaci\u00f3n en tiempo de ejecuci\u00f3n, del c\u00f3digo byte a c\u00f3digo nativo. Sin embargo, algunas veces, el c\u00f3digo byte tambi\u00e9n puede ser compilado a un binario nativo usando un compilador Ahead-of-time compilation (compilaci\u00f3n por adelantado), o ejecutado nativamente, por el procesador hardware.\nJava (se compila en c\u00f3digo byte Java para que sea interpretado por la JVM)\nGroovy\nJoin Java\nColdFusion\nScala\nLua\n.NET Framework (traducidos a c\u00f3digo byte, llamado CIL)\nC/C++\nC#\nVisual Basic .NET\nPike\nPython\nSqueak Smalltalk\nVisual FoxPro\nLisp\nAppleScript"}]}, {"name": "Notas y referencias", "text": "\u2191 AST intermediate representations, Lambda the Ultimate forum\n\u2191 A Tree-Based Alternative to Java Byte-Codes, Thomas Kistler, Michael Franz\n\u2191 Trees Versus Bytes, BComp Honours thesis by Kade Hansson\n\u2191 Colburn, Rafe (2003). Sams Teach Yourself CGI in 24 Hours (2003 edici\u00f3n). Estados Unidos: Sams Publishing. p.\u00a048. ISBN\u00a00672324040. Consultado el 13 de marzo de 2015.\u00a0. Consultado el 13 de marzo de 2015.", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Lenguaje de programaci\u00f3n\nProceso de traducci\u00f3n de programas\nCompilador\nDepurador\nLenguaje interpretado\nLenguaje compilado", "subsections": []}, {"name": "Enlaces externos", "text": "DrPubaGump (enlace roto disponible en Internet Archive; v\u00e9ase el historial, la primera versi\u00f3n y la \u00faltima). A tiny Interpreter written in Scheme, which provides to interpret PUBA-GUMP (a subset of BASIC) in Scheme\nIBM Card Interpreters page at Columbia Universit", "subsections": []}]}
