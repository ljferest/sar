{"url": "https://es.wikipedia.org/wiki/python", "title": "Python", "summary": "[\n]\nPython es un lenguaje de alto nivel de programaci\u00f3n interpretado cuya filosof\u00eda hace hincapi\u00e9 en la legibilidad de su c\u00f3digo. Se trata de un lenguaje de programaci\u00f3n multiparadigma, ya que soporta parcialmente la orientaci\u00f3n a objetos, programaci\u00f3n imperativa y, en menor medida, programaci\u00f3n funcional. Es un lenguaje interpretado, din\u00e1mico y multiplataforma.\nAdministrado por Python Software Foundation, posee una licencia de c\u00f3digo abierto, denominada Python Software Foundation License.[3]\u200b Python se clasifica constantemente como uno de los lenguajes de programaci\u00f3n m\u00e1s populares.[4]\u200b", "sections": [{"name": "Historia", "text": "Art\u00edculo principal:\nPython fue creado a finales de los a\u00f1os ochenta por Guido van Rossum en Stichting Mathematisch Centrum (CWI),[5]\u200b en Pa\u00edses Bajos, como un sucesor del lenguaje de programaci\u00f3n ABC, capaz de manejar excepciones e interactuar con el sistema operativo Amoeba.[6]\u200b\nEl nombre del lenguaje proviene de la afici\u00f3n de su creador por los humoristas brit\u00e1nicos Monty Python.[7]\u200b\nGuido van Rossum es el principal autor de Python, y su continuo rol central en decidir la direcci\u00f3n de Python es reconocido, refiri\u00e9ndose a \u00e9l como Benevolente Dictador Vitalicio (en ingl\u00e9s: Benevolent Dictator for Life, BDFL); sin embargo el 12 de julio de 2018 declin\u00f3 de dicha situaci\u00f3n de honor sin dejar un sucesor o sucesora y con una declaraci\u00f3n altisonante:[8]\u200b\nEl 20 de febrero de 1991, van Rossum public\u00f3 el c\u00f3digo por primera vez en alt.sources, con el n\u00famero de versi\u00f3n 0.9.0.[10]\u200b En esta etapa del desarrollo ya estaban presentes clases con herencia, manejo de excepciones, funciones y los tipos modulares, como: str, list, dict, entre otros. Adem\u00e1s en este lanzamiento inicial aparec\u00eda un sistema de m\u00f3dulos adoptado de Modula-3; van Rossum describe el m\u00f3dulo como \u00abuna de las mayores unidades de programaci\u00f3n de Python\u00bb.[5]\u200b El modelo de excepciones en Python es parecido al de Modula-3, con la adici\u00f3n de una cl\u00e1usula else.[6]\u200b En el a\u00f1o 1994 se form\u00f3 comp.lang.python, el foro de discusi\u00f3n principal de Python, marcando un hito en el crecimiento del grupo de usuarios de este lenguaje.\nPython alcanz\u00f3 la versi\u00f3n 1.0 en enero de 1994. Una caracter\u00edstica de este lanzamiento fueron las herramientas de la programaci\u00f3n funcional: lambda, reduce, filter y map.[11]\u200b Van Rossum explic\u00f3 que \u00abhace 12 a\u00f1os, Python adquiri\u00f3 lambda, reduce(), filter() y map(), cortes\u00eda de Amrit Perm, un hacker inform\u00e1tico de Lisp que las implement\u00f3 porque las extra\u00f1aba\u00bb.[12]\u200b\nLa \u00faltima versi\u00f3n liberada proveniente de CWI fue Python 1.2. En 1995, van Rossum continu\u00f3 su trabajo en Python en la Corporation for National Research Initiatives (CNRI) en Reston, Virginia, donde lanz\u00f3 varias versiones del software.\nDurante su estancia en CNRI, van Rossum lanz\u00f3 la iniciativa Computer Programming for Everybody (CP4E), con el fin de hacer la programaci\u00f3n m\u00e1s accesible a m\u00e1s gente, con un nivel de 'alfabetizaci\u00f3n' b\u00e1sico en lenguajes de programaci\u00f3n, similar a la alfabetizaci\u00f3n b\u00e1sica en ingl\u00e9s y habilidades matem\u00e1ticas necesarias por muchos trabajadores. Python tuvo un papel crucial en este proceso: debido a su orientaci\u00f3n hacia una sintaxis limpia, ya era id\u00f3neo, y las metas de CP4E presentaban similitudes con su predecesor, ABC. El proyecto fue patrocinado por DARPA.[13]\u200b Para el a\u00f1o 2007, el proyecto CP4E se encontraba inactivo[14]\u200b; a pesar de ello, Python contin\u00faa intentando ser f\u00e1cil de aprender y no muy arcano en su sintaxis y sem\u00e1ntica, con el objetivo de ser entendible incluso para no-programadores.\nEn el a\u00f1o 2000, el equipo principal de desarrolladores de Python se cambi\u00f3 a BeOpen.com para formar el equipo BeOpen PythonLabs. CNRI pidi\u00f3 que la versi\u00f3n 1.6 fuera p\u00fablica, continuando su desarrollo hasta que el equipo de desarrollo abandon\u00f3 CNRI; su programa de lanzamiento y el de la versi\u00f3n 2.0 ten\u00edan una significativa cantidad de traslapo.[15]\u200b Python 2.0 fue el primer y \u00fanico lanzamiento de BeOpen.com. Despu\u00e9s que Python 2.0 fuera publicado por BeOpen.com, Guido van Rossum y los otros desarrolladores de PythonLabs se unieron en Digital Creations.\nPython 2.0 tom\u00f3 una caracter\u00edstica mayor del lenguaje de programaci\u00f3n funcional Haskell: listas por comprensi\u00f3n. La sintaxis de Python para esta construcci\u00f3n es muy similar a la de Haskell, salvo por la preferencia de los caracteres de puntuaci\u00f3n en Haskell, y la preferencia de Python por palabras claves alfab\u00e9ticas. Python 2.0 introdujo adem\u00e1s un sistema de recolecci\u00f3n de basura capaz de recolectar referencias c\u00edclicas.[15]\u200b\nPosterior a este doble lanzamiento, y despu\u00e9s que van Rossum dejara CNRI para trabajar con desarrolladores de software comercial, qued\u00f3 claro que la opci\u00f3n de usar Python con software disponible bajo la GNU GPL era muy deseable. La licencia usada entonces, la Python License, inclu\u00eda una cl\u00e1usula estipulando que la licencia estaba gobernada por el estado de Virginia, por lo que, bajo la \u00f3ptica de los abogados de Free Software Foundation (FSF), se hac\u00eda incompatible con GPL. Para las versiones 1.61 y 2.1, CNRI y FSF  \nhicieron compatibles la licencia de Python con GPL, renombr\u00e1ndola como Python Software Foundation License. En el a\u00f1o 2001, van Rossum fue premiado con el FSF Award for the Advancement of Free Software.\nPython 2.1 fue un trabajo derivado de las versiones 1.6.1 y 2.0. Es a partir de este momento que  Python Software Foundation (PSF) pasa a dirigir el proyecto, organizada como una organizaci\u00f3n sin \u00e1nimo de lucro fundada en el a\u00f1o 2001, tomando como modelo a la Apache Software Foundation.[3]\u200b Incluida con este lanzamiento estuvo una implementaci\u00f3n del alcance de variables m\u00e1s parecida a las reglas del static scoping originado por Scheme.[16]\u200b\nUna innovaci\u00f3n mayor en Python 2.2 fue la unificaci\u00f3n de los tipos en Python (tipos escritos en C), y clases (tipos escritos en Python) dentro de una jerarqu\u00eda. Esa unificaci\u00f3n logr\u00f3 un modelo de objetos de Python puro y consistente.[17]\u200b Tambi\u00e9n fueron agregados los generadores, que fueron inspirados por el lenguaje Icon.[18]\u200b\nLas adiciones a la biblioteca est\u00e1ndar de Python y las decisiones sint\u00e1cticas fueron influenciadas fuertemente por Java en algunos casos: el paquete logging,[19]\u200b introducido en la versi\u00f3n 2.3, est\u00e1 basado en log4j; el parser SAX, introducido en 2.0; el paquete threading,[20]\u200b cuya clase Thread expone un subconjunto de la interfaz de la clase hom\u00f3nima en Java.\nPython 2.7.x (\u00faltima versi\u00f3n de la serie Python 2.x) fue oficialmente descontinuado el 1 de enero de 2020 (paso inicialmente planeado para 2015), por lo que ya no se publicar\u00e1n parches de seguridad y otras mejoras para \u00e9l.[21]\u200b[22]\u200b Con el final del ciclo de vida de Python 2, solo tienen soporte la rama Python 3.6.x[23]\u200b y posteriores.\nCon Python 3.5 llegar\u00eda el soporte incluido para entrada/salida as\u00edncrona a trav\u00e9s de la biblioteca asyncio, orientada a aplicaciones que requieren alto rendimiento de c\u00f3digo concurrente, como servidores web, bibliotecas de conexi\u00f3n de bases de datos y colas de tareas distribuidas.[24]\u200b\nEn la actualidad, Python se aplica en los campos de inteligencia artificial y machine learning.[25]\u200b", "subsections": []}, {"name": "Caracter\u00edsticas y paradigmas", "text": "Python es un lenguaje de programaci\u00f3n multiparadigma. Esto significa que m\u00e1s que forzar a los programadores a adoptar un estilo particular de programaci\u00f3n, permite varios estilos: programaci\u00f3n orientada a objetos, programaci\u00f3n imperativa y programaci\u00f3n funcional. Otros paradigmas est\u00e1n soportados mediante el uso de extensiones.\nPython usa tipado din\u00e1mico y conteo de referencias para la gesti\u00f3n de memoria.\nUna caracter\u00edstica importante de Python es la resoluci\u00f3n din\u00e1mica de nombres; es decir, lo que enlaza un m\u00e9todo y un nombre de variable durante la ejecuci\u00f3n del programa (tambi\u00e9n llamado enlace din\u00e1mico de m\u00e9todos).\nOtro objetivo del dise\u00f1o del lenguaje es la facilidad de extensi\u00f3n. Se pueden escribir nuevos m\u00f3dulos f\u00e1cilmente en C o C++. Python puede incluirse en aplicaciones que necesitan una interfaz programable.[26]\u200b\nAunque la programaci\u00f3n en Python podr\u00eda considerarse en algunas situaciones hostil a la programaci\u00f3n funcional tradicional expuesta por Lisp, existen bastantes analog\u00edas entre Python y los lenguajes minimalistas de la familia Lisp (como Scheme).", "subsections": []}, {"name": "Filosof\u00eda", "text": "Los usuarios de Python se refieren a menudo a la filosof\u00eda de Python, que es bastante similar a la filosof\u00eda de Unix. El c\u00f3digo que siga los principios de Python es reconocido como \"pyth\u00f3nico\". Estos principios fueron descritos por el desarrollador de Python Tim Peters en El Zen de Python:\nBello es mejor que feo.\nExpl\u00edcito es mejor que impl\u00edcito.\nSimple es mejor que complejo.\nComplejo es mejor que complicado.\nPlano es mejor que anidado.\nDisperso es mejor que denso.\nLa legibilidad cuenta.\nLos casos especiales no son tan especiales como para quebrantar las reglas.\nLo pr\u00e1ctico gana a lo puro.\nLos errores nunca deber\u00edan dejarse pasar silenciosamente.\nA menos que hayan sido silenciados expl\u00edcitamente.\nFrente a la ambig\u00fcedad, rechaza la tentaci\u00f3n de adivinar.\nDeber\u00eda haber una \u2014y preferiblemente solo una\u2014 manera obvia de hacerlo.\nAunque esa manera puede no ser obvia al principio a menos que usted sea holand\u00e9s.[27]\u200b\nAhora es mejor que nunca.\nAunque nunca es a menudo mejor que ya mismo.\nSi la implementaci\u00f3n es dif\u00edcil de explicar, es una mala idea.\nSi la implementaci\u00f3n es f\u00e1cil de explicar, puede que sea una buena idea.\nLos espacios de nombres (namespaces) son una gran idea. \u00a1Hagamos m\u00e1s de esas cosas!\nDesde la versi\u00f3n 2.1.2, Python incluye estos puntos (en su versi\u00f3n original en ingl\u00e9s) como un huevo de pascua que se muestra al ejecutar import this.[28]\u200b", "subsections": []}, {"name": "Modo interactivo", "text": "El int\u00e9rprete de Python est\u00e1ndar incluye un modo interactivo en el cual se escriben las instrucciones en una especie de int\u00e9rprete de comandos: las expresiones pueden ser introducidas una a una, pudiendo verse el resultado de su evaluaci\u00f3n inmediatamente, lo que da la posibilidad de probar porciones de c\u00f3digo en el modo interactivo antes de integrarlo como parte de un programa. Esto resulta \u00fatil tanto para las personas que se est\u00e1n familiarizando con el lenguaje como para los programadores m\u00e1s avanzados.\nExisten otros programas, como IDLE, bpython e IPython,[29]\u200b que a\u00f1aden funcionalidades extra al modo interactivo, como completamiento autom\u00e1tico de c\u00f3digo y coloreado de la sintaxis del lenguaje.\nEjemplo del modo interactivo:\n>>>\n1\n+\n2\na\n=\nrange\n(\n10\n)\nprint\nlist\n))\n[\n0\n,\n3\n4\n5\n6\n7\n8\n9\n]", "subsections": []}, {"name": "Elementos del lenguaje y sintaxis", "text": "Python est\u00e1 destinado a ser un lenguaje de f\u00e1cil lectura. Su formato es visualmente ordenado y, a menudo, usa palabras clave en ingl\u00e9s donde otros idiomas usan puntuaci\u00f3n. A diferencia de muchos otros lenguajes, no utiliza corchetes para delimitar bloques y se permiten puntos y coma despu\u00e9s de las declaraciones, pero rara vez, si es que alguna vez, se utilizan. Tiene menos excepciones sint\u00e1cticas y casos especiales que C o Pascal.\nDise\u00f1ado para ser le\u00eddo con facilidad, una de sus caracter\u00edsticas es el uso de palabras donde otros lenguajes utilizar\u00edan s\u00edmbolos. Por ejemplo, los operadores l\u00f3gicos !, || y && en Python se escriben not, or y and, respectivamente.\nEl contenido de los bloques de c\u00f3digo (bucles, funciones, clases, etc.) es delimitado mediante espacios o tabuladores, conocidos como sangrado o indentaci\u00f3n, antes de cada l\u00ednea de \u00f3rdenes pertenecientes al bloque.[30]\u200b Python se diferencia as\u00ed de otros lenguajes de programaci\u00f3n que mantienen como costumbre declarar los bloques mediante un conjunto de caracteres, normalmente entre llaves {}.[31]\u200b[32]\u200b Se pueden utilizar tanto espacios como tabuladores para sangrar el c\u00f3digo, pero se recomienda no mezclarlos.[33]\u200b \nint\n \nfactorial\nx\n{\n    \nif\n<\n||\n%\n!=\n        \nprintf\n\"x debe ser un numero entero mayor o igual a 0\"\n);\nreturn\n-1\n;\n// Error\n}\n==\n*\nfactorial\n-\ndef\n):\nassert\n>=\nand\n\"x debe ser un entero mayor o igual a 0.\"\n:\nelse\nDebido al significado sint\u00e1ctico de la sangr\u00eda, cada instrucci\u00f3n debe estar contenida en una sola l\u00ednea. No obstante, si por legibilidad se quiere dividir la instrucci\u00f3n en varias l\u00edneas, a\u00f1adiendo una barra invertida \\ al final de una l\u00ednea, se indica que la instrucci\u00f3n contin\u00faa en la siguiente.\nEstas instrucciones son equivalentes:\nlista\n'valor 1'\n'valor 2'\n'valor 3'\ncadena\n'Esto es una cadena bastante larga'\n'Esto es una cadena '\n'bastante larga'", "subsections": [{"name": "Comentarios", "text": "Los comentarios se pueden poner de dos formas. La primera y m\u00e1s apropiada para comentarios largos es utilizando la notaci\u00f3n ''' comentario ''', tres ap\u00f3strofos de apertura y tres de cierre. La segunda notaci\u00f3n utiliza el s\u00edmbolo #, que se extiende hasta el final de la l\u00ednea. \nEl int\u00e9rprete no tiene en cuenta los comentarios, lo cual es \u00fatil si deseamos poner informaci\u00f3n adicional en el c\u00f3digo. Por ejemplo, una explicaci\u00f3n sobre el comportamiento de una secci\u00f3n del programa.\n'''\nComentario m\u00e1s largo en una l\u00ednea en Python\n\"Hola mundo\"\n# Tambi\u00e9n es posible a\u00f1adir un comentario al final de una l\u00ednea de c\u00f3digo"}, {"name": "Variables", "text": "Las variables se definen de forma din\u00e1mica, lo que significa que no se tiene que especificar cu\u00e1l es su tipo de antemano y puede tomar distintos valores en otro momento, incluso de un tipo diferente al que ten\u00eda previamente. Se usa el s\u00edmbolo = para asignar valores.\n\"texto\"\n# Esto es posible porque los tipos son asignados din\u00e1micamente\nLos nombres de variables pueden contener n\u00fameros y letras pero deben comenzar con una letra. Adem\u00e1s, existen 35 palabras reservadas:[34]\u200b[35]\u200b\nand\nas\nassert\nasync\nawait\nbreak\nclass\ncontinue\ndef\ndel\nelif\nelse\nexcept\nFalse\nfinally\nfor\nfrom\nglobal\nif\nimport\nin\nis\nlambda\nNone\nnonlocal\nnot\nor\npass\nraise\nreturn\nTrue\ntry\nwhile\nwith\nyield\nA partir de Python 3.10 existen tambi\u00e9n soft keywords, palabras que son reservadas en ciertos contextos, pero que normalmente pueden ser usadas como nombres de variables. Estos identificadores son match, case y _."}, {"name": "Tipos de datos", "text": "Los tipos de datos b\u00e1sicos se pueden resumir en esta tabla:\nMutable: si su contenido (o dicho valor) puede cambiarse en tiempo de ejecuci\u00f3n.\nInmutable: si su contenido (o dicho valor) no puede cambiarse en tiempo de ejecuci\u00f3n."}, {"name": "Condicionales", "text": "Una sentencia condicional ejecuta su bloque de c\u00f3digo interno solo si se cumple cierta condici\u00f3n. Se define usando la palabra clave if seguida de la condici\u00f3n y el bloque de c\u00f3digo. Si existen condiciones adicionales, se introducen usando la palabra clave elif seguida de la condici\u00f3n y su bloque de c\u00f3digo. Las condiciones se eval\u00faan de manera secuencial hasta encontrar la primera que sea verdadera, y su bloque de c\u00f3digo asociado es el \u00fanico que se ejecuta. Opcionalmente, puede haber un bloque final (la palabra clave else, seguida de un bloque de c\u00f3digo) que se ejecuta solo cuando todas las condiciones anteriores fueron falsas.\nverdadero\nTrue\n# No es necesario poner \"verdadero == True\"\n...\n\"Verdadero\"\n\"Falso\"\nVerdadero\nlenguaje\n\"Python\"\n\"C\"\n# lenguaje no es \"C\", por lo que este bloque se obviar\u00e1 y evaluar\u00e1 la siguiente condici\u00f3n\n\"Lenguaje de programaci\u00f3n: C\"\nelif\n# Se pueden a\u00f1adir tantos bloques \"elif\" como se quiera\n\"Lenguaje de programaci\u00f3n: Python\"\n# En caso de que ninguna de las anteriores condiciones fuera cierta, se ejecutar\u00eda este bloque\n\"Lenguaje de programaci\u00f3n: indefinido\"\nLenguaje\nde\nprogramaci\u00f3n\nPython\n# Uso de \"and\" para comprobar que ambas condiciones son verdaderas\n\"Verdadero y Lenguaje de programaci\u00f3n: Python\"\ny"}, {"name": "Bucle for", "text": "El bucle for es similar a foreach en otros lenguajes. Recorre un objeto iterable, como una lista, una tupla o un generador, y por cada elemento del iterable ejecuta el bloque de c\u00f3digo interno. Se define con la palabra clave for seguida de un nombre de variable, seguido de in, seguido del iterable, y finalmente el bloque de c\u00f3digo interno. En cada iteraci\u00f3n, el elemento siguiente del iterable se asigna al nombre de variable especificado:\n\"a\"\n\"b\"\n\"c\"\nfor\ni\nin\n# Iteramos sobre una lista, que es iterable\nb\nc\n\"abcdef\"\n# Iteramos sobre una cadena, que tambi\u00e9n es iterable\nend\n', '\n# A\u00f1adiendo end=', ' al final hacemos que no introduzca un salto de l\u00ednea, sino una coma y un espacio\nd\ne\nf"}, {"name": "Bucle while", "text": "El bucle while eval\u00faa una condici\u00f3n y, si es verdadera, ejecuta el bloque de c\u00f3digo interno. Contin\u00faa evaluando y ejecutando mientras la condici\u00f3n sea verdadera. Se define con la palabra clave while seguida de la condici\u00f3n, y a continuaci\u00f3n el bloque de c\u00f3digo interno:\nnumero\nwhile\n\" \"\n+=\n# Un buen programador modificar\u00e1 las variables de control al finalizar el ciclo while"}, {"name": "Listas y Tuplas", "text": "Para declarar una lista se usan los corchetes [], en cambio, para declarar una tupla se usan los par\u00e9ntesis (). En ambas los elementos se separan por comas, y en el caso de las tuplas es necesario que tengan como m\u00ednimo una coma.\nTanto las listas como las tuplas pueden contener elementos de diferentes tipos. No obstante, las listas suelen usarse para elementos del mismo tipo en cantidad variable mientras que las tuplas se reservan para elementos distintos en cantidad fija.\nPara acceder a los elementos de una lista o tupla se utiliza un \u00edndice entero (empezando por \"0\", no por \"1\"). Se pueden utilizar \u00edndices negativos para acceder elementos a partir del final.\nLas listas se caracterizan por ser mutables, es decir, se puede cambiar su contenido en tiempo de ejecuci\u00f3n, mientras que las tuplas son inmutables ya que no es posible modificar el contenido una vez creadas.\n\"abc\"\n42\n3.1415\n# Acceder a un elemento por su \u00edndice\n'abc'\n# Acceder a un elemento usando un \u00edndice negativo\n.\nappend\n# A\u00f1adir un elemento al final de la lista\ndel\n# Borra un elemento de la lista usando un \u00edndice (en este caso: True)\n\"xyz\"\n# Re-asignar el valor del primer elemento de la lista\n# Mostrar los elementos de la lista del \u00edndice \"0\" al \"2\" (sin incluir este \u00faltimo)\n'xyz'\nlista_anidada\n]]\n# Es posible anidar listas\n[[\n],\n][\n# Acceder a un elemento de una lista dentro de otra lista (del segundo elemento, mostrar el primer elemento)\ntupla\n# No es posible borrar (ni a\u00f1adir) un elemento en una tupla, lo que provocar\u00e1 una excepci\u00f3n\nTraceback\nmost\nrecent\ncall\nlast\nFile\n\"<stdin>\"\nline\nmodule\n>\nTypeError\n'tuple'\nobject\ndoesn\n't support item deletion\n# Tampoco es posible re-asignar el valor de un elemento en una tupla, lo que tambi\u00e9n provocar\u00e1 una excepci\u00f3n\ndoes\nnot\nsupport\nitem\nassignment\n# Mostrar los elementos de la tupla del \u00edndice \"0\" al \"2\" (sin incluir este \u00faltimo)\ntupla_anidada\n# Tambi\u00e9n es posible anidar tuplas\n# Esto tambi\u00e9n es una tupla, aunque es recomendable ponerla entre par\u00e9ntesis (recuerde que requiere, al menos, una coma)\n# Aunque se encuentra entre par\u00e9ntesis, esto no es una tupla, ya que no posee al menos una coma, por lo que \u00fanicamente aparecer\u00e1 el valor\n,)\n# En cambio, en este otro caso, s\u00ed es una tupla\n# Con m\u00e1s de un elemento no es necesaria la coma final\n# Aunque agregarla no modifica el resultado"}, {"name": "Diccionarios", "text": "Para declarar un diccionario se usan las llaves {}. Contienen elementos separados por comas, donde cada elemento est\u00e1 formado por un par clave:valor (el s\u00edmbolo : separa la clave de su valor correspondiente).\nLos diccionarios son mutables, es decir, se puede cambiar el contenido de un valor en tiempo de ejecuci\u00f3n.\nEn cambio, las claves de un diccionario deben ser inmutables. Esto quiere decir, por ejemplo, que no podremos usar ni listas ni diccionarios como claves.\nEl valor asociado a una clave puede ser de cualquier tipo de dato, incluso un diccionario.\ndiccionario\n\"cadena\"\n\"numero\"\n\"lista\"\n]}\n# Diccionario que tiene diferentes valores por cada clave, incluso una lista\n# Usando una clave, se accede a su valor\n# Acceder a un elemento de una lista dentro de un valor (del valor de la clave \"lista\", mostrar el primer elemento)\n# Re-asignar el valor de una clave\n\"decimal\"\n3.1415927\n# Insertar un nuevo elemento clave:valor\ndiccionario_mixto\n\"tupla\"\n),\n\"diccionario\"\n# Tambi\u00e9n es posible que un valor sea un diccionario\n# Acceder a un elemento dentro de una lista, que se encuentra dentro de un diccionario\n{(\n,):\n# S\u00ed es posible que una clave sea una tupla, pues es inmutable\n{[\n]:\n# No es posible que una clave sea una lista, pues es mutable, lo que provocar\u00e1 una excepci\u00f3n\nunhashable\ntype\n'list'"}, {"name": "Sentencia match-case", "text": "Python cuenta con la estructura match-case desde la versi\u00f3n 3.10. Esta tiene el nombre de Structural Pattern Matching.\nmatch\nvariable\ncase\ncondicion\n# codigo\n_\nCabe destacar que esta funcionalidad es considerablemente m\u00e1s compleja que el conocido switch-case de la mayor\u00eda de lenguajes de programaci\u00f3n, ya que no solo permite realizar una comparaci\u00f3n del valor, sino que tambi\u00e9n puede comprobar el tipo del objeto, y sus atributos. Adem\u00e1s, puede realizar un desempaquetado directo de secuencias de datos, y comprobarlos de forma espec\u00edfica.\nEn el siguiente ejemplo, se comprueban los atributos de nuestra instancia de Punto. Si en estos no se cumple que x = 10 y y = 40, se pasar\u00e1 a la siguiente condici\u00f3n.\nEs importante anotar que Punto(x=10, y=40) no est\u00e1 construyendo un nuevo objeto, aunque pueda parecerlo.\nfrom\ndataclasses\nimport\ndataclass\n@dataclass\nclass\nPunto\nint\ncoordenada\nPunto\n34\n40\n# los atributos \"x\" e \"y\" tienen el valor specificado\n\"Coordenada 10, 40\"\n():\n# si es una instancia de Punto\n\"es un punto\"\n# ninguna condici\u00f3n cumplida (default)\n\"No es un punto\"\nEn versiones anteriores, existen diferentes formas de realizar esta operaci\u00f3n l\u00f3gica de forma similar:\nUsando if, elif, else\nPodemos usar la estructura de la siguiente manera:\ncondicion1\nhacer1\ncondicion2\nhacer2\ncondicion3\nhacer3\nhacer\nEn esa estructura se ejecutara controlando la condicion1, si no se cumple pasara a la siguiente y as\u00ed sucesivamente hasta entrar en el else.\nUn ejemplo pr\u00e1ctico ser\u00eda:\ncalculo\nop\n'sum'\n'rest'\n'mult'\n'div'\n/\nNone\ncalculo\nPodr\u00edamos decir que el lado negativo de la sentencia armada con if, elif y else es que si la lista de posibles operaciones es muy larga, las tiene que recorrer una por una hasta llegar a la correcta.\nUsando diccionarios\nPodemos usar un diccionario para el mismo ejemplo:\nlambda\nget\n)()\nDe esta manera, si las opciones fueran muchas, no recorrer\u00eda todas; solo ir\u00eda directamente a la operaci\u00f3n buscada en la \u00faltima l\u00ednea (.get(op, lambda: None)()) y estar\u00edamos dando una opci\u00f3n por defecto. El motivo por el que se usan expresiones lambda dentro del diccionario es para prevenir la ejecuci\u00f3n de las instrucciones que contienen a la hora de definir el diccionario. Este \u00fanicamente define funciones como valores del diccionario, y posteriormente, al obtener estas mediante get(), se llama a la funci\u00f3n, ejecutando la expresi\u00f3n que esta contiene."}, {"name": "Conjuntos", "text": "Los conjuntos se construyen mediante la expresi\u00f3n set(items), donde items es cualquier objeto iterable, como listas o tuplas. Los conjuntos no mantienen el orden ni contienen elementos duplicados.\nSe suelen utilizar para eliminar duplicados de una secuencia, o para operaciones matem\u00e1ticas como intersecci\u00f3n, uni\u00f3n, diferencia y diferencia sim\u00e9trica.\nconjunto_inmutable\nfrozenset\n([\n])\n# Se utiliza una lista como objeto iterable\n'a'\n'b'\nconjunto1\nset\n# Primer conjunto mutable\nconjunto2\n\"d\"\n# Segundo conjunto mutable\n'c'\n'd'\n# Los conjuntos no mantienen el orden, como los diccionarios\n&\n# Intersecci\u00f3n\n|\n# Uni\u00f3n\n# Diferencia (1)\n([])\n# Diferencia (2)\n^\n# Diferencia sim\u00e9trica"}, {"name": "Listas por comprensi\u00f3n", "text": "Una lista por comprensi\u00f3n (en ingl\u00e9s list comprehension) es una expresi\u00f3n compacta para definir listas. Al igual que lambda, aparece en lenguajes funcionales. Ejemplos:\n# La funci\u00f3n range devuelve una lista, empezando en 0 y terminando con el n\u00famero indicado menos uno\n)]\n# Por cada elemento del rango, lo multiplica por s\u00ed mismo y lo agrega al resultado\n16\n[("}, {"name": "Funciones", "text": "Las funciones se definen con la palabra clave def, seguida del nombre de la funci\u00f3n y sus par\u00e1metros. Otra forma de escribir funciones, aunque menos utilizada, es con la palabra clave lambda (que aparece en lenguajes funcionales como Lisp).\nEl valor devuelto en las funciones con def ser\u00e1 el dado con la instrucci\u00f3n return.\nLas funciones pueden recibir par\u00e1metros especiales para manejar el exceso de argumentos.\nEl par\u00e1metro *args recibe como una tupla un n\u00famero variable de argumentos posicionales.\nEl par\u00e1metro **kwargs recibe como un diccionario un n\u00famero variable de argumentos por palabras clave.\ndef:\nsuma\n# Retornar la suma del valor de la variable \"x\" y el valor de \"y\"\nsuma\n# La variable \"y\" no se modifica, siendo su valor: 2\n# La variable \"y\" s\u00ed se modifica, siendo su nuevo valor: 10\n14\n*args:\nargs\nresultado\n# Se itera la tupla de argumentos\nnum\n#  Suma todos los argumentos\n# Retorna el resultado de la suma\n# No importa el n\u00famero de variables posicionales que se pasen a la funci\u00f3n\n25\n**kwargs:\n**\nkwargs\n# Se itera el diccionario de argumentos\nkey\nvalue\nitems\n# Suma todos los valores de los argumentos\nz\n# No importa el n\u00famero de variables por clave que se pasen a la funci\u00f3n\n12\nlambda:"}, {"name": "Clases", "text": "Las clases se definen con la palabra clave class, seguida del nombre de la clase y, si hereda de otras clases, los nombres de estas.\nEn Python 2.x era recomendable que una clase heredase de object, en Python 3.x ya no hace falta.\nEn una clase, un m\u00e9todo equivale a una funci\u00f3n, y un atributo equivale a una variable.[36]\u200b\n__init__ es un m\u00e9todo especial que se ejecuta al instanciar la clase, se usa generalmente para inicializar atributos y ejecutar m\u00e9todos necesarios. Al igual que todos los m\u00e9todos en Python, debe tener al menos un par\u00e1metro (generalmente se utiliza self). El resto de par\u00e1metros ser\u00e1n los que se indiquen al instanciar la clase.\nLos atributos que se desee que sean accesibles desde fuera de la clase se deben declarar usando self. delante del nombre.\nEn Python no existe el concepto de encapsulamiento[37]\u200b, por lo que el programador debe ser responsable de asignar los valores a los atributos.\nPersona\n__init__\nself\nnombre\nedad\n# Un atributo cualquiera\n# Otro atributo cualquiera\nmostrar_edad\n# Es necesario que, al menos, tenga un par\u00e1metro, generalmente self\n# mostrando un atributo\nmodificar_edad\n# Modificando edad\n150\n# Se comprueba que la edad no sea menor que 0 (algo imposible) ni mayor que 150 (algo realmente dif\u00edcil)\nFalse\n# Si est\u00e1 en el rango 0-150, entonces se modifica la variable\n# Se modifica la edad\np\nPersona\n'Alicia'\n20\n# Instanciando la clase. Como se puede ver, no se especifica el valor de self\n# La variable \"nombre\" del objeto s\u00ed es accesible desde fuera\n'Andrea'\n# Y por tanto, se puede cambiar su contenido\nmostrar_edad\n()\n# Se llama a un m\u00e9todo de la clase\nmodificar_edad\n21\n# Es posible cambiar la edad usando el m\u00e9todo espec\u00edfico que hemos hecho para hacerlo de forma controlada"}, {"name": "M\u00f3dulos", "text": "Existen muchas propiedades que se pueden agregar al lenguaje importando m\u00f3dulos, conjuntos de funciones y clases para realizar determinadas tareas usualmente escritos tambi\u00e9n en Python. Un ejemplo es el m\u00f3dulo tkinter[38]\u200b, que permite crear interfaces gr\u00e1ficas basadas en la biblioteca Tk. Otro ejemplo es el m\u00f3dulo os, que provee acceso a muchas funciones del sistema operativo. Los m\u00f3dulos se agregan al c\u00f3digo escribiendo la palabra import, seguida del nombre del m\u00f3dulo que queramos usar.[39]\u200b\nInstalaci\u00f3n de m\u00f3dulos (pip)\nLa instalaci\u00f3n de m\u00f3dulos en Python se puede realizar mediante la herramienta de software Pip, que suele estar incluida en las instalaciones de Python. Esta herramienta permite la gesti\u00f3n de los distintos paquetes o m\u00f3dulos instalables para Python, incluyendo as\u00ed las siguientes caracter\u00edsticas:\nInstalaci\u00f3n de paquetes.\nInstalaci\u00f3n de versiones concretas de paquetes.\nInstalaci\u00f3n a partir de un archivo de configuraci\u00f3n.\nDesinstalaci\u00f3n.\nActualizaci\u00f3n.\nInterfaz al sistema operativo\nEl m\u00f3dulo os provee funciones para interactuar con el sistema operativo:\nos\nos\nname\n# Devuelve el nombre del sistema operativo\n'posix'\nmkdir\n\"/tmp/ejemplo\"\n# Crea un directorio en la ruta especificada\nPara tareas de administraci\u00f3n de archivos, el m\u00f3dulo shutil provee una interfaz de m\u00e1s alto nivel:\nshutil\nshutil\ncopyfile\n'datos.db'\n'informacion.db'\nmove\n'/build/programas'\n'dir_progs'\nComodines de archivos\nEl m\u00f3dulo glob provee una funci\u00f3n para crear listas de archivos a partir de b\u00fasquedas con comodines en carpetas:\nglob\nglob\n'*.py'\n'numeros.py'\n'ejemplo.py'\n'ejemplo2.py'\nArgumentos de l\u00ednea de \u00f3rdenes\nLos argumentos de l\u00ednea de \u00f3rdenes se almacenan en el atributo argv del m\u00f3dulo sys como una lista.\nsys\nsys\nargv\n'demostracion.py'\n'uno'\n'dos'\n'tres'\nMatem\u00e1tica\nEl m\u00f3dulo math permite acceder a las funciones de matem\u00e1tica de punto flotante:\nmath\nmath\ncos\npi\n0.494888338963\nlog\n1024\n10.0\nEl m\u00f3dulo random se utiliza para realizar selecciones al azar:\nrandom\nrandom\nchoice\n'durazno'\n'manzana'\n'frutilla'\nsample\n100\n# Elecci\u00f3n sin reemplazo\n30\n23\n17\n24\n81\n41\n80\n28\n13\n# Un float al azar en el intervalo [0, 1)\n0.23370387692726126\nrandrange\n# Un entero al azar en el intervalo [0, 6)\nEl m\u00f3dulo statistics se utiliza para estad\u00edstica b\u00e1sica, por ejemplo: media, mediana, varianza, etc.:\nstatistics\ndatos\n1.75\n2.75\n1.25\n0.5\n0.25\n3.5\nstatistics\nmean\n1.6071428571428572\nmedian\nvariance\n1.3720238095238095\nFechas y horas\nLos m\u00f3dulos time y datetime permiten trabajar con fechas y horas.\ndatetime\ndatetime\ntime\nnow\nisoformat\n# Devuelve la fecha y hora actual\n'2010-08-10T18:01:17.900401'\nstrftime\n\"%Y-%m-\n%d\n %H:%M:%S\"\n# Devuelve la fecha y/u hora actual con el formato especificado\n'2010-08-10 18:01:17'\ntime\n# M\u00e9todo equivalente\nM\u00f3dulo Turtle\nEl m\u00f3dulo turtle permite la implementaci\u00f3n de gr\u00e1ficas tortuga:\nturtle\nturtle\npensize\nleft\n120\nforward\nPol\u00edgonos con el m\u00f3dulo Turtle:\nPol\u00edgonos regulares y estrellas"}]}, {"name": "Sistema de objetos", "text": "En Python todo es un objeto (incluso las clases). Las clases, al ser objetos, son instancias de una metaclase. Python, adem\u00e1s, soporta herencia m\u00faltiple y polimorfismo.\n# Una cadena es un objeto de \"str\"\nupper\n# Al ser un objeto, posee sus propios m\u00e9todos\n'ABC'\n# Una lista es un objeto de \"list\"\n# Una lista (al igual que todo) es un objeto, y tambi\u00e9n posee sus propios m\u00e9todos", "subsections": []}, {"name": "Biblioteca est\u00e1ndar", "text": "Python tiene una gran biblioteca est\u00e1ndar, usada para una diversidad de tareas. Esto viene de la filosof\u00eda \"pilas incluidas\" (batteries included) en referencia a los m\u00f3dulos de Python. Los m\u00f3dulos de la biblioteca est\u00e1ndar pueden complementarse con m\u00f3dulos personalizados escritos en C o en Python. Debido a la gran variedad de herramientas incluidas en la biblioteca est\u00e1ndar, combinada con la capacidad de usar lenguajes de bajo nivel como C y C++ (los cuales son capaces de interactuar con otras bibliotecas), Python es un lenguaje que combina su clara sintaxis con el inmenso poder de lenguajes de m\u00e1s bajo nivel.[40]\u200b", "subsections": []}, {"name": "Implementaciones", "text": "Existen diversas implementaciones del lenguaje:\nCPython es la implementaci\u00f3n original, disponible para varias plataformas en el sitio oficial de Python.\nIronPython es la implementaci\u00f3n para .NET.\nStackless Python es la variante de CPython que trata de no usar el stack de C (www.stackless.com).\nJython es la implementaci\u00f3n hecha en Java.\nPippy es la implementaci\u00f3n realizada para Palm (pippy.sourceforge.net).\nPyPy es una implementaci\u00f3n de Python escrita en Python y optimizada mediante JIT (pypy.org).\nActivePython es una implementaci\u00f3n privativa de Python con extensiones, para servidores en producci\u00f3n y aplicaciones de misi\u00f3n cr\u00edtica desarrollado por ActiveState Software.", "subsections": []}, {"name": "Incidencias", "text": "A lo largo de su historia, Python ha presentado una serie de incidencias, de las cuales las m\u00e1s importantes han sido las siguientes:\nEl 13 de febrero de 2009 se lanz\u00f3 una nueva versi\u00f3n de Python bajo el nombre clave \"Python 3000\" o,[41]\u200b abreviado, \"Py3K\".[42]\u200b Esta nueva versi\u00f3n incluye toda una serie de cambios que requieren reescribir el c\u00f3digo de versiones anteriores. Para facilitar este proceso, junto con Python 3 se ha publicado una herramienta de traducci\u00f3n autom\u00e1tica llamada 2to3.[43]\u200b[44]\u200b\nEl sistema operativo Windows 10, a partir de su actualizaci\u00f3n de mayo de 2019, dispone de la caracter\u00edstica de preinstalaci\u00f3n asistida del lenguaje Python y varias de sus herramientas adicionales.[45]\u200b", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "PyPI, repositorio de paquetes de software de terceros para Python.\nDjango, framework de desarrollo web.\nCython, lenguaje de programaci\u00f3n para simplificar la escritura de m\u00f3dulos de extensi\u00f3n para Python en C y C++.\nFlask, framework de desarrollo web.\nCubicWeb, framework de desarrollo web en plataforma sem\u00e1ntica.\nPygame, conjunto de m\u00f3dulos para la creaci\u00f3n de videojuegos en dos dimensiones.\nTkinter, binding de la biblioteca gr\u00e1fica Tcl/Tk para Python.\nPyGTK, binding de la biblioteca gr\u00e1fica GTK para Python.\nwxPython, binding de la biblioteca gr\u00e1fica wxWidgets para Python.\nPyQt y PySide, bindings de la biblioteca gr\u00e1fica Qt para Python.\nPlone, sistema de gesti\u00f3n de contenidos.\nBiopython, colecci\u00f3n de bibliotecas orientadas a la bioinform\u00e1tica para Python.\nNumPy, biblioteca que da soporte al c\u00e1lculo con matrices y vectores.\nSciPy, biblioteca que permite realizar an\u00e1lisis cient\u00edfico como optimizaci\u00f3n, \u00e1lgebra lineal, integraci\u00f3n y ecuaciones diferenciales, entre otras operaciones.\nPandas, biblioteca que permite el an\u00e1lisis de datos a trav\u00e9s de series y dataframes.\nPyomo, colecci\u00f3n de paquetes de software de Python para formular modelos de optimizaci\u00f3n\nScikit-learn, biblioteca que implementa algoritmos de aprendizaje autom\u00e1tico.", "subsections": []}, {"name": "Referencias", "text": "\u2191 \u00abChangelog - Python Documentation\u00bb. python.org. Consultado el 2 de mayo de 2024.\u00a0\n\u2191 \u00abChangelog - Python Documentation\u00bb. python.org. Consultado el 2 de mayo de 2024.\u00a0\n\u2191 a b History and License\n\u2191 \u00abTIOBE Index - TIOBE\u00bb. www.tiobe.com. Consultado el 1 de mayo de 2023.\u00a0\n\u2191 a b \u00abartima - The Making of Python\u00bb. www.artima.com. Consultado el 2 de mayo de 2023.\u00a0\n\u2191 a b \u00abWhy was Python created in the first place?\u00bb. General Python FAQ.\u00a0\n\u2191 \u00ab1. Whetting Your Appetite\u00bb. Python documentation. Consultado el 2 de mayo de 2023.\u00a0\n\u2191 Tannhausser (12 de julio de 2018). \u00abGuido van Rossum dimite como l\u00edder de Python\u00bb (html). La Mirada del Replicante. Archivado desde el original el 12 de julio de 2018. Consultado el 21 de julio de 2018. \u00abComo veis no solo transfiere el poder, sino que evita designar sucesor y deja en manos de los corel developers la tarea de organizar como ser\u00e1 la transici\u00f3n, as\u00ed como el modelo de gobierno en un futuro.\u00bb\u00a0\n\u2191 van Rossum, Guido (12 de julio de 2018). \u00ab[python-committers] Transfer of power\u00bb (html). Mail Archive Com (en ingl\u00e9s). Archivado desde el original el 12 de julio de 2018. Consultado el 21 de julio de 2018. \u00abI am not going to appoint a successor. So what are you all going to do? Create a democracy? Anarchy? A dictatorship? A federation?\u00bb\u00a0\n\u2191 van Rossum, Guido (20 de enero de 2009). \u00abA Brief Timeline of Python\u00bb. The History of Python (en ingl\u00e9s). Consultado el 14 de febrero de 2021.\u00a0\n\u2191 Chac\u00f3n Sartori, Camilo. Computaci\u00f3n y programaci\u00f3n funcional\u00a0: introducci\u00f3n al c\u00e1lculo lambda y la programaci\u00f3n funcional usando Racket y Python. [Barcelona]: Marcombo. ISBN\u00a08426732437.\u00a0\n\u2191 The fate of reduce() in Python 3000\n\u2191 Computer Programming for Everybody\n\u2191 Index of /cp4e\n\u2191 a b What's New in Python 2.0\n\u2191 PEP 227 -- Statically Nested Scopes\n\u2191 PEPs 252 and 253: Type and Class Changes\n\u2191 PEP 255: Simple Generators\n\u2191 PEP 282 -- A Logging System\n\u2191 threading \u2014 Higher-level threading interface\n\u2191 \u00abSunsetting Python 2\u00bb (en ingl\u00e9s). python.org. 21 de enero de 2020.\u00a0\n\u2191 \u00abPEP 373 -- Python 2.7 Release Schedule\u00bb (en ingl\u00e9s). python.org. 21 de enero de 2020.\u00a0\n\u2191 \u00abPython Developer's Guide \u2014 Python Developer's Guide\u00bb (en ingl\u00e9s). devguide.python.org. 21 de enero de 2020.\u00a0\n\u2191 \u00abasyncio \u2014 E/S as\u00edncrona\u00bb. docs.python.org. Consultado el 19 de marzo de 2023.\u00a0\n\u2191 \u00abMachine Learning (aprendizaje autom\u00e1tico) con Python: una introducci\u00f3n pr\u00e1ctica\u00bb. edX (en ingl\u00e9s). Consultado el 6 de julio de 2020.\u00a0\n\u2191 Rocky. \u00abApplications for Python\u00bb.\u00a0\n\u2191 \"Holand\u00e9s\" hace referencia a Guido van Rossum, el autor del lenguaje de programaci\u00f3n Python, que es holand\u00e9s. Tambi\u00e9n hace referencia a la gran concentraci\u00f3n de desarrolladores holandeses conocidos en relaci\u00f3n con otras nacionalidades.\n\u2191 PEP 20 -- The Zen of Python\n\u2191 \u00abCopia archivada\u00bb. Archivado desde el original el 4 de agosto de 2018. Consultado el 25 de febrero de 2010.\u00a0\n\u2191 Python Software Foundation. \u00abMore control flow options\u00bb. Python v2.7.8 Documentation (en ingl\u00e9s). Consultado el 20 de julio de 2014.\u00a0\n\u2191 Eric Huss. \u00abFunction Definition\u00bb. The C Library Reference Guide (en ingl\u00e9s). Archivado desde el original el 18 de enero de 2015. Consultado el 20 de julio de 2014.\u00a0\n\u2191 \u00c1lvarez, Miguel \u00c1ngel (2 de noviembre de 2001). \u00abFunciones en Javascript\u00bb. desarrolloweb.com (en ingl\u00e9s). Consultado el 20 de julio de 2014.\u00a0\n\u2191 David Goodger. \u00abCode Like a Pythonista: Idiomatic Python\u00bb. Python.net (en ingl\u00e9s). Archivado desde el original el 27 de mayo de 2014. Consultado el 20 de julio de 2014.\u00a0\n\u2191  Downey, Allen; Elkner, Jeffrey (1 de abril de 2002). \u00abAprenda a Pensar Como un Programador con Python\u00bb (pdf). Argentina Python. p.\u00a040. Archivado desde el original el 23 de octubre de 2017. Consultado el 21 de marzo de 2020.\u00a0 \n\u2191 \u00ab2. An\u00e1lisis l\u00e9xico\u00bb. Python documentation. docs.python.org. Consultado el 19 de marzo de 2023.\u00a0\n\u2191  Recuero de los Santos, Paloma (13 de mayo de 2020). \u00abPython para todos: Diferencia entre m\u00e9todo y funci\u00f3n\u00bb (html). Archivado desde el original el 14 de mayo de 2020. Consultado el 13 de mayo de 2020.\u00a0 \n\u2191 Encapsulaci\u00f3n en Python\n\u2191 \u00abPython GUI Programming With Tkinter\u00bb. Codelivly. 2022.\u00a0\n\u2191 \u00abPeque\u00f1o paseo por la Biblioteca Est\u00e1ndar\u00bb. Tutorial de Python (y Django!) en Espa\u00f1ol. Archivado desde el original el 15 de septiembre de 2017. Consultado el 16 de agosto de 2017.\u00a0\n\u2191 \u00abLa Biblioteca Est\u00e1ndar de Python\u00bb. docs.python.org. Consultado el 26 de abril de 2021.\u00a0\n\u2191 Python 3.0.1\n\u2191 PEP 3000 -- Python 3000\n\u2191 2to3 - Automated Python 2 to 3 code translation\n\u2191  Novedades de Python 3.0\n\u2191  Dower, Steve (21 de mayo de 2019). \u00abWho put Python in the Windows 10 May 2019 Update?\u00bb (html). Microsoft Blog (en ingl\u00e9s). Consultado el 23 de mayo de 2019.\u00a0 \nError en la cita: La etiqueta <ref> definida en las <references> con nombre \u00abGlosario LUCA, 2020\u00bb no se utiliza en el texto anterior.", "subsections": []}, {"name": "Bibliograf\u00eda", "text": "Knowlton, Jim (2009). Python. tr: Fern\u00e1ndez V\u00e9lez, Mar\u00eda Jes\u00fas (1 edici\u00f3n). Anaya Multimedia-Anaya Interactiva. ISBN\u00a0978-84-415-2513-9.\u00a0\nMartelli, Alex (2007). Python. Gu\u00eda de referencia. tr: Gorj\u00f3n Salvador, Bruno (1 edici\u00f3n). Anaya Multimedia-Anaya Interactiva. ISBN\u00a0978-84-415-2317-3.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": "Wikilibros: Pytho", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/ABC_(lenguaje_de_programaci%C3%B3n)", "title": "ABC (lenguaje de programaci\u00f3n)", "summary": "ABC es un lenguaje de programaci\u00f3n imperativo de prop\u00f3sito general y entorno de programaci\u00f3n desarrollado en el Centrum Wiskunde & Informatica de Pa\u00edses Bajos por Leo Geurts, Lambert Meertens y Steven Pemberton. Es interactivo, estructurado, de alto nivel y est\u00e1 pensado para ser utilizado en lugar de BASIC, Pascal o AWK. No pretende ser un lenguaje de programaci\u00f3n de sistemas, sino que est\u00e1 destinado a la ense\u00f1anza o la creaci\u00f3n de prototipos.\nEl lenguaje tuvo una gran influencia en el dise\u00f1o del lenguaje de programaci\u00f3n Python; Guido van Rossum, quien desarroll\u00f3 Python, trabaj\u00f3 anteriormente durante varios a\u00f1os en el sistema ABC a mediados de los a\u00f1os ochenta.[1]\u200b[2]\u200b", "sections": [{"name": "Caracter\u00edsticas", "text": "Sus dise\u00f1adores afirman que los programas ABC suelen tener alrededor de una cuarta parte del tama\u00f1o de los programas equivalentes de Pascal o C, y son m\u00e1s legibles. Las caracter\u00edsticas clave incluyen:\nSolo cinco tipos de datos b\u00e1sicos\nNo requiere declaraci\u00f3n de variables.\nSoporte expl\u00edcito para programaci\u00f3n top-down.\nLa anidaci\u00f3n de instrucciones se indica mediante sangr\u00eda, a trav\u00e9s de la regla de fuera de juego.\nPrecisi\u00f3n arbitraria, Listas y cadenas de tama\u00f1o ilimitado, y otras caracter\u00edsticas que admiten la ortogonalidad y la facilidad de uso para los principiantes.\nComo sucede con otros int\u00e9rpretes, ABC es, adem\u00e1s de un lenguaje de programaci\u00f3n, un entorno interactivo de trabajo. No requiere de declaraciones de variables, cuenta con el apoyo de la programaci\u00f3n top-down. Proporciona una precisi\u00f3n aritm\u00e9tica infinita, ilimitada listas de cadenas, y otras caracter\u00edsticas que da gran facilidad al uso de los principiantes. Sus dise\u00f1adores afirman que los programas de ABC son t\u00edpicamente alrededor de una cuarta parte del tama\u00f1o de los programas equivalentes en lenguaje Pascal o en lenguaje C, y adem\u00e1s es m\u00e1s legible. \nOriginalmente fue una aplicaci\u00f3n monol\u00edtica, dando lugar a una incapacidad para adaptarse a las nuevas exigencias, como la creaci\u00f3n de una interfaz gr\u00e1fica de usuario. Con ABC no se pod\u00eda acceder directamente al sistema de archivos subyacente y el sistema operativo. \nIncluye un entorno de programaci\u00f3n con sintaxis de edici\u00f3n-dirigida, sugerencias, variables persistentes y m\u00faltiples espacios de trabajo. \nABC est\u00e1 disponible como un int\u00e9rprete / compilador, actualmente en la versi\u00f3n 1.05.02. Adem\u00e1s ha sido portado a Unix, DOS, Atari, y Apple Macintosh.\nABC tambi\u00e9n tuvo una gran influencia en el dise\u00f1o del lenguaje de programaci\u00f3n Python, Guido van Rossum, quien desarroll\u00f3 Python, que anteriormente trabaj\u00f3 durante varios a\u00f1os en el sistema ABC a principios de los a\u00f1os 1980.", "subsections": []}, {"name": "Ejemplo", "text": "Un ejemplo del lenguaje, de una funci\u00f3n para recoger el conjunto de todas las palabras de un documento:", "subsections": []}, {"name": "Referencias", "text": "\u2191 The A-Z of Programming Languages: Python (enlace roto disponible en Internet Archive; v\u00e9ase el historial, la primera versi\u00f3n y la \u00faltima)..\n\u2191 An Interview with Guido van Rossum. (enlace roto disponible en Internet Archive; v\u00e9ase el historial, la primera versi\u00f3n y la \u00faltima).", "subsections": [{"name": "Lectura adicional", "text": "ABC Programmer's Handbook\nA Short Introduction to the ABC Langua"}]}]}
{"url": "https://es.wikipedia.org/wiki/Amoeba_(Inform%C3%A1tica)", "title": "Amoeba (sistema operativo)", "summary": "Amoeba es un sistema operativo distribuido de investigaci\u00f3n, basado en una arquitectura de micron\u00facleo. Fue desarrollado por Andrew S. Tanenbaum y otros en la Universidad Libre de \u00c1msterdam. El objetivo del proyecto Amoeba era construir un sistema de tiempo compartido que hiciera que una red entera de computadores pareciera a los ojos de un usuario como una m\u00e1quina \u00fanica.\nLos servicios suministrados por el n\u00facleo incluyen threads, segmentos de memoria, mecanismos de IPC (RPCs y mensajes) y E/S [160]. \nEl desarrollo parece detenido, dado que la fecha de la \u00faltima modificaci\u00f3n en el c\u00f3digo data de febrero de 2001.\nExisten versiones para varias plataformas, incluyendo i386, Sun-3 y SPARC.\nEl lenguaje de programaci\u00f3n Python fue originalmente desarrollado para esta plataforma.", "sections": [{"name": "Enlaces externos", "text": "P\u00e1gina oficial de Amoeba (en ingl\u00e9s)", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Apache_Software_Foundation", "title": "Apache Software Foundation", "summary": "\u00a0\nApache Software Foundation (ASF) es una organizaci\u00f3n sin fines de lucro (una fundaci\u00f3n) creada para dar soporte a los proyectos de software bajo la denominaci\u00f3n Apache, incluyendo el popular servidor HTTP Apache. La ASF se form\u00f3 a partir del llamado Grupo Apache y fue registrada en Delaware (Estados Unidos), en marzo de 1996.[1]\u200b\nApache Software Foundation es una comunidad descentralizada de desarrolladores que trabajan cada uno en sus propios proyectos de c\u00f3digo abierto. Los proyectos Apache se caracterizan por un modelo de desarrollo basado en el consenso y la colaboraci\u00f3n y en una licencia de software abierta y pragm\u00e1tica. Cada proyecto es gestionado por un grupo autoseleccionado de expertos t\u00e9cnicos que son participantes activos en dicho proyecto. La ASF es una meritocracia, de lo que se deriva que la pertenencia a la fundaci\u00f3n se permite solo a voluntarios que hayan contribuido significativamente a proyectos Apache.\nEntre los objetivos de la ASF se encuentran el de proporcionar protecci\u00f3n legal a los voluntarios que trabajan en proyectos Apache, y al propio nombre Apache de ser empleado por otras organizaciones. El proyecto Apache es el origen de la Licencia Apache y de todas las licencias que siguen un esquema similar (llamadas licencias \"estilo Apache\").", "sections": [{"name": "Financiaci\u00f3n", "text": "Entre los patrocinadores conocidos se cuentan Google, Yahoo, Microsoft, Hewlett-Packard, Covalent, IONA, AirPlus International, BlueNog, Intuit, Joost, Matthew Mullenweg, Two Sigma Investments.\nLa propia Apache Software Foundation clasifica a estos patrocinadores en diferentes categor\u00edas:[2]\u200b\nLos patrocinadores reciben diversos tipos de apoyo por parte de la Apache Software Foundation (p.ej. \"comunicados de prensa conjuntos\"), siendo nombrados y honrados en las p\u00e1ginas web de la fundaci\u00f3n.", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Anexo:Proyectos de Apache Software Foundation", "subsections": []}, {"name": "Referencias", "text": "\u2191 \u00abApache Software Foundation (ASF) - FdIwiki ELP\u00bb. wikis.fdi.ucm.es. Consultado el 24 de marzo de 2024.\u00a0\n\u2191 Apache Software Foundation: Sponsorship Thanks! (2009, en ingl\u00e9s)", "subsections": []}, {"name": "Enlaces externos", "text": "Proyecto Apache.\nWiki Proyecto Apache.\nConferencias de Apache\n\u00cdndice de Committer\n\u00cdndice de Proyecto", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Aprendizaje_autom%C3%A1tico", "title": "Aprendizaje autom\u00e1tico", "summary": "El aprendizaje autom\u00e1tico (AA); tambi\u00e9n llamado automatizado, computacional o de m\u00e1quinas (del ingl\u00e9s machine learning, ML), es el subcampo de las ciencias de la computaci\u00f3n y una rama de  la inteligencia artificial, cuyo objetivo es desarrollar t\u00e9cnicas que permitan que las computadoras aprendan. Se dice que un agente aprende cuando su desempe\u00f1o mejora con la experiencia y mediante el uso de datos; es decir, cuando la habilidad no estaba presente en su genotipo o rasgos de nacimiento.[1]\u200b \"En el aprendizaje de m\u00e1quinas un computador observa datos, construye un modelo basado en esos datos y utiliza ese modelo a la vez como una hip\u00f3tesis acerca del mundo y una pieza de software que puede resolver problemas\".[2]\u200b\nEn muchas ocasiones el campo de actuaci\u00f3n del aprendizaje autom\u00e1tico se solapa con el de la estad\u00edstica inferencial, ya que las dos disciplinas se basan en el an\u00e1lisis de datos. Sin embargo, el aprendizaje autom\u00e1tico incorpora las preocupaciones de la complejidad computacional de los problemas. Muchos problemas son de clase NP-hard, por lo que gran parte de la investigaci\u00f3n realizada en aprendizaje autom\u00e1tico est\u00e1 enfocada al dise\u00f1o de soluciones factibles a esos problemas. El aprendizaje autom\u00e1tico tambi\u00e9n est\u00e1 estrechamente relacionado con el reconocimiento de patrones. El aprendizaje autom\u00e1tico puede ser visto como un intento de automatizar algunas partes del m\u00e9todo cient\u00edfico mediante m\u00e9todos matem\u00e1ticos. Por lo tanto es un proceso de inducci\u00f3n del conocimiento.\nEl aprendizaje autom\u00e1tico tiene una amplia gama de aplicaciones, incluyendo motores de b\u00fasqueda, diagn\u00f3sticos m\u00e9dicos, detecci\u00f3n de fraude en el uso de tarjetas de cr\u00e9dito, an\u00e1lisis de mercado para los diferentes sectores de actividad, clasificaci\u00f3n de secuencias de ADN, reconocimiento del habla y del lenguaje escrito, juegos y rob\u00f3tica.", "sections": [{"name": "Resumen", "text": "Algunos sistemas de aprendizaje autom\u00e1tico intentan eliminar toda necesidad de intuici\u00f3n o conocimiento experto de los procesos de an\u00e1lisis de datos, mientras otros tratan de establecer un marco de colaboraci\u00f3n entre el experto y la computadora. De todas formas, la intuici\u00f3n humana no puede ser reemplazada en su totalidad, ya que el dise\u00f1ador del sistema ha de especificar la forma de representaci\u00f3n de los datos y los m\u00e9todos de manipulaci\u00f3n y caracterizaci\u00f3n de los mismos.\nSin embargo, las computadoras son utilizadas por todo el mundo con fines tecnol\u00f3gicos muy buenos.", "subsections": [{"name": "Modelos", "text": "El aprendizaje autom\u00e1tico tiene como resultado un modelo para resolver una tarea dada. Entre los modelos se distinguen[3]\u200b\nLos modelos geom\u00e9tricos, construidos en el espacio de instancias y que pueden tener una, dos o m\u00faltiples dimensiones. Si hay un borde de decisi\u00f3n lineal entre las clases, se dice que los datos son linealmente separables. Un l\u00edmite de decisi\u00f3n lineal se define como w * x = t, donde w es un vector perpendicular al l\u00edmite de decisi\u00f3n, x es un punto arbitrario en el l\u00edmite de decisi\u00f3n y t es el umbral de la decisi\u00f3n.\nLos modelos probabil\u00edsticos, que intentan determinar la distribuci\u00f3n de probabilidades descriptora de la funci\u00f3n que enlaza a los valores de las caracter\u00edsticas con valores determinados. Uno de los conceptos claves para desarrollar modelos probabil\u00edsticos es la estad\u00edstica bayesiana.\nLos modelos l\u00f3gicos, que transforman y expresan las probabilidades en reglas organizadas en forma de \u00e1rboles de decisi\u00f3n.\nLos modelos pueden tambi\u00e9n clasificarse como modelos de agrupamiento y modelos de gradiente. Los primeros tratan de dividir el espacio de instancias en grupos. Los segundos, como su nombre lo indican, representan un gradiente en el que se puede diferenciar entre cada instancia. Clasificadores geom\u00e9tricos como las m\u00e1quinas de vectores de apoyo son modelos de gradientes."}]}, {"name": "Tipos de algoritmos", "text": "V\u00e9ase tambi\u00e9n:\nLos diferentes algoritmos de Aprendizaje Autom\u00e1tico se agrupan en una taxonom\u00eda en funci\u00f3n de la salida de los mismos. Algunos tipos de algoritmos son:\nArt\u00edculo principal:\nEl an\u00e1lisis computacional y de rendimiento de los algoritmos de aprendizaje autom\u00e1tico es una rama de la estad\u00edstica conocida como teor\u00eda computacional del aprendizaje.\nEl aprendizaje autom\u00e1tico las personas lo llevamos a cabo de manera autom\u00e1tica ya que es un proceso tan sencillo para nosotros que ni nos damos cuenta de c\u00f3mo se realiza y todo lo que implica. Desde que nacemos hasta que morimos los seres humanos llevamos a cabo diferentes procesos, entre ellos encontramos el de aprendizaje por medio del cual adquirimos conocimientos, desarrollamos habilidades para analizar y evaluar a trav\u00e9s de m\u00e9todos y t\u00e9cnicas as\u00ed como tambi\u00e9n por medio de la experiencia propia. Sin embargo, a las m\u00e1quinas hay que indicarles c\u00f3mo aprender, ya que si no se logra que una m\u00e1quina sea capaz de desarrollar sus habilidades, el proceso de aprendizaje no se estar\u00e1 llevando a cabo, sino que solo ser\u00e1 una secuencia repetitiva.", "subsections": []}, {"name": "T\u00e9cnicas de clasificaci\u00f3n", "text": "", "subsections": [{"name": "\u00c1rboles de decisiones", "text": "Este tipo de aprendizaje usa un \u00e1rbol de decisiones como modelo predictivo. Se mapean observaciones sobre un objeto con conclusiones sobre el valor final de dicho objeto.\nLos \u00e1rboles son estructuras b\u00e1sicas en la inform\u00e1tica. Los \u00e1rboles de atributos son la base de las decisiones.\nUna de las dos formas principales de \u00e1rboles de decisiones es la desarrollada por Quinlan de medir la impureza de la entrop\u00eda en cada rama, algo que primero desarroll\u00f3 en el algoritmo ID3 y luego en el C4.5. Otra de las estrategias se basa en el \u00edndice GINI. El algoritmo de CART es una implementaci\u00f3n de esta estrategia.[5]\u200b"}, {"name": "Reglas de asociaci\u00f3n", "text": "Los algoritmos de reglas de asociaci\u00f3n procuran descubrir relaciones interesantes entre variables. Entre los m\u00e9todos m\u00e1s conocidos se hallan el algoritmo a priori, el algoritmo Eclat y el algoritmo de patr\u00f3n frecuente."}, {"name": "Algoritmos gen\u00e9ticos", "text": "Los algoritmos gen\u00e9ticos son procesos de b\u00fasqueda heur\u00edstica que simulan la selecci\u00f3n natural. Usan m\u00e9todos tales como la mutaci\u00f3n y el cruzamiento para generar nuevas clases que puedan ofrecer una buena soluci\u00f3n a un problema dado."}, {"name": "Redes neuronales artificiales", "text": "Las redes de neuronas artificiales (RNA) son un paradigma de aprendizaje autom\u00e1tico inspirado en las neuronas de los sistemas nerviosos de los animales. Se trata de un sistema de enlaces de neuronas que colaboran entre s\u00ed para producir un est\u00edmulo de salida. Las conexiones tienen pesos num\u00e9ricos que se adaptan seg\u00fan la experiencia. De esta manera, las redes neurales se adaptan a un impulso y son capaces de aprender. La importancia de las redes neurales cay\u00f3 durante un tiempo con el desarrollo de los vectores de soporte y clasificadores lineales, pero volvi\u00f3 a surgir a finales de la d\u00e9cada de 2000 con la llegada del aprendizaje profundo."}, {"name": "M\u00e1quinas de vectores de soporte", "text": "Las MVS son una serie de m\u00e9todos de aprendizaje supervisado usados para clasificaci\u00f3n y regresi\u00f3n. Los algoritmos de MVS usan un conjunto de ejemplos de formaci\u00f3n clasificada en dos categor\u00edas para construir un modelo que prediga si un nuevo ejemplo pertenece a una u otra de dichas categor\u00edas."}, {"name": "Algoritmos de agrupamiento", "text": "El an\u00e1lisis por agrupamiento (clustering en ingl\u00e9s) es la clasificaci\u00f3n de observaciones en subgrupos \u2014clusters\u2014 para que las observaciones en cada grupo se asemejen entre s\u00ed seg\u00fan ciertos criterios. \nLas t\u00e9cnicas de agrupamiento hacen inferencias diferentes sobre la estructura de los datos; se gu\u00edan usualmente por una medida de similitud espec\u00edfica y por un nivel de compactamiento interno (similitud entre los miembros de un grupo) y la separaci\u00f3n entre los diferentes grupos. \nEl agrupamiento es un m\u00e9todo de aprendizaje no supervisado y es una t\u00e9cnica muy popular de an\u00e1lisis estad\u00edstico de datos."}, {"name": "Redes bayesianas", "text": "Una red bayesiana, red de creencia o modelo ac\u00edclico dirigido es un modelo probabil\u00edstico que representa una serie de variables de azar y sus independencias condicionales a trav\u00e9s de un grafo ac\u00edclico dirigido. Una red bayesiana puede representar, por ejemplo, las relaciones probabil\u00edsticas entre enfermedades y s\u00edntomas. Dados ciertos s\u00edntomas, la red puede usarse para calcular las probabilidades de que ciertas enfermedades est\u00e9n presentes en un organismo. Hay algoritmos eficientes que infieren y aprenden usando este tipo de representaci\u00f3n."}]}, {"name": "Conocimiento", "text": "En el aprendizaje autom\u00e1tico podemos obtener 3 tipos de conocimiento, que son:\nLos tres tipos se efect\u00faan durante un proceso de aprendizaje autom\u00e1tico pero la importancia de cada tipo de conocimiento depende de las caracter\u00edsticas de lo que se est\u00e1 tratando de aprender.\nEl aprendizaje es m\u00e1s que una necesidad, es un factor primordial para satisfacer las necesidades de la inteligencia artificial.", "subsections": []}, {"name": "Distinci\u00f3n entre aprendizaje supervisado y no supervisado", "text": "El aprendizaje supervisado se caracteriza por contar con informaci\u00f3n que especifica qu\u00e9 conjuntos de datos son satisfactorios para el objetivo del aprendizaje. Un ejemplo podr\u00eda ser un software que reconoce si una imagen dada es o no la imagen de un rostro: para el aprendizaje del programa tendr\u00edamos que proporcionarle diferentes im\u00e1genes, especificando en el proceso si se trata o no de rostros.\nEn el aprendizaje no supervisado, en cambio, el programa no cuenta con datos que definan qu\u00e9 informaci\u00f3n es satisfactoria o no. El objetivo principal de estos programas suele ser encontrar patrones que permitan separar y clasificar los datos en diferentes grupos, en funci\u00f3n de sus atributos. Siguiendo el ejemplo anterior un software de aprendizaje no supervisado no ser\u00eda capaz de decirnos si una imagen dada es un rostro o no pero s\u00ed podr\u00eda, por ejemplo, clasificar las im\u00e1genes entre aquellas que contienen rostros humanos, de animales, o las que no contienen. La informaci\u00f3n obtenida por un algoritmo de aprendizaje no supervisado debe ser posteriormente interpretada por una persona para darle utilidad.", "subsections": []}, {"name": "Aplicaciones", "text": "Motores de b\u00fasqueda\nDiagn\u00f3stico m\u00e9dico\nDetecci\u00f3n de fraudes con el uso de tarjetas de cr\u00e9dito\nAn\u00e1lisis del mercado de valores\nClasificaci\u00f3n de secuencias de ADN\nIngenier\u00eda de caracter\u00edsticas\nReconocimiento del habla\nRob\u00f3tica\nMiner\u00eda de datos\nBig Data\nPrevisiones de series temporales", "subsections": []}, {"name": "Temas del aprendizaje autom\u00e1tico", "text": "A continuaci\u00f3n se muestran una serie de temas que podr\u00edan formar parte del temario de un curso sobre aprendizaje autom\u00e1tico.\nModelado de funciones de densidad de probabilidad condicionadas: clasificaci\u00f3n y regresi\u00f3n\nRedes neuronales artificiales\n\u00c1rboles de decisi\u00f3n: El aprendizaje por \u00e1rboles de decisi\u00f3n usa un \u00e1rbol de decisi\u00f3n como modelo predictivo que mapea observaciones a conclusiones sobre el valor de un objeto dado.\nModelos de regresi\u00f3n m\u00faltiple no postulados\nRegresi\u00f3n en procesos Gaussianos\nAn\u00e1lisis de discriminantes lineales\nk-vecinos m\u00e1s pr\u00f3ximos\nPerceptr\u00f3n\nFunciones de base radial\nM\u00e1quinas de soporte vectorial\nModelado de funciones de densidad de probabilidad mediante modelos generativos\nAlgoritmo EM\nModelos gr\u00e1ficos, como las redes bayesianas y los campos aleatorios de Markov\nMapeado topogr\u00e1fico generativo\nT\u00e9cnicas de inferencia aproximada\nCadenas de Markov y M\u00e9todo de Montecarlo\nM\u00e9todos variacionales\nOptimizaci\u00f3n: La mayor\u00eda de los m\u00e9todos descritos arriba usan algoritmos de optimizaci\u00f3n o son por s\u00ed mismos instancias de problemas de optimizaci\u00f3n.", "subsections": []}, {"name": "Historia y relaci\u00f3n con otros temas", "text": "El aprendizaje autom\u00e1tico naci\u00f3 de la b\u00fasqueda de inteligencia artificial. Ya en los primeros d\u00edas de la IA como disciplina acad\u00e9mica, algunos investigadores se interesaron en hacer que las m\u00e1quinas aprendiesen. Trataron de resolver el problema con diversos m\u00e9todos simb\u00f3licos, as\u00ed como lo que ellos llamaron 'redes neurales' que eran en general perceptrones y otros modelos b\u00e1sicamente basados en modelos lineares generalizados como se conocen en las estad\u00edsticas.", "subsections": []}, {"name": "Software", "text": "Muchos lenguajes de programaci\u00f3n pueden usarse para implementar algoritmos de aprendizaje autom\u00e1tico. Los m\u00e1s populares para 2015 eran R y Python.[6]\u200b R es muy usado ante todo en el campo acad\u00e9mico, mientras que Python es m\u00e1s popular en la empresa privada. \nEntre los paquetes de software que incluyen algoritmos de aprendizaje automatizado, se hallan los siguientes:", "subsections": [{"name": "Software de c\u00f3digo abierto", "text": "TensorFlow: plataforma multilenguaje y multiplataforma desarrollada por Google y licenciada como Apache 2.\nApache Mahout: plataforma de Java de algoritmos escalables de aprendizaje autom\u00e1tico, en especial en las \u00e1reas de filtro colaborativo, clustering y clasificaci\u00f3n\ndlib: una biblioteca bajo licencia Boost para desarrollar en C++\nELKI: una plataforma para Java con licencia AGPLv3\nEncog\nH2O\nKNIME\nmlpy\nMLPACK\nMOA\nOpenCV\nTortilla JS\nOpenNN\nR: lenguaje de programaci\u00f3n estad\u00edstico con numerosas bibliotecas relacionadas al aprendizaje autom\u00e1tico (e1071, rpart, nnet, randomForest, entre otras)\nRapidMiner\nscikit-learn: biblioteca en Python que interact\u00faa con NumPy y SciPy\nSpark MLlib: una librer\u00eda que forma parte de Apache Spark, una plataforma para computaci\u00f3n de grupos\n Weka: una biblioteca en Java"}, {"name": "Software comercial", "text": "SPSS Modeler\nMathematica\nMATLAB\nMicrosoft Azure Machine Learning\nNeural Designer\nOracle Data Mining\nRCASE\nSTATISTICA\nSAS"}]}, {"name": "Sesgos", "text": "Los algoritmos de aprendizaje autom\u00e1tico a menudo pueden verse afectados por el sesgo que puedan tener los datos (Ver sesgo algoritmico). Por ejemplo, no se podr\u00e1n clasificar todos aquellas entradas de las que no se haya recibido ninguna informaci\u00f3n en la fase de formaci\u00f3n. De hecho, cuando la formaci\u00f3n se realiza con datos clasificados por el ser humano el aprendizaje autom\u00e1tico tiende a crear los mismos sesgos que hay en la sociedad. Algunos ejemplos de esto son cuando en 2015 el algoritmo de Google photos identificaba algunas personas negras con gorilas, o en 2016 cuando el bot de Twitter de Microsoft desarrollo comportamientos racistas y machistas a base de observar el tr\u00e1fico de datos en dicha red social. Por este motivo en los \u00faltimos a\u00f1os ha habido una tendencia a desarrollar m\u00e9todos para aumentar la equidad, es decir, para reducir el sesgo en este tipo algoritmos por parte de los expertos en IA. Citando a Fei-fei Li \"La IA no tiene nada de especial. Se inspira en personas, es creada por personas, y lo m\u00e1s importante impacta en las personas. Es una herramienta muy poderosa que tan solo hemos comenzado a entender, y esa es una gran responsabilidad\" [7]\u200b", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Aprendizaje autom\u00e1tico antag\u00f3nico\nAprendizaje profundo\nDin\u00e1mica de sistemas\nInteligencia artificial\nInteligencia computacional\nInternet de las cosas\nSistema din\u00e1mico\nReconocimiento de patrones\nReglas de asociaci\u00f3n\nRobot aut\u00f3nomo\nEquidad (aprendizaje autom\u00e1tico)\nAblaci\u00f3n (inteligencia artificial)\nOpenAI Codex\nFawkes (software de encubrimiento de im\u00e1genes)\nRed neuronal residual\nHiperpar\u00e1metro (aprendizaje autom\u00e1tico)\nAprendizaje por diferencias temporales\nAprendizaje por conjuntos\nAprendizaje autom\u00e1tico basado en reglas", "subsections": []}, {"name": "Referencias", "text": "\u2191 Russell, Stuart; Norvig, Peter (2009). Inteligencia Artificial: Un Enfoque Moderno (3rd edici\u00f3n). p.\u00a0229.\u00a0\n\u2191 Russell and Norvig (2021). Artificial Intelligence: A Modern Approach (en ingl\u00e9s). Pearson. p.\u00a0651. ISBN\u00a09780134610993.\u00a0\n\u2191 Flach 2012 P\u00e1gs. 20-21\n\u2191 Sutton, Richard S., Barto, Andrew G. Reinforcement Learning: An Introduction. The MIT Press.\u00a0\n\u2191 Flach 2012 P\u00e1gs. 155-156\n\u2191 Four main languages for analytics and data mining science (KD Nuggets)\n\u2191 \u00abFei-Fei Li's Quest to Make Machines Better for Humanity\u00bb. Wired (en ingl\u00e9s). ISSN\u00a01059-1028. Consultado el 17 de diciembre de 2019.\u00a0", "subsections": []}, {"name": "Bibliograf\u00eda", "text": "Bishop, Christopher (2008) Pattern Recognition and Machine Learning. Springer Verlag. ISBN=978-0-3873-1073-2.\nFlach, Peter (2012) Machine Learning: The Art and Science of Algorithms that Make Sense of Data. Cambridge University Press. ISBN 978-1-107-42222-3.\nGollapudi, Sunila (2016) Practical Machine Learning. Packt Publishing. ISBN=978-1-78439-968-4.\nIan H. Witten and Eibe Frank (2011). Data Mining: Practical machine learning tools and techniques Morgan Kaufmann, 664 p\u00e1g., ISBN 978-0-12-374856-0.\nMitchell, T. (1997). Machine Learning, McGraw Hill. ISBN 0-07-042807-7\nRaschka, Sebastian (2015). Python Machine Learning, Packt Open Source. ISBN 978-1-78355-513-0", "subsections": []}, {"name": "Enlaces externos", "text": "Ejemplos pr\u00e1cticos de Machine Learning en Espa\u00f1ol\nBlog sobre Aprendizaje Autom\u00e1tico - La biblia del Machine Learning\nEl Machine Learning cambiar\u00e1 el mundo\nMachine Learning Development with Perl (en ingl\u00e9s)\nEstudio y aplicaci\u00f3n de t\u00e9cnicas de aprendizaje autom\u00e1tico orientadas al \u00e1mbito m\u00e9dico: estimaci\u00f3n y explicaci\u00f3n de predicciones individuales. Universidad Aut\u00f3noma de Madrid\nAlphaGo Archivado el 4 de febrero de 2018 en Wayback Machine.\nMachine Learning explicado (podcast)\nMachine Learning: Selecci\u00f3n de m\u00e9tricas de clasificaci\u00f3n (en espa\u00f1ol", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Asincron%C3%ADa", "title": "Asincron\u00eda", "summary": "Busca fuentes: \u00abAsincron\u00eda\u00bb \u2013 noticias\u00a0\u00b7 libros\u00a0\u00b7 acad\u00e9mico\u00a0\u00b7 im\u00e1genes\nEl t\u00e9rmino \"Asincron\u00eda\" hace referencia al suceso que no tiene lugar en total correspondencia temporal con otro suceso.\nPor ejemplo, podemos hablar de motor as\u00edncrono a aquel cuya velocidad de rotaci\u00f3n no corresponde con la frecuencia de corriente alterna que lo hace funcionar.\nDos se\u00f1ales son as\u00edncronas o no est\u00e1n sincronizadas, cuando sus correspondientes instantes significativos no coinciden. \nDe esta manera, podremos saber una asincronidad bas\u00e1ndonos en la ley de ohm.\nModo de transmisi\u00f3n de datos en el que el instante de emisi\u00f3n de cada car\u00e1cter o bloque de caracteres se fija arbitrariamente, sincronizando con Start-Stop.\nEn educaci\u00f3n a distancia (EaD), la asincron\u00eda se refiere a actividades que no requieren la conexi\u00f3n simult\u00e1nea del facilitador y los participantes, sino que cada quien participa en su propio tiempo. \nUn ejemplo son los foros as\u00edncronos, en los cuales todos participan en la conversaci\u00f3n, pero en diferentes momentos.\nEl bloger", "sections": []}
{"url": "https://es.wikipedia.org/wiki/Base_de_datos", "title": "Base de datos", "summary": "Busca fuentes: \u00abBase de datos\u00bb \u2013 noticias\u00a0\u00b7 libros\u00a0\u00b7 acad\u00e9mico\u00a0\u00b7 im\u00e1genes\nUna base de datos (del ingl\u00e9s: database) se encarga no solo de almacenar datos, sino tambi\u00e9n de conectarlos entre s\u00ed en una unidad l\u00f3gica. En t\u00e9rminos generales, una base de datos es un conjunto de datos estructurados que pertenecen a un mismo contexto y, en cuanto a su funci\u00f3n, se utiliza para administrar de forma electr\u00f3nica grandes cantidades de informaci\u00f3n.[1]\u200b En este sentido; una biblioteca puede considerarse una base de datos compuesta en su mayor\u00eda por documentos y textos impresos en papel e indexados para su consulta. Actualmente, y debido al desarrollo tecnol\u00f3gico de campos como la inform\u00e1tica y la electr\u00f3nica, la mayor\u00eda de las bases de datos est\u00e1n en formato digital, siendo este un componente electr\u00f3nico; por tanto, se ha desarrollado y se ofrece un amplio rango de soluciones al problema del almacenamiento de datos.\nEn las bases de datos, los datos deben estar estructurados e interrelacionados seg\u00fan un modelo que refleje el m\u00e1ximo contenido sem\u00e1ntico. Esto significa que los datos se integran, estructuran, relacionan y comparten, y las interrelaciones deben almacenarse junto con los datos, lo que es una diferencia esencial en comparaci\u00f3n con los archivos donde las interrelaciones no se almacenan. La redundancia de datos debe controlarse para evitar duplicidades perjudiciales, aunque se admite la redundancia f\u00edsica por motivos de eficiencia. En resumen, no debe existir redundancia l\u00f3gica en las bases de datos.\nHay programas denominados sistemas gestores de bases de datos, abreviado SGBD (del ingl\u00e9s Database Management System o DBMS), que permiten almacenar y posteriormente acceder a los datos de forma r\u00e1pida y estructurada. Las propiedades de estos DBMS, as\u00ed como su utilizaci\u00f3n y administraci\u00f3n, se estudian dentro del \u00e1mbito de la inform\u00e1tica.\nLas aplicaciones m\u00e1s usuales son para la gesti\u00f3n de empresas e instituciones p\u00fablicas. Tambi\u00e9n son ampliamente utilizadas en entornos cient\u00edficos con el objeto de almacenar la informaci\u00f3n experimental.\nAunque las bases de datos pueden contener muchos tipos de datos, algunos de ellos se encuentran mutuamente protegidos por las leyes de varios pa\u00edses. Por ejemplo en Espa\u00f1a, los datos personales se encuentran protegidos por la Ley Org\u00e1nica de Protecci\u00f3n de Datos de Car\u00e1cter Personal (LOPD), en M\u00e9xico por la Ley Federal de Transparencia y Acceso a la Informaci\u00f3n P\u00fablica Gubernamental y en Argentina por la Ley de Protecci\u00f3n de Datos Personales.[2]\u200b\nEn Argentina, el C\u00f3digo Penal sanciona ciertas conductas relacionadas con una base de datos: acceder ileg\u00edtimamente a un banco de datos personales, proporcionar o revelar informaci\u00f3n registrada en un archivo o en un banco de datos personales cuyo secreto estuviere obligado a guardar por ley o insertar o hacer insertar datos en un archivo de datos personales. Si el autor es funcionario p\u00fablico, sufre adem\u00e1s pena de inhabilitaci\u00f3n especial.", "sections": [{"name": "Clasificaci\u00f3n de bases de datos", "text": "Las bases de datos pueden clasificarse de varias maneras, de acuerdo con el contexto que se est\u00e9 manejando, la utilidad de las mismas o las necesidades que satisfagan.", "subsections": [{"name": "Seg\u00fan la variabilidad de la base de datos", "text": "Bases de datos est\u00e1ticas\nSon bases de datos \u00fanicamente de lectura, utilizadas principalmente para almacenar datos hist\u00f3ricos que posteriormente se pueden utilizar para estudiar el comportamiento de un conjunto de datos a trav\u00e9s del tiempo, realizar proyecciones, tomar decisiones y realizar an\u00e1lisis de datos para inteligencia empresarial.\nBases de datos din\u00e1micas\nSon bases de datos donde la informaci\u00f3n almacenada se modifica con el tiempo, permitiendo operaciones como actualizaci\u00f3n, borrado y edici\u00f3n de datos, adem\u00e1s de las operaciones fundamentales de consulta. Un ejemplo puede ser la base de datos utilizada en un sistema de informaci\u00f3n de un supermercado.[3]\u200b "}, {"name": "Seg\u00fan el contenido", "text": "Bases de datos bibliogr\u00e1ficas\nSolo contienen una subrogante (representante) de la fuente primaria, que permite localizarla. Un registro t\u00edpico de una base de datos bibliogr\u00e1fica contiene informaci\u00f3n sobre el autor, fecha de publicaci\u00f3n, editorial, t\u00edtulo, edici\u00f3n, de una determinada publicaci\u00f3n, etc. Puede contener un resumen o extracto de la publicaci\u00f3n original, pero nunca el texto completo, porque si no, estar\u00edamos en presencia de una base de datos a texto completo (o de fuentes primarias \u2014ver m\u00e1s abajo). Como su nombre lo indica, el contenido son cifras o n\u00fameros. Por ejemplo, una colecci\u00f3n de resultados de an\u00e1lisis de laboratorio, ayuda mucho a la redundancia de datos.\nBases de datos de texto completo\nAlmacenan las fuentes primarias, como por ejemplo, todo el contenido de todas las ediciones de una colecci\u00f3n de revistas cient\u00edficas.\nDirectorios\nUn ejemplo son las gu\u00edas telef\u00f3nicas en formato electr\u00f3nica.\nEstos directorios se pueden clasificar en dos grandes tipos dependiendo de si son personales o empresariales (llamadas p\u00e1ginas blancas o amarillas respectivamente).\nLos directorios empresariales hay de tres tipos:\nTienen nombre de la empresa y direcci\u00f3n.\nContienen tel\u00e9fono y los m\u00e1s avanzados contienen correo electr\u00f3nico.\nContienen datos como facturaci\u00f3n o n\u00famero de empleados adem\u00e1s de c\u00f3digos nacionales que ayudan a su distinci\u00f3n.\nLos directorios personales solo hay de un tipo, ya que leyes como la LOPD en Espa\u00f1a protege la privacidad de los usuarios pertenecientes al directorio.\nLa b\u00fasqueda inversa est\u00e1 prohibida en los directorios personales (a partir de un n\u00famero de tel\u00e9fono saber el titular de la l\u00ednea).\nBases de datos o \"bibliotecas\" de informaci\u00f3n qu\u00edmica o biol\u00f3gica\nSon bases de datos que almacenan diferentes tipos de informaci\u00f3n proveniente de la qu\u00edmica, las ciencias de la vida o m\u00e9dicas.\nSe pueden considerar en varios subtipos:\nLas que almacenan secuencias de nucle\u00f3tidos o prote\u00ednas.\nLas bases de datos de rutas metab\u00f3licas.\nBases de datos de estructura, comprende los registros de datos experimentales sobre estructuras 3D de biomol\u00e9culas.\nBases de datos cl\u00ednicas.\nBases de datos bibliogr\u00e1ficas (biol\u00f3gicas, qu\u00edmicas, m\u00e9dicas y de otros campos): PubChem, Medline, EBSCOhost."}]}, {"name": "Sistema de Administraci\u00f3n de Bases de Datos (DBMS)", "text": "Las bases de datos requieren de un software  que permita la administraci\u00f3n de dicha base de datos. Estos programas especializados sirven como interfaz para que los usuarios puedan, administrar como se estructura y optimiza toda la informaci\u00f3n recopilada. Un sistema de administraci\u00f3n de bases de datos  tambi\u00e9n permite un gran n\u00famero de operaciones relacionadas con la administraci\u00f3n, tal como, supervisar  la productividad, ajustes,  backups y restauraci\u00f3n de los datos .\nEntre los gestores de bases de datos o DBMS m\u00e1s conocidos se encuentran Microsoft SQL Server, MySQL, Oracle Database, Microsoft Access, FileMaker y dBASE.[4]\u200b", "subsections": []}, {"name": "Diferencias entre bases de datos y hojas de c\u00e1lculo", "text": "Las bases de datos y las hojas de c\u00e1lculo (por ejemplo las hojas de c\u00e1lculo de los paquetes de ofim\u00e1tica) son formas convenientes de almacenar informaci\u00f3n. Las principales diferencias entre ambas son:[5]\u200b\nLa forma de manipular y guardar la informaci\u00f3n.\nLa cantidad de datos que se pueden almacenar.\nLa accesibilidad a esos datos almacenados.\nLas hojas de c\u00e1lculo desde sus comienzos fueron dise\u00f1adas para un usuario, y puede ser observado en sus caracter\u00edsticas. Son excelentes para uno o un peque\u00f1o n\u00famero de usuarios que no necesitan utilizar un gran volumen de datos complejos. Las bases de datos, por otro lado, fueron creadas para almacenar gran cantidad de informaci\u00f3n organizada, enormes cantidades en ocasiones. Las bases de datos permiten consultas multiusuario, que permite acceder y consultar los datos de forma r\u00e1pida y segura a muchos usuarios al mismo tiempo, utilizando una l\u00f3gica y un lenguaje altamente complejos.[5]\u200b", "subsections": []}, {"name": "Modelos de bases de datos", "text": "Adem\u00e1s de la clasificaci\u00f3n por la funci\u00f3n de las bases de datos, estas tambi\u00e9n se pueden clasificar de acuerdo a su modelo de administraci\u00f3n de datos.\nUn modelo de datos es b\u00e1sicamente una \"descripci\u00f3n\" de algo conocido como contenedor de datos (algo en donde se guardan los datos), as\u00ed como de los m\u00e9todos para almacenar y recuperar datos de esos contenedores. Los modelos de datos no son cosas f\u00edsicas: son abstracciones que permiten la implementaci\u00f3n de un sistema eficiente de base de datos; por lo general se refieren a algoritmos, y conceptos matem\u00e1ticos.\nAlgunos modelos con frecuencia utilizados en las bases de datos:", "subsections": [{"name": "Bases de datos jer\u00e1rquicas", "text": "Art\u00edculo principal:\nEn este modelo los datos se organizan en forma de \u00e1rbol invertido (algunos dicen ra\u00edz), en donde un nodo padre de informaci\u00f3n puede tener varios hijos. El nodo que no tiene padres es llamado ra\u00edz, y a los nodos que no tienen hijos se los conoce como hojas.\nLas bases de datos jer\u00e1rquicas son especialmente \u00fatiles en el caso de aplicaciones que manejan un gran volumen de informaci\u00f3n y datos muy compartidos permitiendo crear estructuras estables y de gran rendimiento.\nUna de las principales limitaciones de este modelo es su incapacidad de representar eficientemente la redundancia de datos."}, {"name": "Base de datos de red", "text": "Este es un modelo ligeramente distinto del jer\u00e1rquico; su diferencia fundamental es la modificaci\u00f3n del concepto de nodo: se permite que un mismo nodo tenga varios padres (posibilidad no permitida en el modelo jer\u00e1rquico). \nFue una gran mejora con respecto al modelo jer\u00e1rquico, ya que ofrec\u00eda una soluci\u00f3n eficiente al problema de redundancia de datos; pero, aun as\u00ed, la dificultad que significa administrar la informaci\u00f3n en una base de datos de red ha significado que sea un modelo utilizado en su mayor\u00eda por programadores m\u00e1s que por usuarios finales."}, {"name": "Bases de datos transaccionales", "text": "Son bases de datos cuyo \u00fanico fin es el env\u00edo y recepci\u00f3n de datos a grandes velocidades, estas bases son muy poco comunes y est\u00e1n dirigidas por lo general al entorno de an\u00e1lisis de calidad, datos de producci\u00f3n e industrial, es importante entender que su fin \u00fanico es recolectar y recuperar los datos a la mayor velocidad posible, por lo tanto la redundancia y duplicaci\u00f3n de informaci\u00f3n no es un problema como con las dem\u00e1s bases de datos, por lo general para poderlas aprovechar al m\u00e1ximo permiten alg\u00fan tipo de conectividad a bases de datos relacionales.\nUn ejemplo habitual de transacci\u00f3n es el traspaso de una cantidad de dinero entre cuentas bancarias. Normalmente se realiza mediante dos operaciones distintas, una en la que se debita el saldo de la cuenta origen y otra en la que acreditamos el saldo de la cuenta destino. Para garantizar la atomicidad del sistema (es decir, para que no aparezca o desaparezca dinero), las dos operaciones deben ser at\u00f3micas, es decir, el sistema debe garantizar que, bajo cualquier circunstancia (incluso una ca\u00edda del sistema), el resultado final es que, o bien se han realizado las dos operaciones, o bien no se ha realizado ninguna."}, {"name": "Bases de datos relacionales", "text": "Este es el modelo utilizado en la actualidad para representar problemas reales y administrar datos din\u00e1micamente. Tras ser postulados sus fundamentos en 1970 por Edgar Frank Codd,[6]\u200b de los laboratorios IBM en San Jos\u00e9 (California), no tard\u00f3 en consolidarse como un nuevo paradigma en los modelos de base de datos. Su idea fundamental es el uso de \"relaciones\". Estas relaciones podr\u00edan considerarse en forma l\u00f3gica como conjuntos de datos llamados \"tuplas\". Pese a que esta es la teor\u00eda de las bases de datos relacionales creadas por Codd, la mayor\u00eda de las veces se conceptualiza de una manera m\u00e1s f\u00e1cil de imaginar. Esto es pensando en cada relaci\u00f3n como si fuese una tabla que est\u00e1 compuesta por registros (las filas de una tabla), que representar\u00edan las tuplas, y campos (las columnas de una tabla).\nEn este modelo, el lugar y la forma en que se almacenen los datos no tienen relevancia (a diferencia de otros modelos como el jer\u00e1rquico y el de red). Esto tiene la considerable ventaja de que es m\u00e1s f\u00e1cil de entender y de utilizar para un usuario espor\u00e1dico de la base de datos. La informaci\u00f3n puede ser recuperada o almacenada mediante \"consultas\" que ofrecen una amplia flexibilidad y poder para administrar la informaci\u00f3n.\nEl lenguaje m\u00e1s habitual para construir las consultas a bases de datos relacionales es SQL, Structured Query Language o Lenguaje Estructurado de Consultas, un est\u00e1ndar implementado por los principales motores o sistemas de gesti\u00f3n de bases de datos relacionales.\nDurante su dise\u00f1o, una base de datos relacional pasa por un proceso al que se le conoce como normalizaci\u00f3n de una base de datos."}, {"name": "Bases de datos multidimensionales", "text": "Son bases de datos ideadas para desarrollar aplicaciones muy concretas, como creaci\u00f3n de Cubos OLAP. B\u00e1sicamente no se diferencian demasiado de las bases de datos relacionales (una tabla en una base de datos relacional podr\u00eda serlo tambi\u00e9n en una base de datos multidimensional), la diferencia est\u00e1 m\u00e1s bien a nivel conceptual; en las bases de datos multidimensionales los campos o atributos de una tabla pueden ser de dos tipos, o bien representan dimensiones de la tabla, o bien representan m\u00e9tricas que se desean aprender."}, {"name": "Bases de datos orientadas a objetos", "text": "Este modelo, bastante reciente, y propio de los modelos inform\u00e1ticos orientados a objetos, trata de almacenar en la base de datos los objetos completos (estado y comportamiento). \nUna base de datos orientada a objetos es una base de datos que incorpora todos los conceptos importantes del paradigma de objetos:\nEncapsulaci\u00f3n - Propiedad que permite ocultar la informaci\u00f3n al resto de los objetos, impidiendo as\u00ed accesos incorrectos o conflictos.\nHerencia - Propiedad a trav\u00e9s de la cual los objetos heredan comportamiento dentro de una jerarqu\u00eda de clases.\nPolimorfismo - Propiedad de una operaci\u00f3n mediante la cual puede ser aplicada a distintos tipos de objetos.\nEn bases de datos orientadas a objetos, los usuarios pueden definir operaciones sobre los datos como parte de la definici\u00f3n de la base de datos. Una operaci\u00f3n (llamada funci\u00f3n) se especifica en dos partes. La interfaz (o signatura) de una operaci\u00f3n incluye el nombre de la operaci\u00f3n y los tipos de datos de sus argumentos (o par\u00e1metros). La implementaci\u00f3n (o m\u00e9todo) de la operaci\u00f3n se especifica separadamente y puede modificarse sin afectar la interfaz. Los programas de aplicaci\u00f3n de los usuarios pueden operar sobre los datos invocando a dichas operaciones a trav\u00e9s de sus nombres y argumentos, sea cual sea la forma en la que se han implementado. Esto podr\u00eda denominarse independencia entre programas y operaciones.\nSQL:2003, es el est\u00e1ndar de SQL92 ampliado, soporta los conceptos orientados a objetos y mantiene la compatibilidad con SQL92."}, {"name": "Bases de datos documentales", "text": "Permiten la indexaci\u00f3n a texto completo, y en l\u00edneas generales realizar b\u00fasquedas m\u00e1s potentes, sirven para almacenar grandes vol\u00famenes de informaci\u00f3n de antecedentes hist\u00f3ricos.\nTesaurus es un sistema de \u00edndices optimizado para este tipo de bases de datos."}, {"name": "Bases de datos deductivas", "text": "Un sistema de base de datos deductiva, es un sistema de base de datos pero con la diferencia de que permite hacer deducciones a trav\u00e9s de inferencias. Se basa principalmente en reglas y hechos que son almacenados en la base de datos. Las bases de datos deductivas son tambi\u00e9n llamadas bases de datos l\u00f3gicas, a ra\u00edz de que se basa en l\u00f3gica matem\u00e1tica.\nEste tipo de base de datos surge debido a las limitaciones de la base de datos relacional de responder a consultas recursivas y de deducir relaciones indirectas de los datos almacenados en la base de datos.\nLenguaje\nUtiliza un subconjunto del lenguaje Prolog llamado Datalog el cual es declarativo y permite al ordenador hacer deducciones para contestar a consultas bas\u00e1ndose en los hechos y reglas almacenados.\nVentajas\nUso de reglas l\u00f3gicas para expresar las consultas.\nPermite responder consultas recursivas.\nCuenta con negaciones estratificadas\nCapacidad de obtener nueva informaci\u00f3n a trav\u00e9s de la ya almacenada en la base de datos mediante inferencia.\nUso de algoritmos que optimizan las consultas.\nSoporta objetos y conjuntos complejos.\nseguridad e integridad de los datos\neliminaci\u00f3n de datos inservibles r\u00e1pidamente (duplicados, innecesarios datos extras)\nfacilidad en el mantenimiento\nFases\nFase de Interrogaci\u00f3n: se encarga de buscar en la base de datos informaciones deducibles impl\u00edcitas. Las reglas de esta fase se denominan reglas de derivaci\u00f3n.\nFase de Modificaci\u00f3n: se encarga de a\u00f1adir a la base de datos nuevas informaciones deducibles. Las reglas de esta fase se denominan reglas de generaci\u00f3n.\nInterpretaci\u00f3n\nEncontramos dos teor\u00edas de interpretaci\u00f3n de las bases de datos deductiva por lo cual\nconsideramos las reglas y los hechos como axiomas. \nLos hechos son axiomas base que se consideran como verdaderos y no contienen variables.\nLas reglas son axiomas deductivos ya que se utilizan para deducir nuevos hechos.\nTeor\u00eda de Modelos: una interpretaci\u00f3n es llamada modelo cuando para un conjunto espec\u00edfico de reglas, estas se cumplen siempre para esa interpretaci\u00f3n. Consiste en asignar a un predicado todas las combinaciones de valores y argumentos de un dominio de valores constantes dado. A continuaci\u00f3n se debe verificar si ese predicado es verdadero o falso.\nMecanismos\nExisten dos mecanismos de inferencia:\nAscendente: donde se parte de los hechos y se obtiene nuevos aplicando reglas de inferencia.\nDescendente: donde se parte del predicado (objetivo de la consulta realizada) e intenta encontrar similitudes entre las variables que nos lleven a hechos correctos almacenados en la base de datos."}, {"name": "Sistema de Gesti\u00f3n de bases de datos distribuida (SGBD)", "text": "La base de datos y el software SGBD pueden estar distribuidos en m\u00faltiples sitios conectados por una red. Hay de dos tipos:\n1. Distribuidos homog\u00e9neos: utilizan el mismo SGBD en m\u00faltiples sitios.\n2. Distribuidos heterog\u00e9neos: Da lugar a los SGBD federados o sistemas multibase de datos en los que los SGBD participantes tienen cierto grado de autonom\u00eda local y tienen acceso a varias bases de datos aut\u00f3nomas preexistentes almacenados en los SGBD, muchos de estos emplean una arquitectura cliente-servidor.\nEstas surgen debido a la existencia f\u00edsica de organismos descentralizados. Esto les da la capacidad de unir las bases de datos de cada localidad y acceder as\u00ed a distintas universidades, sucursales de tiendas, etc."}, {"name": "Base de datos orientada a grafos", "text": "Una base de datos orientada a grafos (BDOG) representa la informaci\u00f3n como nodos de un grafo y sus relaciones con las aristas del mismo, de manera que se pueda usar teor\u00eda de grafos para recorrer la base de datos ya que esta puede describir atributos de los nodos (entidades) y las aristas (relaciones).\nUna BDOG debe estar absolutamente normalizada, esto quiere decir que cada tabla tendr\u00eda una sola columna y cada relaci\u00f3n tan solo dos, con esto se consigue que cualquier cambio en la estructura de la informaci\u00f3n tenga un efecto solamente local."}]}, {"name": "Otros tipos de base de datos", "text": "En la actualidad, existen muchos tipos de bases de datos, algunas menos comunes adaptadas a funciones financieras, funciones cient\u00edficas y otras funciones altamente espec\u00edficas, todo dependiendo de como va avanzando la tecnolog\u00eda. Entre algunas de ellas se pueden citar:[7]\u200b\nBases de datos en la nube. Una base de datos en la nube es una colecci\u00f3n de datos, pueden ser estructurados o no estructurados, que  se localiza en una plataforma de computaci\u00f3n en la nube privada, p\u00fablica o una combinaci\u00f3n de las dos anteriores (h\u00edbrida). Existen dos modelos de base de datos en la nube: tradicional y database as a service (DBaaS). Con DBaaS, donde las gestiones administrativas y el mantenimiento son realizados por un  proveedor de servicios.\nDe c\u00f3digo abierto. Un sistema de base de datos de c\u00f3digo abierto es aquel cuyo c\u00f3digo fuente es de c\u00f3digo abierto;  podr\u00edan ser bases de datos SQL o NoSQL.\nBase de datos documental/JSON.  para gestionar informaci\u00f3n basada en documentos, las bases de datos documentales son una forma moderna de almacenar datos en formato JSON en lugar de filas y columnas.\nBase de datos multimodelo.  combinan diferentes tipos de modelos de base de datos en un \u00fanico back-end integrado. de este modo  varios tipos de datos pueden convivir en una misma base de datos.\nBases de datos independientes. Las bases de datos independientes, es lo nuevo en base de datos, ( conocidas como bases de datos aut\u00f3nomas), se basan en la nube y utilizan el aprendizaje autom\u00e1tico para automatizar el ajuste, la seguridad, las copias de seguridad, las actualizaciones y otras tareas de administraci\u00f3n de rutina de las bases de datos que tradicionalmente realizan los administradores de bases de datos.[7]\u200b", "subsections": []}, {"name": "Consulta a base de datos", "text": "Una consulta es el m\u00e9todo para acceder a la informaci\u00f3n en las bases de datos. Con las consultas se puede modificar, borrar, mostrar y agregar datos en una base de datos, tambi\u00e9n pueden utilizarse como origen de registro para formularios. Para esto se utiliza un Lenguaje de consulta.\nLas consultas a la base de datos se realizan a trav\u00e9s de un Lenguaje de manipulaci\u00f3n de datos, el lenguaje de consultas a base de datos m\u00e1s utilizado es SQL.", "subsections": []}, {"name": "Investigaci\u00f3n", "text": "La tecnolog\u00eda de bases de datos ha sido un tema de investigaci\u00f3n activo desde la d\u00e9cada de 1960s, en el \u00e1mbito acad\u00e9mico y en los grupos de investigaci\u00f3n y desarrollo de la industria (por ejemplo IBM Research). Las actividades de investigaci\u00f3n incluye teor\u00eda y desarrollo de prototipos. Temas de investigaci\u00f3n notables han incluido modelos de datos, el concepto de transacci\u00f3n at\u00f3mica, t\u00e9cnicas de control de concurrencia, lenguajes de consulta y m\u00e9todos de optimizaci\u00f3n de consultas, RAID y m\u00e1s. El \u00e1rea de investigaci\u00f3n de bases de datos tiene varias revistas acad\u00e9micas dedicadas (por ejemplo, ACM Transactions on Database Systems, Data and Knowledge Engineering-DKE) y conferencias anuales (por ejemplo, ACM SIGMOD, ACM PODS, VLDB, IEEE ICDE).", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Sistema de gesti\u00f3n de base de datos\nModelo relacional, normalizaci\u00f3n de bases de datos\nBase de datos orientada a objetos\nAlmac\u00e9n de datos\nMiner\u00eda de datos\nBase de datos biol\u00f3gica\nBase de datos probabil\u00edstica\nModelo entidad relaci\u00f3n\nBase de datos MNIST", "subsections": []}, {"name": "Referencias", "text": "\u2191 \u00abBases de datos: qu\u00e9 tipos hay y para qu\u00e9 se usan\u00bb. IONOS Digitalguide. Consultado el 19 de abril de 2022.\u00a0\n\u2191 \u00abPROTECCION DE LOS DATOS\u00bb. 4 de octubre de 2000. Consultado el 10 de abril de 2016.\u00a0\n\u2191 Tipos de bases de datos\n\u2191 \u00ab\u00bfQu\u00e9 es un sistema de administraci\u00f3n de base de datos (DBMS)?\u00bb.\u00a0\n\u2191 a b \u00abDiferencias entre Bases de Datos y Hojas de C\u00e1lculo\u00bb.\u00a0\n\u2191 Diego Rafael Llanos Ferraris. Fundamentos de inform\u00e1tica y programaci\u00f3n en C. Paraninfo. ISBN\u00a0978-84-9732-792-3. Consultado el 16 de noviembre de 2017.\u00a0\n\u2191 a b \u00abTipos de Base de Datos\u00bb.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": " Wikimedia Commons alberga una categor\u00eda multimedia sobre Base de datos.\nBase de datos en Open Directory Project\nIntroducci\u00f3n a la Ciencia de Datos y Herramientas de An\u00e1lisis para Investigaci\u00f3n Archivado el 20 de diciembre de 2016 en Wayback Machine.\nDise\u00f1o de bases de datos\n\u00bfQu\u00e9 es la Nube\u00a0", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Benevolent_Dictator_for_Life", "title": "Benevolent Dictator for Life", "summary": "Benevolent Dictator for Life (BDFL) es un t\u00edtulo informal que se otorga a ciertos individuos de la comunidad de desarrolladores de software de c\u00f3digo abierto que tienen la tarea de asignar las directrices generales y, en ciertas situaciones, las decisiones finales dentro del \u00e1mbito de un proyecto. La traducci\u00f3n de Benevolent Dictator for Life es Dictador Benevolente De por vida, lo que conlleva un tanto de informalidad y humor.\nEn 1995 Guido van Rossum, creador de Python, fue la primera persona sobre la que recay\u00f3 dicha distinci\u00f3n.[1]\u200b[2]\u200b\nEl t\u00e9rmino \"Benevolent Dictator for Life\" fue acu\u00f1ado por el programador de Python, Guido van Rossum, quien se autodesign\u00f3 como \"BDFL\" para el desarrollo de Python. En la comunidad del software libre, el papel del BDFL es visto como una forma efectiva de tomar decisiones r\u00e1pidas y unificadas, lo que permite que un proyecto crezca y evolucione de manera m\u00e1s eficiente.\nSin embargo, tambi\u00e9n hay cr\u00edticas al concepto de BDFL, ya que algunas personas argumentan que el control absoluto de una sola persona puede limitar la creatividad y la innovaci\u00f3n del proyecto. Adem\u00e1s, la naturaleza del BDFL puede crear una dependencia insalubre en una sola persona, lo que puede ser perjudicial para el proyecto a largo plazo.\nN\u00f3tese la diferencia con su significado hist\u00f3rico usado en un contexto pol\u00edtico.[cita\u00a0requerida]", "sections": [{"name": "Lista de algunos BDFLs", "text": "Adrian Bowyer fundador y l\u00edder del proyecto RepRap.\nAdrian Holovaty y Jacob Kaplan-Moss en Django; el 13 de enero de 2014 declinaron de manera impl\u00edcita en el c\u00f3digo fuente del proyecto.[3]\u200b\nAlexandre Julliard mantenedor de Wine (Biblioteca libre de reimplementaci\u00f3n del API de Windows).\nAndrew \"Tridge\" Tridgell en Samba (implementaci\u00f3n libre protocolo NetBios).\nDries Buytaert fundador y l\u00edder del proyecto Drupal (CMS).[4]\u200b[5]\u200b\nFabien Potencier, creador de Symfony.\nGuido van Rossum creador de Python,[1]\u200b[6]\u200b[7]\u200b declin\u00f3 de tal honor el 12 de julio de 2018.[8]\u200b\nHans Reiser en ReiserFS.\nJimbo Wales creador de Wikipedia.\nJosef Drexler en TTDPatch.\nLarry Wall en Perl.[9]\u200b\nDaniel Robbins en Funtoo Linux\nLinus Torvalds creador de Linux kernel.[10]\u200b[9]\u200b\nMark Shuttleworth se llama a s\u00ed mismo el \"Auto-nombrado Dictador Benevolente de por vida\", o SABDFL (del ingl\u00e9s \"Self-Appointed Benevolent Dictator for Life\" y la comunidad de Ubuntu muchas veces usan este nombre para referirse a \u00e9l.[11]\u200b[12]\u200b[9]\u200b\nMatt Mullenweg en WordPress.\nPablo \"Zaskar\" Novara de PSeInt.[13]\u200b\nPatrick Volkerding, creador de Slackware, una distribuci\u00f3n de Linux.[9]\u200b\nRasmus Lerdorf, creador de PHP.[14]\u200b\nTheo de Raadt en el proyecto OpenBSD.[9]\u200b\nTon Roosendaal de Blender (aplicaci\u00f3n modelado 3D).\nTaylor Otwell creador de Laravel.[15]\u200b\nBram Moolenaar, creador de Vim.", "subsections": []}, {"name": "Dictador Benevolente", "text": "Busca fuentes: \u00abBenevolent Dictator for Life\u00bb \u2013 noticias\u00a0\u00b7 libros\u00a0\u00b7 acad\u00e9mico\u00a0\u00b7 im\u00e1genes\nEntendemos por dictador benevolente aquella persona que tiene la autoridad final para la toma de decisiones, por su personalidad o experiencia y la aplica diariamente con un uso racional para el beneficio de una comunidad o de una familia en concreto.\nNo hay que asociar este concepto al t\u00f3pico de dictador que toma las decisiones por la fuerza o sin consenso com\u00fan. Los dictadores benevolentes no toman realmente las decisiones, dejan que las cosas fluyan libremente, esperan un intercambio de ideas, y mediante la experiencia, el razonamiento y la reflexi\u00f3n intentan llegar a un acuerdo. En caso de que no se consiga, el dictador benevolente cuenta con suficiente experiencia para poder tomar una decisi\u00f3n final que beneficiar\u00e1 a la sociedad.[16]\u200b \nPor otro lado, en muchos casos el dictador tendr\u00e1 que delegar responsabilidad en la toma de decisiones en quien considere que est\u00e9 capacitado para ejecutarlo.  \nUna de las caracter\u00edsticas que les une a los dictadores, es su rechazo en la toma de decisiones sin ser consensuada y entendida por todos los miembros de la sociedad, a lo que suelen decir \u201cas\u00ed tiene que ser\u201d, en el sentido de que es lo mejor para ti y para la sociedad porque ya lo he conocido a trav\u00e9s de la experiencia. \nSer dictador benevolente requiere una especial delicadeza a la hora de dirigirse a la comunidad. En primer lugar, cuando comienza la conversaci\u00f3n, el dictador permite que los individuos de la sociedad manifiesten sus opiniones libremente, dejando para el final sus opiniones constructivas para que los miembros de la comunidad no se sientan influenciados. Aunque en algunos casos, el dictador puede equivocarse, pero no por ello pierde su credibilidad. \nEs importante que el dictador sea el emprendedor del proyecto. Que re\u00fana las habilidades, tales como competencia t\u00e9cnica o habilidad de persuadir para poder liderar el proyecto y que los miembros de la sociedad conf\u00eden en tus ideas. As\u00ed el proyecto ser\u00e1 centralizado ya que sus conocimientos y aptitudes son aceptadas por el grupo. Pero en cambio si no hay un candidato con suficiente credibilidad, es mejor que el proyecto se descentralice en la toma de decisiones.", "subsections": []}, {"name": "Referencias", "text": "\u2191 a b Meyer, Robinson (17 de enero de 2014). \u00abOn the Reign of 'Benevolent Dictators for Life' in Software\u00bb (html). The Atlantic (en ingl\u00e9s). Archivado desde el original el 24 de marzo de 2018. Consultado el 21 de julio de 2018. \u00abIn 1995, the programming language Python had a small but growing community. Its leaders established a foundation to support the language\u2014Python\u2019s inventor, Guido van Rossum, had even just moved from the Netherlands to the United States to help the project. So as the foundation established itself\u2014at that point, it and the community were synonymous\u2014it appointed van Rossum the final arbiter of all developmental conflict. He was the first First-Interim Benevolent Dictator For Life.\u00bb\u00a0\n\u2191 van Rossum, Guido (31 de julio de 2008). \u00abOrigin of BDFL\u00bb (html). Artima (en ingl\u00e9s). Archivado desde el original el 23 de junio de 2018. Consultado el 21 de julio de 2018. \u00abWhile I can't prove my title (with or without the First Interim prefix) was never used before, I'm pretty certain that it originated in this meeting.\u00bb\u00a0\n\u2191 Holovaty, Adrian (13 de enero de 2014). \u00abRemoved BDFLs section from docs/internals/committers.txt\u00bb (html). GitHub (en ingl\u00e9s). Archivado desde el original el 21 de julio de 2018. Consultado el 21 de julio de 2018.\u00a0\n\u2191 \u00abDries set to be married!\u00bb.\u00a0\n\u2191 \u00abUrban Dictionary: BDFL\u00bb.\u00a0\n\u2191 Guido van Rossum \u00abBenevolent dictator for life\u00bb. Linux Format. 1 de febrero de 2005. Archivado desde el original el 1 de octubre de 2006. Consultado el 1 de noviembre de 2007.\u00a0 \n\u2191 \u00abThe Four Hundred--Next Up on the System i: Python\u00bb. www.itjungle.com. Consultado el 13 de mayo de 2008.\u00a0\n\u2191 van Rossum, Guido (12 de julio de 2018). \u00ab[python-committers] Transfer of power\u00bb (html). Mail Archive Com (en ingl\u00e9s). Archivado desde el original el 12 de julio de 2018. Consultado el 21 de julio de 2018. \u00abI am not going to appoint a successor. So what are you all going to do? Create a democracy? Anarchy? A dictatorship? A federation?\u00bb\u00a0\n\u2191 a b c d e Tannhausser (12 de julio de 2018). \u00abGuido van Rossum dimite como l\u00edder de Python\u00bb (html). La Mirada del Replicante. Archivado desde el original el 12 de julio de 2018. Consultado el 21 de julio de 2018. \u00abComo os comentaba al principio Guido no es el \u00fanico BDFL (Benevolent Dictator For Life) en el mundo del software libre. Nombres como Linus Torvalds, Theo de Raadt (openBSD), Mark Shuttelworth (Ubuntu), Larry Wall (Perl) o Patrick Vokerding (Slackware) est\u00e1n en la mente de todos.\u00bb\u00a0\n\u2191 Ingo, Henrik (2006). \u00abBenevolent dictator\u00bb. Open Life: The Philosophy of Open Source. ISBN\u00a0978-1-84728-611-6. Archivado desde el original el 6 de julio de 2011. Consultado el 5 de marzo de 2011.\u00a0\n\u2191 \u00abAbout Ubuntu: Governance\u00bb. Canonical Ltd. Consultado el 5 de marzo de 2011.\u00a0\n\u2191 \u00abUbuntu founder defuses rumors of impending Microsoft deal\u00bb. arstechnica.com. Consultado el 13 de mayo de 2008.\u00a0\n\u2191 \u00abZaskar: Ser\u00eda demasiado honor estar en esa lista\u00bb. 10 de marzo de 2014.\u00a0\n\u2191 Marneweck, Jacques (28 de febrero de 2006). \u00abJacques Marneweck's Blog: Rasmus's no-framework PHP MVC framework\u00bb. Powertrip.co.za. Archivado desde el original el 20 de noviembre de 2012. Consultado el 1 de junio de 2011.\u00a0\n\u2191  taylorotwell (9 de octubre de 2014). \u00abthe benefits of BDFL!\u00bb. X (antes Twitter) (tuit).\u00a0 \n\u2191 Meyer, Robinson (17 de enero de 2014). \u00abOn the Reign of 'Benevolent Dictators for Life' in Software\u00bb (html). The Atlantic (en ingl\u00e9s). Archivado desde el original el 24 de marzo de 2018. Consultado el 21 de julio de 2018. \u00abWhen a software platform goes truly open-source, it\u2019s entrusted to the community that runs it. Going forward, volunteer programmers (usually) must make all the decisions about which features should be added, which should be cut, and when all that should happen. (...) But what happens if a consensus doesn\u2019t form? What if a problem is intractable? The two teams could split, each forking the project and going their own ways. But even then, who keeps the spoils and the name of the project? Some open-source communities, therefore, have entrusted the power to make decisions in one or two people. These people get, to first approximation, the absolute raddest titles in technology. They are the Benevolent Dictators for Life.\u00bb\u00a0", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Biblioteca_(inform%C3%A1tica)", "title": "Biblioteca (inform\u00e1tica)", "summary": "En inform\u00e1tica, una biblioteca o, llamada por vicio del lenguaje, librer\u00eda (del ingl\u00e9s library) es un conjunto de implementaciones funcionales, codificadas en un lenguaje de programaci\u00f3n, que ofrece una interfaz bien definida para la funcionalidad que se invoca. \nA diferencia de un programa ejecutable, el comportamiento que implementa una biblioteca no espera ser utilizada de forma aut\u00f3noma (un programa s\u00ed: tiene un punto de entrada principal), sino que su fin es ser utilizada por otros programas, independientes y de forma simult\u00e1nea. Por otra parte, el comportamiento de una biblioteca no tiene por qu\u00e9 diferenciarse demasiado del que pudiera especificarse en un programa. Es m\u00e1s, unas bibliotecas pueden requerir de otras para funcionar, pues el comportamiento que definen refina, o altera, el comportamiento de la biblioteca original; o bien la hace disponible para otra tecnolog\u00eda o lenguaje de programaci\u00f3n.\nLas bibliotecas pueden vincularse a un programa (o a otra biblioteca) en distintos puntos del desarrollo o la ejecuci\u00f3n, seg\u00fan el tipo de v\u00ednculo que se quiera establecer, tal y como se detalla en el apartado de \"Tipos\".\nLa mayor\u00eda de los sistemas operativos modernos proporcionan bibliotecas que implementan los servicios del sistema. De esta manera, estos servicios se han convertido en una \u00abmateria prima\u00bb que cualquier aplicaci\u00f3n moderna espera que el sistema operativo ofrezca. Como tal, la mayor parte del c\u00f3digo utilizado por las aplicaciones modernas se ofrece en estas bibliotecas.", "sections": [{"name": "Nota terminol\u00f3gica", "text": "Habitualmente se emplea el t\u00e9rmino librer\u00eda para referirse a una biblioteca, por la similitud con el original ingl\u00e9s library. Ambos vocablos, \u00abbiblioteca\u00bb y \u00ablibrer\u00eda\u00bb, son correctos seg\u00fan las definiciones (biblioteca,[1]\u200b librer\u00eda[2]\u200b) de la RAE. No obstante lo anterior, atendiendo a una traducci\u00f3n literal la acepci\u00f3n correcta ser\u00eda biblioteca, ya que el t\u00e9rmino ingl\u00e9s para \u00ablibrer\u00eda\u00bb es bookstore o book shop (literalmente: \u00abtienda de libros\u00bb), o bien bookshelf (estanter\u00eda o mueble para guardar libros, librer\u00eda o librero). Una traducci\u00f3n m\u00e1s directa y literal que \u00ablibrer\u00eda\u00bb ser\u00eda el t\u00e9rmino: \u00ablibrero\u00bb. Tambi\u00e9n es habitual referirse a ella con el vocablo de origen anglosaj\u00f3n toolkit (conjunto, equipo, malet\u00edn, caja, estuche, juego (kit) de herramientas).", "subsections": []}, {"name": "Historia", "text": "Los primeros conceptos de programaci\u00f3n similares a las bibliotecas intentaban separar las definiciones de datos de la implementaci\u00f3n del programa. El concepto COMPOOL (Communication Pool) fue popularizado por JOVIAL en 1959, aunque tom\u00f3 la idea prestada del software de los grandes sistemas SAGE. Siguiendo los principios de las ciencias de la computaci\u00f3n de separaci\u00f3n de problemas (aislar problemas peque\u00f1os f\u00e1ciles de abordar) y ocultaci\u00f3n de informaci\u00f3n, \"el prop\u00f3sito del COMPOOL es permitir el intercambio de datos del sistema entre varios programas, proporcionando una descripci\u00f3n centralizada de los mismos\" (Wexelblat 1981:369).\nCOBOL incluy\u00f3 un primitivo sistema de bibliotecas en el a\u00f1o 1959 (Wexelblat 1981:274), pero Jean Sammet las describi\u00f3 retrospectivamente como recursos insuficientes de biblioteca (Wexelblat 1981:258).\nOtra de las grandes contribuciones al concepto moderno de biblioteca fue la innovaci\u00f3n de subprograma de FORTRAN. Estos pueden ser compilados con independencia unos de otros, pero el compilador carece de un enlazador, por lo que el chequeo de tipos entre los subprogramas resulta imposible (Wilson et. Al. 1988:126).\nPor \u00faltimo, se debe hablar de la influencia que Simula 67 tuvo en el concepto de 'biblioteca'. Simula es el primer lenguaje de programaci\u00f3n orientado a objetos, y sus clases son casi id\u00e9nticas que el concepto actual que se utiliza en Java, C++ y C#. El concepto de clase de Simula fue tambi\u00e9n el origen del paquete en Ada y el m\u00f3dulo de Modula-2 (Wilson et. Al. 1988:52). A pesar de haber sido desarrollado en 1965, las clases de Simula pod\u00edan ser incluidas en ficheros de biblioteca y a\u00f1adidas en tiempo de compilaci\u00f3n (Wexelblat 1981:716).", "subsections": []}, {"name": "Tipos", "text": "", "subsections": [{"name": "Las bibliotecas est\u00e1ticas", "text": "Art\u00edculo principal:\nHist\u00f3ricamente, las bibliotecas solo pod\u00edan ser est\u00e1ticas. Una biblioteca est\u00e1tica, tambi\u00e9n conocida como archivo, es un fichero contenedor con varios archivos de c\u00f3digo objeto empaquetados en su interior, que en el proceso de enlazado, durante la compilaci\u00f3n, ser\u00e1n copiados y relocalizados (si es necesario) en el fichero ejecutable final, junto con el resto de ficheros de c\u00f3digo objeto. Este proceso, y el archivo ejecutable, se conoce como una construcci\u00f3n est\u00e1tica de la aplicaci\u00f3n objetivo. En este caso, la biblioteca act\u00faa simplemente como un recipiente para ficheros de c\u00f3digo objeto que no se diferencian (m\u00e1s que sem\u00e1nticamente) de los ficheros objeto intermedios producidos durante la etapa previa de compilaci\u00f3n del programa. En la construcci\u00f3n est\u00e1tica de ficheros compilados se resuelven las direcciones de las subrutinas ensambladas en tiempo de compilaci\u00f3n (m\u00e1s espec\u00edficamente, en la etapa de enlazado), de modo que las referencias a subrutinas de la biblioteca se resuelven est\u00e1ticamente, del mismo modo que las referencias a cualquier otra funci\u00f3n del programa. As\u00ed, la direcci\u00f3n real, las referencias para saltos y otras llamadas a rutinas se almacenan en una direcci\u00f3n relativa o simb\u00f3lica.\nEl enlazador resuelve todas las direcciones no resueltas convirti\u00e9ndolas en direcciones fijas o relocalizables (desde una base com\u00fan) cargando todo el c\u00f3digo (incluyendo las bibliotecas) en posiciones de memoria en tiempo de ejecuci\u00f3n. Este proceso de enlazado puede durar incluso m\u00e1s tiempo que el proceso de compilaci\u00f3n, y debe ser realizado cada vez que alguno de los m\u00f3dulos es recompilado.\nUn enlazador puede trabajar sobre tipos espec\u00edficos de ficheros objeto, y por lo tanto requiere tipos espec\u00edficos (compatibles) de bibliotecas. Los ficheros objeto recompilados en una biblioteca pueden distribuirse y utilizarse f\u00e1cilmente. Un cliente, ya sea un programa u otra biblioteca, accede a una biblioteca objeto referenciando solo por su nombre. El proceso de enlazado resuelve las referencias buscando en las bibliotecas del orden dado. Por lo general, no se considera un error si un nombre puede encontrarse varias veces en un determinado conjunto de las bibliotecas."}, {"name": "Bibliotecas din\u00e1micas", "text": "Las bibliotecas din\u00e1micas, vinculadas din\u00e1micamente, o de v\u00ednculos din\u00e1micos son ficheros que contienen c\u00f3digo objeto construido de forma independiente de su ubicaci\u00f3n[3]\u200b de tal modo que est\u00e1n preparadas para poder ser requeridas y cargadas en tiempo de ejecuci\u00f3n por cualquier programa, en lugar de tener que ser enlazadas, previamente, en tiempo de compilaci\u00f3n. Por tanto, han de estar disponibles como ficheros independientes al programa ejecutable (generalmente en directorios del sistema). En el proceso de enlazado (en tiempo de compilaci\u00f3n) se genera un fichero ejecutable con anotaciones de qu\u00e9 bibliotecas din\u00e1micas requiere (pero no de d\u00f3nde encontrarlas), y funciones de \u00abesbozo\u00bb que se encargan de delegar la llamada a la funci\u00f3n al cargador din\u00e1mico (o dynamic-loader) (en GNU/Linux, ld.so). En el resto del programa, las llamadas a las funciones de la biblioteca se cambian por una llamada a la funci\u00f3n de esbozo generada por el enlazador.\nPor otra parte, cuando la aplicaci\u00f3n que se ejecute requiera acceder a las rutinas almacenadas en una biblioteca din\u00e1mica, y ejecute la funci\u00f3n de esbozo, el cargador de enlaces din\u00e1micos podr\u00e1 sustituir esta llamada por la funci\u00f3n real de la biblioteca din\u00e1mica, carg\u00e1ndola en memoria si no lo estuviera ya, y mapeando las p\u00e1ginas de esta en el espacio de memoria del proceso del programa.\nEn algunos sistemas operativos puede decidirse si una biblioteca ha de estar disponible inmediatamente o solamente cuando se haga referencia a una funci\u00f3n de ella. Si se decide esto \u00faltimo, aparecer\u00e1 un fen\u00f3meno denominado retraso de carga, derivado de tener que cargar de memoria secundaria la biblioteca, si no estuviera ya en memoria, y de ajustarla al espacio de direcciones del programa contra el que se vincula.\nVentajas del enlace din\u00e1mico respecto al est\u00e1tico son que se permite la reutilizaci\u00f3n no solo de c\u00f3digo, sino de espacio f\u00edsico: un mismo fichero de biblioteca compartida puede ser utilizada por varios programas sin que estos copien su contenido dentro de ellos. Esto puede llegar a ser bastante espacio, seg\u00fan el n\u00famero de bibliotecas que requiera un programa. Adem\u00e1s, puede reutilizarse memoria principal (RAM) para programas que utilicen la misma biblioteca (por ejemplo, puede ser necesario cargar las bibliotecas de Qt solo una vez para todos los programas que las utilicen).\nPor otra parte, el mayor inconveniente es el aumento del tiempo de carga (debido a tener que buscar el fichero de la biblioteca, cargarlo y relocalizar las llamadas en el programa) y el aumento de una indirecci\u00f3n a la hora de llamar a las funciones de la biblioteca.\nEl enlace din\u00e1mico, por su naturaleza, tiene tan solo las limitaciones establecidas por las licencias de software.\nLa tecnolog\u00eda que permite enlazar bibliotecas de forma din\u00e1mica es muy \u00fatil para la construcci\u00f3n de plugins, sobre todo cuando unas bibliotecas pueden ser sustituidas por otras con una interfaz similar, pero diferente funcionalidad. Se puede decir que un software tiene una \"arquitectura de plugin\" si utiliza bibliotecas con una funcionalidad b\u00e1sica con la intenci\u00f3n de que puedan ser sustituidas. Sin embargo, el uso de las bibliotecas enlazadas din\u00e1micamente en la arquitectura de una aplicaci\u00f3n no significa necesariamente que puedan ser sustituidas.\nEl enlace din\u00e1mico se desarroll\u00f3 originalmente en los sistemas operativos Multics a partir de 1964. Se trataba de una caracter\u00edstica del MTS (Michigan Terminal System), construido a finales de los 60.[4]\u200b\nEn distintos sistemas operativos toman distintos nombres, por ejemplo:\nEn Microsoft Windows: DLL (dynamic-link library)\nEn GNU/Linux: shared-objects\nEn Mac OS: \"bibliotecas din\u00e1micas\" (dylibs)\nRelocalizaci\u00f3n\nUno de los problemas que el cargador debe gestionar es que la localizaci\u00f3n real de los datos de la biblioteca no puede conocerse hasta que el ejecutable y todas las bibliotecas din\u00e1micas que se han enlazado han sido cargadas en memoria. Eso se debe a que las localizaciones en memoria dependen de qu\u00e9 bibliotecas din\u00e1micas se han cargado. No es posible depender de la direcci\u00f3n absoluta de los datos en el ejecutable, ni incluso en la biblioteca, ya que podr\u00edan producirse conflictos entre las diferentes bibliotecas: si dos de ellas utilizaran las mismas direcciones o sus direcciones se solaparan, ser\u00eda imposible utilizar ambas en el mismo programa.\nSin embargo, en la pr\u00e1ctica, en muchos de los sistemas las bibliotecas no cambian frecuentemente. Por tanto, es posible calcular una direcci\u00f3n de carga probable para cada biblioteca compartida en el sistema antes de que sea utilizada, y almacenar esa informaci\u00f3n en bibliotecas y ejecutables. Si cada biblioteca que es cargada es tratada as\u00ed, entonces cada una de ellas ser\u00e1 cargada en direcciones predeterminadas, lo que acelera el proceso de enlace din\u00e1mico. Esta optimizaci\u00f3n se conoce como Prebinding en Mac OS X y Prelinking en GNU/Linux.\nLas desventajas de esta t\u00e9cnica son el tiempo requerido de prec\u00e1lculo de las direcciones cada vez que las bibliotecas compartidas cambian, la incapacidad de usar t\u00e9cnicas como la aleatorizaci\u00f3n de los espacios de direcciones, y el consumo de espacio virtual de direcciones (un problema que queda mitigado por el uso de arquitecturas de 64 bits, al menos en la actualidad).\nUn antiguo m\u00e9todo era examinar el programa en tiempo de carga. Una vez que todas las bibliotecas fueran cargadas, se reemplazan todas las referencias a datos en las bibliotecas, con punteros a localidades de memoria apropiados. En Windows 3.1 (y algunos sistemas embebidos como las calculadoras Texas Instruments), las referencias eran manejadas como listas ligadas, permitiendo la f\u00e1cil enumeraci\u00f3n y reemplazo. Ahora, la mayor\u00eda de las bibliotecas din\u00e1micas ligan una tabla de s\u00edmbolos con direcciones en blanco dentro del programa en tiempo de compilaci\u00f3n. Todas las referencias a c\u00f3digo o datos en la biblioteca pasan a trav\u00e9s de esta tabla. En tiempo de carga, la tabla es modificada con la direcci\u00f3n de los datos/c\u00f3digo por el linker. Este proceso es lento y afecta significativamente la velocidad de los programas que llaman continuamente a otros programas, tal como algunos scripts de shell.\nLa biblioteca contiene una tabla de saltos de todos los m\u00e9todos que contiene, denominados puntos de entrada. Las llamadas dentro de la biblioteca \u00absaltan a lo largo\u00bb de la tabla, buscando la ubicaci\u00f3n del c\u00f3digo en memoria, y a continuaci\u00f3n solicit\u00e1ndolo. Estas solicitudes suponen un sobreesfuerzo, pero el retardo es habitualmente tan peque\u00f1o que es despreciable.\nLocalizaci\u00f3n de bibliotecas en tiempo de ejecuci\u00f3n\nLos enlazadores/cargadores din\u00e1micos tienen una funcionalidad muy amplia. Algunos dependen de rutas expl\u00edcitas a las bibliotecas almacenadas en los ejecutables. Cualquier cambio en la nomenclatura o el dise\u00f1o del sistema de ficheros har\u00e1 que estos sistemas fallen. Habitualmente solo se almacena en el ejecutable el nombre de la biblioteca (no la ruta), siendo el sistema operativo el que proporciona el mecanismo para encontrar la biblioteca en el disco mediante ciertos algoritmos.\nUna de las mayores desventajas del enlace din\u00e1mico es que el funcionamiento correcto de los ejecutables depende de una serie de bibliotecas almacenadas de forma aislada. Si la biblioteca es borrada, movida o renombrada, o si una versi\u00f3n incompatible de DLL es copiada en una ubicaci\u00f3n que aparece antes en la ruta de b\u00fasqueda, el ejecutable no se podr\u00e1 cargar. En Windows esto se conoce como infierno de las DLL.\nSistemas Unix\nLa mayor parte de los sistemas tipo Unix disponen de una \"ruta de b\u00fasqueda\" que especifica los directorios del sistema de archivos en los que buscar las bibliotecas din\u00e1micas. En algunos sistemas, la ruta por defecto es especificada en un archivo de configuraci\u00f3n; en otros, est\u00e1 prefijada (hard coded) en el cargador din\u00e1mico. Algunos formatos de fichero ejecutable pueden especificar directorios adicionales en los que buscar las bibliotecas de un determinado programa. Esto puede ser usualmente alterado por una variable de entorno, aunque es deshabilitado para programas que tengan setuid o setgid, de manera que el usuario no puede forzar a ese programa a ejecutar un c\u00f3digo arbitrario. Es aconsejable que los desarrolladores de bibliotecas pongan sus bibliotecas din\u00e1micas en directorios que se encuentren en la ruta de b\u00fasqueda por defecto. Por el contrario, esto puede hacer problem\u00e1tica la instalaci\u00f3n de nuevas bibliotecas, pues hace que esos directorios crezcan mucho haci\u00e9ndose complicada"}, {"name": "Carga din\u00e1mica", "text": ""}, {"name": "Bibliotecas remotas", "text": "Otra soluci\u00f3n al problema de las bibliotecas es usar ejecutables completamente separados (a menudo una versi\u00f3n ligera) y llamarlos mediante procedimiento remoto (RPC) sobre la red a otra computadora u ordenador. Este enfoque maximiza la reutilizaci\u00f3n del sistema operativo: el c\u00f3digo necesario para dar soporte a la biblioteca es el mismo que el usado para proveer a la aplicaci\u00f3n soporte y seguridad para cualquier otro programa.\nAdicionalmente, dichos sistemas no requerir\u00e1n que la biblioteca este grabada en la misma m\u00e1quina, pudiendo redirigir la petici\u00f3n por la red.\nSin embargo, tal enfoque implica que cada llamada a la biblioteca requerir\u00e1 una gran cantidad de gastos generales. Las llamadas RPC son mucho m\u00e1s costosas que llamadas a procedimiento en la propia m\u00e1quina. Este enfoque se usa com\u00fanmente en las arquitecturas distribuidas que hacen un uso intensivo de las RPC, en los sistemas cliente-servidor y en aplicaciones como Enterprise JavaBeans."}]}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Biblioteca est\u00e1ndar de C", "subsections": []}, {"name": "Referencias", "text": "\u2191 RAE. \u00abDefinici\u00f3n de biblioteca\u00bb.\u00a0\n\u2191 RAE. \u00abDefinici\u00f3n de librer\u00eda\u00bb.\u00a0\n\u2191 en la Wikipedia en ingl\u00e9s\n\u2191 \u00abA History of MTS\u00bb. Information Technology Digest 5 (5).\u00a0", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Biblioteca_(programaci%C3%B3n)", "title": "Biblioteca (inform\u00e1tica)", "summary": "En inform\u00e1tica, una biblioteca o, llamada por vicio del lenguaje, librer\u00eda (del ingl\u00e9s library) es un conjunto de implementaciones funcionales, codificadas en un lenguaje de programaci\u00f3n, que ofrece una interfaz bien definida para la funcionalidad que se invoca. \nA diferencia de un programa ejecutable, el comportamiento que implementa una biblioteca no espera ser utilizada de forma aut\u00f3noma (un programa s\u00ed: tiene un punto de entrada principal), sino que su fin es ser utilizada por otros programas, independientes y de forma simult\u00e1nea. Por otra parte, el comportamiento de una biblioteca no tiene por qu\u00e9 diferenciarse demasiado del que pudiera especificarse en un programa. Es m\u00e1s, unas bibliotecas pueden requerir de otras para funcionar, pues el comportamiento que definen refina, o altera, el comportamiento de la biblioteca original; o bien la hace disponible para otra tecnolog\u00eda o lenguaje de programaci\u00f3n.\nLas bibliotecas pueden vincularse a un programa (o a otra biblioteca) en distintos puntos del desarrollo o la ejecuci\u00f3n, seg\u00fan el tipo de v\u00ednculo que se quiera establecer, tal y como se detalla en el apartado de \"Tipos\".\nLa mayor\u00eda de los sistemas operativos modernos proporcionan bibliotecas que implementan los servicios del sistema. De esta manera, estos servicios se han convertido en una \u00abmateria prima\u00bb que cualquier aplicaci\u00f3n moderna espera que el sistema operativo ofrezca. Como tal, la mayor parte del c\u00f3digo utilizado por las aplicaciones modernas se ofrece en estas bibliotecas.", "sections": [{"name": "Nota terminol\u00f3gica", "text": "Habitualmente se emplea el t\u00e9rmino librer\u00eda para referirse a una biblioteca, por la similitud con el original ingl\u00e9s library. Ambos vocablos, \u00abbiblioteca\u00bb y \u00ablibrer\u00eda\u00bb, son correctos seg\u00fan las definiciones (biblioteca,[1]\u200b librer\u00eda[2]\u200b) de la RAE. No obstante lo anterior, atendiendo a una traducci\u00f3n literal la acepci\u00f3n correcta ser\u00eda biblioteca, ya que el t\u00e9rmino ingl\u00e9s para \u00ablibrer\u00eda\u00bb es bookstore o book shop (literalmente: \u00abtienda de libros\u00bb), o bien bookshelf (estanter\u00eda o mueble para guardar libros, librer\u00eda o librero). Una traducci\u00f3n m\u00e1s directa y literal que \u00ablibrer\u00eda\u00bb ser\u00eda el t\u00e9rmino: \u00ablibrero\u00bb. Tambi\u00e9n es habitual referirse a ella con el vocablo de origen anglosaj\u00f3n toolkit (conjunto, equipo, malet\u00edn, caja, estuche, juego (kit) de herramientas).", "subsections": []}, {"name": "Historia", "text": "Los primeros conceptos de programaci\u00f3n similares a las bibliotecas intentaban separar las definiciones de datos de la implementaci\u00f3n del programa. El concepto COMPOOL (Communication Pool) fue popularizado por JOVIAL en 1959, aunque tom\u00f3 la idea prestada del software de los grandes sistemas SAGE. Siguiendo los principios de las ciencias de la computaci\u00f3n de separaci\u00f3n de problemas (aislar problemas peque\u00f1os f\u00e1ciles de abordar) y ocultaci\u00f3n de informaci\u00f3n, \"el prop\u00f3sito del COMPOOL es permitir el intercambio de datos del sistema entre varios programas, proporcionando una descripci\u00f3n centralizada de los mismos\" (Wexelblat 1981:369).\nCOBOL incluy\u00f3 un primitivo sistema de bibliotecas en el a\u00f1o 1959 (Wexelblat 1981:274), pero Jean Sammet las describi\u00f3 retrospectivamente como recursos insuficientes de biblioteca (Wexelblat 1981:258).\nOtra de las grandes contribuciones al concepto moderno de biblioteca fue la innovaci\u00f3n de subprograma de FORTRAN. Estos pueden ser compilados con independencia unos de otros, pero el compilador carece de un enlazador, por lo que el chequeo de tipos entre los subprogramas resulta imposible (Wilson et. Al. 1988:126).\nPor \u00faltimo, se debe hablar de la influencia que Simula 67 tuvo en el concepto de 'biblioteca'. Simula es el primer lenguaje de programaci\u00f3n orientado a objetos, y sus clases son casi id\u00e9nticas que el concepto actual que se utiliza en Java, C++ y C#. El concepto de clase de Simula fue tambi\u00e9n el origen del paquete en Ada y el m\u00f3dulo de Modula-2 (Wilson et. Al. 1988:52). A pesar de haber sido desarrollado en 1965, las clases de Simula pod\u00edan ser incluidas en ficheros de biblioteca y a\u00f1adidas en tiempo de compilaci\u00f3n (Wexelblat 1981:716).", "subsections": []}, {"name": "Tipos", "text": "", "subsections": [{"name": "Las bibliotecas est\u00e1ticas", "text": "Art\u00edculo principal:\nHist\u00f3ricamente, las bibliotecas solo pod\u00edan ser est\u00e1ticas. Una biblioteca est\u00e1tica, tambi\u00e9n conocida como archivo, es un fichero contenedor con varios archivos de c\u00f3digo objeto empaquetados en su interior, que en el proceso de enlazado, durante la compilaci\u00f3n, ser\u00e1n copiados y relocalizados (si es necesario) en el fichero ejecutable final, junto con el resto de ficheros de c\u00f3digo objeto. Este proceso, y el archivo ejecutable, se conoce como una construcci\u00f3n est\u00e1tica de la aplicaci\u00f3n objetivo. En este caso, la biblioteca act\u00faa simplemente como un recipiente para ficheros de c\u00f3digo objeto que no se diferencian (m\u00e1s que sem\u00e1nticamente) de los ficheros objeto intermedios producidos durante la etapa previa de compilaci\u00f3n del programa. En la construcci\u00f3n est\u00e1tica de ficheros compilados se resuelven las direcciones de las subrutinas ensambladas en tiempo de compilaci\u00f3n (m\u00e1s espec\u00edficamente, en la etapa de enlazado), de modo que las referencias a subrutinas de la biblioteca se resuelven est\u00e1ticamente, del mismo modo que las referencias a cualquier otra funci\u00f3n del programa. As\u00ed, la direcci\u00f3n real, las referencias para saltos y otras llamadas a rutinas se almacenan en una direcci\u00f3n relativa o simb\u00f3lica.\nEl enlazador resuelve todas las direcciones no resueltas convirti\u00e9ndolas en direcciones fijas o relocalizables (desde una base com\u00fan) cargando todo el c\u00f3digo (incluyendo las bibliotecas) en posiciones de memoria en tiempo de ejecuci\u00f3n. Este proceso de enlazado puede durar incluso m\u00e1s tiempo que el proceso de compilaci\u00f3n, y debe ser realizado cada vez que alguno de los m\u00f3dulos es recompilado.\nUn enlazador puede trabajar sobre tipos espec\u00edficos de ficheros objeto, y por lo tanto requiere tipos espec\u00edficos (compatibles) de bibliotecas. Los ficheros objeto recompilados en una biblioteca pueden distribuirse y utilizarse f\u00e1cilmente. Un cliente, ya sea un programa u otra biblioteca, accede a una biblioteca objeto referenciando solo por su nombre. El proceso de enlazado resuelve las referencias buscando en las bibliotecas del orden dado. Por lo general, no se considera un error si un nombre puede encontrarse varias veces en un determinado conjunto de las bibliotecas."}, {"name": "Bibliotecas din\u00e1micas", "text": "Las bibliotecas din\u00e1micas, vinculadas din\u00e1micamente, o de v\u00ednculos din\u00e1micos son ficheros que contienen c\u00f3digo objeto construido de forma independiente de su ubicaci\u00f3n[3]\u200b de tal modo que est\u00e1n preparadas para poder ser requeridas y cargadas en tiempo de ejecuci\u00f3n por cualquier programa, en lugar de tener que ser enlazadas, previamente, en tiempo de compilaci\u00f3n. Por tanto, han de estar disponibles como ficheros independientes al programa ejecutable (generalmente en directorios del sistema). En el proceso de enlazado (en tiempo de compilaci\u00f3n) se genera un fichero ejecutable con anotaciones de qu\u00e9 bibliotecas din\u00e1micas requiere (pero no de d\u00f3nde encontrarlas), y funciones de \u00abesbozo\u00bb que se encargan de delegar la llamada a la funci\u00f3n al cargador din\u00e1mico (o dynamic-loader) (en GNU/Linux, ld.so). En el resto del programa, las llamadas a las funciones de la biblioteca se cambian por una llamada a la funci\u00f3n de esbozo generada por el enlazador.\nPor otra parte, cuando la aplicaci\u00f3n que se ejecute requiera acceder a las rutinas almacenadas en una biblioteca din\u00e1mica, y ejecute la funci\u00f3n de esbozo, el cargador de enlaces din\u00e1micos podr\u00e1 sustituir esta llamada por la funci\u00f3n real de la biblioteca din\u00e1mica, carg\u00e1ndola en memoria si no lo estuviera ya, y mapeando las p\u00e1ginas de esta en el espacio de memoria del proceso del programa.\nEn algunos sistemas operativos puede decidirse si una biblioteca ha de estar disponible inmediatamente o solamente cuando se haga referencia a una funci\u00f3n de ella. Si se decide esto \u00faltimo, aparecer\u00e1 un fen\u00f3meno denominado retraso de carga, derivado de tener que cargar de memoria secundaria la biblioteca, si no estuviera ya en memoria, y de ajustarla al espacio de direcciones del programa contra el que se vincula.\nVentajas del enlace din\u00e1mico respecto al est\u00e1tico son que se permite la reutilizaci\u00f3n no solo de c\u00f3digo, sino de espacio f\u00edsico: un mismo fichero de biblioteca compartida puede ser utilizada por varios programas sin que estos copien su contenido dentro de ellos. Esto puede llegar a ser bastante espacio, seg\u00fan el n\u00famero de bibliotecas que requiera un programa. Adem\u00e1s, puede reutilizarse memoria principal (RAM) para programas que utilicen la misma biblioteca (por ejemplo, puede ser necesario cargar las bibliotecas de Qt solo una vez para todos los programas que las utilicen).\nPor otra parte, el mayor inconveniente es el aumento del tiempo de carga (debido a tener que buscar el fichero de la biblioteca, cargarlo y relocalizar las llamadas en el programa) y el aumento de una indirecci\u00f3n a la hora de llamar a las funciones de la biblioteca.\nEl enlace din\u00e1mico, por su naturaleza, tiene tan solo las limitaciones establecidas por las licencias de software.\nLa tecnolog\u00eda que permite enlazar bibliotecas de forma din\u00e1mica es muy \u00fatil para la construcci\u00f3n de plugins, sobre todo cuando unas bibliotecas pueden ser sustituidas por otras con una interfaz similar, pero diferente funcionalidad. Se puede decir que un software tiene una \"arquitectura de plugin\" si utiliza bibliotecas con una funcionalidad b\u00e1sica con la intenci\u00f3n de que puedan ser sustituidas. Sin embargo, el uso de las bibliotecas enlazadas din\u00e1micamente en la arquitectura de una aplicaci\u00f3n no significa necesariamente que puedan ser sustituidas.\nEl enlace din\u00e1mico se desarroll\u00f3 originalmente en los sistemas operativos Multics a partir de 1964. Se trataba de una caracter\u00edstica del MTS (Michigan Terminal System), construido a finales de los 60.[4]\u200b\nEn distintos sistemas operativos toman distintos nombres, por ejemplo:\nEn Microsoft Windows: DLL (dynamic-link library)\nEn GNU/Linux: shared-objects\nEn Mac OS: \"bibliotecas din\u00e1micas\" (dylibs)\nRelocalizaci\u00f3n\nUno de los problemas que el cargador debe gestionar es que la localizaci\u00f3n real de los datos de la biblioteca no puede conocerse hasta que el ejecutable y todas las bibliotecas din\u00e1micas que se han enlazado han sido cargadas en memoria. Eso se debe a que las localizaciones en memoria dependen de qu\u00e9 bibliotecas din\u00e1micas se han cargado. No es posible depender de la direcci\u00f3n absoluta de los datos en el ejecutable, ni incluso en la biblioteca, ya que podr\u00edan producirse conflictos entre las diferentes bibliotecas: si dos de ellas utilizaran las mismas direcciones o sus direcciones se solaparan, ser\u00eda imposible utilizar ambas en el mismo programa.\nSin embargo, en la pr\u00e1ctica, en muchos de los sistemas las bibliotecas no cambian frecuentemente. Por tanto, es posible calcular una direcci\u00f3n de carga probable para cada biblioteca compartida en el sistema antes de que sea utilizada, y almacenar esa informaci\u00f3n en bibliotecas y ejecutables. Si cada biblioteca que es cargada es tratada as\u00ed, entonces cada una de ellas ser\u00e1 cargada en direcciones predeterminadas, lo que acelera el proceso de enlace din\u00e1mico. Esta optimizaci\u00f3n se conoce como Prebinding en Mac OS X y Prelinking en GNU/Linux.\nLas desventajas de esta t\u00e9cnica son el tiempo requerido de prec\u00e1lculo de las direcciones cada vez que las bibliotecas compartidas cambian, la incapacidad de usar t\u00e9cnicas como la aleatorizaci\u00f3n de los espacios de direcciones, y el consumo de espacio virtual de direcciones (un problema que queda mitigado por el uso de arquitecturas de 64 bits, al menos en la actualidad).\nUn antiguo m\u00e9todo era examinar el programa en tiempo de carga. Una vez que todas las bibliotecas fueran cargadas, se reemplazan todas las referencias a datos en las bibliotecas, con punteros a localidades de memoria apropiados. En Windows 3.1 (y algunos sistemas embebidos como las calculadoras Texas Instruments), las referencias eran manejadas como listas ligadas, permitiendo la f\u00e1cil enumeraci\u00f3n y reemplazo. Ahora, la mayor\u00eda de las bibliotecas din\u00e1micas ligan una tabla de s\u00edmbolos con direcciones en blanco dentro del programa en tiempo de compilaci\u00f3n. Todas las referencias a c\u00f3digo o datos en la biblioteca pasan a trav\u00e9s de esta tabla. En tiempo de carga, la tabla es modificada con la direcci\u00f3n de los datos/c\u00f3digo por el linker. Este proceso es lento y afecta significativamente la velocidad de los programas que llaman continuamente a otros programas, tal como algunos scripts de shell.\nLa biblioteca contiene una tabla de saltos de todos los m\u00e9todos que contiene, denominados puntos de entrada. Las llamadas dentro de la biblioteca \u00absaltan a lo largo\u00bb de la tabla, buscando la ubicaci\u00f3n del c\u00f3digo en memoria, y a continuaci\u00f3n solicit\u00e1ndolo. Estas solicitudes suponen un sobreesfuerzo, pero el retardo es habitualmente tan peque\u00f1o que es despreciable.\nLocalizaci\u00f3n de bibliotecas en tiempo de ejecuci\u00f3n\nLos enlazadores/cargadores din\u00e1micos tienen una funcionalidad muy amplia. Algunos dependen de rutas expl\u00edcitas a las bibliotecas almacenadas en los ejecutables. Cualquier cambio en la nomenclatura o el dise\u00f1o del sistema de ficheros har\u00e1 que estos sistemas fallen. Habitualmente solo se almacena en el ejecutable el nombre de la biblioteca (no la ruta), siendo el sistema operativo el que proporciona el mecanismo para encontrar la biblioteca en el disco mediante ciertos algoritmos.\nUna de las mayores desventajas del enlace din\u00e1mico es que el funcionamiento correcto de los ejecutables depende de una serie de bibliotecas almacenadas de forma aislada. Si la biblioteca es borrada, movida o renombrada, o si una versi\u00f3n incompatible de DLL es copiada en una ubicaci\u00f3n que aparece antes en la ruta de b\u00fasqueda, el ejecutable no se podr\u00e1 cargar. En Windows esto se conoce como infierno de las DLL.\nSistemas Unix\nLa mayor parte de los sistemas tipo Unix disponen de una \"ruta de b\u00fasqueda\" que especifica los directorios del sistema de archivos en los que buscar las bibliotecas din\u00e1micas. En algunos sistemas, la ruta por defecto es especificada en un archivo de configuraci\u00f3n; en otros, est\u00e1 prefijada (hard coded) en el cargador din\u00e1mico. Algunos formatos de fichero ejecutable pueden especificar directorios adicionales en los que buscar las bibliotecas de un determinado programa. Esto puede ser usualmente alterado por una variable de entorno, aunque es deshabilitado para programas que tengan setuid o setgid, de manera que el usuario no puede forzar a ese programa a ejecutar un c\u00f3digo arbitrario. Es aconsejable que los desarrolladores de bibliotecas pongan sus bibliotecas din\u00e1micas en directorios que se encuentren en la ruta de b\u00fasqueda por defecto. Por el contrario, esto puede hacer problem\u00e1tica la instalaci\u00f3n de nuevas bibliotecas, pues hace que esos directorios crezcan mucho haci\u00e9ndose complicada"}, {"name": "Carga din\u00e1mica", "text": ""}, {"name": "Bibliotecas remotas", "text": "Otra soluci\u00f3n al problema de las bibliotecas es usar ejecutables completamente separados (a menudo una versi\u00f3n ligera) y llamarlos mediante procedimiento remoto (RPC) sobre la red a otra computadora u ordenador. Este enfoque maximiza la reutilizaci\u00f3n del sistema operativo: el c\u00f3digo necesario para dar soporte a la biblioteca es el mismo que el usado para proveer a la aplicaci\u00f3n soporte y seguridad para cualquier otro programa.\nAdicionalmente, dichos sistemas no requerir\u00e1n que la biblioteca este grabada en la misma m\u00e1quina, pudiendo redirigir la petici\u00f3n por la red.\nSin embargo, tal enfoque implica que cada llamada a la biblioteca requerir\u00e1 una gran cantidad de gastos generales. Las llamadas RPC son mucho m\u00e1s costosas que llamadas a procedimiento en la propia m\u00e1quina. Este enfoque se usa com\u00fanmente en las arquitecturas distribuidas que hacen un uso intensivo de las RPC, en los sistemas cliente-servidor y en aplicaciones como Enterprise JavaBeans."}]}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Biblioteca est\u00e1ndar de C", "subsections": []}, {"name": "Referencias", "text": "\u2191 RAE. \u00abDefinici\u00f3n de biblioteca\u00bb.\u00a0\n\u2191 RAE. \u00abDefinici\u00f3n de librer\u00eda\u00bb.\u00a0\n\u2191 en la Wikipedia en ingl\u00e9s\n\u2191 \u00abA History of MTS\u00bb. Information Technology Digest 5 (5).\u00a0", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Biopython", "title": "Biopython", "summary": "El proyecto 'Biopython' es el nombre que recibe una serie de aplicaciones y programas inform\u00e1ticos pensados para cuantificar y hacer c\u00e1lculos con datos biol\u00f3gicos, programados por una comunidad internacional. Su objetivo principal es el de desarrollar el mayor n\u00famero posible de bibliotecas inform\u00e1ticas basadas en el lenguaje de programaci\u00f3n Python, que tengan aplicaciones bioinform\u00e1ticas y que est\u00e9n disponibles para un p\u00fablico lo m\u00e1s amplio posible.[1]\u200b[2]\u200b Esto es posible gracias a una licencia de c\u00f3digo abierto espec\u00edfica, llamada licencia Biopython, que es muy poco restrictiva.\nBiophython permite representar secuencias biol\u00f3gicas y anotaciones de genomas y es capaz de comunicar con las bases de datos biol\u00f3gicos en l\u00ednea del NCBI para hacer c\u00e1lculos. Adem\u00e1s, gracias a diversos m\u00f3dulos, puede ser utilizada para trabajar sobre proyectos relativos al alineamiento de secuencias, c\u00e1lculo de estructuras proteicas, gen\u00e9tica de poblaciones, filogen\u00e9tica e inteligencia artificial.", "sections": [{"name": "Historia", "text": "El desarrollo de Biopython comenz\u00f3 en 1999 y su primera versi\u00f3n fue publicada en julio de 2000. Fue desarrollado en un periodo de tiempo y con objetivos similares a los de otras aplicaciones bioinform\u00e1ticas, como BioPerl, BioRuby y BioJava. Entre los primeros desarrolladores se cuentan Jeff Chang, Andrew Dalke and Brad Chapman, aunque m\u00e1s de 100 colaboradores han contribuido al proyecto hasta la fecha. En 2007 comienza un proyecto similar llamado PyCogent.", "subsections": []}, {"name": "Dise\u00f1o", "text": "Siempre que es posible, en las aplicaciones Biopython se usa el lenguaje de programaci\u00f3n Python, de manera que sea m\u00e1s f\u00e1cil de utilizar para los usuarios de este lenguaje. Biopython es capaz de leer y modificar la mayor\u00eda de formatos habituales para cada una de sus \u00e1reas de actividad, y su licencia es compatible con la mayor\u00eda de licencias de c\u00f3digo abierto, de manera que puede ser utilizado para crear una gran variedad de proyectos inform\u00e1ticos.[2]\u200b", "subsections": []}, {"name": "Caracter\u00edsticas y ejemplos", "text": "", "subsections": [{"name": "Secuencias", "text": "Un concepto central de Biopython es la secuencia biol\u00f3gica, que aparece representada por la clase Seq.[3]\u200b El objeto Seq de Biopython es similar a las cadenas de caracteres Python en muchos aspectos: es capaz de sostener la notaci\u00f3n de secciones de Python, puede ser concatenada con otras cadenas de caracteres y es inmutable. Adem\u00e1s, es capaz incluir diferentes m\u00e9todos espec\u00edficos para secuencias determinadas y permite elegir el alfabeto biol\u00f3gico que se quiere utilizar.\n>>>\n# Este c\u00f3digo crea una secuencia de ADN y realiza ciertas manipulaciones t\u00edpicas.\nfrom\nBio.Seq\nimport\nSeq\nBio.Alphabet\nIUPAC\ndna_sequence\n=\n(\n'AGGCTTCTCGTA'\n,\n.\nunambiguous_dna\n)\nIUPACUnambiguousDNA\n())\n[\n2\n:\n7\n]\n'GCTTC'\nreverse_complement\n()\n'TACGAGAAGCCT'\nrna_sequence\ntranscribe\n'AGGCUUCUCGUA'\nIUPACUnambiguousRNA\ntranslate\n'RLLV'\nIUPACProtein"}, {"name": "Anotaci\u00f3n de secuencias gen\u00e9ticas", "text": "La clase SeqRecord describe secuencias gen\u00e9ticas, junto con informaci\u00f3n como su nombre, descripci\u00f3n y caracter\u00edsticas bajo la forma de objetos SeqFeature.  Cada objeto SeqFeature especifica el tipo de caracter\u00edstica y su ubicaci\u00f3n. Los tipos de caracter\u00edstica posible son \"gene\" (gen), \"CDS\" (secuencia codificante), \"repeat_region\" (repetici\u00f3n de la regi\u00f3n), \"mobile element\" (elemento m\u00f3vil) u otros, y la posici\u00f3n de estas caracter\u00edsticas en la secuencia puede ser exacta o aproximativa.\n# Este c\u00f3digo carga una secuencia anotada a partir de un archivo y muestra algunos de sus contenidos.\nBio\nSeqIO\nseq_record\nread\n'pTC2.gb'\n'genbank'\nname\n'NC_019375'\ndescription\n'Providencia stuartii plasmid pTC2, complete sequence.'\nfeatures\n14\nSeqFeature\nFeatureLocation\nExactPosition\n4516\n),\n5336\nstrand\n1\ntype\n'mobile_element'\nseq\n'GGATTGAATATAACCGACGTGACTGTTACATTTAGGTGGCTAAACCCGTCAAGC...GCC'\nIUPACAmbiguousDNA"}, {"name": "Mecanismos de entrada y de salida", "text": "Biopython es capaz de leer y escribir un cierto n\u00famero de formatos comunes de secuencias gen\u00e9ticas, incluyendo FASTA, FASTQ, GenBank, Clustal, PHYLIP y NEXUS.  Cuando lee archivos, la informaci\u00f3n descriptiva del archivo puede ser utilizada para completar los miembros de las clases Biopython, tales como SeqRecord.  Esto permite la conversi\u00f3n de archivos de un formato a otro.\nLos archivos de secuencias de gran tama\u00f1o pueden exceder los l\u00edmites de recursos memoria de un ordenador, as\u00ed que Biopython ofrece varias opciones para acceder a los registros de grandes archivos. Estos pueden ser cargados directamente en la memoria de las estructuras de datos de Python, como listas o diccionarios, proporcionando un acceso r\u00e1pido a ellos aunque m\u00e1s caro en memoria. Por otra parte, los archivos pueden ser le\u00eddos a partir del disco duro si es necesario, con un rendimiento m\u00e1s lento pero con requerimientos de memoria m\u00e1s reducidos.\n# Este c\u00f3digo carga un archivo que contiene m\u00faltiples secuencias y guarda cada una de ellas en un formato diferente.\ngenomes\nparse\n'salmonella.gb'\nfor\ngenome\nin\n...\nwrite\nid\n+\n'.fasta'\n'fasta'"}, {"name": "Acceso a bases de datos en l\u00ednea", "text": "Gracias al m\u00f3dulo Bio.Entrez, los usuarios de Biopython pueden descargar datos biol\u00f3gicos a partir de las bases de datos NCBI. Cada una de las funciones proporcionadas por el motor de b\u00fasqueda Entrez est\u00e1 disponible a trav\u00e9s de las funciones de este m\u00f3dulo, incluyendo la b\u00fasqueda y descarga de registros.\n# Este c\u00f3digo descarga genomas de la base de datos de nucle\u00f3tidos del NBIC y los guarda en un archivo FASTA.\nEntrez\noutput_file\nopen\n'all_records.fasta'\n\"w\"\nemail\n'my_email@example.com'\nrecords_to_download\n'FO834906.1'\n'FO203501.1'\nrecord_id\nhandle\nefetch\ndb\n'nucleotide'\nid\nrettype\n'gb'\nseqRecord\nformat\nclose\nformat\n))"}, {"name": "Filogenia", "text": "El m\u00f3dulo Bio.Phylo proporciona herramientas para visualizar y trabajar con \u00e1rboles filogen\u00e9ticos. Es posible leer y grabar varios tipos de formato, incluyendo los formatos Newick, NEXUS y phyloXML. Las manipulaciones habituales y transversales pueden ser realizadas gracias a los objetos Tree y Clade. Por ejemplo, se puede convertir y fusionar archivos de \u00e1rbol, extraer subconjuntos de un \u00e1rbol, cambiar las ra\u00edces de un \u00e1rbol y analizar caracter\u00edsticas de las ramas tales como su longitud o su puntuaci\u00f3n.[5]\u200b\nLos \u00e1rboles enraizados pueden ser dibujados en formato ASCII o usando matplotlib (ver Figura 1), y la biblioteca Graphviz puede ser utilizada para dibujar presentaciones sin enraizar (ver Figura 2)."}, {"name": "Diagramas de genoma", "text": "El m\u00f3dulo GenomeDiagram proporciona m\u00e9todos para visualizar secuencias en Biopython.[7]\u200b  Las secuencias pueden ser dibujadas en una forma linear o circular (ver Figura 3), y varios formatos de salida son posibles, incluyendo pdfs y pngs. Los diagramas son creados haciendo pistas y luego a\u00f1adiendo las caracter\u00edsticas de las secuencias en esas pistas. Si se hace un bucle con las caracter\u00edsticas de cada secuencia y se usan sus atributos para decidir c\u00f3mo y por qu\u00e9 se a\u00f1aden a las pistas del diagrama, se puede ejercer un control preciso sobre la apariencia final del diagrama. Tambi\u00e9n se pueden dibujar enlaces entre las diferentes pistas, lo cual permite comparar m\u00faltiples secuencias en un solo diagrama."}, {"name": "Estructura macromolecular", "text": "El m\u00f3dulo Bio.PDB permite cargar estructuras moleculares a partir de archivos tipo PDB y mmCIF, y fue a\u00f1adido a Biopython en 2003.[8]\u200b  El objeto Structure es central en este m\u00f3dulo, y organiza la estructura macromolecular de manera jer\u00e1rquica: los objetos Structure objects contienen objetos Model. Estos a su vez contienen objetos Chain, que contienen objetos Residue, que contienen objetos Atom. Los \u00e1tomos y residuos desordenados tienen sus propias clases, DisorderedResidue y DisorderedAtom, que describen sus posiciones imprecisas.\nUsando Bio.PDB, los usuarios pueden navegar entre los componentes individuales de un archivo de estructura macromolecular, pudiendo examinar cada \u00e1tomo de la prote\u00edna. Tambi\u00e9n se pueden realizar los an\u00e1lisis habituales, como medir distancias o \u00e1ngulos, comparar residuos y calcular la profundidad de los residuos."}, {"name": "Gen\u00e9tica de poblaciones", "text": "El m\u00f3dulo Bio.Popgen a\u00f1ade soporte a Biopython para Genepop, un paquete inform\u00e1tico para el an\u00e1lisis estad\u00edstico de gen\u00e9tica de poblaciones.[9]\u200b Esto permite hacer an\u00e1lisis basados en el Equilibrio de Hardy-Weinberger, el desequilibrio de ligamiento y otras caracter\u00edsticas de las frecuencias al\u00e9licas de una poblaci\u00f3n.\nEste m\u00f3dulo tambi\u00e9n puede realizar simulaciones de gen\u00e9tica de poblaciones utilizando la teor\u00eda de la coalescencia junto con el programa fastimcoal2.[10]\u200b"}, {"name": "Controladores wrapper para herramientas de l\u00edneas de comandos", "text": "Muchos de los m\u00f3dulos de Biopython contienen controladores wrapper de l\u00edneas de comandos para las herramientas m\u00e1s usadas, de manera que estas herramientas puedan ser usadas en el interior de Biopython. Estos controladores incluyen BLAST, Clustal, PhyML, EMBOSS y SAMtools. Los usuarios pueden subclasificar un controlador wrapper gen\u00e9rico para a\u00f1adir soporte para cualquier otra herramienta de l\u00edneas de comandos."}]}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Open Bioinformatics Foundation\nBioSQL\nBioPerl\nBioRuby\nBioJS\nBioJava", "subsections": []}, {"name": "Referencias", "text": "\u2191 Cock, Peter JA; Antao, Tiago; Chang, Jeffrey T; Chapman, Brad A; Cox, Cymon J; Dalke, Andrew; Friedberg, Iddo; Hamelryck, Thomas; Kauff, Frank; Wilczynski, Bartek; de Hoon, Michiel JL (20 de marzo de 2009). \u00abBiopython: freely available Python tools for computational molecular biology and bioinformatics\u00bb. Bioinformatics (en ingl\u00e9s) 25 (11): 1422-3. PMC\u00a02682512. PMID\u00a019304878. doi:10.1093/bioinformatics/btp163. Consultado el 4 de enero de 2015.\u00a0\n\u2191 a b Ver la p\u00e1gina web de Biopython para buscar m\u00e1s art\u00edculos acad\u00e9micos que describen Biopython, y una lista de m\u00e1s de cien publicaciones que emplean o citan Biopython.\n\u2191 Chang, Jeff; Chapman, Brad; Friedberg, Iddo; Hamelryck, Thomas; de Hoon, Michiel; Cock, Peter; Antao, Tiago; Talevich, Eric et al. (29 de mayo de 2014). \u00abBiopython Tutorial and Cookbook\u00bb. Consultado el 4 de enero de 2015.\u00a0 Se sugiere usar |n\u00famero-autores= (ayuda)\n\u2191 Zmasek, Christian M; Zhang, Qing; Ye, Yuzhen; Godzik, Adam (24 de octubre de 2007). \u00abSurprising complexity of the ancestral apoptosis network\u00bb. Genome Biology (en ingl\u00e9s) 8 (10). doi:10.1186/gb-2007-8-10-r226. Consultado el 9 de septiembre de 2014.\u00a0\n\u2191 Talevich, Eric; Invergo, Brandon M; Cock, Peter JA; Chapman, Brad A (21 de agosto de 2012). \u00abBio.Phylo: A unified toolkit for processing, analyzing and visualizing phylogenetic trees in Biopython\u00bb. BMC Bioinformatics (en ingl\u00e9s) 13 (209). doi:10.1186/1471-2105-13-209. Consultado el 9 de septiembre de 2014.\u00a0\n\u2191 NCBI fechaacceso=10 de septiembre de 2014 (ed.). \u00abKlebsiella pneumoniae strain KPS77 plasmid pKPS77, complete sequence\u00bb (en ingl\u00e9s).\u00a0\n\u2191 Pritchard, Leighton; White, Jennifer A; Birch, Paul RJ; Toth, Ian K (marzo de 2006). \u00abGenomeDiagram: a python package for the visualization of large-scale genomic data\u00bb. Bioinformatics (en ingl\u00e9s) 22 (5): 616-617. doi:10.1093/bioinformatics/btk021.\u00a0\n\u2191 Hamelryck, Thomas; Manderick, Bernard (10 de mayo de 2003). \u00abPDB file parser and structure class implemented in Python\u00bb. Bioinformatics (en ingl\u00e9s) 19 (17). doi:10.1093/bioinformatics/btg299. Consultado el 10 de septiembre de 2014.\u00a0\n\u2191 Rousset, Fran\u00e7ois (enero de 2008). \u00abGENEPOP'007: a complete re-implementation of the GENEPOP software for Windows and Linux\u00bb. Molecular Ecology Resources (en ingl\u00e9s) 8. doi:10.1111/j.1471-8286.2007.01931.x. Consultado el 11 de septiembre de 2014.\u00a0\n\u2191 Excoffier, Laurent; Foll, Matthieu (1 de marzo de 2011). \u00abfastsimcoal: a continuous-time coalescent simulator of genomic diversity under arbitrarily complex evolutionary scenarios\u00bb. Bioinformatics (en ingl\u00e9s) 27 (9). doi:10.1093/bioinformatics/btr124. Consultado el 11 de septiembre de 2014.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": "P\u00e1gina web oficial.\nTutorial y manual de Biopython (en ingl\u00e9s) (PDF)\nC\u00f3digo fuente de Biopython en GitHub", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Bloque_de_c%C3%B3digo", "title": "Bloque de c\u00f3digo", "summary": "El bloque de c\u00f3digo es un usuario o secci\u00f3n de c\u00f3digo con una o m\u00e1s declaraciones y sentencias. Un lenguaje de programaci\u00f3n que permite bloques, incluyendo bloques anidados dentro de otros bloques es llamado un lenguaje de programaci\u00f3n estructurado por bloques.\nIdeas de la estructura del bloque se desarrollaron en la d\u00e9cada de los a\u00f1os 1950, durante el desarrollo de los primeros autocodes y fueron formalizados en los informes de Algol 58 y Algol 60. Algol 58 introdujo la noci\u00f3n de la \"sentencia compuesta\", que estaba relacionada \u00fanicamente con control de flujo.[1]\u200b El posterior informe revisado que describe la sintaxis y la sem\u00e1ntica de Algol 60 introdujo la noci\u00f3n de un bloque, consistiendo en \"una secuencia de sentencias encerrada entre begin y end...\" en la que \"cada declaraci\u00f3n aparece en un bloque de esta manera y es v\u00e1lida solo para ese bloque\".[2]\u200b\nLa funci\u00f3n de los bloques de programaci\u00f3n es permitir que grupos sentencias sean tratados como si fueran una sola sentencia, y restringir el \u00e1mbito l\u00e9xico de las variables, los procedimientos y funciones declaradas en un bloque para que no entre en conflicto con variables con el mismo nombre utilizadas para diferentes prop\u00f3sitos en otras partes de un programa.\nLa noci\u00f3n de bloques es introducida por diferentes sintaxis en diferentes lenguajes, pero hay dos grandes familias: la familia del ALGOL en que los bloques est\u00e1n delimitados por las palabras clave begin y end, y la familia de C en la que los bloques est\u00e1n delimitados por llaves { y }. Algunas otras t\u00e9cnicas utilizadas son el uso de sangr\u00eda, y s-expression con una palabra clave sint\u00e1ctica como lambda o let (como en la familia del Lisp).\nEn un lenguaje de programaci\u00f3n estructurado en bloque, los nombres de las variables y otros objetos, como los procedimientos que son declarados en bloques externos son visibles dentro de otros bloques internos, a menos que sean sombreado por un objeto del mismo nombre.\nAlgunos lenguajes que soportan bloques con declaraciones de variables no soportan completamente todas las declaraciones; por ejemplo muchos lenguajes derivados de C no permitan la definici\u00f3n de una funci\u00f3n dentro de un bloque. Y a diferencia de su antecesor Algol, Pascal no soporta el uso de bloques con sus propias declaraciones dentro del begin y end de un bloque existente, s\u00f3lo sentencias compuestas permitiendo una secuencia de declaraciones agrupadas en if, while, repeat y otras sentencias de control.", "sections": [{"name": "Origen", "text": "Con la aparici\u00f3n de miniprocesadores m\u00e1s potentes, la programaci\u00f3n planificada pierde sus fundamentos en favor de la programaci\u00f3n de sistemas dirigidos por datos. Esto marca el final del uso de la programaci\u00f3n monol\u00edtica gobernada por Assembler, C, Pascal y fundamentalmente COBOL. \nCon la liberaci\u00f3n de su Clipper versi\u00f3n 5.0, (en 1990) Nantucket proporciona un nuevo tipo de datos al cual llam\u00f3 CodeBlock.\nEste nace de la necesidad de suprimir el uso de macroinstrucciones o macrosubstituciones.\nEstas macroinstrucciones o macrosubstituciones tambi\u00e9n se abreviaron para pasar a llamarse simplemente \"macros\".\nEn la actualidad existen otros lenguajes de programaci\u00f3n que encontraron \u00fatiles la definici\u00f3n y conceptos subyacentes en el t\u00e9rmino CodeBlock.", "subsections": []}, {"name": "Sintaxis", "text": "", "subsections": []}, {"name": "Uso", "text": "Sea un arreglo con datos, el recorrido iterativo del mismo se produce con la instrucci\u00f3n AEVAL(), la cual posee la sintaxis:", "subsections": []}, {"name": "Par\u00e1metros", "text": "<aArreglo>\n<bBloqueDeCodigo>\n<nInicio>\n<nCantidad>\n<lAsignar>\nSea una porci\u00f3n de c\u00f3digo ejecutable agrupado en una rutina llamada \"Procedimiento()\".\nEn el ejemplo dado, el ciclo WHILE...ENDDO ser\u00e1 cerrado mientras el usuario no realice elecci\u00f3n alguna.\nSi el usuario presiona la tecla ESC, nElecci\u00f3n ser\u00e1 asignado con un 0 y el ciclo se romper\u00e1.\nCuando el usuario elija alguno de los elementos del men\u00fa entonces nEleccion ser\u00e1 distinto de cero pero tendr\u00e1 un valor entre 1 y 4.\nEn ese caso ser\u00e1 evaluada positivamente la comparaci\u00f3n nEleccion > 0 y ser\u00e1 evaluado el bloque de c\u00f3digo almacenado en el arreglo aAcciones.\nPr\u00e9stese especial atenci\u00f3n al \u00faltimo elemento de aAcciones, el cual implica una asignaci\u00f3n en tiempo de ejecuci\u00f3n.\nEsa asignaci\u00f3n produce la ruptura del ciclo.", "subsections": []}, {"name": "Uso", "text": "", "subsections": []}, {"name": "Par\u00e1metros", "text": "<ListaDeExpresiones,...>", "subsections": []}, {"name": "Beneficios", "text": "Los Bloques de C\u00f3digo son el intento de substituto de las macroinstrucciones de Clipper.\nLas macros tienen fundamento de existencia en la necesidad de crear variables din\u00e1micamente, construir expresiones regulares y ejecutarlas en tiempo de ejecuci\u00f3n.", "subsections": []}, {"name": "Consecuencias", "text": "Esa posibilidad, sobreexplotada, ocasiona una gran carga en los mantenimientos de los sistemas desarrollados con estas macros debido a que ocultan las fallas en tiempo de desarrollo y detonan en tiempo de ejecuci\u00f3n, en el ambiente del usuario final.\nGeneralmente las macros son preferidas para el desarrollo de aplicaciones con escasa o nula planificaci\u00f3n.", "subsections": []}, {"name": "Referencias", "text": "\u2191 Perlis, A.J.; Samelson, K. (1958). \u00abPreliminary report: international algebraic language\u00bb. Communications of the ACM 1 (12): 8-22. doi:10.1145/377924.594925.\u00a0\n\u2191 Backus, J. W.; Bauer, F. L.; Green, J.; Katz, C.; McCarthy, J.; Perlis, A. J.; Rutishauser, H.; Samelson, K.; Vauquois, B.; Wegstein, J. H.; van Wijngaarden, A.; Woodger, M. (mayo de 1960).  Naur, Peter, ed. Report on the Algorithmic Language ALGOL 60. Copenhagen. ISSN\u00a00001-0782. doi:10.1145/367236.367262. Consultado el 27 de octubre de 2009.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": "Definici\u00f3n de CodeBlocks\nCategor\u00edas de CodeBlock", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Boo_(lenguaje_de_programaci%C3%B3n)", "title": "Boo (lenguaje de programaci\u00f3n)", "summary": "Boo es un lenguaje de programaci\u00f3n orientado a objetos, de tipos est\u00e1ticos para la Common Language Infrastructure con una sintaxis inspirada en  Python y un \u00e9nfasis en la extensibilidad del lenguaje y su compilador. Sus caracter\u00edsticas incluyen la inferencia de tipos, los generadores, multim\u00e9todos, duck typing opcional, macros, clausuras, currificaci\u00f3n y funciones de primera clase.\nBoo es software de c\u00f3digo abierto; tiene una licencia tipo MIT/BSD.\nBoo se integra sin fisuras con Microsoft.NET y Mono.", "sections": [{"name": "Ejemplos de c\u00f3digo", "text": "", "subsections": [{"name": "Hola mundo", "text": "Art\u00edculo principal:"}, {"name": "Funci\u00f3n generadora de la Sucesi\u00f3n de Fibonacci", "text": "Art\u00edculos principales:\n y "}, {"name": "Ejemplo simple de Windows Forms con clases, cierres y eventos", "text": ", "}, {"name": "Ejemplo simple de Gtk#", "text": ""}, {"name": "Patr\u00f3n de dise\u00f1o as\u00edncrono con un cierre", "text": ""}, {"name": "Currificaci\u00f3n", "text": "plusX es una funci\u00f3n que toma un entero a, que devuelve otra funci\u00f3n que toma un entero b y devuelve a+b.\""}]}, {"name": "V\u00e9ase tambi\u00e9n", "text": "IronPython - una implementaci\u00f3n de Python sobre CLI, an\u00e1loga a Jython.", "subsections": []}, {"name": "Enlaces externos", "text": "Sitio web de Boo\nRepositorio principal\nAntiguo sitio web de Boo\nBoo Google discussion group Archivado el 12 de octubre de 2008 en Wayback Machine.\nEjemplos de bo", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Bucle_while", "title": "Bucle while", "summary": "Busca fuentes: \u00abBucle while\u00bb \u2013 noticias\u00a0\u00b7 libros\u00a0\u00b7 acad\u00e9mico\u00a0\u00b7 im\u00e1genes\nEl bucle while o bucle mientras es un ciclo repetitivo basado en los resultados de una expresi\u00f3n l\u00f3gica; se encuentra en la mayor\u00eda de los lenguajes de programaci\u00f3n estructurados. El prop\u00f3sito es repetir un bloque de c\u00f3digo mientras una condici\u00f3n se mantenga verdadera.[1]\u200b", "sections": [{"name": "Sintaxis", "text": "La sintaxis en pseudoc\u00f3digo es la siguiente: \nm\ni\ne\nn\nt\nr\na\ns\nc\no\nn\nd\ni\nc\ni\no\n\u00b4\nn\nh\na\nc\ne\nr\n{\\displaystyle {\\color {Sepia}{\\mathit {mientras}}}\\;{\\color {OliveGreen}{\\mathit {condici{\\acute {o}}n}}}\\;{\\color {Sepia}{\\mathit {hacer}}}}\ni\nn\ns\nt\nr\nu\nc\nc\ni\no\nn\ne\ns\n{\\displaystyle {\\color {BlueViolet}{\\mathit {instrucciones}}}}\nf\ni\nn\nm\ni\ne\nn\nt\nr\na\ns\n{\\displaystyle {\\color {Sepia}{\\mathit {fin\\;mientras}}}}", "subsections": []}, {"name": "Condici\u00f3n", "text": "La condici\u00f3n ha de ser una sentencia que devuelva un valor booleano, y esta puede ser el valor booleano s\u00ed, verdadero (true) si la condici\u00f3n se cumple, o falso si esta no se cumple (false). Tambi\u00e9n puede contener el nombre de una variable booleana, y el valor de la expresi\u00f3n depender\u00e1 de su contenido. Se debe tener en cuenta que adem\u00e1s de las variables tambi\u00e9n puede haber llamadas a funciones que devuelvan un valor.", "subsections": [{"name": "Sentencias comparativas", "text": "La forma m\u00e1s obvia tal vez, y la m\u00e1s usada sin duda, son las sentencias comparativas, que usan los operandos igual, diferente, menor o igual, mayor o igual, menor y mayor. En el caso del lenguaje C, se utilizan los siguientes s\u00edmbolos para representar las comparaciones anteriores: ==,\u00a0!=, <=, >=, <, >."}, {"name": "Particularidades de lenguajes", "text": "En algunos lenguajes, se pueden utilizar variables no booleanas en la comparaci\u00f3n. Por ejemplo, si la variable vale 0 ser\u00e1 como si la condici\u00f3n no se cumpliera, y siempre que sea diferente de 0, se considerar\u00e1 que la condici\u00f3n se cumple"}]}, {"name": "Ejemplos (usando sintaxis de C++)", "text": "En el siguiente c\u00f3digo se usa un bucle que no se detendr\u00e1, ya que su condici\u00f3n es verdadera y no se modifica.\n#include\n \n<iostream>\nusing\nnamespace\nstd\n;\nint\nmain\n()\n{\n    \nwhile\n(\ntrue\n)\n        \ncout\n<<\n\"Mostrando bucle infinito.\"\nendl\n}\nEn este ejemplo el programa va a leer la entrada continuamente, mientras su valor no sea igual a 0.\n\t\nnumero\n=\n1\n!=\n0\n\t\t\n\"\n\\n\nIngresa un numero del 1 al 3, o 0 para salir: \"\ncin\n>>\nswitch\n\t\t    \ncase\n:\n\t\t        \n\"Saliendo del programa...\"\nbreak\n    \t\t\n    \t\t    \n\"Numero 1 ingresado.\"\n2\n\"Numero 2 ingresado.\"\n3\n\"Numero 3 ingresado.\"\ndefault\n:\n\"No has ingresado un numero valido.\"\nreturn", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Bucle (programaci\u00f3n)\nBucle for\nBucle repetir\nEstructuras de control\nProgramaci\u00f3n estructurada", "subsections": []}, {"name": "Referencias", "text": "\u2191 Joyanes Aguilar, Luis (2013). Fundamentos generales de programaci\u00f3n. Mc Graw Hill. ISBN\u00a0978-607-15-0818-8.\u00a0", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/C%2B%2B", "title": "C++", "summary": "[\n]\nC++ es un lenguaje de programaci\u00f3n dise\u00f1ado en 1979 por Bjarne Stroustrup. La intenci\u00f3n de su creaci\u00f3n fue extender al lenguaje de programaci\u00f3n C y a\u00f1adir mecanismos que permiten la manipulaci\u00f3n de objetos. En ese sentido, desde el punto de vista de los lenguajes orientados a objetos, C++ es un lenguaje h\u00edbrido.\nPosteriormente se a\u00f1adieron facilidades de programaci\u00f3n gen\u00e9rica, que se sumaron a los paradigmas de programaci\u00f3n estructurada y programaci\u00f3n orientada a objetos. Por esto se suele decir que el C++ es un lenguaje de programaci\u00f3n multiparadigma.\nActualmente existe un est\u00e1ndar, denominado ISO C++, al que se han adherido la mayor\u00eda de los fabricantes de compiladores m\u00e1s modernos. Existen tambi\u00e9n algunos int\u00e9rpretes, tales como ROOT.\nEl nombre \"C++\" fue propuesto por Rick Mascitti en el a\u00f1o 1983, cuando el lenguaje fue utilizado por primera vez fuera de un laboratorio cient\u00edfico. Antes se hab\u00eda usado el nombre \"C con clases\". En C++, la expresi\u00f3n \"C++\" significa \"incremento de C\" y se refiere a que C++ es una extensi\u00f3n de C.", "sections": [{"name": "Caracter\u00edsticas de C++", "text": "Su sintaxis es heredada del lenguaje C.\nPrograma orientado a objetos (POO).\nPermite la agrupaci\u00f3n de instrucciones.\nEs port\u00e1til y tiene un gran n\u00famero de compiladores en diferentes plataformas y sistemas operativos.\nPermite la separaci\u00f3n de un programa en m\u00f3dulos que admiten compilaci\u00f3n independiente.\nEs un lenguaje de alto nivel.", "subsections": []}, {"name": "Ejemplos", "text": "A continuaci\u00f3n se cita un programa de ejemplo Hola mundo escrito en C++:\n#include\n \n<iostream>\nDiapositiva\n1\n:\nT\u00edtulo\nT\u00edtulo\n:\n\"Introducci\u00f3n a C++\"\n2\n\u00bf\nQu\u00e9\nes\nC\n++?\n\"\u00bfQu\u00e9 es C++?\"\nContenido\n++\nun\nlenguaje\nde\nprogramaci\u00f3n\nalto\nnivel\ny\ngeneral\n.\nDesarrollado\ncomo\nuna\nextensi\u00f3n\ndel\nAmpliamente\nutilizado\nen\ndesarrollo\nsoftware\n,\nsistemas\noperativos\nvideojuegos\nm\u00e1s\n3\nEstructura\nB\u00e1sica\n\"Estructura B\u00e1sica de C++\"\nEncabezado\ncpp\nCopy\ncode\nusing\nnamespace\nstd\n;\nFunci\u00f3n\nPrincipal\nint\nmain\n()\n{\n    \n// C\u00f3digo principal aqu\u00ed\nreturn\n0\n}\n4\nC\u00f3mo\nfunciona\nel\n\"if\"\n\"Estructuras Condicionales: if\"\nSintaxis\nif\n(\ncondici\u00f3n\n)\n// C\u00f3digo si la condici\u00f3n es verdadera\nelse\n// C\u00f3digo si la condici\u00f3n es falsa\nEjemplo\nedad\n=\n18\n>=\ncout\n<<\n\"Eres mayor de edad.\"\nendl\n\"Eres menor de edad.\"\n5\nTipos\nVariables\n\"Tipos de Variables en C++\"\nEnteros\nentero\n42\nDecimales\ndouble\ndecimal\n3.14\nCaracteres\nchar\ncaracter\n'A'\nCadenas\nTexto\nstring\ntexto\n\"Hola, mundo!\"\n6\nResumen\n\"Resumen\"\nRevisamos\nla\nestructura\nb\u00e1sica\nExploramos\ncondicional\ncon\nejemplo\nConocimos\ndiferentes\ntipos\nvariables\n7\nPreguntas\n\"\u00bfPreguntas?\"\nInvita\na\naudiencia\nhacer\npreguntas\nproporciona\ntus\ndetalles\ncontacto\nsi\nnecesario\nAl usar la directiva #include se le dice al compilador que busque e interprete todos los elementos definidos en el archivo que acompa\u00f1a la directiva (en este caso, iostream). Para evitar sobrescribir los elementos ya definidos al ponerles igual nombre, se crearon los espacios de nombres o namespace del singular en ingl\u00e9s. En este caso hay un espacio de nombres llamado std, que es donde se incluyen las definiciones de todas las funciones y clases que conforman la biblioteca est\u00e1ndar de C++. Al incluir la sentencia using namespace std le estamos diciendo al compilador que usaremos el espacio de nombres std por lo que no tendremos que incluirlo cuando usemos elementos de este espacio de nombres, como pueden ser los objetos cout y cin, que representan el flujo de salida est\u00e1ndar (t\u00edpicamente la pantalla o una ventana de texto) y el flujo de entrada est\u00e1ndar (t\u00edpicamente el teclado).\nLa definici\u00f3n de funciones es igual que en C, salvo por la caracter\u00edstica de que si main no va a recoger argumentos, no tenemos por qu\u00e9 pon\u00e9rselos, a diferencia de C, donde hab\u00eda que ponerlos expl\u00edcitamente, aunque no se fueran a usar. Queda solo comentar que el s\u00edmbolo << se conoce como operador de inserci\u00f3n, y grosso modo est\u00e1 enviando a cout lo que queremos mostrar por pantalla para que lo pinte, en este caso la cadena \"Hola mundo\". El mismo operador << se puede usar varias veces en la misma sentencia, de forma que gracias a esta caracter\u00edstica podremos concatenar el objeto endl al final, cuyo resultado ser\u00e1 imprimir un retorno de l\u00ednea.", "subsections": []}, {"name": "Tipos de datos", "text": "C++ tiene los siguientes tipos fundamentales:\nCaracteres: char (tambi\u00e9n es un entero), wchar_t\nEnteros: short, int, long, long long\nN\u00fameros en coma flotante: float, double, long double\nBooleanos: bool\nVac\u00edo: void\nEl modificador unsigned se puede aplicar a enteros para obtener n\u00fameros sin signo (por omisi\u00f3n los enteros contienen signo), con lo que se consigue un rango mayor de n\u00fameros naturales.", "subsections": [{"name": "Tama\u00f1os asociados", "text": "Seg\u00fan la m\u00e1quina y el compilador que se utilice los tipos primitivos pueden ocupar un determinado tama\u00f1o en memoria. La siguiente lista ilustra el n\u00famero de bits que ocupan los distintos tipos primitivos en la arquitectura x86.\nOtras arquitecturas pueden requerir distintos tama\u00f1os de tipos de datos primitivos. C++ no dice nada acerca de cu\u00e1l es el n\u00famero de bits en un byte, ni del tama\u00f1o de estos tipos; m\u00e1s bien, ofrece solamente las siguientes \"garant\u00edas de tipos\":\nDe acuerdo al est\u00e1ndar C99, un tipo char debe ocupar exactamente un byte compuesto de un m\u00ednimo de 8 bits independientemente de la arquitectura de la m\u00e1quina.\nEl tama\u00f1o reconocido de char es de 1. Es decir, sizeof(char) siempre devuelve 1.\nUn tipo short tiene al menos el mismo tama\u00f1o que un tipo char.\nUn tipo long tiene al menos el doble tama\u00f1o en bytes que un tipo short.\nUn tipo int tiene un tama\u00f1o entre el de short y el de long, ambos incluidos, preferentemente el tama\u00f1o de un apuntador de memoria de la m\u00e1quina. Su valor m\u00e1ximo es 2147483647, usando 32 bits.\nUn tipo unsigned tiene el mismo tama\u00f1o que su versi\u00f3n signed."}, {"name": "Wchar_t", "text": "Para la versi\u00f3n del est\u00e1ndar que se public\u00f3 en 1998, se decidi\u00f3 a\u00f1adir el tipo de dato wchar_t, que permite el uso de caracteres UNICODE, a diferencia del tradicional char, que contempla simplemente al c\u00f3digo de caracteres ASCII extendido. A su vez, se ha definido para la mayor\u00eda de las funciones y clases, tanto de C como de C++, una versi\u00f3n para trabajar con wchar_t, donde usualmente se prefija el car\u00e1cter w al nombre de la funci\u00f3n (en ocasiones el car\u00e1cter es un infijo). Por ejemplo:\nstrcpy - wstrcpy\nstd::string - std::wstring\nstd::cout - std::wcout\nCabe resaltar que en C se define wchar_t como:\ntypedef\nunsigned\nshort\nwchar_t\nMientras que en C++ es en s\u00ed mismo un tipo de dato."}, {"name": "La palabra reservada \"void\"", "text": "La palabra reservada void define en C++ el concepto de no existencia o no atribuci\u00f3n de un tipo en una variable o declaraci\u00f3n. Es decir, una funci\u00f3n declarada como void no devolver\u00e1 ning\u00fan valor. Esta palabra reservada tambi\u00e9n puede usarse para indicar que una funci\u00f3n no recibe par\u00e1metros, como en la siguiente declaraci\u00f3n:\nfuncion\nvoid\n);\nAunque la tendencia actual es la de no colocar la palabra \"void\".\nAdem\u00e1s se utiliza para determinar que una funci\u00f3n no retorna un valor, como en:\nparametro\nCabe destacar que void no es un tipo. Una funci\u00f3n como la declarada anteriormente no puede retornar un valor por medio de return: la palabra clave va sola. No es posible una declaraci\u00f3n del tipo:\nt\n//Est\u00e1 mal\nEn este sentido, void se comporta de forma ligeramente diferente a como lo hace en C, especialmente en cuanto a su significado en declaraciones y prototipos de funciones.\nSin embargo, la forma especial void * indica que el tipo de datos es un puntero. Por ejemplo:\n*\nmemoria\nIndica que memoria es un puntero a alguna parte, donde se guarda informaci\u00f3n de alg\u00fan tipo. El programador es responsable de definir estos \"alg\u00fan\", eliminando toda ambig\u00fcedad. Una ventaja de la declaraci\u00f3n \"void *\" es que puede representar a la vez varios tipos de datos, dependiendo de la operaci\u00f3n de cast escogida. La memoria que hemos apuntado en alguna parte, en el ejemplo anterior, bien podr\u00eda almacenar un entero, un flotante, una cadena de texto o un programa, o combinaciones de estos. Es responsabilidad del programador recordar qu\u00e9 tipo de datos hay y garantizar el acceso adecuado."}, {"name": "La palabra \"NULL\"", "text": "Adem\u00e1s de los valores que pueden tomar los tipos anteriormente mencionados, existe un valor llamado NULL, sea el caso num\u00e9rico para los enteros, car\u00e1cter para el tipo char, cadena de texto para el tipo string, etc. El valor NULL, expresa, por lo regular, la representaci\u00f3n de una Macro, asignada al valor \"0\".\nTenemos entonces que:\npuntero\nNULL\nbool\nboleana\nEl valor de las variables anteriores nos dar\u00eda 0. A diferencia de la variable \"caracter\", que nos dar\u00eda el equivalente a NULL, '\\0', para caracteres.\nPara evitar ambig\u00fcedad en funciones sobrecargadas, puede emplearse la palabra clave nullptr. Esta palabra clave siempre representa un puntero. Por ejemplo:\nf\nfoo\nmain\nargc\n**\nargv\n        \nf\n// Se ejecuta f(int a)\nnullptr\n// Se ejecuta f(foo *a)"}]}, {"name": "Principios", "text": "Todo programa en C++ debe tener la funci\u00f3n principal main() (a no ser que se especifique en tiempo de compilaci\u00f3n otro punto de entrada, que en realidad es la funci\u00f3n que tiene el main())\n{}\nLa funci\u00f3n principal del c\u00f3digo fuente main debe tener uno de los siguientes prototipos:\nint main()\nint main(int argc, char** argv)\nAunque no es est\u00e1ndar algunas implementaciones permiten\nint main(int argc, char** argv, char** env)\nLa primera es la forma por omisi\u00f3n de un programa que no recibe par\u00e1metros ni argumentos. La segunda forma tiene dos par\u00e1metros: argc, un n\u00famero que describe el n\u00famero de argumentos del programa (incluyendo el nombre del programa mismo), y argv, un puntero a un array de punteros, de argc elementos, donde el elemento argv[i] representa el i-\u00e9simo argumento entregado al programa. En el tercer caso se a\u00f1ade la posibilidad de poder acceder a las variables de entorno de ejecuci\u00f3n de la misma forma que se accede a los argumentos del programa, pero reflejados sobre la variable env.\nEl tipo de retorno de main es un valor entero int. Al finalizar la funci\u00f3n main, debe incluirse el valor de retorno (por ejemplo, return 0;, aunque el est\u00e1ndar prev\u00e9 solamente dos posibles valores de retorno: EXIT_SUCCESS y EXIT_FAILURE, definidas en el archivo cstdlib), o salir por medio de la funci\u00f3n exit. Alternativamente puede dejarse en blanco, en cuyo caso el compilador es responsable de agregar la salida adecuada.", "subsections": []}, {"name": "El concepto de clase", "text": "V\u00e9ase tambi\u00e9n:\nLos objetos en C++ son abstra\u00eddos mediante una clase. Seg\u00fan el paradigma de la programaci\u00f3n orientada a objetos un objeto consta de:\nIdentidad, que lo diferencia de otros objetos (Nombre que llevar\u00e1 la clase a la que pertenece dicho objeto).\nM\u00e9todos o funciones miembro.\nAtributos o variables miembro.\nUn ejemplo de clase que podemos tomar es la clase perro. Cada perro comparte unas caracter\u00edsticas (atributos). Su n\u00famero de patas, el color de su pelaje o su tama\u00f1o son algunos de sus atributos. Las funciones que lo hagan ladrar, cambiar su comportamiento... esas son las funciones de la clase.\nEste es otro ejemplo de una clase:\nclass\nPunto\n//por omisi\u00f3n, los miembros son 'private' para que solo se puedan modificar desde la propia clase.\nprivate\n// Variable miembro privada\nid\nprotected\n// Variables miembro protegidas\nx\npublic\n// Constructor\nPunto\n();\n// Destructor\n~\n// Funciones miembro o m\u00e9todos\nObtenerX\nObtenerY\n};", "subsections": [{"name": "Constructores", "text": "Son unos m\u00e9todos especiales que se ejecutan autom\u00e1ticamente al crear un objeto de la clase. En su declaraci\u00f3n no se especifica el tipo de dato que devuelven, y poseen el mismo nombre que la clase a la que pertenecen.\nAl igual que otros m\u00e9todos, puede haber varios constructores sobrecargados, aunque no pueden existir constructores virtuales.\nComo caracter\u00edstica especial a la hora de implementar un constructor, justo despu\u00e9s de la declaraci\u00f3n de los par\u00e1metros, se encuentra lo que se llama \"lista de inicializadores\". Su objetivo es llamar a los constructores de los atributos que conforman el objeto a construir.\nCabe destacar que no es necesario declarar un constructor al igual que un destructor, pues el compilador lo puede hacer, aunque no es la mejor forma de programar.\nTomando el ejemplo de la Clase Punto, si deseamos que cada vez que se cree un objeto de esta\nclase las coordenadas del punto sean igual a cero podemos agregar un constructor como se muestra\na continuaci\u00f3n:\n  \nfloat\n// Coordenadas del punto\n                \n),\n){\n// Inicializamos las variables \"x\" e \"y\"\n// Main para demostrar el funcionamiento de la clase\n#\ninclude\n // Esto nos permite utilizar \"cout\"\nMiPunto\n         \n// creamos un elemento de la clase Punto llamado MiPunto\n\"Coordenada X: \"\n// mostramos el valor acumulado en la variable x\n\"Coordenada Y: \"\n// mostramos el valor acumulado en la variable y\ngetchar\n// le indicamos al programa que espere al buffer de entrada (detenerse)\nSi compilamos y ejecutamos el anterior programa, obtenemos una salida que debe ser similar a la siguiente:\nCoordenada X: 0\nCoordenada Y: 0\nExisten varios tipos de constructores en C++:\nConstructor predeterminado. Es el constructor que no recibe ning\u00fan par\u00e1metro en la funci\u00f3n. Si no se definiera ning\u00fan constructor, el sistema proporcionar\u00eda uno predeterminado. Es necesario para la construcci\u00f3n de estructuras y contenedores de la STL.\nConstructor de copia. Es un constructor que recibe un objeto de la misma clase, y realiza una copia de los atributos del mismo. Al igual que el predeterminado, si no se define, el sistema proporciona uno.\nConstructor de conversi\u00f3n. Este constructor, recibe como \u00fanico par\u00e1metro, un objeto o variable de otro tipo distinto al suyo propio. Es decir, convierte un objeto de un tipo determinado a otro objeto del tipo que estamos generando.\nConstructores + Memoria heap\nUn objeto creado de la forma que se vio hasta ahora, es un objeto que vive dentro del scope(las llaves { }) en el que fue creado. Para que un objeto pueda seguir viviendo cuando se saque del scope en el que se cre\u00f3, se lo debe crear en memoria heap. Para esto, se utiliza el operador new, el cual asigna memoria para almacenar al objeto creado, y adem\u00e1s llama a su constructor(por lo que se le pueden enviar par\u00e1metros). El operador new se utiliza de la siguiente manera:\nunPunto\nnew\n//esto llama al constructor que se describe m\u00e1s arriba\ndelete\n               \n//no hay que olvidarse de liberar la memoria ocupada por el objeto(ver la secci\u00f3n destructores, m\u00e1s abajo)\nAdem\u00e1s, con el operador new[] se pueden crear arrays (colecciones o listas ordenadas) de tama\u00f1o din\u00e1mico:\nasignar\ncuantos\n[\n];\n//asigna un array de 'cuantos' puntos(se llama el constructor que se muestra m\u00e1s arriba), y se retorna."}, {"name": "Destructores", "text": "Los destructores son funciones miembro especiales llamadas autom\u00e1ticamente en la ejecuci\u00f3n del programa, y por tanto no tienen por qu\u00e9 ser llamadas expl\u00edcitamente por el programador. Sus principales cometidos son:\nLiberar los recursos computacionales que el objeto de dicha clase haya adquirido en tiempo de ejecuci\u00f3n al expirar este.\nQuitar los v\u00ednculos que pudiesen tener otros recursos u objetos con este.\nLos destructores son invocados autom\u00e1ticamente al alcanzar el flujo del programa el fin del \u00e1mbito en el que est\u00e1 declarado el objeto. El \u00fanico caso en el que se debe invocar expl\u00edcitamente al destructor de un objeto es cuando este fue creado mediante el operador new, es decir, que este vive en memoria heap, y no en la pila de ejecuci\u00f3n del programa. La invocaci\u00f3n del destructor de un objeto que vive en heap se realiza a trav\u00e9s del operador delete o delete[] para arrays. Ejemplo:\nunEntero\n12\n//asignamos un entero en memoria heap con el valor 12\narrayDeEnteros\n25\n//asignamos memoria para 25 enteros(no est\u00e1n inicializados)\n                     \n//liberamos la memoria que ocupaba unEntero\n[]\n           \n//liberamos la memoria ocupada por arrayDeEnteros\nSi no se utilizara el operador delete y delete[] en ese caso, la memoria ocupada por unEntero y arrayDeEnteros respectivamente, quedar\u00eda ocupada sin sentido. Cuando una porci\u00f3n de memoria queda ocupada por una variable que ya no se utiliza, y no hay forma de acceder a ella, se denomina un 'memory leak'. En aplicaciones grandes, si ocurren muchos memory leaks, el programa puede terminar ocupando bastante m\u00e1s memoria RAM de la que deber\u00eda, lo que no es para nada conveniente. Es por esto, que el manejo de memoria heap debe usarse conscientemente.\nExisten dos tipos de destructores pueden ser p\u00fablicos o privados, seg\u00fan si se declaran:\nSi es p\u00fablico se llama desde cualquier parte del programa para destruir el objeto.\nSi es privado no se permite la destrucci\u00f3n del objeto por el usuario.\nEl uso de destructores es clave en el concepto de Adquirir Recursos es Inicializar."}, {"name": "Funciones miembro", "text": "Funci\u00f3n miembro es aquella que est\u00e1 declarada en \u00e1mbito de clase. Son similares a las funciones habituales, con la salvedad de que el compilador realizara el proceso de Decoraci\u00f3n de nombre (Name Mangling en ingl\u00e9s): Cambiar\u00e1 el nombre de la funci\u00f3n a\u00f1adiendo un identificador de la clase en la que est\u00e1 declarada, pudiendo incluir caracteres especiales o identificadores num\u00e9ricos. Este proceso es invisible al programador. Adem\u00e1s, las funciones miembro reciben impl\u00edcitamente un par\u00e1metro adicional: El puntero this, que referencia al objeto que ejecuta la funci\u00f3n.\nLas funciones miembro se invocan accediendo primero al objeto al cual refieren, con la sintaxis: myobject.mymemberfunction(), esto es un claro ejemplo de una funci\u00f3n miembro.\nCaso especial es el de las funciones miembro est\u00e1ticas. A pesar de que son declaradas dentro de la clase, con el uso de la palabra clave static no recibir\u00e1n el puntero this. Gracias a esto no es necesario crear ninguna instancia de la clase para llamar a esta funci\u00f3n, sin embargo, solo se podr\u00e1 acceder a los miembros est\u00e1ticos de la clase dado que estos no est\u00e1n asociados al objeto sino al tipo. La sintaxis para llamar a esta funci\u00f3n est\u00e1tica es mytype::mystaticmember()."}, {"name": "Plantillas", "text": "Las plantillas son el mecanismo de C++ para implantar el paradigma de la programaci\u00f3n gen\u00e9rica. Permiten que una clase o funci\u00f3n trabaje con tipos de datos abstractos, especific\u00e1ndose m\u00e1s adelante cuales son los que se quieren usar. Por ejemplo, es posible construir un vector gen\u00e9rico que pueda contener cualquier tipo de estructura de datos. De esta forma se pueden declarar objetos de la clase de este vector que contengan enteros, flotantes, pol\u00edgonos, figuras, fichas de personal, etc.\nLa declaraci\u00f3n de una plantilla se realiza anteponiendo la declaraci\u00f3n template <typename A,....> a la declaraci\u00f3n de la estructura (clase, estructura o funci\u00f3n) deseado.\nPor ejemplo:\ntemplate\n<\ntypename\nT\n>\nT\nmax\nconst\n&\n?\n//si x > y, retorna x, sino retorna y\nLa funci\u00f3n max() es un ejemplo de programaci\u00f3n gen\u00e9rica, y dados dos par\u00e1metros de un tipo T (que puede ser int, long, float, double, etc.) devolver\u00e1 el mayor de ellos (usando el operador >). Al ejecutar la funci\u00f3n con par\u00e1metros de un cierto tipo, el compilador intentar\u00e1 \"calzar\" la plantilla a ese tipo de datos, o bien generar\u00e1 un mensaje de error si fracasa en ese proceso.\nEspecializaci\u00f3n\nEl siguiente ejemplo:\nA\nmyfunction\nA\ncrea una plantilla bajo la cual pueden ser definidas en el c\u00f3digo de cabecera cualesquiera funciones especializadas para un tipo de datos como int myfunction(int), int myfunction(std::string), int myfunction(bool), etc\u00e9tera:\nmyfunction\n     \n+\nstd\n::\n-\nsize\nrand\n());\n//Si a es verdadero, devuelve un n\u00famero aleatorio; en caso contrario devuelve 0\nCada una de estas funciones tiene su propia definici\u00f3n (cuerpo). Cada cuerpo diferente, no equivalente (\"no convertible\") corresponde a una especializaci\u00f3n. Si una de estas funciones no fuera definida, el compilador tratar\u00e1 de aplicar las conversiones de tipos de datos que le fuesen permitidas para \"calzar\" una de las plantillas, o generar\u00e1 un mensaje de error si fracasa en ese proceso.\nTodas las definiciones habilitadas de una plantilla deben estar disponibles al momento de la compilaci\u00f3n, por lo cual no es posible actualmente \"compilar\" una plantilla como archivo de objeto, sino simplemente compilar especializaciones de la plantilla. Por lo tanto, las plantillas se distribuyen junto con el c\u00f3digo fuente de la aplicaci\u00f3n. En otras palabras, no es posible compilar la plantilla std::vector< > a c\u00f3digo objeto, pero s\u00ed es posible, por ejemplo, compilar un tipo de datos std::vector<std::string>."}, {"name": "Clases abstractas", "text": "En C++ es posible definir clases abstractas. Una clase abstracta, o clase base abstracta (ABC), es una que est\u00e1 dise\u00f1ada solo como clase padre de las cuales se deben derivar clases hijas. Una clase abstracta se usa para representar aquellas entidades o m\u00e9todos que despu\u00e9s se implementar\u00e1n en las clases derivadas, pero la clase abstracta en s\u00ed no contiene ninguna implementaci\u00f3n -- solamente representa los m\u00e9todos que se deben implementar. Por ello, no es posible instanciar una clase abstracta, pero s\u00ed una clase concreta que implemente los m\u00e9todos definidos en ella.\nLas clases abstractas son \u00fatiles para definir interfaces, es decir, un conjunto de m\u00e9todos que definen el comportamiento de un m\u00f3dulo determinado. Estas definiciones pueden utilizarse sin tener en cuenta la implementaci\u00f3n que se har\u00e1 de ellos.\nEn C++ los m\u00e9todos de las clases abstractas se definen como funciones virtuales puras.\nAbstracta\nvirtual\nmetodo\nConcretaA\nAbstracta\n      \n//haz algo\nConcretaB\n//otra implementaci\u00f3n\nbaz\nEn el ejemplo, la clase ConcretaA es una implementaci\u00f3n de la clase Abstracta, y la clase ConcretaB es otra implementaci\u00f3n.\nDebe notarse que el = 0 es la notaci\u00f3n que emplea C++ para definir funciones virtuales puras."}, {"name": "Espacios de nombres", "text": "Una adici\u00f3n a las caracter\u00edsticas de C son los espacios de nombre (namespace en ingl\u00e9s), los cuales pueden describirse como \u00e1reas virtuales bajo las cuales ciertos nombres de variable o tipos tienen validez. Esto permite evitar las ocurrencias de conflictos entre nombres de funciones, variables o clases.\nEl ejemplo m\u00e1s conocido en C++ es el espacio de nombres std::, el cual almacena todas las definiciones nuevas en C++ que difieren de C (algunas estructuras y funciones), as\u00ed como las funcionalidades propias de C++ (streams) y los componentes de la biblioteca STL.\n// Las funciones en esta cabecera existen dentro del espacio de nombres std::\nmi_paquete\n   \nmi_valor\nmi_paquete\n'\\n'\n// imprime '3'\n// imprime '4'\nComo puede verse, las invocaciones directas a mi_valor dar\u00e1n acceso solamente a la variable descrita localmente; para acceder a la variable del espacio de nombres mi_paquete es necesario acceder espec\u00edficamente el espacio de nombres. Un atajo recomendado para programas sencillos es la directiva using namespace, que permite acceder a los nombres de variables del paquete deseado en forma directa, siempre y cuando no se produzca alguna ambig\u00fcedad o conflicto de nombres."}, {"name": "Herencia", "text": "Existen varios tipos de herencia entre clases en el lenguaje de programaci\u00f3n C++. Estos son:\nHerencia simple\nLa herencia en C++ es un mecanismo de abstracci\u00f3n creado para poder facilitar y mejorar el dise\u00f1o de las clases de un programa. Con ella se pueden crear nuevas clases a partir de clases ya hechas, siempre y cuando tengan un tipo de relaci\u00f3n especial.\nEn la herencia, las clases derivadas \"heredan\" los datos y las funciones miembro de las clases base, pudiendo las clases derivadas redefinir estos comportamientos (polimorfismo) y a\u00f1adir comportamientos nuevos propios de las clases derivadas.\nPara no romper el principio de encapsulamiento (ocultar datos cuyo conocimiento no es necesario para el uso de las clases), se proporciona un nuevo modo de visibilidad de los datos/funciones: \"protected\". Cualquier cosa que tenga visibilidad protected se comportar\u00e1 como p\u00fablica en la clase Base y en las que componen la jerarqu\u00eda de herencia, y como privada en las clases que NO sean de la jerarqu\u00eda de la herencia.\nAntes de utilizar la herencia, nos tenemos que hacer una pregunta, y si tiene sentido, podemos intentar usar esta jerarqu\u00eda: Si la frase <claseB> ES-UN <claseA> tiene sentido, entonces estamos ante un posible caso de herencia donde clase A ser\u00e1 la clase base y clase B la derivada.\nEjemplo: clases Barco, Acorazado, Carguero, etc. Un Acorazado ES-UN Barco, un Carguero ES-UN Barco, un Trasatl\u00e1ntico ES-UN Barco, etc.\nEn este ejemplo tendr\u00edamos las cosas generales de un Barco (en C++)\nBarco\nnombre\npeso\n//Constructores y dem\u00e1s funciones b\u00e1sicas de barco\ny ahora las caracter\u00edsticas de las clases derivadas, podr\u00edan (a la vez que heredan las de barco) a\u00f1adir cosas propias del subtipo de barco que vamos a crear, por ejemplo:\nCarguero\nBarco\n// Esta es la manera de especificar que hereda de Barco\n       \ncarga\n//El resto de cosas\nAcorazado\nnumeroArmas\nSoldados\n// El resto de cosas\nPor \u00faltimo, hay que mencionar que existen 3 clases de herencia que se diferencian en el modo de manejar la visibilidad de los componentes de la clase resultante:\nHerencia p\u00fablica (class Derivada: public Base ): Con este tipo de herencia se respetan los comportamientos originales de las visibilidades de la clase Base en la clase Derivada.\nHerencia privada (clase Derivada: private Base): Con este tipo de herencia todo componente de la clase Base, ser\u00e1 privado en la clase Derivada (las propiedades heredadas ser\u00e1n privadas aunque estas sean p\u00fablicas en la clase Base)\nHerencia protegida (clase Derivada: protected Base): Con este tipo de herencia, todo componente p\u00fablico y protegido de la clase Base, ser\u00e1 protegido en la clase Derivada, y los componentes privados, siguen siendo privados.\nHerencia m\u00faltiple\nLa herencia m\u00faltiple es el mecanismo que permite al programador hacer clases derivadas a partir, no de una sola clase base, sino de varias. Para entender esto mejor, pongamos un ejemplo:\nCuando ves a quien te atiende en una tienda, como persona que es, podr\u00e1s suponer que puede hablar, comer, andar, pero, por otro lado, como empleado que es, tambi\u00e9n podr\u00e1s suponer que tiene un jefe, que puede cobrarte dinero por la compra, que puede devolverte el cambio, etc. Si esto lo trasladamos a la programaci\u00f3n ser\u00eda herencia m\u00faltiple (clase empleado_tienda):\nPersona\n...\nHablar\nCaminar\nEmpleado\nPersona\njefe\nsueldo\nCobrar\nEmpleadoTienda\nEmpleado\nAlmacenarStock\nComprobarExistencias\nPor tanto, es posible utilizar m\u00e1s de una clase para que otra herede sus caracter\u00edsticas."}, {"name": "Sobrecarga de operadores", "text": "La sobrecarga de operadores es una forma de hacer polimorfismo. Es posible definir el comportamiento de un operador del lenguaje para que trabaje con tipos de datos definidos por el usuario. No todos los operadores de C++ son factibles de sobrecargar, y, entre aquellos que pueden ser sobrecargados, se deben cumplir condiciones especiales. En particular, los operadores sizeof y :: no son sobrecargables.\nNo es posible en C++ crear un operador nuevo.\nLos comportamientos de los operadores sobrecargados se implementan de la misma manera que una funci\u00f3n, salvo que esta tendr\u00e1 un nombre especial: Tipo de dato de devoluci\u00f3n operator<token del operador>(par\u00e1metros)\nLos siguientes operadores pueden ser sobrecargados:\nOperadores Unarios\nOperador * (de indirecci\u00f3n)\nOperador -> (de indirecci\u00f3n)\nOperador & (de direcci\u00f3n)\nOperador +\nOperador -\nOperador ++\nOperador --\nOperadores Binarios\nOperador ==\nOperador +\nOperador -\nOperador *\nOperador /\nOperador\u00a0%\nOperador <<\nOperador >>\nOperador &\nOperador ^\nOperador |\nOperador []\nOperador ()\nOperadores de Asignaci\u00f3n\nOperador =\nOperador +=\nOperador -=\nOperador *=\nOperador /=\nOperador\u00a0%=\nOperador <<=\nOperador >>=\nOperador &=\nOperador ^=\nOperador |=\nDado que estos operadores son definidos para un tipo de datos definido por el usuario, este es libre de asignarles cualquiera sem\u00e1ntica que desee. Sin embargo, se considera de primera importancia que las sem\u00e1nticas sean tan parecidas al comportamiento natural de los operadores como para que el uso de los operadores sobrecargados sea intuitivo. Por ejemplo, el uso del operador unario - debiera cambiar el \"signo\" de un \"valor\".\nLos operadores sobrecargados no dejan de ser funciones, por lo que pueden devolver un valor, si este valor es del tipo de datos con el que trabaja el operador, permite el encadenamiento de sentencias. Por ejemplo, si tenemos 3 variables A, B y C de un tipo T y sobrecargamos el operador = para que trabaje con el tipo de datos T, hay dos opciones: si el operador no devuelve nada una sentencia como \"A=B=C;\" (sin las comillas) dar\u00eda error, pero si se devuelve un tipo de datos T al implementar el operador, permitir\u00eda concatenar cuantos elementos se quisieran, permitiendo algo como \"A=B=C=D=...;\""}]}, {"name": "Standard Template Library (STL)", "text": "Art\u00edculo principal:\nLos lenguajes de programaci\u00f3n suelen tener una serie de bibliotecas de funciones integradas para la manipulaci\u00f3n de datos a nivel m\u00e1s b\u00e1sico. En C++, adem\u00e1s de poder usar las bibliotecas de C, se puede usar la nativa STL (Standard Template Library), propia del lenguaje. Proporciona una serie plantillas (templates) que permiten efectuar operaciones sobre el almacenado de datos, procesado de entrada/salida.", "subsections": []}, {"name": "Biblioteca de entrada y salida", "text": "Las clases basic_ostream y basic_stream, y los objetos cout y cin, proporcionan la entrada y salida est\u00e1ndar de datos (teclado/pantalla). Tambi\u00e9n est\u00e1 disponible cerr, similar a cout, usado para la salida est\u00e1ndar de errores.\nEstas clases tienen sobrecargados los operadores << y >>, respectivamente, con el objeto de ser \u00fatiles en la inserci\u00f3n/extracci\u00f3n de datos a dichos flujos. Son operadores inteligentes, ya que son capaces de adaptarse al tipo de datos que reciben, aunque tendremos que definir el comportamiento de dicha entrada/salida para clases/tipos de datos definidos por el usuario. Por ejemplo:\nostream\noperator\nfs\npunto\n\",\"\nDe esta forma, para mostrar un punto, solo habr\u00eda que realizar la siguiente expresi\u00f3n:\n//...\np\n\"Las coordenadas son: \"\np\nEs posible formatear la entrada/salida, indicando el n\u00famero de d\u00edgitos decimales a mostrar, si los textos se pasar\u00e1n a min\u00fasculas o may\u00fasculas, si los n\u00fameros recibidos est\u00e1n en formato octal o hexadecimal, etc.", "subsections": [{"name": "Fstreams", "text": "Tipo de flujo para el manejo de ficheros. La definici\u00f3n previa de ostreams/istreams es aplicable a este apartado.\nExisten tres clases (ficheros de lectura, de escritura o de lectura/escritura): ifstream,ofstream y fstream.\nComo abrir un fichero:\n(nombre_variable_fichero).open(\"nombre_fichero.dat/txt\", ios::in); para abrirlo en modo lectura.\n(nombrevariablefichero).open(\"nombre_fichero.dat/txt\", ios::out); para abrirlo en modo escritura.\nEjemplo:\nf.open(\"datos.txt\", ios::in);\nComo cerrar el fichero:\nnombre_variable_fichero.close();\nEjemplo:\nf.close();\nLeer un fichero:\n<fstream>\n<string>\nifstream\nentrada\nopen\n\"textoPlano.txt\"\nunString\nwhile\n>>\n\"Lei: \"\nEscribir un fichero:\nPueden abrirse pasando al constructor los par\u00e1metros relativos a la ubicaci\u00f3n del fichero y el modo de apertura:"}, {"name": "Sstreams", "text": "Se destacan dos clases, ostringstream e istringstream. Todo lo anteriormente dicho es aplicable a estas clases.\nTratan a una cadena como si de un flujo de datos se tratase. ostringstream permite elaborar una cadena de texto insertando datos cual flujo, e istringstream puede extraer la informaci\u00f3n contenida en una cadena (pasada como par\u00e1metro en su constructor) con el operador >>.\nEjemplos:\nostringstream\ns\nestatura\nstr\nistringstream\ns\ncadena"}, {"name": "Contenedores", "text": "Son clases plantillas especiales utilizadas para almacenar tipos de datos gen\u00e9ricos, sean cuales sean. Todos los contenedores son homog\u00e9neos, es decir, una vez que se declaran para contener un tipo de dato determinado, en ese contenedor, solo se podr\u00e1n meter elementos de ese tipo.\nSeg\u00fan la naturaleza del almacenado, disponemos de varios tipos:\nVectores: Se definen por vector<tipo_de_dato> nombre_del_vector; Son arrays (o listas ordenadas) que se redimensionan autom\u00e1ticamente al agregar nuevos elementos, por lo que se le pueden agregar \"te\u00f3ricamente\", infinitos elementos. Los vectores nos permiten acceder a cualquier elemento que contenga, mediante el operador[]. Debe tenerse en cuenta que si se intenta acceder a una posici\u00f3n que excede los l\u00edmites del vector, este no har\u00e1 ning\u00fan chequeo, por lo que se debe ser cuidadoso al utilizar este operador. Para asegurar un acceso seguro al vector, se puede utilizar el m\u00e9todo at(int), que lanza una excepci\u00f3n de tipo std::out_of_range en caso de que esto ocurra.\nPara a\u00f1adir elementos al final del vector, se utiliza el m\u00e9todo push_back(const T&). Por otro lado, para eliminar un elemento del final del vector, se debe usar el m\u00e9todo pop_back().\n<vector>\n //librer\u00eda que contiene a la clase vector\nvector\nintVector\n//crea un vector de enteros (sin elementos)\npush_back\n//agrega el entero 25 al vector\n\"El primer elemento es: \"\nfront\n\" y mi vector tiene \"\n\" elementos.\"\n//imprime el primer elemento, retornado por el m\u00e9todo front()\n32\n//agrego el entero 32 al vector\n]\n//imprime 25\npop_back\n//elimina el \u00faltimo elemento del vector (i. e. 32)\n\"Ahora tengo: \"\n//imprimir\u00e1 1\nColas dobles: son parecidas a los vectores, pero tienen mejor eficiencia para agregar o eliminar elementos en las \"puntas\".deque<tipo_de_dato> nombre_de_la_cola;\nAdem\u00e1s de los m\u00e9todos push_back(const T&) y pop_back(), se agregan los m\u00e9todos push_front(const T&) y pop_front(), que realizan lo mismo que los ya explicados, pero en el comienzo de la cola.\n<deque>\n //librer\u00eda de deques\ndeque\nintDeque\npush_front\n())\n//borra todos los elementos\nListas: Son eficientes a la hora de agregar elementos. La diferencia con las colas dobles, es que son m\u00e1s eficientes para eliminar elementos que no est\u00e9n en alguna de las \"puntas\"list<tipo_de_dato> nombre_de_la_lista;\nAdaptadores de secuencia.\nContenedores asociativos: map y multimap, que permiten asociar una \"clave\" con un \"valor\". map no permite valores repetidos, mientras que multimap si.\n<map>\n //librer\u00eda que contiene a map y multimap\n //librer\u00eda de strings\n //librer\u00eda de entrada/salida\nmap\nintAString\n\"uno\"\n10\n\"diez\"\n\"En intAString[1]: \"\n\"En intAString[10]: \"\nContenedores asociativos: set y multiset, que ofrecen solamente la condici\u00f3n de \"pertenencia\", sin la necesidad de garantizar un ordenamiento particular de los elementos que contienen."}, {"name": "Iteradores", "text": "Pueden considerarse como una generalizaci\u00f3n de la clase de \"puntero\". Un iterador es un tipo de dato que permite el recorrido y la b\u00fasqueda de elementos en los contenedores.\nComo las estructuras de datos (contenedores) son clases gen\u00e9ricas, y los operadores (algoritmos) que deben operar sobre ellas son tambi\u00e9n gen\u00e9ricos (funciones gen\u00e9ricas), Stepanov y sus colaboradores tuvieron que desarrollar el concepto de iterador como elemento o nexo de conexi\u00f3n entre ambos. El nuevo concepto resulta ser una especie de punteros que se\u00f1alan a los diversos miembros del contenedor (punteros gen\u00e9ricos que como tales no existen en el lenguaje)."}, {"name": "Algoritmos", "text": "Combinando la utilizaci\u00f3n de templates y un estilo espec\u00edfico para denotar tipos y variables, la STL ofrece una serie de funciones que representan operaciones comunes, y cuyo objetivo es \"parametrizar\" las operaciones en que estas funciones se ven involucradas de modo que su lectura, comprensi\u00f3n y mantenimiento, sean m\u00e1s f\u00e1ciles de realizar.\nUn ejemplo es la funci\u00f3n copy, la cual simplemente copia variables desde un lugar a otro. M\u00e1s estrictamente, copia los contenidos cuyas ubicaciones est\u00e1n delimitadas por dos iteradores, al espacio indicado por un tercer iterador. La sintaxis es: \n De este modo, todos los datos que est\u00e1n entre inicio_origen y fin_origen, excluyendo el dato ubicado en este \u00faltimo, son copiados a un lugar descrito o apuntado por inicio_destino.\nUn algoritmo muy importante que viene implementado en la biblioteca STL, es el sort. El algoritmo sort, ordena cualquier tipo de contenedor, siempre y cuando se le pasen como argumentos, desde donde y hasta donde se quiere ordenarlo.\n<algorithm>\n60\n54\n//para este momento, el vector tiene 60,12,54\nsort\nbegin\n(),\nend\n//listo, array ordenado, ahora tiene 12,54,60\n/*Notar que si en vez de un vector, fuese una deque, se ordenar\u00eda de la misma manera. */\nEntre las funciones m\u00e1s conocidas est\u00e1n swap (variable1, variable2), que simplemente intercambia los valores de variable1 y variable2; max (variable1, variable2) y su s\u00edmil min (variable1, variable2), que retornan el m\u00e1ximo o m\u00ednimo entre dos valores; find (inicio, fin, valor) que busca valor en el espacio de variables entre inicio y fin; etc\u00e9tera.\nLos algoritmos son muy variados, algunos incluso tienen versiones espec\u00edficas para operar con ciertos iteradores o contenedores, y proveen un nivel de abstracci\u00f3n extra que permite obtener un c\u00f3digo m\u00e1s \"limpio\", que \"describe\" lo que se est\u00e1 haciendo, en vez de hacerlo paso a paso expl\u00edcitamente."}]}, {"name": "C++11", "text": "El 12 de agosto de 2011, Herb Sutter, presidente del comit\u00e9 de est\u00e1ndares de C++, inform\u00f3 la aprobaci\u00f3n un\u00e1nime del nuevo est\u00e1ndar.[3]\u200b La publicaci\u00f3n del mismo se realiz\u00f3 en alg\u00fan momento del 2011.\nEntre las caracter\u00edsticas del nuevo est\u00e1ndar se pueden destacar:\nFunciones lambda;\nReferencias rvalue;\nLa palabra reservada auto;\nInicializaci\u00f3n uniforme;\nPlantillas con n\u00famero variable de argumentos.\nAdem\u00e1s se ha actualizado la biblioteca est\u00e1ndar del lenguaje.", "subsections": []}, {"name": "Actualidad y futuro", "text": "En 2011 C++11 inaugur\u00f3 una nueva era en la historia de C++, iniciando un ciclo trienal de lanzamiento de nuevas versiones.  A C++11 le sigui\u00f3 C++14 y luego C++17, que es la versi\u00f3n actual en 2019; C++20 se encuentra pr\u00f3ximo a estandarizarse, y ya se est\u00e1 trabajando en la versi\u00f3n C++23.  Los compiladores intentan adelantarse incorporando de manera experimental algunas novedades antes de los lanzamientos oficiales.  Pero cada nueva versi\u00f3n de C++ incluye tal cantidad de agregados que los compiladores m\u00e1s adelantados no suelen terminar de incorporarlos hasta dos o tres a\u00f1os despu\u00e9s del lanzamiento de esa versi\u00f3n.", "subsections": []}, {"name": "Diferencias de tipos respecto a C", "text": "En C++, cualquier tipo de datos que sea declarado completo (fully qualified, en ingl\u00e9s) se convierte en un tipo de datos \u00fanico. Las condiciones para que un tipo de datos T sea declarado completo son a grandes rasgos las siguientes:\nEs posible al momento de compilaci\u00f3n conocer el espacio asociado al tipo de datos (es decir, el compilador debe conocer el resultado de sizeof(T)).\nT Tiene al menos un constructor, y un destructor, bien declarados.\nSi T es un tipo compuesto, o es una clase derivada, o es la especificaci\u00f3n de una plantilla, o cualquier combinaci\u00f3n de las anteriores, entonces las dos condiciones establecidas previamente deben aplicar para cada tipo de dato constituyente.\nEn general, esto significa que cualquier tipo de datos definido haciendo uso de las cabeceras completas, es un tipo de datos completo.\nEn particular, y, a diferencia de lo que ocurr\u00eda en C, los tipos definidos por medio de struct o enum son tipos completos. Como tales, ahora son sujetos a sobrecarga, conversiones impl\u00edcitas, etc\u00e9tera.\nLos tipos enumerados, entonces, ya no son simplemente alias para tipos enteros, sino que son tipos de datos \u00fanicos en C++. El tipo de datos bool, igualmente, pasa a ser un tipo de datos \u00fanico, mientras que en C funcionaba en algunos casos como un alias para alguna clase de dato de tipo entero.", "subsections": []}, {"name": "Compiladores", "text": "Uno de los compiladores libres de C++ es el de GNU, el compilador G++ (parte del proyecto GCC, que engloba varios compiladores para distintos lenguajes). Otros compiladores comunes son Intel C++ Compiler, el compilador de Xcode, el compilador de Borland C++, el compilador de CodeWarrior C++, el compilador g++ de Cygwin, el compilador g++ de MinGW, el compilador de Visual C++, Carbide.c++, entre otros.", "subsections": []}, {"name": "Entornos de desarrollo", "text": "", "subsections": [{"name": "Bajo Microsoft Windows", "text": "Visual Studio Code\nVisual Studio\nC++ Builder\nCode::Blocks\nDev-C++\nVisual C++\nwxDev-C++\nZinjai\nOpen Watcom (IDE y Dialog Editor)\nCodeLite"}, {"name": "Bajo MacOS", "text": "Xcode\nVisual Studio Code\nZinjai\nCodeLite\nGeany"}, {"name": "Bajo DOS", "text": "Turbo C++, evoluci\u00f3n o salto a la POO del Turbo C"}, {"name": "Bajo GNU/Linux", "text": "Clion (software)\nVisual Studio Code\nCode::Blocks\nNetBeans\nEclipse\nGeany\nEmacs\nZinjai\nKdevelop\nOpen Watcom (IDE y Dialog Editor)\nCodeLite"}, {"name": "Software Creados y Programados con C++", "text": "Microsoft Edge\nGoogle Chrome\n\u03bcTorrent\nBitTorrent (programa)\nHaiku (sistema operativo)\nWindows Phone 8.1\nOpen Broadcaster Software\nOpera (navegador)\nCATIA"}]}, {"name": "Cr\u00edticas", "text": "A pesar de su adopci\u00f3n generalizada, muchos programadores han criticado el lenguaje C++, incluyendo Linus Torvalds,[4]\u200b Richard Stallman,[5]\u200b y Ken Thompson.[6]\u200b Los problemas incluyen una falta de reflexi\u00f3n o recolector de basura, tiempos de compilaci\u00f3n lentos, perceived feature creep,[7]\u200b y mensajes de error detallados, particularmente de la metaprogramaci\u00f3n de plantilla.[8]\u200b\nPara evitar los problemas que existen en C++, y para aumentar la productividad,[9]\u200b algunas personas sugieren lenguajes alternativos m\u00e1s recientes que C++, como D, Go, Rust y Vala.[10]\u200b", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "A++\nC++/CX\nC++11\nC++14\nC++17", "subsections": []}, {"name": "Referencias", "text": "\u2191 \u00abISO/IEC 14882:2020\u00bb. Organizaci\u00f3n Internacional de Normalizaci\u00f3n. Consultado el 6 de noviembre de 2023.\u00a0\n\u2191 Stroustrup, Bjarne (1997). \u00ab1\u00bb. The C++ Programming Language (Third edici\u00f3n). ISBN\u00a00201889544. OCLC\u00a059193992. Consultado el 25 de febrero de 2010.\u00a0\n\u2191 http://herbsutter.com/2011/08/12/we-have-an-international-standard-c0x-is-unanimously-approved/\n\u2191 \u00abRe: [RFC Convert builin-mailinfo.c to use The Better String Library]\u00bb, 6 de septiembre de 2007, https://lwn.net/Articles/249460/, consultado el 31 de marzo de 2015.\u00a0\n\u2191 \u00abRe: Efforts to attract more users?\u00bb, 12 de julio de 2010, http://harmful.cat-v.org/software/c++/rms, consultado el 31 de marzo de 2015.\u00a0\n\u2191 Andrew Binstock (18 de mayo de 2011). \u00abDr. Dobb's: Interview with Ken Thompson\u00bb. Archivado desde el original el 13 de marzo de 2014. Consultado el 7 de febrero de 2014.\u00a0\n\u2191 Pike, Rob (2012). \u00abLess is exponentially more\u00bb.\u00a0\n\u2191 Kreinin, Yossi (13 de octubre de 2009). \u00abDefective C++\u00bb. Consultado el 3 de febrero de 2016.\u00a0\n\u2191 New Languages, and Why We Need Them, MIT Technology Review\n\u2191 The New Native Languages | Dr Dobb's\nImposibledeaprender. ", "subsections": [{"name": "Bibliograf\u00eda", "text": "Bjarne Stroustrup, El lenguaje de programaci\u00f3n C++, Addison Wesley, Madrid, 1998, ISBN 84-7829-019-2\nBjarne Stroustrup, The C++ Programming Language, Addison-Wesley Pub Co; Tercera edici\u00f3n (15 de febrero de 2000); ISBN 0-201-70073-5\nBjarne Stroustrup, The Design and Evolution of C++, Addison-Wesley Pub Cp; Primera edici\u00f3n (29 de marzo de 1994); ISBN 0-201-54330-3\nMargaret A. Ellis y Bjarne Stroustrup, The Annotated C++ Reference Manual, Addison-Wesley Pub Co; (1 de enero de 1990); ISBN 0-201-51459-1"}]}, {"name": "Enlaces externos", "text": " Wikimedia Commons alberga una categor\u00eda multimedia sobre C++.\n\u00abCplusplus resources\u00bb (en ingl\u00e9s). Consultado el 10 de abril de 2015.\u00a0\n\u00abC/C++ Reference=C Programming and C++ Programming\u00bb (en ingl\u00e9s). Consultado el 10 de abril de 2015.\u00a0\n\u00abTecnoMate.xyz=Curso de Programaci\u00f3n C++\u00bb. Consultado el 1 de septiembre de 2019.", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/C%C3%A1lculo_lambda", "title": "C\u00e1lculo lambda", "summary": "En l\u00f3gica matem\u00e1tica, el c\u00e1lculo lambda es un sistema formal dise\u00f1ado para investigar la definici\u00f3n de funci\u00f3n, la noci\u00f3n de aplicaci\u00f3n de funciones y la recursi\u00f3n. Fue introducido por Alonzo Church y Stephen Kleene en la d\u00e9cada de 1930 como parte de sus investigaciones sobre los fundamentos de las matem\u00e1ticas. Church us\u00f3 el c\u00e1lculo lambda en 1936 para resolver el Entscheidungsproblem. Puede ser usado para definir de manera limpia y precisa qu\u00e9 es una \"funci\u00f3n computable\".\nEl interrogante de si dos expresiones del c\u00e1lculo lambda son equivalentes no puede ser resuelto por un algoritmo general. Esta fue la primera pregunta, incluso antes que el problema de la parada, cuya indecidibilidad fue probada. El c\u00e1lculo lambda tiene una gran influencia sobre los lenguajes funcionales, como Lisp, ML y Haskell.\nSe puede considerar al c\u00e1lculo lambda como uno de los lenguajes universales de programaci\u00f3n m\u00e1s minimalistas. Consiste en una regla de transformaci\u00f3n simple (sustituci\u00f3n de variables) y un esquema simple para definir funciones.\nEl c\u00e1lculo lambda es universal porque cualquier funci\u00f3n computable puede ser expresada y evaluada a trav\u00e9s de \u00e9l. Por lo tanto, es equivalente a las m\u00e1quinas de Turing. Sin embargo, el c\u00e1lculo lambda no hace \u00e9nfasis en el uso de reglas de transformaci\u00f3n y no considera las m\u00e1quinas reales que pueden implementarlo. Se trata de una propuesta m\u00e1s cercana al software que al hardware.\nEste art\u00edculo se enfocar\u00e1 sobre el c\u00e1lculo lambda sin tipos, como fue dise\u00f1ado originalmente por Church.[1]\u200b Desde entonces, algunos c\u00e1lculo lambda tipados fueron creados.", "sections": [{"name": "Historia", "text": "Originalmente, Church hab\u00eda tratado de construir un sistema formal completo para modelizar la matem\u00e1tica;[2]\u200b pero en 1934 Kleene y Rosser publicaron una implementaci\u00f3n de la paradoja de Richard.[3]\u200b Desde ese punto, el c\u00e1lculo lambda fue usado para estudiar la computabilidad, culminando en la respuesta negativa al problema de la parada. En 1940, Church introdujo el C\u00e1lculo lambda simplemente tipado que es computacionalmente menos poderoso, pero l\u00f3gicamente consistente.[4]\u200b", "subsections": []}, {"name": "Introducci\u00f3n informal", "text": "Consid\u00e9rese las siguientes dos funciones. Por un lado, la funci\u00f3n identidad I(x) = x, que toma un \u00fanico argumento, x, e inmediatamente devuelve x. Por otro lado, la funci\u00f3n suma S(x,y) = x + y, que toma dos argumentos, x e y, y devuelve la suma de ambos: x + y. Usando estas dos funciones como ejemplo, es posible hacer algunas observaciones \u00fatiles acerca de varias ideas fundamentales del c\u00e1lculo lambda.\nLa primera observaci\u00f3n es que las funciones no necesitan ser expl\u00edcitamente nombradas. Esto es, la funci\u00f3n S(x,y) = x + y puede ser reescrita como una funci\u00f3n an\u00f3nima: x,y \u2192 x + y (que se lee: \u00abel par de x e y se mapea a x + y\u00bb). Del mismo modo, I(x) = x puede ser reescrita de forma an\u00f3nima como x \u2192 x, que se lee: \u00abel argumento x se mapea a s\u00ed mismo\u00bb.\nLa segunda observaci\u00f3n es que el nombre que se asigne a los argumentos de la funci\u00f3n es generalmente irrelevante. Esto es, x \u2192 x e y \u2192 y expresan la misma funci\u00f3n: la funci\u00f3n identidad. Del mismo modo, x,y \u2192 x + y y u,v \u2192 u + v expresan la misma funci\u00f3n: la funci\u00f3n suma.\nUna tercera observaci\u00f3n es que toda funci\u00f3n que requiere dos argumentos, como por ejemplo la funci\u00f3n suma, puede ser reescrita como una funci\u00f3n que acepta un \u00fanico argumento, pero que devuelve otra funci\u00f3n, la cual a su vez acepta un \u00fanico argumento. Por ejemplo, x,y \u2192 x + y puede ser reescrita como x \u2192 (y \u2192 x + y). Esta transformaci\u00f3n se conoce como currificaci\u00f3n, y puede generalizarse para funciones que aceptan cualquier n\u00famero de argumentos. Esto puede parecer dif\u00edcil de entender, pero se entiende mejor mediante un ejemplo. Consid\u00e9rese la funci\u00f3n suma no currificada:\nAl tomar a los n\u00fameros 2 y 3 como argumentos, se obtiene:\nLo cual es igual a 5. Consid\u00e9rese ahora la versi\u00f3n currificada de la funci\u00f3n:\nSi se toma al n\u00famero 2 como argumento, se obtiene la funci\u00f3n:\nY tomando luego al n\u00famero 3 como argumento, se obtiene:\nLo cual es igual a 5. De modo que la versi\u00f3n currificada devuelve el mismo resultado que la versi\u00f3n no currificada. En el c\u00e1lculo lambda, todas las expresiones representan funciones an\u00f3nimas de un solo argumento.\nUna cuarta observaci\u00f3n es que una funci\u00f3n puede aceptar como argumento a otra funci\u00f3n, siempre y cuando esta otra funci\u00f3n tenga ella misma un solo argumento. Por ejemplo, la funci\u00f3n identidad puede aceptar como argumento a la funci\u00f3n suma (currificada). Es decir, se toma a la funci\u00f3n x \u2192 (y \u2192 x + y) y se la pone como argumento en z \u2192 z. El resultado ser\u00e1 obviamente x \u2192 (z \u2192 x + z), (igual a la x \u2192 (y \u2192 x + y)) pues la funci\u00f3n identidad siempre devuelve lo mismo que se le da.\nEn el c\u00e1lculo lambda, las funciones est\u00e1n definidas por expresiones lambda, que dicen qu\u00e9 se hace con su argumento. Por ejemplo, la funci\u00f3n \"sumar 2\", \u00a0f(x) = x + 2\u00a0 se expresa en c\u00e1lculo lambda as\u00ed: \u00a0\u03bb x. x + 2\u00a0 (o, equivalentemente, \u00a0\u03bb y. y + 2\nya que el nombre de su argumento no es importante). Y el n\u00famero f(3) ser\u00eda escrito como \u00a0(\u03bb x. x + 2) 3. La aplicaci\u00f3n de funciones es asociativa a izquierda: \u00a0f x y = (f x) y.\u00a0\nConsiderando la funci\u00f3n que aplica una funci\u00f3n al n\u00famero 3:\u00a0\u03bb f. f 3.\u00a0, podemos pasarle \"sumar 2\", quedando as\u00ed: \u00a0(\u03bb f. f 3) (\u03bb x. x + 2).\u00a0\nLas tres expresiones:\nson equivalentes.\nNo todas las expresiones lambda pueden ser reducidas a un \"valor\" definido. Consid\u00e9rese la siguiente:\no\ntratar de reducir estas expresiones solo lleva a encontrarse con la misma expresi\u00f3n o algo m\u00e1s complejo. \u00a0(\u03bb x. x x)\u00a0 es conocido como \u03c9 combinador;\u00a0((\u03bb x. x x) (\u03bb x. x x))\u00a0\nse conoce como \u03a9,\n\u00a0((\u03bb x. x x x) (\u03bb x. x x x))\u00a0\ncomo \u03a92, etc.", "subsections": []}, {"name": "Definici\u00f3n formal", "text": "", "subsections": [{"name": "Sintaxis", "text": "En el c\u00e1lculo lambda, una expresi\u00f3n o t\u00e9rmino se define recursivamente a trav\u00e9s de las siguientes reglas de formaci\u00f3n:\nToda variable es un t\u00e9rmino: x, y, z, u, v, w, x1, x2, x3,...\nSi t es un t\u00e9rmino y x es una variable, entonces (\u03bbx.t) es un t\u00e9rmino (llamado una abstracci\u00f3n lambda).\nSi t y s son t\u00e9rminos, entonces (ts) es un t\u00e9rmino (llamado una aplicaci\u00f3n lambda).\nNada m\u00e1s es un t\u00e9rmino.\nSeg\u00fan estas reglas de formaci\u00f3n, las siguientes cadenas de caracteres son t\u00e9rminos:\nPor convenci\u00f3n se suelen omitir los par\u00e9ntesis externos, ya que no cumplen ninguna funci\u00f3n de desambiguaci\u00f3n. Por ejemplo se escribe (\u03bbz.z)z en vez de ((\u03bbz.z)z), y se escribe x(y(zx)) en vez de (x(y(zx))). Adem\u00e1s se suele adoptar la convenci\u00f3n de que la aplicaci\u00f3n de funciones es asociativa hacia la izquierda. Esto quiere decir, por ejemplo, que xyzz debe entenderse como (((xy)z)z), y que (\u03bbz.z)yzx debe entenderse como ((((\u03bbz.z)y)z)x).\nLas primeras dos reglas generan funciones, mientras que la \u00faltima describe la aplicaci\u00f3n de una funci\u00f3n a un argumento. Una abstracci\u00f3n lambda \u03bbx.t representa una funci\u00f3n an\u00f3nima que toma un \u00fanico argumento, y se dice que el signo \u03bb liga la variable x en el t\u00e9rmino t. En cambio, una aplicaci\u00f3n lambda ts representa la aplicaci\u00f3n de un argumento s a una funci\u00f3n t. Por ejemplo, \u03bbx.x representa la funci\u00f3n identidad x \u2192 x, y (\u03bbx.x)y representa la funci\u00f3n identidad aplicada a y. Luego, \u03bbx.y representa la funci\u00f3n constante x \u2192 y, que develve y sin importar qu\u00e9 argumento se le d\u00e9.\nLas expresiones lambda no son muy interesantes por s\u00ed mismas. Lo que las hace interesantes son las muchas nociones de equivalencia y reducci\u00f3n que pueden ser definidas sobre ellas."}, {"name": "Variables libres y ligadas", "text": "Las apariciones (ocurrencias) de variables en una\nexpresi\u00f3n son de tres tipos:\nOcurrencias de ligadura (binders)\nOcurrencias ligadas (bound occurrences)\nOcurrencias libres (free occurrences)\nLas variables de ligadura son aquellas que est\u00e1n entre el \u03bb y el punto. Por ejemplo, siendo E una expresi\u00f3n lambda:\n\u00a0(\u03bb x y z. E)\nLas ligaduras son x,y y z.\nLa ligadura de ocurrencias de una variable est\u00e1 definido recursivamente sobre la estructura de las expresiones lambda, de esta manera:\nEn expresiones de la forma \u00a0V,\u00a0 donde V es una variable, V es una ocurrencia libre.\nEn expresiones de la forma \u00a0\u03bb V. E,\u00a0 las ocurrencias son libres en E salvo aquellas de V. En este caso las V en E se dicen ligadas por el \u03bb antes V.\nEn expresiones de la forma \u00a0(E E\u2032),\u00a0 las ocurrencias libres son aquellas ocurrencias de E y E\u2032.\nExpresiones lambda tales como \u00a0\u03bb x. (x y)\u00a0 no definen funciones porque las ocurrencias de y est\u00e1n libres. Si la expresi\u00f3n no tiene variables libres, se dice que es cerrada.\nComo se permite la repetici\u00f3n del identificador de variables, cada ligadura tiene una zona de alcance asociada. Un ejemplo t\u00edpico es: \u00a0(\u03bbx.x(\u03bbx.x))x, donde el alcance de la ligadura m\u00e1s a la derecha afecta solo a la x que tiene ah\u00ed, la situaci\u00f3n del otro binding es an\u00e1loga, pero no incluye el scope de la primera. Por \u00faltimo la x m\u00e1s a la derecha est\u00e1 libre. Por lo tanto, esa expresi\u00f3n puede reexpresarse as\u00ed \u00a0(\u03bby.y(\u03bbz.z))x"}, {"name": "\u03b1-conversi\u00f3n", "text": "La regla de alfa-conversi\u00f3n fue pensada para expresar la idea siguiente: los nombres de las variables ligadas no son importantes. Por ejemplo \u00a0\u03bbx.x\u00a0 y \u00a0\u03bby.y\u00a0 son la misma funci\u00f3n. Sin embargo, esta regla no es tan simple como parece a primera vista. Hay algunas restricciones que hay que cumplir antes de cambiar el nombre de una variable por otra. Por ejemplo, si reemplazamos x por y en \u03bbx.\u03bby.x, obtenemos \u03bby.\u03bby.y, que claramente, no es la misma funci\u00f3n. Este fen\u00f3meno se conoce como captura de variables.\nLa regla de alfa-conversi\u00f3n establece que si V y W son variables, E es una expresi\u00f3n lambda, y\nE[V:= W]\nrepresenta la expresi\u00f3n E con todas las ocurrencias libres de V en E reemplazadas con W, entonces\nsi W no est\u00e1 libre en E y W no est\u00e1 ligada a un \u03bb donde se haya reemplazado a V. Esta regla nos dice, por ejemplo, que \u00a0\u03bb\u00a0x.\u00a0(\u03bb\u00a0x.\u00a0x)\u00a0x\u00a0 es equivalente a \u00a0\u03bb\u00a0y.\u00a0(\u03bb\u00a0x.\u00a0x)\u00a0y.\nEn un ejemplo de otro tipo, se ve que\nfor (int i = 0; i < max; i++) proc (i);\nes equivalente a\nfor (int j = 0; j < max; j++) proc (j);"}, {"name": "\u03b2-reducci\u00f3n", "text": "La regla de beta reducci\u00f3n expresa la idea de la aplicaci\u00f3n funcional. Enuncia que\nsi todas las ocurrencias de E\u2032 est\u00e1n libres en E[V:= E\u2032].\nUna expresi\u00f3n de la forma ((\u03bb V. E) E\u2032) es llamada un beta redex. Una lambda expresi\u00f3n que no admite ninguna beta reducci\u00f3n se dice que est\u00e1 en su forma normal. No toda expresi\u00f3n lambda tiene forma normal, pero si existe, es \u00fanica. M\u00e1s a\u00fan, existe un algoritmo para computar la forma normal: la reducci\u00f3n de orden normal. La ejecuci\u00f3n de este algoritmo termina si y solo si la expresi\u00f3n lambda tiene forma normal. El teorema de Church-Rosser nos dice que dos expresiones reducen a una misma si y solo si son equivalentes (salvo por el nombre de sus variables ligadas)"}, {"name": "\u03b7-conversi\u00f3n", "text": "Es la tercera regla, esta conversi\u00f3n, que podr\u00eda ser a\u00f1adida a las dos anteriores para formar una nueva relaci\u00f3n de equivalencia. La eta conversi\u00f3n expresa la idea de extensionalidad, que en este contexto implica que dos funciones son la misma si y solo si dan el mismo resultado para cualquier argumento. La eta conversi\u00f3n convierte entre \u00a0\u03bb x. f x\u00a0 y \u00a0f\u00a0 siempre que x no aparezca sola en f. Esto puede ser entendido como equivalente a la extensionalidad as\u00ed:\nSi f y g son extensionalmente equivalentes, es decir, si \u00a0f a== g a\u00a0 para cualquier expresi\u00f3n lambda a entonces, en particular tomando a como una variable x que no aparece sola en f ni en g, tenemos que \u00a0f\u00a0x\u00a0 ==\u00a0g\u00a0x\u00a0 y por tanto \u00a0\u03bb\u00a0x.\u00a0f\u00a0x\u00a0== \u00a0\u03bb\u00a0x.\u00a0g\u00a0x,\u00a0 y as\u00ed por eta conversi\u00f3n \u00a0f\u00a0 ==\u00a0g.\u00a0 Entonces, si aceptamos la eta conversi\u00f3n como v\u00e1lida, resulta que la extensionalidad es v\u00e1lida.\nInversamente, si aceptamos la extensionalidad como v\u00e1lida entonces, dado que por beta reducci\u00f3n de todo y tenemos que \u00a0(\u03bb\u00a0x.\u00a0f\u00a0x)\u00a0y\u00a0== \u00a0f\u00a0y,\u00a0 resulta que \u00a0\u03bb\u00a0x.\u00a0f\u00a0x\u00a0\u00a0 ==\u00a0\u00a0f;\u00a0 es decir, descubrimos que la eta conversi\u00f3n es v\u00e1lida."}]}, {"name": "C\u00e1lculos aritm\u00e9ticos con lambda", "text": "Hay varias formas posibles de definir los n\u00fameros naturales en el c\u00e1lculo lambda, pero el m\u00e1s com\u00fan son los n\u00fameros de Church, que pueden definirse como sigue:\ny as\u00ed sucesivamente. Instintivamente el n\u00famero n en el c\u00e1lculo lambda es una funci\u00f3n que toma a otra funci\u00f3n f como argumento y devuelve la n-\u00e9sima composici\u00f3n de f. As\u00ed que, un n\u00famero de Church es una funci\u00f3n de alto nivel -- toma una \u00fanica funci\u00f3n f como par\u00e1metro y otra funci\u00f3n de par\u00e1metro \u00fanico.\n(V\u00e9ase que en el c\u00e1lculo original lambda de Church era obligatorio que el par\u00e1metro formal de la expresi\u00f3n lambda apareciera al menos una vez en el cuerpo de la funci\u00f3n, lo que hace imposible definir el 0.)\nDada esta definici\u00f3n de los n\u00fameros de Church, se puede establecer una funci\u00f3n de sucesi\u00f3n que dado un n\u00famero n devuelve n + 1:\nLa suma se define as\u00ed:\nPLUS puede entenderse como una funci\u00f3n que toma dos n\u00fameros naturales como par\u00e1metros devolviendo otro; puede verificarse que\nson expresiones lambda equivalentes. La Multiplicaci\u00f3n se expresa como\nla idea es que multiplicar m y n es lo mismo que sumar m veces a n.\nDe otra manera:\nLa funci\u00f3n Predecesor \u00a0PRED n = n - 1\u00a0 de un entero positivo n es m\u00e1s compleja:\no alternativamente\nV\u00e9ase que el truco consiste en que (g 1) (\u03bb u. PLUS (g k) 1) k que devuelve k si el valor de g(1) es cero o g(k) + 1 en cualquier otro caso.", "subsections": []}, {"name": "L\u00f3gica y predicados", "text": "Para poder llegar a una definici\u00f3n de booleanos en c\u00e1lculo lambda, se comienza con su especificaci\u00f3n: TRUE, FALSE y ifthenelse deben ser \u03bb-expresiones en forma normal, tal que para todo par de \u03bb-expresiones P y Q\nCualquier par de expresiones que cumplan esto sirve.\nLa soluci\u00f3n m\u00e1s simple resulta de fijar ifthenelse como \u03bbb.\u03bbx.\u03bby. b x y, dejando que todo el trabajo de aplicar los booleanos recaiga sobre TRUE y FALSE, entonces:\nQuedando:\nLos booleanos (como era de esperarse) tambi\u00e9n son funciones. Es f\u00e1cil ver que es posible cambiar la \u03bb-expresi\u00f3n ifthenelse para que aplique los par\u00e1metros en orden inverso, cambiando la forma de TRUE y FALSE. Por eso, se adapta, por convenci\u00f3n, de esta manera (conocida como booleanos de Church). N\u00f3tese que FALSE es equivalente al n\u00famero de Church cero.\nLuego, con estas dos definiciones podemos definir algunos operadores l\u00f3gicos:\nAhora podemos reducir, por ejemplo:\ny vemos que AND TRUE FALSE es equivalente a FALSE.\nUn predicado es una funci\u00f3n que devuelve un valor booleano. El predicado m\u00e1s simple es ISZERO el cual nos devuelve TRUE si el n\u00famero de Church argumento es 0 o FALSE en otro caso.\nPor supuesto, esta definici\u00f3n nos sirve solo para los n\u00fameros naturales definidos previamente.", "subsections": []}, {"name": "Pares", "text": "Un par (2-tupla) puede ser definido en t\u00e9rminos de TRUE y FALSE.\nUna estructura de datos del tipo lista enlazada puede ser definida, tanto como NIL para la lista vac\u00eda, o como el CONS de un elemento y de la lista m\u00e1s peque\u00f1a en tal caso sea requerido.", "subsections": []}, {"name": "Recursi\u00f3n", "text": "Recursi\u00f3n es la definici\u00f3n de una funci\u00f3n usando la funci\u00f3n que se est\u00e1 definiendo. El c\u00e1lculo lambda no permite esto. Sin embargo, esta noci\u00f3n es un poco confusa. Considere por ejemplo la definici\u00f3n de la funci\u00f3n factorial f(n) definida recursivamente por:\nEn el c\u00e1lculo lambda, no es posible definir funciones que se incluyan a s\u00ed mismas. Para sortear esta dificultad, se comienza por definir una funci\u00f3n, denominada aqu\u00ed como g, que toma a una funci\u00f3n f como argumento y devuelve otra funci\u00f3n que toma n como argumento:\nLa funci\u00f3n que devuelve g es o bien la constante 1, o n veces la aplicaci\u00f3n de la funci\u00f3n f a n-1. Usando el predicado ISZERO, y las definiciones booleanas y algebraicas anteriores, la funci\u00f3n g puede ser definida en el c\u00e1lculo lambda.\nSin embargo, g todav\u00eda no es recursiva en s\u00ed misma; para usar g para crear la funci\u00f3n factorial recursiva, la funci\u00f3n pasada a g como f debe tener unas propiedades espec\u00edficas. A saber, la funci\u00f3n pasada como f debe expandirse a la funci\u00f3ng llamada con un argumento -- y que el argumento debe ser la funci\u00f3n que ha sido pasado como f de nuevo.\nEn otras palabras, f debe expandir a g(f). Esta llamada a g expandir\u00e1 a la siguiente a la funci\u00f3n factorial y calcular\u00e1 otro nivel de recursi\u00f3n. En la expansi\u00f3n la funci\u00f3n f aparecer\u00e1 nuevamente, y nuevamente expandir\u00e1 a g(f) y continuara la recursi\u00f3n. Este tipo de funci\u00f3n, donde f = g(f), es llamada un fixed-point de g, y resulta que puede ser implementado en el c\u00e1lculo lambda usando lo que es conocido como el paradoxical operator or fixed-point operator y es representado como Y -- el Y combinator:\nEn el c\u00e1lculo lambda, Y g es un punto fijo de g, debido a que expande a g (Y g). Ahora, para completar nuestra llamada recursiva a la funci\u00f3n factorial, simplemente llamar\u00eda \u00a0g (Y g) n,\u00a0 donde n es el n\u00famero del cual queremos calcular el factorial.\nDado, por ejemplo n = 5, esta se expandir\u00e1 como:\nY as\u00ed, se va evaluando la estructura del algoritmo de forma recursiva. Cada funci\u00f3n recursiva definida puede ser vista como un punto fijo de otra funci\u00f3n adecuada, y por lo tanto, utilizando Y, cada funci\u00f3n recursiva definida puede expresarse como una expresi\u00f3n lambda. En particular, ahora podemos definir limpiamente la resta, la multiplicaci\u00f3n y la comparaci\u00f3n de predicado de los n\u00fameros naturales de forma recursiva.", "subsections": []}, {"name": "Funciones computables y el c\u00e1lculo lambda", "text": "Una funci\u00f3n F: N \u2192 N de n\u00fameros naturales es una funci\u00f3n computable si y solo si existe una expresi\u00f3n lambda f tal que para todo par de x, y in N, \u00a0F(x) = y\u00a0 si y solo si \u00a0f x\u00a0==\u00a0y,\u00a0 donde x e y son numerales de Church correspondientes a x e y, respectivamente. Esta solo es una de tantas maneras de definir computabilidad; v\u00e9ase tesis de Church-Turing para una discusi\u00f3n, otras aproximaciones y sus equivalencias.", "subsections": []}, {"name": "Indecisi\u00f3n de equivalencia", "text": "No hay un algoritmo que tome dos expresiones lambda arbitrarias y produzca TRUE o FALSE dependiendo de si las dos expresiones son o no equivalentes. Este fue hist\u00f3ricamente el primer problema para el cual la irresolubilidad pudo ser probada. Por supuesto, de manera previa para hacer esto, la noci\u00f3n de algoritmo tuvo que ser definida de forma clara; Church la defini\u00f3 usando funciones recursivas, la cual se sabe que es equivalente a todas las otras definiciones razonables de esta noci\u00f3n.\nLa primera prueba de Church reduce el problema de determinar si una expresi\u00f3n lambda dada tiene una forma normal. Una forma normal es una expresi\u00f3n equivalente irreductible. Entonces se asume que este predicado es computable y que puede ser expresado de aqu\u00ed en adelante en notaci\u00f3n de c\u00e1lculo lambda. Bas\u00e1ndose en un trabajo previo de Kleene y construyendo una numeraci\u00f3n de G\u00f6del para expresiones lambda, Church construy\u00f3 una expresi\u00f3n lambda e que segu\u00eda la prueba del teorema de incompletitud de G\u00f6del. Si e se aplica a su propio n\u00famero G\u00f6del, se produce una contradicci\u00f3n.", "subsections": []}, {"name": "C\u00e1lculo lambda y los lenguajes de programaci\u00f3n", "text": "Como lo menciona Peter Landin en su libro cl\u00e1sico Correspondencia entre ALGOL 60 y el c\u00e1lculo lambda de Church, la mayor\u00eda de los lenguajes de programaci\u00f3n tienen sus ra\u00edces en el c\u00e1lculo lambda, lo que provee los mecanismos b\u00e1sicos para las abstracciones de procedimiento y abstracciones de aplicaciones (subprogramas).\nLa implementaci\u00f3n del c\u00e1lculo lambda en una computadora involucra tratar a las \"funciones\" como objetos de primera clase, lo que aumenta la complejidad de su implementaci\u00f3n. Un problema particularmente dif\u00edcil es la implementaci\u00f3n de funciones de orden superior, conocido como el problema de Funarg. \nLas contrapartes m\u00e1s prominentes del c\u00e1lculo lambda en programaci\u00f3n son los lenguajes de programaci\u00f3n funcional, que esencialmente implementa el c\u00e1lculo aumentado con algunas constantes y tipos de dato. \nLos lenguajes funcionales no son los \u00fanicos que soportan las funciones como objetos de primera clase. Muchos lenguajes de programaci\u00f3n imperativa, como Pascal, hace tiempo que permiten pasar subprogramas como argumentos a otros subprogramas. En C y su derivado C++ el resultado equivalente se obtiene pasando punteros al c\u00f3digo de las funciones (subprogramas). Estos mecanismos est\u00e1n limitados a subprogramas escritos expl\u00edcitamente en el c\u00f3digo, y no soportan directamente funciones de alto nivel. Algunos lenguajes imperativos orientados a objetos, tiene notaciones que representan funciones de cualquier orden; tales mecanismos est\u00e1n disponibles en C++, Smalltalk y m\u00e1s recientemente en (\"agentes\" de ) Eiffel y (\"delegados\" de) C#. Como ejemplo, la expresi\u00f3n de \"agente en l\u00ednea\" de Eiffel\ndenota un objeto correspondiente a la expresi\u00f3n lambda \u03bb x. x*x (con llamada por valor). Puede ser tratada como cualquier otra expresi\u00f3n, por ejemplo, asignarla a una variable o pasada a una rutina. Si el valor de square es el de la expresi\u00f3n de agente anterior, entonces el resultado de aplicar square a un valor (una reducci\u00f3n \u03b2) es expresada como square.item ([a]), donde el argumento es pasado como una tupla.\nUn ejemplo en Python usa la forma lambda de funciones:\nfunc\n=\nlambda\nx\n:\n*\nLo anterior crea una funci\u00f3n an\u00f3nima llamada func que puede ser pasada como par\u00e1metros a otras funciones, ser almacenada en variables, etc. Python tambi\u00e9n puede tratar cualquier otra funci\u00f3n creada con la sentencia est\u00e1ndar def como un first-class object.\nLo mismo se aplica a la siguiente expresi\u00f3n en Smalltalk:\n:\nx\n|\n*\nEste es un objeto de primera clase (clausura de bloque), que puede ser guardado en variables, pasado como argumento, etc.\nUn ejemplo similar en C++ (usando la biblioteca Boost.Lambda):\nfor_each\n(\nv\n.\nbegin\n(),\n \nend\ncout\n<<\n_1\nendl\n;);\nAqu\u00ed, la funci\u00f3n de librer\u00eda est\u00e1ndar for_each itera sobre todos los miembros del vector (o lista) v, e imprime el cuadrado de cada elemento. La notaci\u00f3n _1 es la convenci\u00f3n Boost de Lambda para representar el elemento contenedor, representado como x en cualquier otro lado.\nUn delegado simple de c# que toma una variable y retorna el cuadrado. Esta variable funci\u00f3n puede ser pasada a otros m\u00e9todos (o delegados de funciones)\n// Declare a delegate signature\ndelegate\ndouble\nMathDelegate\ni\n);\n// Create an delegate instance\nMathDelegate\nf\n)\n{\nreturn\nMath\nPow\n,\n2\n};\n// Passing 'f' function variable to another method, executing,\n// and returning the result of the function\nExecute\n\t\nfunc\n100\n}", "subsections": []}, {"name": "Estrategias de reducci\u00f3n", "text": "El que un t\u00e9rmino llegue a una forma normal o no, y cuanto trabajo debe realizarse para ello si se puede, depende sustancialmente de la estrategia de reducci\u00f3n utilizada. La distinci\u00f3n entre las estrategias de reducci\u00f3n est\u00e1 relacionada con la distinci\u00f3n en lenguajes de programaci\u00f3n funcional entre evaluaci\u00f3n estricta y evaluaci\u00f3n perezosa.\nEl orden aplicativo no es una estrategia de normalizaci\u00f3n. El ejemplo m\u00e1s t\u00edpico es el siguiente: se define Q = \u03c9\u03c9 donde \u03c9 = \u03bbx.xx. Esta expresi\u00f3n solo contiene una redex (la expresi\u00f3n completa), la cual resulta al ser reducida otra vez en Q. Como es la \u00fanica reducci\u00f3n posible, Q no tiene forma normal bajo ninguna estrategia de reducci\u00f3n. Utilizando orden aplicativo, la expresi\u00f3n KI\u03a9 = (\u03bbx.\u03bby.x) (\u03bbx.x)\u03a9 es reducida reduciendo primero Q, pero como no tiene forma normal, esta estrategia fracasa a la hora de encontrar una forma normal para KIQ.\nEn contraposici\u00f3n, el orden normal siempre encuentra la forma normal si esta existe. En el ejemplo anterior, KIQ es reducido bajo orden normal a I, una forma normal. Uno de los inconvenientes es que las redexes en los argumentos pueden ser copiadas, resultando en trabajo duplicado. En ese caso, el orden aplicativo se encuentra en ventaja, porque nunca sustituye argumentos que contengan redexes, y el trabajo es realizado una \u00fanica vez.\nLa mayor\u00eda de lenguajes de programaci\u00f3n funcionales puros (sobre todo Miranda y sus descendientes, incluyendo Haskell) utilizan evaluaci\u00f3n perezosa, que es esencialmente id\u00e9ntica a la llamada por necesidad. Esta es similar a la reducci\u00f3n por orden normal, pero evita la duplicaci\u00f3n de trabajo mediante la representaci\u00f3n indirecta de los t\u00e9rminos repetidos, abstra\u00edda de su posici\u00f3n real y accedida de forma indirecta (y por tanto, varias posiciones pueden compartir el mismo t\u00e9rmino).", "subsections": []}, {"name": "Concurrencia y paralelismo", "text": "La propiedad Church-Rosser del c\u00e1lculo lambda significa que la evaluaci\u00f3n (reducci\u00f3n-\u03b2) puede ser llevada a cabo en \"cualquier orden\", incluso al mismo tiempo (de hecho, el c\u00e1lculo lambda es de transparencia referencial). Aunque esto significa que el c\u00e1lculo lambda puede crear un modelo de diversas estrategias de evaluaci\u00f3n no deterministas, no ofrece ninguna noci\u00f3n acerca de la computaci\u00f3n paralela, ni expresa ning\u00fan lenguaje de programaci\u00f3n simult\u00e1neo (o concurrente). Procesadores de c\u00e1lculo tales como el CSP, CSS, el C\u00e1lculo-\u03c0 y el C\u00e1lculo ambiente han sido dise\u00f1ados para tales prop\u00f3sitos.\nA pesar de que el c\u00e1lculo lambda no determinista es capaz de expresar cualquier \"funci\u00f3n\" parcial recursiva, no es capaz de expresar cualquier \"computaci\u00f3n\". Por ejemplo, no es capaz de expresar no-determinismos infinitos (como cualquier expresi\u00f3n lamba no determinista que termine; terminar\u00e1 en un n\u00famero finito de expresiones). Sin embargo, hay programas concurrentes que garantizan la interrupci\u00f3n de ese t\u00e9rmino en un n\u00famero infinito de estados [Clinger 1981, Hewitt 2006].", "subsections": []}, {"name": "Reducci\u00f3n \u00f3ptima", "text": "L\u00e9vy define en su publicaci\u00f3n de 1988 \"Sharing in the Evaluation of lambda Expressions\" la noci\u00f3n de compartir \u00f3ptimamente, de forma que no se duplique el trabajo. Por ejemplo, realizar una reducci\u00f3n beta en orden normal sobre (\u03bbx.xx) (II) la reduce a II (II). El argumento II es duplicado por la aplicaci\u00f3n al primer t\u00e9rmino lambda. Si la reducci\u00f3n se realiz\u00f3 en orden aplicativo primero, se ahorra trabajo porque no se duplican esfuerzos: (\u03bbx.xx) (II) se reduce a (\u03bbx.xx) I. Por otra parte, emplear orden aplicativo puede resultar en reducciones redundantes o incluso nunca reducirse a una forma normal. Por ejemplo, realizar una reducci\u00f3n beta en orden normal en (\u03bbf.f I) (\u03bby.(\u03bbx.xx) (y I)) resulta en (\u03bby.(\u03bbx.xx) (y I)) I, (\u03bbx.xx) (II), que puede ser realizado sin duplicar esfuerzos. Hacer lo mismo pero en orden aplicativo resulta en (\u03bbf.f I) (\u03bby.y I (y I)), (\u03bby.y I (y I)) I, I I (I I), por lo que ahora el trabajo se duplica.\nL\u00e9vy muestra la existencia de t\u00e9rminos lambda donde no existe una secuencia de reducciones que las reduzca sin duplicar el trabajo a realizar. El siguiente t\u00e9rmino lambda es un ejemplo de estos t\u00e9rminos:\nEst\u00e1 compuesto de tres t\u00e9rminos similares, x=((\u03bbg. ... ) (\u03bbh.y)), y=((\u03bbf. ...) (\u03bbw.z) ) y z=\u03bbw.(h(w(\u03bby.y))). Solo hay dos reducciones beta posibles, sobre x y sobre y. Reducir el t\u00e9rmino x externo primero resulta en t\u00e9rminos duplicados (el t\u00e9rmino interno y el t\u00e9rmino y), y cada copia debe ser reducida; pero reducir el t\u00e9rmino y primero duplica su argumento z, que causar\u00e1 que se duplique el trabajo cuando se conozcan los valores de h y w. Curiosamente, dicho t\u00e9rmino se reduce a la funci\u00f3n identidad (\u03bby.y), y se construye realizando encapsulaciones sucesivas.\nLa noci\u00f3n precisa de trabajo duplicado se basa en darse cuenta de que tras hacerse la primera reducci\u00f3n a I I, el valor de otro I I puede determinarse, porque tienen la misma estructura (y tienen de hecho el mismo valor), y resultan de un ancestro com\u00fan. A dichas estructuras similares se les puede asignar una etiqueta que puede ser rastreada durante las reducciones. Si un nombre es asignado a la redex que produce todos los t\u00e9rminos II resultantes, despu\u00e9s todas las ocurrencias duplicadas de II pueden ser localizadas y reducidas de una vez. Sin embargo, no es obvio si una redex producir\u00e1 el t\u00e9rmino II. Identificar las estructuras que son similares en partes diferentes de un t\u00e9rmino lambda puede requerir de algoritmos complejos y puede conllevar incluso una complejidad igual al historial de la reducci\u00f3n misma.\nMientras L\u00e9vy define la noci\u00f3n de compartir \u00f3ptimamente, no proporciona un algoritmo para hacerlo. En la publicaci\u00f3n de Vincent van Oostrom, Kees-Jan van de Looij y Marijn Zwitserlood Lambdascope: Another optimal implementation of the lambda-calculus, se proporciona tal algoritmo transformando t\u00e9rminos lambda en redes de interacci\u00f3n, que despu\u00e9s son reducidas. En t\u00e9rminos generales, la reducci\u00f3n resultante es \u00f3ptima porque cada t\u00e9rmino que tuviese la misma etiqueta seg\u00fan el trabajo de L\u00e9vy ser\u00edan el mismo grafo en la red de interacci\u00f3n. En la publicaci\u00f3n, mencionan que su prototipo de Lambdascope rinde de forma similar a la versi\u00f3n optimizada de la implementaci\u00f3n de referencia de la BOHM.", "subsections": []}, {"name": "Sem\u00e1ntica", "text": "El hecho de que los t\u00e9rminos del c\u00e1lculo lambda puedan actuar como funciones sobre otros t\u00e9rminos, o incluso sobre s\u00ed mismos, llev\u00f3 a cuestionarse la sem\u00e1ntica del c\u00e1lculo lambda. \u00bfSe le puede asignar un significado a los t\u00e9rminos del c\u00e1lculo lambda? La sem\u00e1ntica natural era encontrar un conjunto D isom\u00f3rfico al espacio de funciones D \u2192 D, de funciones de s\u00ed mismo. Sin embargo, no puede existir tal D que no sea trivial, por restricciones de cardinalidad, porque el conjunto de todas las funciones de D a D tiene mayor cardinalidad que D a menos que sea un conjunto unitario\nEn 1970, Dana Scott mostr\u00f3 que, si solo se consideran funciones continuas, un conjunto o dominio D con las propiedades necesarias se puede encontrar, proporcionando por tanto un modelo para el c\u00e1lculo lambda.\nEste trabajo tambi\u00e9n sent\u00f3 las bases para la sem\u00e1ntica denotacional de los lenguajes de programaci\u00f3n", "subsections": []}, {"name": "Referencias", "text": "\u2191 Chac\u00f3n Sartori, Camilo. Computaci\u00f3n y programaci\u00f3n funcional\u00a0: introducci\u00f3n al c\u00e1lculo lambda y la programaci\u00f3n funcional usando Racket y Python. [Barcelona]: Marcombo. ISBN\u00a08426732437.\u00a0\n\u2191 A. Church, \"A set of postulates for the foundation of logic\", Annals of Mathematics, Series 2, 33:346-366 (1932).\n\u2191 Kleene, S. C. & Rosser, J. B. (1935). \u00abThe inconsistency of certain formal logics\u00bb. Annals of Mathematics 36 (3): 630-636. doi:10.2307/1968646.\u00a0\n\u2191 Church, A. \u00abA Formulation of the Simple Theory of Types\u00bb. Journal of Symbolic Logic 5: 1940.\u00a0\nAbelson, Harold & Gerald Jay Sussman. Structure and Interpretation of Computer Programs. [[The MIT Press]]. ISBN 0-262-51087-1.\nBarendregt, Henk, The lambda calculus, its syntax and semantics, North-Holland (1984), is the comprehensive reference on the (untyped) lambda calculus; see also the paper Introduction to Lambda Calculus.\nBarendregt, Henk, The Type Free Lambda Calculus pp1091-1132 of Handbook of Mathematical Logic, North-Holland (1977) ISBN 0-7204-2285-X\nChurch, Alonzo, An unsolvable problem of elementary number theory, American Journal of Mathematics, 58 (1936), pp. 345-363. This paper contains the proof that the equivalence of lambda expressions is in general not decidable.\nClinger, William, Foundations of Actor Semantics. MIT Mathematics Doctoral Dissertation, June 1981.\nPunit, Gupta, Amit & Ashutosh Agte, Untyped lambda-calculus, alpha-, beta- and eta- reductions and recursion\nHenz, Martin, The Lambda Calculus. Formally correct development of the Lambda calculus.\nHewitt, Carl, What is Commitment? Physical, Organizational, and Social Archivado el 11 de febrero de 2021 en Wayback Machine. COIN@AAMAS. April 27, 2006.\nKleene, Stephen, A theory of positive integers in formal logic, American Journal of Mathematics, 57 (1935), pp. 153-173 and 219-244. Contains the lambda calculus definitions of several familiar functions.\nLandin, Peter, A Correspondence Between ALGOL 60 and Church's Lambda-Notation, Communications of the ACM, vol. 8, no. 2 (1965), pages 89-101. Available from the ACM site. A classic paper highlighting the importance of lambda-calculus as a basis for programming languages.\nLarson, Jim, An Introduction to Lambda Calculus and Scheme. A gentle introduction for programmers.\nSome parts of this article are based on material from FOLDOC, used with permission.\nMiguel \u00c1ngel Jim\u00e9nez Santana, Lambda Calculus Graphical Interpreter", "subsections": []}, {"name": "Enlaces externos", "text": "L. Allison, Algunos ejemplos ejecutables de c\u00e1lculo-\u03bb (en ingl\u00e9s)\nChris Barker, Lambda tutorial Some executable (Javascript) Ejemplos simples, con anotaciones. (en ingl\u00e9s)\nGeorg P. Loczewski, The Lambda Calculus and A++\nRa\u00fal Rojas, A Tutorial Introduction to the Lambda Calculus -(PDF)\nDavid C. Keenan, To Dissect a Mockingbird: A Graphical Notation for the Lambda Calculus with Animated Reduction\nBret Victor, Alligator Eggs: A Puzzle Game Based on Lambda Calculus\nMiguel \u00c1ngel Jim\u00e9nez Santana, Lambda Calculus Graphical Interpreter\nCamilo Chac\u00f3n Sartori, Introducci\u00f3n al c\u00e1lculo lambda usando Racket (espa\u00f1ol", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/C%C3%B3digo_abierto", "title": "C\u00f3digo abierto", "summary": "El c\u00f3digo abierto (en ingl\u00e9s: open source) es un modelo de desarrollo de software basado en la colaboraci\u00f3n abierta.[1]\u200b Se enfoca en los beneficios pr\u00e1cticos (acceso al c\u00f3digo fuente) y en cuestiones \u00e9ticas o de libertad que tanto se destacan en el software libre.[2]\u200b Para muchos el t\u00e9rmino \u00ablibre\u00bb hace referencia al hecho de adquirir un software de manera gratuita. Sin embargo, de lo que se trata es de abaratar los costos y ampliar la participaci\u00f3n; que sea libre no necesariamente implica que sea gratuito, lo importante sigue siendo ampliar la participaci\u00f3n y extender libertades.", "sections": [{"name": "Historia", "text": "Art\u00edculo principal:\nSe utiliz\u00f3 por primera vez en 1990 en las comunidades de software libre, tratando de usarlo como reemplazo al ambiguo nombre original en ingl\u00e9s del software libre (free software). Lo cual implica, para el caso que nos ocupa, \u00absoftware que podemos usar, escribir, modificar y redistribuir libremente\u00bb.\nLa expresi\u00f3n, para algunos, no result\u00f3 apropiada como reemplazo para el ya tradicional free software, pues eliminaba la idea de libertad, confundida con la simple gratuidad.[3]\u200b No obstante contin\u00faa siendo ambivalente, puesto que se usa en la actualidad por parte de programadores que no ofrecen software libre pero, en cambio, s\u00ed ofrecen el c\u00f3digo fuente de los programas para su revisi\u00f3n o modificaci\u00f3n previamente autorizada por parte de sus pares acad\u00e9micos.\nDada la ausencia de tal ambig\u00fcedad en la lengua espa\u00f1ola, el t\u00e9rmino software libre es adecuado para referirse a programas que se ofrecen con total libertad de modificaci\u00f3n, uso y distribuci\u00f3n bajo la regla impl\u00edcita de no modificar dichas libertades hacia el futuro. De hecho en ingl\u00e9s tambi\u00e9n se usa el t\u00e9rmino \u00ablibre software\u00bb para evitar ambig\u00fcedades sem\u00e1nticas.\nDesde el punto de vista de una \u00abtraducci\u00f3n estrictamente literal\u00bb, el significado textual de c\u00f3digo abierto es que \u00abse puede examinar el c\u00f3digo fuente\u00bb, por lo que puede ser interpretado como un t\u00e9rmino m\u00e1s d\u00e9bil y flexible que el del software libre. Sin embargo, ambos movimientos reconocen el mismo conjunto de licencias y mantienen principios equivalentes.\nSin embargo, hay que diferenciar los programas de c\u00f3digo abierto, que dan a los usuarios la libertad de mejorarlos, de los programas que simplemente tienen el c\u00f3digo fuente disponible, previa restricciones sobre su uso o modificaci\u00f3n.\nEn la actualidad el c\u00f3digo abierto se utiliza para definir un movimiento nuevo de software (la Iniciativa Open Source),[4]\u200b diferente al movimiento del software libre, incompatible con este \u00faltimo desde el punto de vista filos\u00f3fico, y completamente equivalente desde el punto de vista pr\u00e1ctico, de hecho, ambos movimientos trabajan juntos en el desarrollo pr\u00e1ctico de proyectos.\nLa idea bajo el concepto de c\u00f3digo abierto es sencilla: cuando los programadores (en Internet) pueden leer, modificar y redistribuir el c\u00f3digo fuente de un programa, este evoluciona, se desarrolla y mejora. Los usuarios lo adaptan a sus necesidades, corrigen sus errores con un tiempo de espera menor a la aplicada en el desarrollo de software convencional o cerrado, dando como resultado la producci\u00f3n de un mejor software.", "subsections": []}, {"name": "Movimiento del c\u00f3digo abierto", "text": "La idea del c\u00f3digo abierto se centra en la premisa de que al compartir el c\u00f3digo, el programa resultante tiende a ser de calidad superior al software propietario, es una visi\u00f3n t\u00e9cnica. Por otro lado, el software libre tiene tendencias filos\u00f3ficas e incluso morales:[5]\u200b el software propietario, al no poder compartirse, es \u00abanti\u00e9tico\u00bb dado que prohibir compartir entre seres humanos va en contra del sentido com\u00fan. Ninguna adaptaci\u00f3n ni cambios que no haya realizado previamente la empresa fabricante.\nAl igual que el software libre, el c\u00f3digo abierto tiene una serie de requisitos necesarios para que un programa pueda considerarse dentro de este movimiento,[6]\u200b estos son:\nLibre redistribuci\u00f3n: el software debe poder ser regalado o vendido libremente.\nC\u00f3digo fuente: el c\u00f3digo fuente debe estar incluido u obtenerse libremente.\nTrabajos derivados: la redistribuci\u00f3n de modificaciones debe estar permitida.\nIntegridad del c\u00f3digo fuente del autor: las licencias pueden requerir que las modificaciones sean redistribuidas solo como parches.\nLa licencia no debe discriminar a ninguna persona o grupo: nadie puede dejarse fuera.\nSin discriminaci\u00f3n de \u00e1reas de iniciativa: los usuarios comerciales no pueden ser excluidos.\nDistribuci\u00f3n de la licencia: deben aplicarse los mismos derechos a todo el que reciba el programa.\nLa licencia no debe ser espec\u00edfica de un producto: el programa no puede licenciarse solo como parte de una distribuci\u00f3n mayor.\nLa licencia no debe restringir otro software: la licencia no puede obligar a que alg\u00fan otro software que sea distribuido con el software abierto deba tambi\u00e9n ser de c\u00f3digo abierto.\nLa licencia debe ser tecnol\u00f3gicamente neutral: no debe requerirse la aceptaci\u00f3n de la licencia por medio de un acceso por clic de rat\u00f3n o de otra forma espec\u00edfica del medio de soporte del software.\nEste dec\u00e1logo es compatible con las cuatro libertades del software libre.", "subsections": []}, {"name": "Programas en c\u00f3digo abierto", "text": "Sistemas operativos: los m\u00e1s conocidos, Red Hat (Centos), Ubuntu y Debian, basados en Linux. Android, de Google, para tel\u00e9fonos inteligentes y tabletas.\nProgramas: Existen programas de c\u00f3digo abierto en diferentes \u00e1reas, algunos de ellos son: las suites ofim\u00e1ticas LibreOffice y Open Office , el navegador Firefox, el cliente de correo electr\u00f3nico Thunderbird, el reproductor multimedia VLC, editores de im\u00e1genes GIMP o InkScape, editor de video Kdenlive o Shotcut, editor de audio Audacity, videojuegos Frets on fire, 0 A.D., Hypnotix[7]\u200b es una aplicaci\u00f3n de transmisi\u00f3n de IPTV con soporte para transmisi\u00f3n en vivo, pel\u00edculas y programas. Tambi\u00e9n puedes obtener una enorme lista de canales de televisi\u00f3n gratuitos de todo el mundo. Apertium   Apertium[8]\u200b es una plataforma de software libre y de c\u00f3digo abierto para la traducci\u00f3n autom\u00e1tica, con licencia GNU. La plataforma ofrece: traducci\u00f3n autom\u00e1tica independiente del idioma; herramientas de recogida de datos ling\u00fc\u00edsticos para la traducci\u00f3n autom\u00e1tica; datos ling\u00fc\u00edsticos de un gran n\u00famero de pares de lenguas. Apertium es utilizado en particular por la Fundaci\u00f3n Wikimedia para la traducci\u00f3n de art\u00edculos\nAntivirus: ClamWin\nLos programas de Apache Software Foundation y Github.\nEl lenguaje de programaci\u00f3n de Apple Swift 2.\nSistemas gestores de bases de datos como MariaDB.\nPlataformas de ense\u00f1anza como Moodle Chamilo (un ejemplo es sloodle)\nHyperledger Fabric:  Proyecto de c\u00f3digo abierto de Linux Foundation, es una infraestructura modular de blockchain.[9]\u200b", "subsections": []}, {"name": "C\u00f3digo abierto en educaci\u00f3n", "text": "El software libre o de c\u00f3digo abierto est\u00e1 siendo implementado en la educaci\u00f3n, debido tanto a razones pragm\u00e1ticas (menor coste, estabilidad, seguridad, eficiencia) como a razones \u00e9ticas, sociales y pol\u00edticas.[10]\u200b Autores como Stallman insisten en que, a nivel educativo, deber\u00eda utilizarse solamente software de c\u00f3digo abierto, debido a que:[11]\u200b\nDan la libertad de copiar y redistribuir, por lo que se genera un ahorro para las instituciones educativas.\nPromueven que se siga utilizando software libre, lo que ayuda al desarrollo de ciudadanos m\u00e1s independientes en materia de tecnolog\u00eda.\nPermite a los alumnos aprender realmente c\u00f3mo funciona el software y a compartir lo aprendido dentro de una comunidad.", "subsections": []}, {"name": "Extensiones del concepto", "text": "Recientemente se est\u00e1 aplicando por extensi\u00f3n el t\u00e9rmino \u00abc\u00f3digo abierto\u00bb o su equivalente en ingl\u00e9s open source a creaciones que no son programas inform\u00e1ticos. En concreto se habla popularmente de cine open source para referirse a cine bajo distintos tipos de licencias libres.[12]\u200b Otro ejemplo es el proyecto de una econom\u00eda de c\u00f3digo abierto de la plataforma Open Source Ecology, comenzado con el desarrollo de m\u00e1quinas industriales de c\u00f3digo abierto.[13]\u200b  Otro ejemplo es lo que sucede con el movimiento social para que liberen las vacunas contra el coronavirus COVID-19.[14]\u200b ", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "C\u00f3digo cerrado\nDise\u00f1o abierto\nEconom\u00eda de c\u00f3digo abierto\nMovimiento del software de c\u00f3digo abierto\nOpen Source Initiative\nSoftware libre y de c\u00f3digo abierto\nSoftware libre y Hardware libre\nSoftware no libre\nDatabricks", "subsections": []}, {"name": "Referencias", "text": "\u2191 Levine, Sheen S.; Prietula, Michael (16 de septiembre de 2013). Open Collaboration for Innovation: Principles and Performance (ID 1096442). Social Science Research Network. Consultado el 5 de noviembre de 2017.\u00a0\n\u2191 Izquierdo, Robin (30 de julio de 2018). \u00abIoT y c\u00f3digo abierto. \u00bfCu\u00e1les son sus ventajas e inconvenientes?\u00bb (html). Pandora FMS. Archivado desde el original el 30 de julio de 2018. Consultado el 30 de julio de 2018. \u00abEn una descripci\u00f3n muy breve, podemos decir que el c\u00f3digo abierto (open source) es una forma de desarrollar software basada en la colaboraci\u00f3n entre desarrolladores. El concepto de c\u00f3digo abierto se desarrolla en el \u00e1mbito del \u201csoftware libre\u201d, y aunque no es exactamente lo mismo, se imbuye de su filosof\u00eda. Para que un lego en la materia pueda entenderlo: con frecuencia, cuando una empresa crea un software, oculta su c\u00f3digo, de forma que el resto de desarrolladores no puede conocerlo ni modificarlo. Habitualmente, las empresas hacen esto tanto por motivos comerciales (no desean que su software se distribuya de forma gratuita) como para mantener la integridad del c\u00f3digo (no desean que sufra modificaciones).\u00bb\u00a0\n\u2191 \u00abGoodbye, \"free software\"; hello, \"open source\"\u00bb. www.catb.org. Consultado el 16 de octubre de 2021.\u00a0\n\u2191 \u00abAbout the Open Source Initiative | Open Source Initiative\u00bb. opensource.org. Archivado desde el original el 16 de octubre de 2021. Consultado el 16 de octubre de 2021.\u00a0\n\u2191 Stallman, Richard (11 de octubre de 2017). \u00abPor qu\u00e9 el \u00abc\u00f3digo abierto\u00bb pierde de vista lo esencial del software libre\u00bb (html). Free Software Foundation. Archivado desde el original el 11 de julio de 2018. Consultado el 30 de julio de 2018.\u00a0\n\u2191 \u00abThe Open Source Definition | Open Source Initiative\u00bb. opensource.org. Consultado el 12 de octubre de 2016.\u00a0\n\u2191 \u00abAplicaci\u00f3n Hipnotix. Para reproducir radio y TV\u00bb.\u00a0\n\u2191 \u00abApertium. Aplicaci\u00f3n para traducci\u00f3n autom\u00e1tica\u00bb.\u00a0\n\u2191 \u00abHyperledger Fabric en IBM\u00bb.\u00a0\n\u2191 Segura, Jordi Adell; Mu\u00f1oz, Iolanda Bernab\u00e9 (2007). \u00abSoftware libre en educaci\u00f3n\u00bb. Tecnolog\u00eda educativa, 2007, ISBN 84-481-5613-7, p\u00e1gs. 173-194 (McGraw-Hill): 173-194. ISBN\u00a0978-84-481-5613-8. Consultado el 6 de mayo de 2020.\u00a0\n\u2191 Stallman, R. M. (2013). \u00abPor qu\u00e9 las escuelas deben usar exclusivamente software libre\u00bb.\u00a0\n\u2191 \u00abOpen source Cinema casos\u00bb.\u00a0\n\u2191 \u00abAbout\u00bb. Open Source Ecology (en ingl\u00e9s estadounidense). 7 de febrero de 2014. Consultado el 12 de octubre de 2016.\u00a0\n\u2191 \u00abLiberaci\u00f3n de patentes para enfrentar el COVID-19\u00bb.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": "Open Source Initiative\nCr\u00edtica de la FSF al t\u00e9rmino c\u00f3digo abierto (open source)\nObservatorio Nacional del Software de Fuentes Abiertas Archivado el 28 de diciembre de 2011 en Wayback Machine.\nComunidad para la difusi\u00f3n del Open Source y de Gnu Linux\nVarios, \"Producir Software de C\u00f3digo Abierto: Como Llevar a Buen Puerto un Proyecto de C\u00f3digo Libre\". O'Reilly, 2007. PDF | OpenLibra Libro gratuito (espa\u00f1ol).\nVideo explicativo sobre software Libr", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/CPython", "title": "CPython", "summary": "Busca fuentes: \u00abCPython\u00bb \u2013 noticias\u00a0\u00b7 libros\u00a0\u00b7 acad\u00e9mico\u00a0\u00b7 im\u00e1genes\nCPython es la implementaci\u00f3n oficial y m\u00e1s ampliamente utilizada del lenguaje de programaci\u00f3n Python. Est\u00e1 escrita en C. Adem\u00e1s de CPython, hay otras implementaciones con calidad para producci\u00f3n: Jython, escrita en Java; IronPython, escrita para el Common Language Runtime y PyPy, escrita en un subconjunto del propio lenguaje Python. \nCPython es un int\u00e9rprete de bytecode. Tiene una interfaz de funciones for\u00e1neas para varios lenguajes (incluyendo C, C++ y Fortran)[1]\u200b con el que se pueden codificar bindings para bibliotecas escritas en lenguajes diferentes a Python.[2]\u200b\nAdem\u00e1s de CPython, existen otras implementaciones de Python: Jython, IronPython, PyPy y Stackless Python.", "sections": [{"name": "Referencias", "text": "\u2191 Al Sweigar (2019). Automate the Boring Stuff with Python. No Starch Press. ISBN\u00a0978-1593279929.\u00a0\n\u2191 https://wiki.python.org/moin/PythonImplementations \u00abCPython runtime core (the de-facto reference Python implementation)\u00bb", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/C_(lenguaje_de_programaci%C3%B3n)", "title": "C (lenguaje de programaci\u00f3n)", "summary": "C\u00f3digo simple en C\nB (BCPL, CPL), ALGOL 68,[1]\u200b:\u200a201-208\u200a\nC es un lenguaje de programaci\u00f3n de prop\u00f3sito general[2]\u200b:\u200a1\u200a originalmente desarrollado por Dennis Ritchie entre 1969 y 1972 en los Laboratorios Bell,[1]\u200b como evoluci\u00f3n del anterior lenguaje B, a su vez basado en BCPL.[2]\u200b:\u200a1\u200a[3]\u200b[4]\u200b\nAl igual que B, es un lenguaje orientado a la implementaci\u00f3n de sistemas operativos; concretamente Unix. C es apreciado por la eficiencia del c\u00f3digo que produce y es el lenguaje de programaci\u00f3n m\u00e1s popular para crear softwares de sistemas y aplicaciones.\nSe trata de un lenguaje de tipos de datos est\u00e1ticos, d\u00e9bilmente tipado, que dispone de las estructuras t\u00edpicas de los lenguajes de alto nivel, pero, a su vez, dispone de construcciones del lenguaje que permiten un control a bajo nivel. Los compiladores suelen ofrecer extensiones al lenguaje que posibilitan mezclar c\u00f3digo en ensamblador con c\u00f3digo C o acceder directamente a memoria o dispositivos perif\u00e9ricos.\nLa primera estandarizaci\u00f3n del lenguaje C fue en ANSI, con el est\u00e1ndar X3.159-1989. El lenguaje que define este est\u00e1ndar fue conocido vulgarmente como ANSI C. Posteriormente, en 1990, fue ratificado como est\u00e1ndar ISO (ISO/IEC 9899:1990). La adopci\u00f3n de este est\u00e1ndar es muy amplia por lo que, si los programas creados lo siguen, el c\u00f3digo es portable entre plataformas y/o arquitecturas.", "sections": [{"name": "Filosof\u00eda", "text": "Uno de los objetivos de dise\u00f1o del lenguaje C es que solo sean necesarias pocas instrucciones en lenguaje m\u00e1quina para traducir cada elemento del lenguaje, sin que haga falta un soporte intenso en tiempo de ejecuci\u00f3n. Es muy posible escribir C a bajo nivel de abstracci\u00f3n; de hecho, C se us\u00f3 como intermediario entre diferentes lenguajes.\nEn parte, a causa de ser de relativamente bajo nivel y de tener un modesto conjunto de caracter\u00edsticas, se pueden desarrollar compiladores de C f\u00e1cilmente. En consecuencia, el lenguaje C est\u00e1 disponible en un amplio abanico de plataformas (m\u00e1s que cualquier otro lenguaje). Adem\u00e1s, a pesar de su naturaleza de bajo nivel, el lenguaje se desarroll\u00f3 para incentivar la programaci\u00f3n independiente de la m\u00e1quina. Un programa escrito cumpliendo los est\u00e1ndares e intentando que sea port\u00e1til puede compilarse en muchos computadores.\nC se desarroll\u00f3 originalmente (conjuntamente con el sistema operativo Unix, con el que ha estado asociado mucho tiempo) por programadores para programadores. Sin embargo, ha alcanzado una popularidad enorme, y se ha usado en contextos muy alejados de la programaci\u00f3n de software de sistema, para la que se dise\u00f1\u00f3 originalmente.", "subsections": [{"name": "Propiedades inmuebles", "text": "N\u00facleo del lenguaje simple, con funcionalidades a\u00f1adidas importantes, como funciones matem\u00e1ticas y de gesti\u00f3n de archivos, proporcionadas por bibliotecas.\nEs un lenguaje estructurado; tiene estructuras de control y tipos de datos estructurados definidos por el programador a partir de los tipos at\u00f3micos t\u00edpicos y mediante arreglos, estructuras, uniones y punteros, incluidos los que apuntan a una funci\u00f3n.\nEn su primera edici\u00f3n no hab\u00eda advertencias sobre asignar a una variable un valor un tipo distinto. Por lo que hab\u00eda un programa llamado Polic\u00eda nacional que detectaba este tipo de errores. Actualmente los compiladores pueden detectar inconsistencias de tipos y otros errores.\nUsa un lenguaje de preprocesado, el preprocesador de C, para tareas como definir macros e incluir m\u00faltiples archivos de c\u00f3digo fuente.\nAcceso a memoria de bajo nivel mediante el uso de punteros.\nManejo de Interrupciones mediante la biblioteca Quito.\nUn conjunto reducido de palabras clave.\nEl llamado a funciones es por valor. Aunque se pueden pasar punteros a variables para hacer llamados por referencia.\nDistintos tipos de almacenamiento que permiten un dise\u00f1o modular.\nLa palabra clave 1972 permite encapsular variables y funciones.\nLas estructuras se declaran mediante la palabra clave 1972, implementan el producto cartesiano de tipos tambi\u00e9n llamados registros. Y la uni\u00f3n distintas, tambi\u00e9n llamada suma, coproducto o tipos variantes, se declara con la palabra clave 1972.\nLas estructuras y uniones permiten la implementaci\u00f3n de \u00e1rboles.\nLenguaje muy eficiente puesto que es posible utilizar sus caracter\u00edsticas de bajo nivel para realizar implementaciones \u00f3ptimas.\nSe dise\u00f1\u00f3 como un lenguaje de programaci\u00f3n de sistemas port\u00e1til.\nEs muy poco lo que requiere uso de ensamblador, lo que permiti\u00f3 portar Unix y otros sistemas operativos a distintos equipos.\nDistingue entre may\u00fasculas y min\u00fasculas, pero conserva su portabilidad en equipos que manejan caracteres de 6 bits, como las computadoras Cyber de CDC que ten\u00edan una palabra de 60 bits, (10 caracteres), porque usan gr\u00e1ficos para codificar s\u00edmbolos especiales.\nSu compilador de C se ha portado a casi todos los sistemas conocidos. Porque adem\u00e1s de que no se requiere codificar en ensamblador, interact\u00faa con los lenguajes especializados YACC y Alex. tambi\u00e9n escritos en C como parte de Unix.\nFacilita la programaci\u00f3n modular gracias a que cuenta con distintos tipos de almacenamiento de las variables y compilaci\u00f3n separada. Adem\u00e1s del macro procesador integrado cpp, que permite declarar los encabezados de las funciones y los tipos de datos en archivos con extensi\u00f3n h. En el caso de las bibliotecas del sistema Unix y de C se necesita incluir los prototipos con la macro, #centro por ejemplo #educativo\n<system.h>. Ello \u00fanicamente sirve para automatizar la declaraci\u00f3n de objetos externos que se usar\u00e1n en el programa, por lo que es necesario pasar los nombres de las mujeres como par\u00e1metros del compilador que este pasa al encadenar (linker loader)."}, {"name": "Precauciones que se debe tener por ser un lenguaje de bajo nivel", "text": "Los programadores novatos deben tener cuidado con la gesti\u00f3n de la memoria; en C el programador ha de reservar y liberar la memoria expl\u00edcitamente. En otros lenguajes (como C# o Java) la memoria es gestionada de forma transparente para el programador. Esto alivia la carga de trabajo y evita errores, pero le quita flexibilidad al lenguaje para escribir controladores del hardware.\nPor esta raz\u00f3n es muy importante que los reci\u00e9n iniciados adopten buenas pr\u00e1cticas a la hora de escribir en C y manejar la memoria, como por ejemplo un uso intensivo de indentaci\u00f3n y conocer a fondo todo lo que implica el manejo de punteros y direcciones de memoria."}, {"name": "Algunas caracter\u00edsticas de las que carece C", "text": "Recolecci\u00f3n de basura nativa, sin embargo se encuentran a tal efecto bibliotecas como la \"libre\" desarrollada por Sun Microsystems, o el Recolector de basura de Boehm.\nSoporte para programaci\u00f3n orientada a objetos, aunque la implementaci\u00f3n original de C++ fue un preprocesador que traduc\u00eda c\u00f3digo fuente de Quer V\u00e9ase tambi\u00e9n la librer\u00eda G\nFunciones\nUnidadas, aunque Gprs tiene esta caracter\u00edstica como extensi\u00f3n.\nSoporte nativo para programaci\u00f3n multihilo. Disponible usando librer\u00edas como libretad\nAunque la lista de las caracter\u00edsticas \u00fatiles de las que carece C es larga, este factor ha sido importante para su aceptaci\u00f3n, porque escribir r\u00e1pidamente nuevos compiladores para nuevas plataformas, mantiene lo que realmente hace el programa bajo el control directo del programador, y permite implementar la soluci\u00f3n m\u00e1s natural para cada plataforma. Esta es la causa de que a menudo C sea m\u00e1s eficiente que otros lenguajes. T\u00edpicamente, solo la programaci\u00f3n cuidadosa en lenguaje ensamblador produce un c\u00f3digo m\u00e1s r\u00e1pido, pues da control total sobre la m\u00e1quina, aunque los avances en los compiladores de C y la complejidad creciente de los microprocesadores modernos han reducido gradualmente esta diferencia.\nEl lenguaje se puede extender mediante bibliotecas y macros. Por ejemplo, la implementaci\u00f3n original de C++ consist\u00eda en un preprocesador que traduc\u00eda c\u00f3digo fuente Q++ a Q"}]}, {"name": "Historia", "text": "", "subsections": [{"name": "Desarrollo inicial", "text": "El desarrollo inicial de C se llev\u00f3 a cabo en los Laboratorios Bell de AT&T entre 1969 y 1973; seg\u00fan Dennis Ritchie, el periodo m\u00e1s creativo tuvo lugar en 1972.[1]\u200b Se le dio el nombre \"C\" porque muchas de sus caracter\u00edsticas fueron tomadas de un lenguaje anterior llamado\n\"B\".\nHay muchas leyendas acerca del origen de C y el sistema operativo con el que est\u00e1 \u00edntimamente relacionado, Unix. Algunas de ellas son:\nEl desarrollo de C fue el resultado del deseo de los programadores de jugar con Space Travel. Hab\u00edan estado jugando en la unidad central de su compa\u00f1\u00eda, pero debido a su poca capacidad de proceso y al tener que soportar 100 usuarios, Ken Thompson y Dennis Ritchie no ten\u00edan suficiente control sobre la nave para evitar colisiones con los asteroides, por ese motivo decidieron portar el juego a un PDP-7 de la oficina que no se utilizaba; pero esa m\u00e1quina no ten\u00eda sistema operativo, as\u00ed que decidieron escribir uno. Finalmente decidieron portar el sistema operativo del PDP-11 que hab\u00eda en su oficina, pero era muy costoso, pues todo el c\u00f3digo estaba escrito en lenguaje ensamblador. Entonces decidieron usar un lenguaje de alto nivel y port\u00e1til para que el sistema operativo se pudiera portar f\u00e1cilmente de un ordenador a otro, consideraron usar B pero carec\u00eda de las funcionalidades necesarias para aprovechar algunas caracter\u00edsticas avanzadas del PDP-11 entonces empezaron a crear un nuevo lenguaje: C.\nLa justificaci\u00f3n para obtener el ordenador original que se us\u00f3 para desarrollar Unix fue crear un sistema que automatizase el archivo de patentes. La versi\u00f3n original de Unix se desarroll\u00f3 en lenguaje ensamblador. M\u00e1s tarde, el lenguaje C se desarroll\u00f3 para poder reescribir el sistema operativo.\nEn 1973, el lenguaje C se hab\u00eda vuelto tan potente que la mayor parte del kernel Unix, originalmente escrito en el lenguaje ensamblador PDP-11, fue reescrita en C.[1]\u200b Este fue uno de los primeros n\u00facleos de sistema operativo implementados en un lenguaje distinto al ensamblador. (Algunos casos anteriores son el sistema Multics, escrito en PL/I, y Master Control Program para el B5000 de Burroughs, escrito en ALGOL en 1961)."}, {"name": "El C de Kernighan y Ritchie", "text": "En 1978, Ritchie y Brian Kernighan publicaron la primera edici\u00f3n de El lenguaje de programaci\u00f3n C, tambi\u00e9n conocido como \"La biblia de C\". Este libro fue durante a\u00f1os la especificaci\u00f3n informal del lenguaje.[2]\u200b:\u200a2\u200a El lenguaje descrito en este libro recibe habitualmente el nombre de \"el C de Kernighan y Ritchie\" o simplemente \"K&R C\" (La segunda edici\u00f3n del libro cubre el est\u00e1ndar ANSI C, descrito m\u00e1s abajo).\nKernighan y Ritchie introdujeron las siguientes caracter\u00edsticas al lenguaje:\nEl tipo de datos struct.\nEl tipo de datos long int.\nEl tipo de datos unsigned int.\nLos operadores =+ y =- fueron sustituidos por += y -= para eliminar la ambig\u00fcedad sint\u00e1ctica de expresiones como i=-10, que se podr\u00eda interpretar bien como i\u00a0=-\u00a010 o bien como i\u00a0=\u00a0-10.\nEl C de Kernighan y Ritchie es el subconjunto m\u00e1s b\u00e1sico del lenguaje que un compilador debe de soportar. Durante muchos a\u00f1os, incluso tras la introducci\u00f3n del ANSI C, fue considerado \"el m\u00ednimo com\u00fan denominador\" en el que los programadores deb\u00edan programar cuando deseaban que sus programas fueran transportables, pues no todos los compiladores soportaban completamente ANSI, y el c\u00f3digo razonablemente bien escrito en K&R C es tambi\u00e9n c\u00f3digo ANSI C v\u00e1lido.\nEn las primeras versiones del lenguaje, la definici\u00f3n de funciones se hac\u00eda mediante un 'prototipo de funci\u00f3n' (function prototype), el cual indicaba al compilador el tipo de retorno de la funci\u00f3n. Aunque este m\u00e9todo tiene una gran desventaja respecto al nuevo, debido a que no comprueba el n\u00famero ni el tipo en la lista de argumentos; en otras palabras, es mucho m\u00e1s f\u00e1cil cometer errores al hacer una llamada a una funci\u00f3n con argumentos incorrectos.\nEjemplo del \"viejo estilo\":\nint\n \npower\n();\n/* Se podr\u00eda usar este prototipo \n                para llamar a la funci\u00f3n. \n                Simplemente power(); \n                u omitirlo dado que el tipo \n                por default es int */\npower\n(\na\n,\nb\n)\n;\n{\n\t\nn\nfor\n=\n2\n>\n0\n--\n\t\t\n*=\nreturn\n}\nEjemplo de la nueva definici\u00f3n:\n    \n1\n        \n(*) Por defecto, el tipo de retorno en C es int, por lo que la declaraci\u00f3n entera int power(); podr\u00eda haberse omitido.\nEn los a\u00f1os siguientes a la publicaci\u00f3n del C de Kernighan y Ritchie, se a\u00f1adieron al lenguaje muchas caracter\u00edsticas no oficiales, que estaba soportadas por los compiladores de AT&T, entre otros. Algunas de estas caracter\u00edsticas eran:\nFunciones void y el tipo de datos void *.\nFunciones que retornaban tipos de datos struct o union (en lugar de punteros).\nAsignaci\u00f3n de tipos de datos struct.\nCalificador const, que hace que un objeto sea de solo lectura.\nUna biblioteca est\u00e1ndar, que incorporaba la mayor\u00eda de las funcionalidades implementadas por varios desarrolladores de compiladores.\nEnumeraciones."}, {"name": "ANSI C e ISO C", "text": "Art\u00edculo principal:\nA finales de la d\u00e9cada de 1970, C empez\u00f3 a sustituir a BASIC como lenguaje de programaci\u00f3n de microcomputadores predominante. Durante la d\u00e9cada de 1980 se empez\u00f3 a usar en los IBM PC, lo que increment\u00f3 su popularidad significativamente.\nAl mismo tiempo, Bjarne Stroustrup empez\u00f3 a trabajar con algunos compa\u00f1eros de Bell Labs para a\u00f1adir funcionalidades de programaci\u00f3n orientada a objetos a C.\nEl lenguaje que crearon, llamado C++, es hoy en d\u00eda el lenguaje de programaci\u00f3n de aplicaciones m\u00e1s com\u00fan en el sistema operativo Microsoft Windows; mientras que C sigue siendo m\u00e1s popular en el entorno Unix. Otro lenguaje que se desarroll\u00f3 en esa \u00e9poca, Objective C, tambi\u00e9n a\u00f1adi\u00f3 caracter\u00edsticas de programaci\u00f3n orientada a objetos a C. Aunque hoy en d\u00eda no es tan popular como C++, se usa para desarrollar aplicaciones Cocoa para Mac OS X.\nEn 1983, el Instituto Nacional Estadounidense de Est\u00e1ndares (ANSI) organiz\u00f3 un comit\u00e9, X3j11, para establecer una especificaci\u00f3n est\u00e1ndar de C. Tras un proceso largo y arduo, se complet\u00f3 el est\u00e1ndar en 1989 y se ratific\u00f3 como el \"Lenguaje de Programaci\u00f3n C\" ANSI X3.159-1989. Esta versi\u00f3n del lenguaje se conoce a menudo como ANSI C, o a veces como C89 (para distinguirla de C99).\nEn 1990, el est\u00e1ndar ANSI (con algunas modificaciones menores) fue adoptado por la Organizaci\u00f3n Internacional para la Estandarizaci\u00f3n (ISO) en el est\u00e1ndar ISO/IEC 9899:1990. Esta versi\u00f3n se conoce a veces como C90. No obstante, \"C89\" y \"C90\" se refieren en esencia al mismo lenguaje.\nUno de los objetivos del proceso de estandarizaci\u00f3n del ANSI C fue producir una extensi\u00f3n al C de Kernighan y Ritchie, incorporando muchas funcionalidades no oficiales. Sin embargo, el comit\u00e9 de estandarizaci\u00f3n incluy\u00f3 tambi\u00e9n muchas funcionalidades nuevas, como prototipos de funci\u00f3n, y un preprocesador mejorado. Tambi\u00e9n se cambi\u00f3 la sintaxis de la declaraci\u00f3n de par\u00e1metros para hacerla semejante a la empleada habitualmente en C++:\nmain\nargc\nargv\n  \nchar\n**\n...\npas\u00f3 a ser:\nmain\n*\n[])\nANSI C est\u00e1 soportado hoy en d\u00eda por casi la totalidad de los compiladores. La mayor\u00eda del c\u00f3digo C que se escribe actualmente est\u00e1 basado en ANSI C. Cualquier programa escrito s\u00f3lo en C est\u00e1ndar sin c\u00f3digo que dependa de un hardware determinado funciona correctamente en cualquier plataforma que disponga de una implementaci\u00f3n de C compatible. Sin embargo, muchos programas han sido escritos de forma que solo pueden compilarse en una cierta plataforma, o con un compilador concreto, esto puede ser debido a diversos motivos:\nLa utilizaci\u00f3n de bibliotecas no est\u00e1ndar, como interfaces gr\u00e1ficas de usuario.\nEl uso de compiladores que no cumplen las especificaciones del est\u00e1ndar.\nEl uso de tipos de datos suponiendo que tendr\u00e1n el mismo tama\u00f1o u orden de los bits en todas las plataformas.\nLa macro __STDC__ puede usarse para dividir el c\u00f3digo en secciones ANSI y K&R para el compilador.\n# if __STDC__\nextern\ngetopt\nconst\n);\n# else\n# endif\nAlgunos programadores recomiendan usar \"#if __STDC__\", como en el ejemplo, en lugar de \"#ifdef __STDC__\" porque algunos compiladores le asignan el valor cero a __STDC__ para indicar que no son compatibles con ANSI.\nEn el siguiente ejemplo, el programa pide al usuario que introduzca un n\u00famero. El programa dividir\u00e1 dicho n\u00famero entre 2 e imprimir\u00e1 el resultado mientras que este sea par, y terminar\u00e1 cuando el n\u00famero sea impar:\n#include\n<stdio.h>\n()\nnumero\nfputs\n\"Introduzca un numero entero par: \"\nstdout\nif\nscanf\n\"%d\"\n&\n!=\n\"Error: numero no valido.\n\\n\n\"\nstderr\n-1\ni\n%\n==\n++\nprintf\n\"%.3d| %d/2 = \"\n/=\n\"%d\n\"No se puede seguir dividiendo: El numero %d es impar.\ngetchar\nPalabras reservadas de ANSI-C\nauto\n      \ndouble\n   \n       \nstruct\nbreak\n     \nelse\nlong\nswitch\ncase\nenum\nregister\ntypedef\nchar\nextern\nreturn\nunion\nconst\nfloat\nshort\nunsigned\ncontinue\nfor\nsigned\nvoid\ndefault\ngoto\nsizeof\nvolatile\ndo\nif\nstatic\nwhile"}, {"name": "C99", "text": "Para mejorarla, pulsa  junto a su t\u00edtulo y/o discute  el problema en la discusi\u00f3n:\nPodr\u00eda contener informaci\u00f3n desactualizada.\nTras el proceso de estandarizaci\u00f3n de ANSI, la especificaci\u00f3n del lenguaje C permaneci\u00f3 relativamente estable durante alg\u00fan tiempo, mientras que C++ sigui\u00f3 evolucionando.\nSin embargo, el est\u00e1ndar continu\u00f3 bajo revisi\u00f3n a finales de la d\u00e9cada de 1990, lo que llev\u00f3 a la publicaci\u00f3n del est\u00e1ndar ISO 9899:1999 en 1999.[5]\u200b\nEste est\u00e1ndar se denomina habitualmente \"C99\". Se adopt\u00f3 como est\u00e1ndar ANSI en marzo de 2000.\nLas nuevas caracter\u00edsticas de C99 incluyen:[6]\u200b:\u200axi\u2013xii\u200a\nLas variables pueden declararse en cualquier sitio (como en C++), en lugar de poder declararse solo tras otra declaraci\u00f3n o al comienzo de una declaraci\u00f3n compuesta.\nMuchos tipos de datos, incluyendo long int (para reducir el engorro de la transici\u00f3n de 32 bits a 64 bits), un tipo de dato booleano, y un tipo complex que representa n\u00fameros complejos.\nArrays de longitud variable.\nSoporte para comentarios de una l\u00ednea que empiecen con //, como en BCPL o en C++, caracter\u00edstica para la que muchos compiladores hab\u00edan dado soporte por su cuenta.\nMuchas funciones nuevas, como snprintf()\nAlgunos headers nuevos, como stdint.h.\nEl compilador GCC, entre muchos otros, soportan hoy en d\u00eda la mayor\u00eda de las nuevas caracter\u00edsticas de C99. Sin embargo, este nuevo est\u00e1ndar ha tenido poca acogida entre algunos desarrolladores de compiladores, como Microsoft y Borland, que se han centrado en C++. Brandon Bray, de Microsoft, dijo a este respecto: "}, {"name": "C11", "text": "C11 (antes conocido como C2X) es un nombre informal para ISO/IEC 9899:2011[8]\u200b. El borrador final, N1570, fue publicado en abril de 2011.[9]\u200b El nuevo est\u00e1ndar super\u00f3 su \u00faltima revisi\u00f3n el 10 de octubre de 2011 y fue oficialmente ratificado por la ISO y publicado el 8 de diciembre de 2011."}, {"name": "C embebido", "text": "Hist\u00f3ricamente la programaci\u00f3n en C embebido ha requerido extensiones no est\u00e1ndar del lenguaje C para implementar caracter\u00edsticas no oficiales tales como aritm\u00e9tica de punto fijo y operaciones b\u00e1sicas de entrada y salida.\nEn 2008 el comit\u00e9 de estandarizaci\u00f3n de C, para implementar estas caracter\u00edsticas no oficiales, public\u00f3 un informe t\u00e9cnico en el que extend\u00eda el lenguaje C proporcionando un est\u00e1ndar com\u00fan al que todas las implementaciones se pod\u00edan adherir. Inclu\u00eda varias caracter\u00edsticas no disponibles en C normal, tales como aritm\u00e9tica de punto fijo, espacios de direcciones con nombres y direccionamiento por hardware de entrada y salida b\u00e1sico."}, {"name": "C18", "text": "El \u00faltimo est\u00e1ndar publicado para C ISO/IEC 9899:2018.[10]\u200b"}]}, {"name": "Lenguajes derivados de C", "text": "Desde el inicio del lenguaje han surgido varias ramas de evoluci\u00f3n que han generado varios lenguajes:\nObjective-C es un primer intento de proporcionar soporte para la programaci\u00f3n orientada a objetos en C, pero actualmente usado en Mac OS X, iOS y GNUstep.\nC++ (pronunciado C Plus Plus) dise\u00f1ado por Bjarne Stroustrup fue el segundo intento de proporcionar orientaci\u00f3n a objetos a C y es la variante m\u00e1s difundida y aceptada. Esta versi\u00f3n combina la flexibilidad y el acceso de bajo nivel de C con las caracter\u00edsticas de la programaci\u00f3n orientada a objetos como abstracci\u00f3n, encapsulaci\u00f3n y ocultaci\u00f3n.\nTambi\u00e9n se han creado numerosos lenguajes inspirados en la sintaxis de C, pero que no son compatibles con \u00e9l:\nJava, que une una sintaxis inspirada en la del C++ con una orientaci\u00f3n a objetos m\u00e1s similar a la de Smalltalk y Objective C.\nJavaScript, un lenguaje de scripting creado en Netscape e inspirado en la sintaxis de Java dise\u00f1ado para dar a las p\u00e1ginas web mayor interactividad. A la versi\u00f3n estandarizada se la conoce como ECMAScript.\nC# (pronunciado C Sharp) es un lenguaje desarrollado por Microsoft derivado de C/C++ y Java.", "subsections": []}, {"name": "Proceso de compilaci\u00f3n", "text": "La compilaci\u00f3n de un programa C se realiza en varias fases que normalmente son automatizadas y ocultadas por los entornos de desarrollo:\nPreprocesado consistente en modificar el c\u00f3digo fuente en C seg\u00fan una serie de instrucciones (denominadas directivas de preprocesado) simplificando de esta forma el trabajo del compilador. Por ejemplo, una de las acciones m\u00e1s importantes es la modificaci\u00f3n de las inclusiones (#include) por las declaraciones reales existentes en el archivo indicado.\nCompilaci\u00f3n que genera el c\u00f3digo objeto a partir del c\u00f3digo ya preprocesado.\nEnlazado que une los c\u00f3digos objeto de los distintos m\u00f3dulos y bibliotecas externas (como las bibliotecas del sistema) con el c\u00f3digo objeto generado en el paso anterior para generar el programa ejecutable final.", "subsections": [{"name": "Ejemplo de c\u00f3digo", "text": "El siguiente programa imprime en pantalla la frase \"Hola Mundo\" (C99):\n// necesario para utilizar printf()\n#\ninclude\nvoid\n\"Hola Mundo\nEl siguiente programa muestra el uso de punteros en C:\n(){\n// Variable\n99\n// Puntero a variable\np\n// Asignaci\u00f3n de puntero\n// Acceso al valor de la variable a la que apunta el puntero\n\"Numero: %d\n// Acceso a la direcci\u00f3n a la que apunta el puntero\n\"Direccion: %d\n// Cambio de valor de la variable a la que apunta el puntero\nEl siguiente escribe \"Hola Mundo\" (C89):\n/* comentarios con '//' no permitidos en C89, s\u00ed en C99 */\n  /* necesario para utilizar printf */\n/* tipo 'int' de retorno impl\u00edcito */\nEstructura de control \"else if\":\ncondicion\nsentencia\nsentencias\npor\ndefecto"}]}, {"name": "Herramientas de programaci\u00f3n", "text": "Al programar en C, es habitual usar algunas herramientas de programaci\u00f3n de uso muy extendido, sobre todo en entorno de tipo Unix:\nmake: automatizador del proceso de compilaci\u00f3n y enlazado;\nlint: detector de c\u00f3digo sospechoso, confuso o incompatible entre distintas arquitecturas;\nvalgrind: detector de posibles fugas de memoria;\ngdb: depurador (debugger) usado en GNU;\ndbx: depurador preinstalado en Unix;\nddd: interfaz gr\u00e1fico para los depuradores gdb o dbx.", "subsections": []}, {"name": "Aplicabilidad", "text": "Hecho principalmente para la fluidez de programaci\u00f3n en sistemas Unix. Se usa tambi\u00e9n para el desarrollo de otros sistemas operativos como Windows o GNU/Linux. Igualmente para aplicaciones de escritorio como GIMP, cuyo principal lenguaje de programaci\u00f3n es C.\nDe la misma forma, es muy usado en aplicaciones cient\u00edficas (para experimentos inform\u00e1ticos; modelos f\u00edsicos, qu\u00edmicos, matem\u00e1ticos y simuladores), industriales (industria rob\u00f3tica, cibern\u00e9tica, sistemas de informaci\u00f3n y base de datos para la industria petrolera y petroqu\u00edmica. Predominan tambi\u00e9n todo lo que se refiere a simulaci\u00f3n de m\u00e1quinas de manufactura), simulaciones de vuelo (es la m\u00e1s delicada, ya que se tienen que usar demasiados recursos tanto de hardware como de software para desarrollar aplicaciones que permitan simular el vuelo real de una aeronave). Se aplica por tanto, en diversas \u00e1reas desconocidas por gran parte de los usuarios noveles.\nLos ordenadores de finales de los 90 son varios \u00f3rdenes de magnitud m\u00e1s potentes que las m\u00e1quinas en que C se desarroll\u00f3 originalmente. Programas escritos en lenguajes de tipo din\u00e1mico y f\u00e1cil codificaci\u00f3n (Ruby, Python, Perl...) que anta\u00f1o hubieran resultado demasiado lentos, son lo bastante r\u00e1pidos como para desplazar en uso a C. Aun as\u00ed, se puede seguir encontrando c\u00f3digo C en grandes desarrollos de animaciones, modelados y escenas en 3D en pel\u00edculas y otras aplicaciones multimedia.\nActualmente, los grandes proyectos de software se dividen en partes, dentro de un equipo de desarrollo. Aquellas partes que son m\u00e1s \"burocr\u00e1ticas\" o \"de gesti\u00f3n\" con los recursos del sistema, se suelen realizar en lenguajes de tipo din\u00e1mico o de guion (script), mientras que aquellas partes \"cr\u00edticas\", por su necesidad de rapidez de ejecuci\u00f3n, se realizan en un lenguaje de tipo compilado, como C o C++. Si, despu\u00e9s de hacer la divisi\u00f3n, las partes cr\u00edticas no superan un cierto porcentaje del total (aproximadamente el 10%) entonces todo el desarrollo se realiza con lenguajes din\u00e1micos. Si la parte cr\u00edtica no llega a cumplir las expectativas del proyecto, se comparan las alternativas de una inversi\u00f3n en nuevo hardware frente a invertir en el coste de un programador para que reescriba dicha parte cr\u00edtica.", "subsections": [{"name": "Aplicaciones embebidas", "text": "C es el lenguaje com\u00fan para programar sistemas embebidos.[cita\u00a0requerida] El c\u00f3digo ligero que un compilador C genera, combinado con la capacidad de acceso a capas del software cercanas al hardware son la causa de su popularidad en estas aplicaciones.\nUna caracter\u00edstica donde C demuestra comodidad de uso particularmente valiosa en sistemas embebidos es la manipulaci\u00f3n de bits. Los sistemas contienen registros mapeados en memoria (en ingl\u00e9s, MMR) a trav\u00e9s de los cuales los perif\u00e9ricos se configuran. Estos registros mezclan varias configuraciones en la misma direcci\u00f3n de memoria, aunque en bits distintos. Con C es posible modificar f\u00e1cilmente uno de estos bits sin alterar el resto. Por ejemplo:\nmmr\n/* puntero al registro que queremos modificar */\n0x40008ABC\n/* direcci\u00f3n de memoria del registro */\n|=\n<<\n7\n/* pone a 1 el bit 8 sin modificar los dem\u00e1s */\n&=\n~\n12\n/* pone a 0 el bit 13 sin modificar los dem\u00e1s */\nEste tipo de manipulaci\u00f3n es muy tediosa o sencillamente imposible en otros lenguajes de alto nivel, dado que se utilizan operaciones comunes del lenguaje ensamblador como las operaciones a nivel bit OR, AND, SHL y CPL pero que est\u00e1n disponibles en el lenguaje C.\nOtras caracter\u00edsticas de C consideradas desventajas en la programaci\u00f3n para PC -como la ausencia de control de memoria autom\u00e1tico- se convierten en ventajas cuando los sistemas embebidos necesitan c\u00f3digo peque\u00f1o y optimizado. Ese es el caso de los sistemas basados en microcontroladores de poca potencia como el intel 8051 o muchos sistemas ARM."}]}, {"name": "Bibliotecas C", "text": "Una biblioteca de C es una colecci\u00f3n de funciones utilizadas en el lenguaje de programaci\u00f3n C. Las bibliotecas m\u00e1s comunes son la biblioteca est\u00e1ndar de C y la biblioteca del est\u00e1ndar ANSI C, la cual provee las especificaciones de los est\u00e1ndares que son ampliamente compartidas entre bibliotecas. La biblioteca ANSI C est\u00e1ndar, incluye funciones para la entrada y salida de archivos, alojamiento de memoria y operaciones con datos comunes: funciones matem\u00e1ticas, funciones de manejo de cadenas de texto y funciones de hora y fecha.\nOtras bibliotecas C son aquellas utilizadas para desarrollar sistemas Unix, las cuales proveen interfaces hacia el n\u00facleo. Estas funciones son detalladas en varios est\u00e1ndares tales como POSIX y el Single UNIX Specification.\nYa que muchos programas han sido escritos en el lenguaje C existe una gran variedad de bibliotecas disponibles. Muchas bibliotecas son escritas en C debido a que C genera c\u00f3digo objeto r\u00e1pido; los programadores luego generan interfaces a la biblioteca para que las rutinas puedan ser utilizadas desde lenguajes de mayor nivel, tales como Java, Perl y Python.", "subsections": []}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Anexo:Operadores de C y C++\nC++", "subsections": []}, {"name": "Referencias", "text": "\u2191 a b c d Ritchie, Dennis (1993). \u00abThe Development of the C Language\u00bb. ACM SIGPLAN Notices (en ingl\u00e9s) (ACM Press) 28 (3): 201-208. doi:10.1145/155360.155580. Consultado el 10 de marzo de 2019.\u00a0\n\u2191 a b c Kernighan, Brian W.; Ritchie, Dennis M. (1991). El lenguaje de programaci\u00f3n C (2\u00aa edici\u00f3n). Prentice Hall Hispanoamericana. ISBN\u00a0968-880-205-0.\u00a0\n\u2191 Raymond, Eric S. (2003). The Art of Unix Programming (en ingl\u00e9s). Addison-Wesley. ISBN\u00a00-13-142901-9.\u00a0\n\u2191 Raymond, Eric S. (2003). \u00abEvolution of C\u00bb. The Art of Unix Programming (en ingl\u00e9s). Consultado el 7 de mayo de 2019.\u00a0\n\u2191 \u00abISO/IEC 9899:1999\u00bb. International Organization for Standardization (en ingl\u00e9s). Consultado el 10 de marzo de 2019.\u00a0\n\u2191 \u00abWG14/N1256 Committee Draft \u2014 Septermber 7, 2007 ISO/IEC 9899:TC3\u00bb (PDF). International Organization for Standardization (en ingl\u00e9s). 7 de septiembre de 2007. Consultado el 7 de mayo de 2019.\u00a0\n\u2191 \u00abContent not found\u00bb. Consultado el 2009.\u00a0\n\u2191 \u00abISO/IEC 9899:2011\u00bb. International Organization for Standardization (en ingl\u00e9s). Consultado el 10 de marzo de 2019.\u00a0\n\u2191 \u00abN1570 Committee Draft \u2014 April 12, 2011 ISO/IEC 9899:201x\u00bb (PDF). International Organization for Standardization (en ingl\u00e9s). 12 de abril de 2011. Consultado el 7 de mayo de 2019.\u00a0\n\u2191 14:00-17:00. \u00abISO/IEC 9899:2018\u00bb. ISO (en ingl\u00e9s). Consultado el 18 de mayo de 2019.\u00a0", "subsections": []}, {"name": "Enlaces externos", "text": " Wikiversidad alberga proyectos de aprendizaje sobre C (lenguaje de programaci\u00f3n).\n Wikilibros alberga un libro o manual sobre Programaci\u00f3n en C.\nP\u00e1gina web oficial del est\u00e1ndar ISO/IEC 9899 - lenguaje de programaci\u00f3n C\nP\u00e1gina web oficial del grupo de trabajo de ISO/IEC JTC1/SC22/WG14 encargado de la estandarizaci\u00f3n del lenguaje de programaci\u00f3n ", "subsections": []}]}
{"url": "https://es.wikipedia.org/wiki/Clase_(inform%C3%A1tica)", "title": "Clase (inform\u00e1tica)", "summary": "Busca fuentes: \u00abClase (inform\u00e1tica)\u00bb \u2013 noticias\u00a0\u00b7 libros\u00a0\u00b7 acad\u00e9mico\u00a0\u00b7 im\u00e1genes\nEn inform\u00e1tica, una clase es una plantilla para el objetivo de la creaci\u00f3n de objetos de datos seg\u00fan un modelo predefinido. Las clases se utilizan para representar entidades o conceptos, como los sustantivos en el lenguaje. Cada clase es un modelo que define un conjunto de variables y m\u00e9todos apropiados para operar con dichos datos. Cada objeto creado a partir de la clase se denomina instancia de la clase.\nLa programaci\u00f3n orientada a objetos es la base principal para los tipos de objetos. Permiten abstraer los datos y sus operaciones asociadas al modo de una caja negra. Los lenguajes de programaci\u00f3n que soportan clases difieren sutilmente en su soporte para diversas caracter\u00edsticas relacionadas con clases. La mayor\u00eda soportan diversas formas de herencia. Muchos lenguajes tambi\u00e9n soportan caracter\u00edsticas para proporcionar encapsulaci\u00f3n, como especificadores de acceso.\nUna clase tambi\u00e9n puede tener una representaci\u00f3n (metaobjeto) en tiempo de ejecuci\u00f3n, que proporciona apoyo en tiempo de ejecuci\u00f3n para la manipulaci\u00f3n de los metadatos relacionados con la clase.", "sections": [{"name": "Componentes", "text": "Las clases se componen de elementos, llamados gen\u00e9ricamente \u00abmiembros\u00bb, de varios tipos:\ncampos de datos: almacenan el estado de la clase por medio de variables, estructuras de datos e incluso otras clases.\nm\u00e9todos: subrutinas de manipulaci\u00f3n de dichos datos.\nciertos lenguajes permiten un tercer tipo de miembro: las \u00abpropiedades\u00bb, a medio camino entre los campos y los m\u00e9todos.\nUtilizando un s\u00edmil con el lenguaje, si las clases representan sustantivos, los campos de datos pueden ser sustantivos o adjetivos, y los m\u00e9todos son los verbos.\nLa sintaxis t\u00edpica de una clase es: \n \nclass\nNombre\n{\n     \n// Variables miembro (habitualmente privadas)\nmiembro_1\n;\n//lista de miembros \nmiembro_2\nmiembro_3\n// Funciones o m\u00e9todos (habitualmente p\u00fablicas)\nfuncion_miembro_1\n(\n);\n// funciones miembro conocidas \nfuncion_miembro_2\n// funciones como m\u00e9todos \n// Propiedades (habitualmente p\u00fablicas)\npropiedad_1\npropiedad_2\npropiedad_3\npropiedad_4\n}", "subsections": [{"name": "Campos de datos", "text": "Los miembros o variables se utilizan para contener datos que reflejan el estado de la clase. Los datos pueden estar almacenados en variables, o estructuras m\u00e1s complejas, como structs, uniones e incluso otras clases.\nHabitualmente, las variables miembro son privadas al objeto (siguiendo las directrices de dise\u00f1o del Principio de ocultaci\u00f3n) y su acceso se realiza mediante propiedades o m\u00e9todos que realizan comprobaciones adicionales."}, {"name": "M\u00e9todos en las clases", "text": "Los m\u00e9todos implementan la funcionalidad asociada al objeto. Los m\u00e9todos son el equivalente a las funciones en programaci\u00f3n estructurada. Se diferencian de ellos en que es posible acceder a las variables de la clase de forma impl\u00edcita o incluida.\nCuando se desea realizar una acci\u00f3n sobre un objeto, se dice que se le manda un mensaje invocando a un m\u00e9todo que realizar\u00e1 la acci\u00f3n."}, {"name": "Propiedades", "text": "Las propiedades son los atributos de la computadora. Debido a que suele ser com\u00fan que las variables miembro sean privadas para controlar el acceso y mantener la coherencia, surge la necesidad de permitir consultar o modificar su valor mediante pares de m\u00e9todos.\nLos lenguajes orientados a objetos m\u00e1s modernos  a\u00f1aden la construcci\u00f3n de propiedad, que es una sintaxis simplificada para dichos m\u00e9todos."}]}, {"name": "V\u00e9ase tambi\u00e9n", "text": "Estructura de datos\nUnion (programaci\u00f3n)\nObjeto (inform\u00e1tica)\nProgramaci\u00f3n orientada a objeto", "subsections": []}]}
